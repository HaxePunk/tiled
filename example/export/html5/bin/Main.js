// haxe
(function ($hx_exports, $global) { "use strict";
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	addRenderer: null
	,addWindow: null
	,registerModule: null
	,removeRenderer: null
	,removeWindow: null
	,setPreloader: null
	,unregisterModule: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
	this.__renderers = [];
	this.__windows = [];
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,__application: null
	,__preloader: null
	,__renderers: null
	,__windows: null
	,addRenderer: function(renderer) {
		var f = $bind(this,this.render);
		var a1 = renderer;
		var tmp = function() {
			f(a1);
		};
		renderer.onRender.add(tmp);
		var f1 = $bind(this,this.onRenderContextLost);
		var a11 = renderer;
		var tmp1 = function() {
			f1(a11);
		};
		renderer.onContextLost.add(tmp1);
		var f2 = $bind(this,this.onRenderContextRestored);
		var a12 = renderer;
		var tmp2 = function(a2) {
			f2(a12,a2);
		};
		renderer.onContextRestored.add(tmp2);
		this.__renderers.push(renderer);
	}
	,addWindow: function(window) {
		var f = $bind(this,this.onWindowActivate);
		var a1 = window;
		var tmp = function() {
			f(a1);
		};
		window.onActivate.add(tmp);
		var f1 = $bind(this,this.__onWindowClose);
		var a11 = window;
		var tmp1 = function() {
			f1(a11);
		};
		window.onClose.add(tmp1,false,-10000);
		var f2 = $bind(this,this.onWindowCreate);
		var a12 = window;
		var tmp2 = function() {
			f2(a12);
		};
		window.onCreate.add(tmp2);
		var f3 = $bind(this,this.onWindowDeactivate);
		var a13 = window;
		var tmp3 = function() {
			f3(a13);
		};
		window.onDeactivate.add(tmp3);
		var f4 = $bind(this,this.onWindowDropFile);
		var a14 = window;
		var tmp4 = function(a2) {
			f4(a14,a2);
		};
		window.onDropFile.add(tmp4);
		var f5 = $bind(this,this.onWindowEnter);
		var a15 = window;
		var tmp5 = function() {
			f5(a15);
		};
		window.onEnter.add(tmp5);
		var f6 = $bind(this,this.onWindowFocusIn);
		var a16 = window;
		var tmp6 = function() {
			f6(a16);
		};
		window.onFocusIn.add(tmp6);
		var f7 = $bind(this,this.onWindowFocusOut);
		var a17 = window;
		var tmp7 = function() {
			f7(a17);
		};
		window.onFocusOut.add(tmp7);
		var f8 = $bind(this,this.onWindowFullscreen);
		var a18 = window;
		var tmp8 = function() {
			f8(a18);
		};
		window.onFullscreen.add(tmp8);
		var f9 = $bind(this,this.onKeyDown);
		var a19 = window;
		var tmp9 = function(a21,a3) {
			f9(a19,a21,a3);
		};
		window.onKeyDown.add(tmp9);
		var f10 = $bind(this,this.onKeyUp);
		var a110 = window;
		var tmp10 = function(a22,a31) {
			f10(a110,a22,a31);
		};
		window.onKeyUp.add(tmp10);
		var f11 = $bind(this,this.onWindowLeave);
		var a111 = window;
		var tmp11 = function() {
			f11(a111);
		};
		window.onLeave.add(tmp11);
		var f12 = $bind(this,this.onWindowMinimize);
		var a112 = window;
		var tmp12 = function() {
			f12(a112);
		};
		window.onMinimize.add(tmp12);
		var f13 = $bind(this,this.onMouseDown);
		var a113 = window;
		var tmp13 = function(x,y,a23) {
			f13(a113,x,y,a23);
		};
		window.onMouseDown.add(tmp13);
		var f14 = $bind(this,this.onMouseMove);
		var a114 = window;
		var tmp14 = function(x1,y1) {
			f14(a114,x1,y1);
		};
		window.onMouseMove.add(tmp14);
		var f15 = $bind(this,this.onMouseMoveRelative);
		var a115 = window;
		var tmp15 = function(x2,y2) {
			f15(a115,x2,y2);
		};
		window.onMouseMoveRelative.add(tmp15);
		var f16 = $bind(this,this.onMouseUp);
		var a116 = window;
		var tmp16 = function(x3,y3,a24) {
			f16(a116,x3,y3,a24);
		};
		window.onMouseUp.add(tmp16);
		var f17 = $bind(this,this.onMouseWheel);
		var a117 = window;
		var tmp17 = function(a25,a32) {
			f17(a117,a25,a32);
		};
		window.onMouseWheel.add(tmp17);
		var f18 = $bind(this,this.onWindowMove);
		var a118 = window;
		var tmp18 = function(x4,y4) {
			f18(a118,x4,y4);
		};
		window.onMove.add(tmp18);
		var f19 = $bind(this,this.onWindowResize);
		var a119 = window;
		var tmp19 = function(a26,a33) {
			f19(a119,a26,a33);
		};
		window.onResize.add(tmp19);
		var f20 = $bind(this,this.onWindowRestore);
		var a120 = window;
		var tmp20 = function() {
			f20(a120);
		};
		window.onRestore.add(tmp20);
		var f21 = $bind(this,this.onTextEdit);
		var a121 = window;
		var tmp21 = function(a27,a34,a4) {
			f21(a121,a27,a34,a4);
		};
		window.onTextEdit.add(tmp21);
		var f22 = $bind(this,this.onTextInput);
		var a122 = window;
		var tmp22 = function(a28) {
			f22(a122,a28);
		};
		window.onTextInput.add(tmp22);
		if(window.id > -1) {
			this.onWindowCreate(window);
		}
		this.__windows.push(window);
	}
	,registerModule: function(application) {
		this.__application = application;
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) {
			var joystick1 = joystick.next();
			this.__onJoystickConnect(joystick1);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && this.__renderers.indexOf(renderer) > -1) {
			HxOverrides.remove(this.__renderers,renderer);
		}
	}
	,removeWindow: function(window) {
		if(window != null && this.__windows.indexOf(window) > -1) {
			HxOverrides.remove(this.__windows,window);
		}
	}
	,setPreloader: function(preloader) {
		if(this.__preloader != null) {
			this.__preloader.onProgress.remove($bind(this,this.onPreloadProgress));
			this.__preloader.onComplete.remove($bind(this,this.onPreloadComplete));
		}
		this.__preloader = preloader;
		if(preloader == null || preloader.complete) {
			this.onPreloadComplete();
		} else {
			preloader.onProgress.add($bind(this,this.onPreloadProgress));
			preloader.onComplete.add($bind(this,this.onPreloadComplete));
		}
	}
	,unregisterModule: function(application) {
		this.__application.onExit.remove($bind(this,this.onModuleExit));
		this.__application.onUpdate.remove($bind(this,this.update));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Joystick.onConnect.remove($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.remove($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
		this.onModuleExit(0);
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
	}
	,onKeyUp: function(window,keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(window,x,y,button) {
	}
	,onMouseMove: function(window,x,y) {
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function(window) {
	}
	,onWindowClose: function(window) {
	}
	,onWindowCreate: function(window) {
	}
	,onWindowDeactivate: function(window) {
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
	}
	,onWindowFocusOut: function(window) {
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowResize: function(window,width,height) {
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
	}
	,update: function(deltaTime) {
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		var tmp3 = function() {
			f3(a13);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var f = $bind(this,this.onJoystickAxisMove);
		var a1 = joystick;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		joystick.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onJoystickButtonDown);
		var a11 = joystick;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		joystick.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onJoystickButtonUp);
		var a12 = joystick;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		joystick.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onJoystickDisconnect);
		var a13 = joystick;
		var tmp3 = function() {
			f3(a13);
		};
		joystick.onDisconnect.add(tmp3);
		var f4 = $bind(this,this.onJoystickHatMove);
		var a14 = joystick;
		var tmp4 = function(a23,a31) {
			f4(a14,a23,a31);
		};
		joystick.onHatMove.add(tmp4);
		var f5 = $bind(this,this.onJoystickTrackballMove);
		var a15 = joystick;
		var tmp5 = function(a24,x,y) {
			f5(a15,a24,x,y);
		};
		joystick.onTrackballMove.add(tmp5);
	}
	,__onWindowClose: function(window) {
		this.onWindowClose(window);
		HxOverrides.remove(this.__windows,window);
	}
	,__class__: lime_app_Module
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	gameDeviceCache: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 144:
			return 1073741907;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,create: function(config) {
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}
			
			if ('performance' in window == false) {
				window.performance = {};
			}
			
			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}
			
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,getFrameRate: function() {
		if(this.framePeriod < 0) {
			return 60;
		} else if(this.framePeriod == 1000) {
			return 0;
		} else {
			return 1000 / this.framePeriod;
		}
	}
	,handleApplicationEvent: function(__) {
		if(this.parent.__windows[0] != null) {
			this.parent.__windows[0].backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			this.parent.onUpdate.dispatch(this.deltaTime | 0);
			if(this.parent.__renderers[0] != null && this.parent.__renderers[0].context != null) {
				this.parent.__renderers[0].render();
				this.parent.__renderers[0].onRender.dispatch();
				if(!this.parent.__renderers[0].onRender.canceled) {
					this.parent.__renderers[0].flip();
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__windows[0].onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__windows[0].onKeyDown.canceled) {
					event.preventDefault();
				}
			} else {
				this.parent.__windows[0].onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__windows[0].onKeyUp.canceled) {
					event.preventDefault();
				}
			}
		}
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "beforeunload":
				if(!event.defaultPrevented) {
					this.parent.__windows[0].onClose.dispatch();
					if(this.parent.__windows[0] != null && this.parent.__windows[0].onClose.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "blur":
				this.parent.__windows[0].onFocusOut.dispatch();
				this.parent.__windows[0].onDeactivate.dispatch();
				break;
			case "focus":
				this.parent.__windows[0].onFocusIn.dispatch();
				this.parent.__windows[0].onActivate.dispatch();
				break;
			case "resize":
				this.parent.__windows[0].backend.handleResizeEvent(event);
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) {
			this.framePeriod = -1;
		} else if(value > 0) {
			this.framePeriod = 1000 / value;
		} else {
			this.framePeriod = 1000;
		}
		return value;
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) {
					var i1 = _g3++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) {
					var i2 = _g31++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(id);
					}
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i3 = _g32++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i4 = _g33++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.modules = [];
	this.windowByID = new haxe_ds_IntMap();
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.registerModule(this);
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	config: null
	,modules: null
	,preloader: null
	,onUpdate: null
	,renderer: null
	,renderers: null
	,window: null
	,windows: null
	,backend: null
	,windowByID: null
	,addModule: function(module) {
		module.registerModule(this);
		this.modules.push(module);
		if(this.__renderers.length > 0) {
			var _g = 0;
			var _g1 = this.__renderers;
			while(_g < _g1.length) {
				var renderer = _g1[_g];
				++_g;
				module.addRenderer(renderer);
			}
		}
		if(this.__windows.length > 0) {
			var _g2 = 0;
			var _g11 = this.__windows;
			while(_g2 < _g11.length) {
				var $window = _g11[_g2];
				++_g2;
				module.addWindow($window);
			}
		}
		module.setPreloader(this.__preloader);
	}
	,addRenderer: function(renderer) {
		lime_app_Module.prototype.addRenderer.call(this,renderer);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.addRenderer(renderer);
		}
	}
	,create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) {
				this.backend.setFrameRate(config.fps);
			}
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new lime_ui_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.__preloader == null || this.__preloader.complete) {
				this.setPreloader(this.__preloader);
				var _g2 = 0;
				var _g11 = this.modules;
				while(_g2 < _g11.length) {
					var module = _g11[_g2];
					++_g2;
					this.setPreloader(this.__preloader);
				}
			}
		}
	}
	,createWindow: function(window) {
		lime_app_Module.prototype.addWindow.call(this,window);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.addWindow(window);
		}
		if(window.renderer == null) {
			var renderer = new lime_graphics_Renderer(window);
			this.addRenderer(renderer);
		}
		window.create(this);
		this.windowByID.h[window.id] = window;
		window.onCreate.dispatch();
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,onModuleExit: function(code) {
		this.backend.exit();
	}
	,onWindowClose: function(window) {
		this.removeWindow(window);
	}
	,removeModule: function(module) {
		if(module != null) {
			module.unregisterModule(this);
			HxOverrides.remove(this.modules,module);
		}
	}
	,removeWindow: function(window) {
		if(window != null && this.windowByID.h.hasOwnProperty(window.id)) {
			HxOverrides.remove(this.__windows,window);
			this.windowByID.remove(window.id);
			window.close();
			if(window.renderer != null) {
				this.removeRenderer(window.renderer);
			}
			if(this.__windows[0] == window) {
				this.window = null;
			}
			if(this.__windows.length == 0) {
				lime_system_System.exit(0);
			}
		}
	}
	,setPreloader: function(preloader) {
		lime_app_Module.prototype.setPreloader.call(this,preloader);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.setPreloader(preloader);
		}
	}
	,get_frameRate: function() {
		return this.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.backend.setFrameRate(value);
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_renderer: function() {
		return this.__renderers[0];
	}
	,get_renderers: function() {
		return this.__renderers;
	}
	,get_window: function() {
		return this.__windows[0];
	}
	,get_windows: function() {
		return this.__windows;
	}
	,__class__: lime_app_Application
	,__properties__: {get_windows:"get_windows",get_window:"get_window",get_renderers:"get_renderers",get_renderer:"get_renderer",get_preloader:"get_preloader",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate"}
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.main = function() {
	var projectName = "Main";
	var config = { build : "59", company : "", file : "Main", fps : 60, name : "example", orientation : "", packageName : "com.example.app", version : "1.0.0", windows : [{ allowHighDPI : false, alwaysOnTop : false, antialiasing : 0, background : 3355443, borderless : false, colorDepth : 16, depthBuffer : false, display : 0, fullscreen : false, hardware : true, height : 480, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, stencilBuffer : true, title : "example", vsync : false, width : 640, x : null, y : null}]};
	lime_system_System.__registerEntryPoint(projectName,ApplicationMain.create,config);
};
ApplicationMain.create = function(config) {
	var app = new openfl_display_Application();
	app.create(config);
	ManifestResources.init(config);
	var preloader = new openfl_display_Preloader(new haxepunk_backend_flash_Preloader());
	app.setPreloader(preloader);
	preloader.create(config);
	var a1 = app.__windows[0].stage;
	var tmp = function() {
		ApplicationMain.start(a1);
	};
	preloader.onComplete.add(tmp);
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraries;
	while(_g < _g1.length) {
		var library = _g1[_g];
		++_g;
		preloader.addLibrary(library);
	}
	var _g2 = 0;
	var _g11 = ManifestResources.preloadLibraryNames;
	while(_g2 < _g11.length) {
		var name = _g11[_g2];
		++_g2;
		preloader.addLibraryName(name);
	}
	preloader.load();
	var result = app.exec();
};
ApplicationMain.start = function(stage) {
	try {
		Main.main();
		stage.dispatchEvent(new openfl_events_Event("resize",false,false));
		if(stage.window.__fullscreen) {
			stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		stage.__handleError(e);
	}
};
var haxepunk_Engine = function(width,height,frameRate,fixed) {
	if(fixed == null) {
		fixed = false;
	}
	if(frameRate == null) {
		frameRate = 60;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this._renderer = new haxepunk_graphics_hardware_HardwareRenderer();
	this._frameListSum = 0;
	this._frameLast = 0;
	this._systemTime = 0;
	this._gameTime = 0;
	this._updateTime = 0;
	this._elapsed = 0;
	this._prev = 0;
	this._skip = 0;
	this._rate = 0;
	this._last = 0;
	this._time = 0;
	this._delta = 0;
	this._scenes = [];
	this._scene = new haxepunk_Scene();
	this.onClose = new haxepunk_Signal0();
	this.onSceneSwitch = new haxepunk_Signal0();
	this.onInputReleased = new haxepunk_Signals();
	this.onInputPressed = new haxepunk_Signals();
	this.onResize = new haxepunk_Signal0();
	this.postRender = new haxepunk_Signal0();
	this.preRender = new haxepunk_Signal0();
	this.postUpdate = new haxepunk_Signal0();
	this.preUpdate = new haxepunk_Signal0();
	this.maxFrameSkip = 5;
	this.maxElapsed = 0.0333;
	this.paused = false;
	haxepunk_HXP.bounds = new haxepunk_math_Rectangle(0,0,width,height);
	haxepunk_HXP.assignedFrameRate = frameRate;
	haxepunk_HXP.fixed = fixed;
	haxepunk_HXP.engine = this;
	haxepunk_HXP.width = width;
	haxepunk_HXP.height = height;
	haxepunk_HXP.screen = new haxepunk_Screen();
	haxepunk_HXP.app = this.app = this.createApp();
	if(haxepunk_math_Random._seed == 0) {
		haxepunk_math_Random._seed = haxepunk_math_MathUtil.clamp(2147483647 * Math.random() | 0,1.0,2147483646) | 0;
	}
	haxepunk_HXP.entity = new haxepunk_Entity();
	haxepunk_HXP._time = this.app.getTimeMillis();
	this._frameList = [];
	this._iterator = new haxepunk__$Engine_VisibleSceneIterator();
	this.app.init();
};
$hxClasses["haxepunk.Engine"] = haxepunk_Engine;
haxepunk_Engine.__name__ = ["haxepunk","Engine"];
haxepunk_Engine.prototype = {
	console: null
	,paused: null
	,maxElapsed: null
	,maxFrameSkip: null
	,preUpdate: null
	,postUpdate: null
	,preRender: null
	,postRender: null
	,onResize: null
	,onInputPressed: null
	,onInputReleased: null
	,onSceneSwitch: null
	,onClose: null
	,createApp: function() {
		return new haxepunk_backend_lime_App(this);
	}
	,init: function() {
	}
	,focusGained: function() {
	}
	,focusLost: function() {
	}
	,update: function() {
		if(haxepunk_HXP.screen.needsResize) {
			haxepunk_HXP.resize(haxepunk_HXP.windowWidth,haxepunk_HXP.windowHeight);
		}
		haxepunk_HXP.screen.update();
		this._scene.updateLists();
		if(this._scene != null && this._scenes.length > 0 && this._scenes[this._scenes.length - 1] != this._scene) {
			this._scene.end();
			this._scene.updateLists();
			if(this._scene.autoClear && this._scene.get_hasTween()) {
				this._scene.clearTweens();
			}
			this._scene = this._scenes[this._scenes.length - 1];
			this._scene.updateLists();
			this._scene.begin();
			this._scene.assetCache.enable();
			this._scene.updateLists();
			var _g = 0;
			var _g1 = this.onSceneSwitch.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
		}
		var _g2 = 0;
		var _g11 = this.preUpdate.callbacks;
		while(_g2 < _g11.length) {
			var callback1 = _g11[_g2];
			++_g2;
			callback1();
		}
		if(haxepunk_HXP.tweener.get_active() && haxepunk_HXP.tweener.get_hasTween()) {
			haxepunk_HXP.tweener.updateTweens(haxepunk_HXP.elapsed);
		}
		if(this._scene.get_active()) {
			if(this._scene.get_hasTween()) {
				this._scene.updateTweens(haxepunk_HXP.elapsed);
			}
			this._scene.update();
		}
		this._scene.updateLists(false);
		var _g3 = 0;
		var _g12 = this.postUpdate.callbacks;
		while(_g3 < _g12.length) {
			var callback2 = _g12[_g3];
			++_g3;
			callback2();
		}
	}
	,onRender: function() {
		var t = this.app.getTimeMillis();
		if(this.paused) {
			this._frameLast = t;
			if(haxepunk_HXP.engine.console == null) {
				return;
			}
		}
		if(this._frameLast == 0) {
			this._frameLast = t | 0;
		}
		var _g = 0;
		var _g1 = this.preRender.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		this._renderer.startFrame();
		var _g2 = this._iterator.reset(this);
		while(_g2.scenes.length > 0) {
			var scene = _g2.scenes.pop();
			this._renderer.startScene(scene);
			haxepunk_HXP.renderingScene = scene;
			scene.render();
			var commands = scene.batch.iterator();
			while(commands.hasNext()) {
				var commands1 = commands.next();
				this._renderer.render(commands1);
			}
			this._renderer.flushScene(scene);
		}
		haxepunk_HXP.renderingScene = null;
		this._renderer.endFrame();
		var _g3 = 0;
		var _g11 = this.postRender.callbacks;
		while(_g3 < _g11.length) {
			var callback1 = _g11[_g3];
			++_g3;
			callback1();
		}
		t = this.app.getTimeMillis();
		var tmp = this._frameList[this._frameList.length] = t - this._frameLast | 0;
		this._frameListSum += tmp;
		if(this._frameList.length > 10) {
			this._frameListSum -= this._frameList.shift();
		}
		haxepunk_HXP.frameRate = 1000 / (this._frameListSum / this._frameList.length);
		this._frameLast = t;
	}
	,onUpdate: function() {
		this._time = this._gameTime = this.app.getTimeMillis();
		haxepunk_HXP._systemTime = this._time - this._systemTime;
		this._updateTime = this._time;
		var elapsed = (this._time - this._last) / 1000;
		if(haxepunk_HXP.fixed) {
			this._elapsed += elapsed;
			haxepunk_HXP.elapsed = 1 / haxepunk_HXP.assignedFrameRate;
			if(this._elapsed > haxepunk_HXP.elapsed * this.maxFrameSkip) {
				this._elapsed = haxepunk_HXP.elapsed * this.maxFrameSkip;
			}
			while(this._elapsed > haxepunk_HXP.elapsed) {
				this._elapsed -= haxepunk_HXP.elapsed;
				this.step();
			}
		} else {
			haxepunk_HXP.elapsed = elapsed;
			if(haxepunk_HXP.elapsed > this.maxElapsed) {
				haxepunk_HXP.elapsed = this.maxElapsed;
			}
			haxepunk_HXP.elapsed *= haxepunk_HXP.rate;
			this.step();
		}
		this._last = this._time;
		this._time = this.app.getTimeMillis();
		haxepunk_HXP._updateTime = this._time - this._updateTime;
		this._time = this._systemTime = this.app.getTimeMillis();
		haxepunk_HXP._gameTime = this._time - this._gameTime;
	}
	,step: function() {
		haxepunk_input_Input.update();
		if(!this.paused) {
			this.update();
		}
		if(this.console != null) {
			this.console.update();
		}
		haxepunk_input_Input.postUpdate();
	}
	,checkScene: function() {
		if(this._scene != null && this._scenes.length > 0 && this._scenes[this._scenes.length - 1] != this._scene) {
			this._scene.end();
			this._scene.updateLists();
			if(this._scene.autoClear && this._scene.get_hasTween()) {
				this._scene.clearTweens();
			}
			this._scene = this._scenes[this._scenes.length - 1];
			this._scene.updateLists();
			this._scene.begin();
			this._scene.assetCache.enable();
			this._scene.updateLists();
			var _g = 0;
			var _g1 = this.onSceneSwitch.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
		}
	}
	,pushScene: function(value) {
		this._scenes.push(value);
	}
	,popScene: function() {
		var scene = this._scenes.pop();
		if(haxepunk_assets_AssetCache.active.indexOf(scene.assetCache) > -1) {
			scene.assetCache.dispose();
		}
		return scene;
	}
	,get_scene: function() {
		return this._scene;
	}
	,set_scene: function(value) {
		if(this._scene == value) {
			return value;
		}
		if(this._scenes.length > 0) {
			this.popScene();
		}
		this._scenes.push(value);
		return this._scene;
	}
	,iterator: function() {
		return this._iterator.reset(this);
	}
	,app: null
	,_scene: null
	,_scenes: null
	,_delta: null
	,_time: null
	,_last: null
	,_rate: null
	,_skip: null
	,_prev: null
	,_elapsed: null
	,_updateTime: null
	,_gameTime: null
	,_systemTime: null
	,_frameLast: null
	,_frameListSum: null
	,_frameList: null
	,_renderer: null
	,_iterator: null
	,__class__: haxepunk_Engine
	,__properties__: {set_scene:"set_scene",get_scene:"get_scene"}
};
var Main = function(width,height,frameRate,fixed) {
	haxepunk_Engine.call(this,width,height,frameRate,fixed);
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.main = function() {
	new Main();
};
Main.__super__ = haxepunk_Engine;
Main.prototype = $extend(haxepunk_Engine.prototype,{
	init: function() {
		var value = new MainScene();
		haxepunk_HXP.engine.set_scene(value);
	}
	,__class__: Main
});
var DocumentClass = function(width,height,frameRate,fixed) {
	Main.call(this,width,height,frameRate,fixed);
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedLeft: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			var tmp = this.r;
			var tmp1 = len < 0 ? s : HxOverrides.substr(s,0,pos + len);
			this.r.m = tmp.exec(tmp1);
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var i = $iterator(it)();
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.map = function(it,f) {
	var l = new List();
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(f(x1));
	}
	return l;
};
Lambda.has = function(it,elt) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.fold = function(it,f,first) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $iterator(it)();
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $iterator(it)();
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,last: function() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,join: function(sep) {
		var s_b = "";
		var first = true;
		var l = this.h;
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += sep == null ? "null" : "" + sep;
			}
			s_b += Std.string(l.item);
			l = l.next;
		}
		return s_b;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var haxepunk_Tweener = function() {
	this.autoClear = false;
	this.active = true;
};
$hxClasses["haxepunk.Tweener"] = haxepunk_Tweener;
haxepunk_Tweener.__name__ = ["haxepunk","Tweener"];
haxepunk_Tweener.prototype = {
	active: null
	,get_active: function() {
		return this.active;
	}
	,set_active: function(v) {
		return this.active = v;
	}
	,autoClear: null
	,update: function() {
	}
	,addTween: function(t,start) {
		if(start == null) {
			start = false;
		}
		if(t._parent != null) {
			throw new js__$Boot_HaxeError("Cannot add a Tween object more than once.");
		}
		t._parent = this;
		t._next = this._tween;
		if(this._tween != null) {
			this._tween._prev = t;
		}
		this._tween = t;
		if(start) {
			this._tween.start();
		} else {
			this._tween.active = false;
		}
		return t;
	}
	,removeTween: function(t) {
		if(t._parent != this) {
			throw new js__$Boot_HaxeError("Core object does not contain Tween.");
		}
		if(t._next != null) {
			t._next._prev = t._prev;
		}
		if(t._prev != null) {
			t._prev._next = t._next;
		} else {
			this._tween = t._next == null ? null : js_Boot.__cast(t._next , haxepunk_Tween);
		}
		t._next = t._prev = null;
		t._parent = null;
		t.active = false;
		return t;
	}
	,clearTweens: function() {
		var t = this._tween;
		while(t != null) {
			var next = t._next;
			this.removeTween(t);
			t = next;
		}
	}
	,updateTweens: function(elapsed) {
		var t = this._tween;
		while(t != null) {
			if(t.active) {
				t.update(elapsed);
			}
			t = t._next;
		}
	}
	,get_hasTween: function() {
		return this._tween != null;
	}
	,_tween: null
	,__class__: haxepunk_Tweener
	,__properties__: {get_hasTween:"get_hasTween",set_active:"set_active",get_active:"get_active"}
};
var haxepunk_utils_DrawContext = function(lineThickness,color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16777215;
	}
	if(lineThickness == null) {
		lineThickness = 1;
	}
	this.lineThickness = 1;
	this.alpha = 1;
	this.color = 16777215;
	this.smooth = true;
	this.blend = 1;
	this.lineThickness = lineThickness;
	this.color = color;
	this.alpha = alpha;
};
$hxClasses["haxepunk.utils.DrawContext"] = haxepunk_utils_DrawContext;
haxepunk_utils_DrawContext.__name__ = ["haxepunk","utils","DrawContext"];
haxepunk_utils_DrawContext.prototype = {
	scene: null
	,blend: null
	,shader: null
	,smooth: null
	,color: null
	,alpha: null
	,lineThickness: null
	,setColor: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		this.color = color;
		this.alpha = alpha;
	}
	,line: function(x1,y1,x2,y2) {
		var a_y;
		var a_x = x1;
		a_y = y1;
		var b_y;
		var b_x = x2 - a_x;
		b_y = y2 - a_y;
		if(!(b_x == 0 && b_y == 0)) {
			var normal = this.lineThickness / 2 / Math.sqrt(b_x * b_x + b_y * b_y);
			b_x *= normal;
			b_y *= normal;
		}
		var y = b_x;
		b_x = -b_y;
		b_y = y;
		if(this.shader == null) {
			this.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : this.scene;
		this.command = scene.batch.getDrawCommand(null,this.shader,this.smooth,this.blend,null);
		var x11 = x1 + b_x;
		var y11 = y1 + b_y;
		var x21 = x1 - b_x;
		var y21 = y1 - b_y;
		var x3 = x2 - b_x;
		var y3 = y2 - b_y;
		var x4 = x2 + b_x;
		var y4 = y2 + b_y;
		var _this = this.command;
		var color = this.color;
		var alpha = this.alpha;
		if(alpha > 0) {
			var onScreen;
			var onScreen1;
			var onScreen2;
			var _this1 = _this.visibleArea;
			if((x11 > x21 ? x21 > x3 ? x3 : x21 : x11 > x3 ? x3 : x11) <= _this1.x + _this1.width) {
				onScreen2 = (x11 < x21 ? x21 < x3 ? x3 : x21 : x11 < x3 ? x3 : x11) >= _this.visibleArea.x;
			} else {
				onScreen2 = false;
			}
			if(onScreen2) {
				var _this2 = _this.visibleArea;
				onScreen1 = (y11 > y21 ? y21 > y3 ? y3 : y21 : y11 > y3 ? y3 : y11) <= _this2.y + _this2.height;
			} else {
				onScreen1 = false;
			}
			if(onScreen1) {
				onScreen = (y11 < y21 ? y21 < y3 ? y3 : y21 : y11 < y3 ? y3 : y11) >= _this.visibleArea.y;
			} else {
				onScreen = false;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = x11;
				data1.ty1 = y11;
				data1.uvx1 = 0;
				data1.uvy1 = 0;
				data1.tx2 = x21;
				data1.ty2 = y21;
				data1.uvx2 = 0;
				data1.uvy2 = 0;
				data1.tx3 = x3;
				data1.ty3 = y3;
				data1.uvx3 = 0;
				data1.uvy3 = 0;
				data1.color = color;
				data1.alpha = alpha;
				if(_this.data == null) {
					_this.data = data1;
				} else {
					_this._lastData._next = data1;
				}
				_this._lastData = data1;
				++_this.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x12 = a > b ? b > c ? c : b : a > c ? c : a;
				var a1 = data1.tx1;
				var b1 = data1.tx2;
				var c1 = data1.tx3;
				var x22 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
				var a2 = data1.ty1;
				var b2 = data1.ty2;
				var c2 = data1.ty3;
				var y12 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
				var a3 = data1.ty1;
				var b3 = data1.ty2;
				var c3 = data1.ty3;
				var y22 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
				if(_this.bounds.width == 0) {
					_this.bounds.x = x12;
					_this.bounds.width = x22 - x12;
				} else {
					if(x12 < _this.bounds.x) {
						_this.bounds.width += _this.bounds.x - x12;
						_this.bounds.x = x12;
					}
					var _this3 = _this.bounds;
					if(x22 > _this3.x + _this3.width) {
						_this.bounds.width = x22 - _this.bounds.x;
					}
				}
				if(_this.bounds.height == 0) {
					_this.bounds.y = y12;
					_this.bounds.height = y22 - y12;
				} else {
					if(y12 < _this.bounds.y) {
						_this.bounds.height += _this.bounds.y - y12;
						_this.bounds.y = y12;
					}
					var _this4 = _this.bounds;
					if(y22 > _this4.y + _this4.height) {
						_this.bounds.height = y22 - _this.bounds.y;
					}
				}
			}
		}
		var _this5 = this.command;
		var color1 = this.color;
		var alpha1 = this.alpha;
		if(alpha1 > 0) {
			var onScreen3;
			var onScreen4;
			var onScreen5;
			var _this6 = _this5.visibleArea;
			if((x11 > x3 ? x3 > x4 ? x4 : x3 : x11 > x4 ? x4 : x11) <= _this6.x + _this6.width) {
				onScreen5 = (x11 < x3 ? x3 < x4 ? x4 : x3 : x11 < x4 ? x4 : x11) >= _this5.visibleArea.x;
			} else {
				onScreen5 = false;
			}
			if(onScreen5) {
				var _this7 = _this5.visibleArea;
				onScreen4 = (y11 > y3 ? y3 > y4 ? y4 : y3 : y11 > y4 ? y4 : y11) <= _this7.y + _this7.height;
			} else {
				onScreen4 = false;
			}
			if(onScreen4) {
				onScreen3 = (y11 < y3 ? y3 < y4 ? y4 : y3 : y11 < y4 ? y4 : y11) >= _this5.visibleArea.y;
			} else {
				onScreen3 = false;
			}
			if(onScreen3) {
				var data2;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data2._next = null;
				} else {
					data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data3 = data2;
				data3.tx1 = x11;
				data3.ty1 = y11;
				data3.uvx1 = 0;
				data3.uvy1 = 0;
				data3.tx2 = x3;
				data3.ty2 = y3;
				data3.uvx2 = 0;
				data3.uvy2 = 0;
				data3.tx3 = x4;
				data3.ty3 = y4;
				data3.uvx3 = 0;
				data3.uvy3 = 0;
				data3.color = color1;
				data3.alpha = alpha1;
				if(_this5.data == null) {
					_this5.data = data3;
				} else {
					_this5._lastData._next = data3;
				}
				_this5._lastData = data3;
				++_this5.triangleCount;
				var a4 = data3.tx1;
				var b4 = data3.tx2;
				var c4 = data3.tx3;
				var x13 = a4 > b4 ? b4 > c4 ? c4 : b4 : a4 > c4 ? c4 : a4;
				var a5 = data3.tx1;
				var b5 = data3.tx2;
				var c5 = data3.tx3;
				var x23 = a5 < b5 ? b5 < c5 ? c5 : b5 : a5 < c5 ? c5 : a5;
				var a6 = data3.ty1;
				var b6 = data3.ty2;
				var c6 = data3.ty3;
				var y13 = a6 > b6 ? b6 > c6 ? c6 : b6 : a6 > c6 ? c6 : a6;
				var a7 = data3.ty1;
				var b7 = data3.ty2;
				var c7 = data3.ty3;
				var y23 = a7 < b7 ? b7 < c7 ? c7 : b7 : a7 < c7 ? c7 : a7;
				if(_this5.bounds.width == 0) {
					_this5.bounds.x = x13;
					_this5.bounds.width = x23 - x13;
				} else {
					if(x13 < _this5.bounds.x) {
						_this5.bounds.width += _this5.bounds.x - x13;
						_this5.bounds.x = x13;
					}
					var _this8 = _this5.bounds;
					if(x23 > _this8.x + _this8.width) {
						_this5.bounds.width = x23 - _this5.bounds.x;
					}
				}
				if(_this5.bounds.height == 0) {
					_this5.bounds.y = y13;
					_this5.bounds.height = y23 - y13;
				} else {
					if(y13 < _this5.bounds.y) {
						_this5.bounds.height += _this5.bounds.y - y13;
						_this5.bounds.y = y13;
					}
					var _this9 = _this5.bounds;
					if(y23 > _this9.y + _this9.height) {
						_this5.bounds.height = y23 - _this5.bounds.y;
					}
				}
			}
		}
	}
	,polyline: function(points,miterJoint) {
		if(miterJoint == null) {
			miterJoint = false;
		}
		if(points.length < 4 || points.length % 2 == 1) {
			throw new js__$Boot_HaxeError("Invalid number of values. Expected an even number greater than 4.");
		}
		var halfThick = this.lineThickness / 2;
		var last = points.length / 2 | 0;
		var a_y;
		var a_x = 0;
		a_y = 0;
		var b_y;
		var b_x = 0;
		b_y = 0;
		var pos_y;
		var pos_x = points[0];
		pos_y = points[1];
		var prev_y;
		var prev_x = pos_x - points[2];
		prev_y = pos_y - points[3];
		var next_y;
		var next_x = prev_x;
		next_y = prev_y;
		var inner_y;
		var inner_x = 0;
		inner_y = 0;
		var outer_y;
		var outer_x = 0;
		outer_y = 0;
		var nextPrev_y;
		var nextPrev_x = 0;
		nextPrev_y = 0;
		if(this.shader == null) {
			this.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : this.scene;
		this.command = scene.batch.getDrawCommand(null,this.shader,this.smooth,this.blend,null);
		a_x = pos_x;
		a_y = pos_y;
		b_x = pos_x;
		b_y = pos_y;
		var y = next_x;
		next_x = -next_y;
		next_y = y;
		if(!(next_x == 0 && next_y == 0)) {
			var normal = halfThick / Math.sqrt(next_x * next_x + next_y * next_y);
			next_x *= normal;
			next_y *= normal;
		}
		a_x += next_x;
		a_y += next_y;
		b_x -= next_x;
		b_y -= next_y;
		if(!(prev_x == 0 && prev_y == 0)) {
			var normal1 = 1 / Math.sqrt(prev_x * prev_x + prev_y * prev_y);
			prev_x *= normal1;
			prev_y *= normal1;
		}
		var over180;
		var angle;
		var index;
		var _g1 = 1;
		var _g = last - 1;
		while(_g1 < _g) {
			var i = _g1++;
			index = i * 2;
			pos_x = points[index];
			pos_y = points[index + 1];
			next_x = pos_x - points[index + 2];
			next_y = pos_y - points[index + 3];
			if(!(next_x == 0 && next_y == 0)) {
				var normal2 = 1 / Math.sqrt(next_x * next_x + next_y * next_y);
				next_x *= normal2;
				next_y *= normal2;
			}
			nextPrev_x = next_x;
			nextPrev_y = next_y;
			over180 = prev_x * next_y - prev_y * next_x > 0;
			angle = Math.acos(prev_x * next_x + prev_y * next_y) / 2;
			inner_x = prev_x;
			inner_y = prev_y;
			inner_x += next_x;
			inner_y += next_y;
			var y1 = inner_x;
			inner_x = -inner_y;
			inner_y = y1;
			if(over180) {
				inner_x = -inner_x;
				inner_y = -inner_y;
			}
			if(!(inner_x == 0 && inner_y == 0)) {
				var normal3 = halfThick / Math.cos(angle) / Math.sqrt(inner_x * inner_x + inner_y * inner_y);
				inner_x *= normal3;
				inner_y *= normal3;
			}
			if(miterJoint) {
				outer_x = pos_x;
				outer_y = pos_y;
				outer_x -= inner_x;
				outer_y -= inner_y;
			}
			inner_x += pos_x;
			inner_y += pos_y;
			var y2 = prev_x;
			prev_x = -prev_y;
			prev_y = y2;
			if(!(prev_x == 0 && prev_y == 0)) {
				var normal4 = halfThick / Math.sqrt(prev_x * prev_x + prev_y * prev_y);
				prev_x *= normal4;
				prev_y *= normal4;
			}
			var y3 = next_x;
			next_x = -next_y;
			next_y = y3;
			if(!(next_x == 0 && next_y == 0)) {
				var normal5 = halfThick / Math.sqrt(next_x * next_x + next_y * next_y);
				next_x *= normal5;
				next_y *= normal5;
			}
			if(!over180) {
				prev_x = -prev_x;
				prev_y = -prev_y;
				next_x = -next_x;
				next_y = -next_y;
			}
			prev_x += pos_x;
			prev_y += pos_y;
			next_x += pos_x;
			next_y += pos_y;
			if(over180) {
				var _this = this.command;
				var tx1 = a_x;
				var ty1 = a_y;
				var tx2 = b_x;
				var ty2 = b_y;
				var tx3 = prev_x;
				var ty3 = prev_y;
				var color = this.color;
				var alpha = this.alpha;
				if(alpha > 0) {
					var onScreen;
					var onScreen1;
					var onScreen2;
					var _this1 = _this.visibleArea;
					if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width) {
						onScreen2 = (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x;
					} else {
						onScreen2 = false;
					}
					if(onScreen2) {
						var _this2 = _this.visibleArea;
						onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this2.y + _this2.height;
					} else {
						onScreen1 = false;
					}
					if(onScreen1) {
						onScreen = (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
					} else {
						onScreen = false;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx1;
						data1.ty1 = ty1;
						data1.uvx1 = 0;
						data1.uvy1 = 0;
						data1.tx2 = tx2;
						data1.ty2 = ty2;
						data1.uvx2 = 0;
						data1.uvy2 = 0;
						data1.tx3 = tx3;
						data1.ty3 = ty3;
						data1.uvx3 = 0;
						data1.uvy3 = 0;
						data1.color = color;
						data1.alpha = alpha;
						if(_this.data == null) {
							_this.data = data1;
						} else {
							_this._lastData._next = data1;
						}
						_this._lastData = data1;
						++_this.triangleCount;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x1 = a > b ? b > c ? c : b : a > c ? c : a;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c1 = data1.tx3;
						var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
						var a2 = data1.ty1;
						var b2 = data1.ty2;
						var c2 = data1.ty3;
						var y11 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
						var a3 = data1.ty1;
						var b3 = data1.ty2;
						var c3 = data1.ty3;
						var y21 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
						if(_this.bounds.width == 0) {
							_this.bounds.x = x1;
							_this.bounds.width = x2 - x1;
						} else {
							if(x1 < _this.bounds.x) {
								_this.bounds.width += _this.bounds.x - x1;
								_this.bounds.x = x1;
							}
							var _this3 = _this.bounds;
							if(x2 > _this3.x + _this3.width) {
								_this.bounds.width = x2 - _this.bounds.x;
							}
						}
						if(_this.bounds.height == 0) {
							_this.bounds.y = y11;
							_this.bounds.height = y21 - y11;
						} else {
							if(y11 < _this.bounds.y) {
								_this.bounds.height += _this.bounds.y - y11;
								_this.bounds.y = y11;
							}
							var _this4 = _this.bounds;
							if(y21 > _this4.y + _this4.height) {
								_this.bounds.height = y21 - _this.bounds.y;
							}
						}
					}
				}
			} else {
				var _this5 = this.command;
				var tx11 = a_x;
				var ty11 = a_y;
				var tx21 = b_x;
				var ty21 = b_y;
				var tx31 = inner_x;
				var ty31 = inner_y;
				var color1 = this.color;
				var alpha1 = this.alpha;
				if(alpha1 > 0) {
					var onScreen3;
					var onScreen4;
					var onScreen5;
					var _this6 = _this5.visibleArea;
					if((tx11 > tx21 ? tx21 > tx31 ? tx31 : tx21 : tx11 > tx31 ? tx31 : tx11) <= _this6.x + _this6.width) {
						onScreen5 = (tx11 < tx21 ? tx21 < tx31 ? tx31 : tx21 : tx11 < tx31 ? tx31 : tx11) >= _this5.visibleArea.x;
					} else {
						onScreen5 = false;
					}
					if(onScreen5) {
						var _this7 = _this5.visibleArea;
						onScreen4 = (ty11 > ty21 ? ty21 > ty31 ? ty31 : ty21 : ty11 > ty31 ? ty31 : ty11) <= _this7.y + _this7.height;
					} else {
						onScreen4 = false;
					}
					if(onScreen4) {
						onScreen3 = (ty11 < ty21 ? ty21 < ty31 ? ty31 : ty21 : ty11 < ty31 ? ty31 : ty11) >= _this5.visibleArea.y;
					} else {
						onScreen3 = false;
					}
					if(onScreen3) {
						var data2;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data2._next = null;
						} else {
							data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data3 = data2;
						data3.tx1 = tx11;
						data3.ty1 = ty11;
						data3.uvx1 = 0;
						data3.uvy1 = 0;
						data3.tx2 = tx21;
						data3.ty2 = ty21;
						data3.uvx2 = 0;
						data3.uvy2 = 0;
						data3.tx3 = tx31;
						data3.ty3 = ty31;
						data3.uvx3 = 0;
						data3.uvy3 = 0;
						data3.color = color1;
						data3.alpha = alpha1;
						if(_this5.data == null) {
							_this5.data = data3;
						} else {
							_this5._lastData._next = data3;
						}
						_this5._lastData = data3;
						++_this5.triangleCount;
						var a4 = data3.tx1;
						var b4 = data3.tx2;
						var c4 = data3.tx3;
						var x11 = a4 > b4 ? b4 > c4 ? c4 : b4 : a4 > c4 ? c4 : a4;
						var a5 = data3.tx1;
						var b5 = data3.tx2;
						var c5 = data3.tx3;
						var x21 = a5 < b5 ? b5 < c5 ? c5 : b5 : a5 < c5 ? c5 : a5;
						var a6 = data3.ty1;
						var b6 = data3.ty2;
						var c6 = data3.ty3;
						var y12 = a6 > b6 ? b6 > c6 ? c6 : b6 : a6 > c6 ? c6 : a6;
						var a7 = data3.ty1;
						var b7 = data3.ty2;
						var c7 = data3.ty3;
						var y22 = a7 < b7 ? b7 < c7 ? c7 : b7 : a7 < c7 ? c7 : a7;
						if(_this5.bounds.width == 0) {
							_this5.bounds.x = x11;
							_this5.bounds.width = x21 - x11;
						} else {
							if(x11 < _this5.bounds.x) {
								_this5.bounds.width += _this5.bounds.x - x11;
								_this5.bounds.x = x11;
							}
							var _this8 = _this5.bounds;
							if(x21 > _this8.x + _this8.width) {
								_this5.bounds.width = x21 - _this5.bounds.x;
							}
						}
						if(_this5.bounds.height == 0) {
							_this5.bounds.y = y12;
							_this5.bounds.height = y22 - y12;
						} else {
							if(y12 < _this5.bounds.y) {
								_this5.bounds.height += _this5.bounds.y - y12;
								_this5.bounds.y = y12;
							}
							var _this9 = _this5.bounds;
							if(y22 > _this9.y + _this9.height) {
								_this5.bounds.height = y22 - _this5.bounds.y;
							}
						}
					}
				}
			}
			var _this10 = this.command;
			var tx12 = b_x;
			var ty12 = b_y;
			var tx22 = prev_x;
			var ty22 = prev_y;
			var tx32 = inner_x;
			var ty32 = inner_y;
			var color2 = this.color;
			var alpha2 = this.alpha;
			if(alpha2 > 0) {
				var onScreen6;
				var onScreen7;
				var onScreen8;
				var _this11 = _this10.visibleArea;
				if((tx12 > tx22 ? tx22 > tx32 ? tx32 : tx22 : tx12 > tx32 ? tx32 : tx12) <= _this11.x + _this11.width) {
					onScreen8 = (tx12 < tx22 ? tx22 < tx32 ? tx32 : tx22 : tx12 < tx32 ? tx32 : tx12) >= _this10.visibleArea.x;
				} else {
					onScreen8 = false;
				}
				if(onScreen8) {
					var _this12 = _this10.visibleArea;
					onScreen7 = (ty12 > ty22 ? ty22 > ty32 ? ty32 : ty22 : ty12 > ty32 ? ty32 : ty12) <= _this12.y + _this12.height;
				} else {
					onScreen7 = false;
				}
				if(onScreen7) {
					onScreen6 = (ty12 < ty22 ? ty22 < ty32 ? ty32 : ty22 : ty12 < ty32 ? ty32 : ty12) >= _this10.visibleArea.y;
				} else {
					onScreen6 = false;
				}
				if(onScreen6) {
					var data4;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data4 = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data4._next = null;
					} else {
						data4 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data5 = data4;
					data5.tx1 = tx12;
					data5.ty1 = ty12;
					data5.uvx1 = 0;
					data5.uvy1 = 0;
					data5.tx2 = tx22;
					data5.ty2 = ty22;
					data5.uvx2 = 0;
					data5.uvy2 = 0;
					data5.tx3 = tx32;
					data5.ty3 = ty32;
					data5.uvx3 = 0;
					data5.uvy3 = 0;
					data5.color = color2;
					data5.alpha = alpha2;
					if(_this10.data == null) {
						_this10.data = data5;
					} else {
						_this10._lastData._next = data5;
					}
					_this10._lastData = data5;
					++_this10.triangleCount;
					var a8 = data5.tx1;
					var b8 = data5.tx2;
					var c8 = data5.tx3;
					var x12 = a8 > b8 ? b8 > c8 ? c8 : b8 : a8 > c8 ? c8 : a8;
					var a9 = data5.tx1;
					var b9 = data5.tx2;
					var c9 = data5.tx3;
					var x22 = a9 < b9 ? b9 < c9 ? c9 : b9 : a9 < c9 ? c9 : a9;
					var a10 = data5.ty1;
					var b10 = data5.ty2;
					var c10 = data5.ty3;
					var y13 = a10 > b10 ? b10 > c10 ? c10 : b10 : a10 > c10 ? c10 : a10;
					var a11 = data5.ty1;
					var b11 = data5.ty2;
					var c11 = data5.ty3;
					var y23 = a11 < b11 ? b11 < c11 ? c11 : b11 : a11 < c11 ? c11 : a11;
					if(_this10.bounds.width == 0) {
						_this10.bounds.x = x12;
						_this10.bounds.width = x22 - x12;
					} else {
						if(x12 < _this10.bounds.x) {
							_this10.bounds.width += _this10.bounds.x - x12;
							_this10.bounds.x = x12;
						}
						var _this13 = _this10.bounds;
						if(x22 > _this13.x + _this13.width) {
							_this10.bounds.width = x22 - _this10.bounds.x;
						}
					}
					if(_this10.bounds.height == 0) {
						_this10.bounds.y = y13;
						_this10.bounds.height = y23 - y13;
					} else {
						if(y13 < _this10.bounds.y) {
							_this10.bounds.height += _this10.bounds.y - y13;
							_this10.bounds.y = y13;
						}
						var _this14 = _this10.bounds;
						if(y23 > _this14.y + _this14.height) {
							_this10.bounds.height = y23 - _this10.bounds.y;
						}
					}
				}
			}
			var _this15 = this.command;
			var tx13 = next_x;
			var ty13 = next_y;
			var tx23 = prev_x;
			var ty23 = prev_y;
			var tx33 = inner_x;
			var ty33 = inner_y;
			var color3 = this.color;
			var alpha3 = this.alpha;
			if(alpha3 > 0) {
				var onScreen9;
				var onScreen10;
				var onScreen11;
				var _this16 = _this15.visibleArea;
				if((tx13 > tx23 ? tx23 > tx33 ? tx33 : tx23 : tx13 > tx33 ? tx33 : tx13) <= _this16.x + _this16.width) {
					onScreen11 = (tx13 < tx23 ? tx23 < tx33 ? tx33 : tx23 : tx13 < tx33 ? tx33 : tx13) >= _this15.visibleArea.x;
				} else {
					onScreen11 = false;
				}
				if(onScreen11) {
					var _this17 = _this15.visibleArea;
					onScreen10 = (ty13 > ty23 ? ty23 > ty33 ? ty33 : ty23 : ty13 > ty33 ? ty33 : ty13) <= _this17.y + _this17.height;
				} else {
					onScreen10 = false;
				}
				if(onScreen10) {
					onScreen9 = (ty13 < ty23 ? ty23 < ty33 ? ty33 : ty23 : ty13 < ty33 ? ty33 : ty13) >= _this15.visibleArea.y;
				} else {
					onScreen9 = false;
				}
				if(onScreen9) {
					var data6;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data6 = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data6._next = null;
					} else {
						data6 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data7 = data6;
					data7.tx1 = tx13;
					data7.ty1 = ty13;
					data7.uvx1 = 0;
					data7.uvy1 = 0;
					data7.tx2 = tx23;
					data7.ty2 = ty23;
					data7.uvx2 = 0;
					data7.uvy2 = 0;
					data7.tx3 = tx33;
					data7.ty3 = ty33;
					data7.uvx3 = 0;
					data7.uvy3 = 0;
					data7.color = color3;
					data7.alpha = alpha3;
					if(_this15.data == null) {
						_this15.data = data7;
					} else {
						_this15._lastData._next = data7;
					}
					_this15._lastData = data7;
					++_this15.triangleCount;
					var a12 = data7.tx1;
					var b12 = data7.tx2;
					var c12 = data7.tx3;
					var x13 = a12 > b12 ? b12 > c12 ? c12 : b12 : a12 > c12 ? c12 : a12;
					var a13 = data7.tx1;
					var b13 = data7.tx2;
					var c13 = data7.tx3;
					var x23 = a13 < b13 ? b13 < c13 ? c13 : b13 : a13 < c13 ? c13 : a13;
					var a14 = data7.ty1;
					var b14 = data7.ty2;
					var c14 = data7.ty3;
					var y14 = a14 > b14 ? b14 > c14 ? c14 : b14 : a14 > c14 ? c14 : a14;
					var a15 = data7.ty1;
					var b15 = data7.ty2;
					var c15 = data7.ty3;
					var y24 = a15 < b15 ? b15 < c15 ? c15 : b15 : a15 < c15 ? c15 : a15;
					if(_this15.bounds.width == 0) {
						_this15.bounds.x = x13;
						_this15.bounds.width = x23 - x13;
					} else {
						if(x13 < _this15.bounds.x) {
							_this15.bounds.width += _this15.bounds.x - x13;
							_this15.bounds.x = x13;
						}
						var _this18 = _this15.bounds;
						if(x23 > _this18.x + _this18.width) {
							_this15.bounds.width = x23 - _this15.bounds.x;
						}
					}
					if(_this15.bounds.height == 0) {
						_this15.bounds.y = y14;
						_this15.bounds.height = y24 - y14;
					} else {
						if(y14 < _this15.bounds.y) {
							_this15.bounds.height += _this15.bounds.y - y14;
							_this15.bounds.y = y14;
						}
						var _this19 = _this15.bounds;
						if(y24 > _this19.y + _this19.height) {
							_this15.bounds.height = y24 - _this15.bounds.y;
						}
					}
				}
			}
			if(miterJoint) {
				var _this20 = this.command;
				var tx14 = next_x;
				var ty14 = next_y;
				var tx24 = prev_x;
				var ty24 = prev_y;
				var tx34 = outer_x;
				var ty34 = outer_y;
				var color4 = this.color;
				var alpha4 = this.alpha;
				if(alpha4 > 0) {
					var onScreen12;
					var onScreen13;
					var onScreen14;
					var _this21 = _this20.visibleArea;
					if((tx14 > tx24 ? tx24 > tx34 ? tx34 : tx24 : tx14 > tx34 ? tx34 : tx14) <= _this21.x + _this21.width) {
						onScreen14 = (tx14 < tx24 ? tx24 < tx34 ? tx34 : tx24 : tx14 < tx34 ? tx34 : tx14) >= _this20.visibleArea.x;
					} else {
						onScreen14 = false;
					}
					if(onScreen14) {
						var _this22 = _this20.visibleArea;
						onScreen13 = (ty14 > ty24 ? ty24 > ty34 ? ty34 : ty24 : ty14 > ty34 ? ty34 : ty14) <= _this22.y + _this22.height;
					} else {
						onScreen13 = false;
					}
					if(onScreen13) {
						onScreen12 = (ty14 < ty24 ? ty24 < ty34 ? ty34 : ty24 : ty14 < ty34 ? ty34 : ty14) >= _this20.visibleArea.y;
					} else {
						onScreen12 = false;
					}
					if(onScreen12) {
						var data8;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data8 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data8._next = null;
						} else {
							data8 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data9 = data8;
						data9.tx1 = tx14;
						data9.ty1 = ty14;
						data9.uvx1 = 0;
						data9.uvy1 = 0;
						data9.tx2 = tx24;
						data9.ty2 = ty24;
						data9.uvx2 = 0;
						data9.uvy2 = 0;
						data9.tx3 = tx34;
						data9.ty3 = ty34;
						data9.uvx3 = 0;
						data9.uvy3 = 0;
						data9.color = color4;
						data9.alpha = alpha4;
						if(_this20.data == null) {
							_this20.data = data9;
						} else {
							_this20._lastData._next = data9;
						}
						_this20._lastData = data9;
						++_this20.triangleCount;
						var a16 = data9.tx1;
						var b16 = data9.tx2;
						var c16 = data9.tx3;
						var x14 = a16 > b16 ? b16 > c16 ? c16 : b16 : a16 > c16 ? c16 : a16;
						var a17 = data9.tx1;
						var b17 = data9.tx2;
						var c17 = data9.tx3;
						var x24 = a17 < b17 ? b17 < c17 ? c17 : b17 : a17 < c17 ? c17 : a17;
						var a18 = data9.ty1;
						var b18 = data9.ty2;
						var c18 = data9.ty3;
						var y15 = a18 > b18 ? b18 > c18 ? c18 : b18 : a18 > c18 ? c18 : a18;
						var a19 = data9.ty1;
						var b19 = data9.ty2;
						var c19 = data9.ty3;
						var y25 = a19 < b19 ? b19 < c19 ? c19 : b19 : a19 < c19 ? c19 : a19;
						if(_this20.bounds.width == 0) {
							_this20.bounds.x = x14;
							_this20.bounds.width = x24 - x14;
						} else {
							if(x14 < _this20.bounds.x) {
								_this20.bounds.width += _this20.bounds.x - x14;
								_this20.bounds.x = x14;
							}
							var _this23 = _this20.bounds;
							if(x24 > _this23.x + _this23.width) {
								_this20.bounds.width = x24 - _this20.bounds.x;
							}
						}
						if(_this20.bounds.height == 0) {
							_this20.bounds.y = y15;
							_this20.bounds.height = y25 - y15;
						} else {
							if(y15 < _this20.bounds.y) {
								_this20.bounds.height += _this20.bounds.y - y15;
								_this20.bounds.y = y15;
							}
							var _this24 = _this20.bounds;
							if(y25 > _this24.y + _this24.height) {
								_this20.bounds.height = y25 - _this20.bounds.y;
							}
						}
					}
				}
			}
			if(over180) {
				a_x = next_x;
				a_y = next_y;
				b_x = inner_x;
				b_y = inner_y;
			} else {
				a_x = inner_x;
				a_y = inner_y;
				b_x = next_x;
				b_y = next_y;
			}
			prev_x = nextPrev_x;
			prev_y = nextPrev_y;
		}
		next_x = points[points.length - 2];
		next_y = points[points.length - 1];
		pos_x -= next_x;
		pos_y -= next_y;
		var y4 = pos_x;
		pos_x = -pos_y;
		pos_y = y4;
		if(!(pos_x == 0 && pos_y == 0)) {
			var normal6 = halfThick / Math.sqrt(pos_x * pos_x + pos_y * pos_y);
			pos_x *= normal6;
			pos_y *= normal6;
		}
		prev_x = next_x;
		prev_y = next_y;
		prev_x += pos_x;
		prev_y += pos_y;
		next_x -= pos_x;
		next_y -= pos_y;
		var _this25 = this.command;
		var tx15 = a_x;
		var ty15 = a_y;
		var tx25 = b_x;
		var ty25 = b_y;
		var tx35 = prev_x;
		var ty35 = prev_y;
		var color5 = this.color;
		var alpha5 = this.alpha;
		if(alpha5 > 0) {
			var onScreen15;
			var onScreen16;
			var onScreen17;
			var _this26 = _this25.visibleArea;
			if((tx15 > tx25 ? tx25 > tx35 ? tx35 : tx25 : tx15 > tx35 ? tx35 : tx15) <= _this26.x + _this26.width) {
				onScreen17 = (tx15 < tx25 ? tx25 < tx35 ? tx35 : tx25 : tx15 < tx35 ? tx35 : tx15) >= _this25.visibleArea.x;
			} else {
				onScreen17 = false;
			}
			if(onScreen17) {
				var _this27 = _this25.visibleArea;
				onScreen16 = (ty15 > ty25 ? ty25 > ty35 ? ty35 : ty25 : ty15 > ty35 ? ty35 : ty15) <= _this27.y + _this27.height;
			} else {
				onScreen16 = false;
			}
			if(onScreen16) {
				onScreen15 = (ty15 < ty25 ? ty25 < ty35 ? ty35 : ty25 : ty15 < ty35 ? ty35 : ty15) >= _this25.visibleArea.y;
			} else {
				onScreen15 = false;
			}
			if(onScreen15) {
				var data10;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data10 = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data10._next = null;
				} else {
					data10 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data11 = data10;
				data11.tx1 = tx15;
				data11.ty1 = ty15;
				data11.uvx1 = 0;
				data11.uvy1 = 0;
				data11.tx2 = tx25;
				data11.ty2 = ty25;
				data11.uvx2 = 0;
				data11.uvy2 = 0;
				data11.tx3 = tx35;
				data11.ty3 = ty35;
				data11.uvx3 = 0;
				data11.uvy3 = 0;
				data11.color = color5;
				data11.alpha = alpha5;
				if(_this25.data == null) {
					_this25.data = data11;
				} else {
					_this25._lastData._next = data11;
				}
				_this25._lastData = data11;
				++_this25.triangleCount;
				var a20 = data11.tx1;
				var b20 = data11.tx2;
				var c20 = data11.tx3;
				var x15 = a20 > b20 ? b20 > c20 ? c20 : b20 : a20 > c20 ? c20 : a20;
				var a21 = data11.tx1;
				var b21 = data11.tx2;
				var c21 = data11.tx3;
				var x25 = a21 < b21 ? b21 < c21 ? c21 : b21 : a21 < c21 ? c21 : a21;
				var a22 = data11.ty1;
				var b22 = data11.ty2;
				var c22 = data11.ty3;
				var y16 = a22 > b22 ? b22 > c22 ? c22 : b22 : a22 > c22 ? c22 : a22;
				var a23 = data11.ty1;
				var b23 = data11.ty2;
				var c23 = data11.ty3;
				var y26 = a23 < b23 ? b23 < c23 ? c23 : b23 : a23 < c23 ? c23 : a23;
				if(_this25.bounds.width == 0) {
					_this25.bounds.x = x15;
					_this25.bounds.width = x25 - x15;
				} else {
					if(x15 < _this25.bounds.x) {
						_this25.bounds.width += _this25.bounds.x - x15;
						_this25.bounds.x = x15;
					}
					var _this28 = _this25.bounds;
					if(x25 > _this28.x + _this28.width) {
						_this25.bounds.width = x25 - _this25.bounds.x;
					}
				}
				if(_this25.bounds.height == 0) {
					_this25.bounds.y = y16;
					_this25.bounds.height = y26 - y16;
				} else {
					if(y16 < _this25.bounds.y) {
						_this25.bounds.height += _this25.bounds.y - y16;
						_this25.bounds.y = y16;
					}
					var _this29 = _this25.bounds;
					if(y26 > _this29.y + _this29.height) {
						_this25.bounds.height = y26 - _this25.bounds.y;
					}
				}
			}
		}
		var _this30 = this.command;
		var tx16 = b_x;
		var ty16 = b_y;
		var tx26 = prev_x;
		var ty26 = prev_y;
		var tx36 = next_x;
		var ty36 = next_y;
		var color6 = this.color;
		var alpha6 = this.alpha;
		if(alpha6 > 0) {
			var onScreen18;
			var onScreen19;
			var onScreen20;
			var _this31 = _this30.visibleArea;
			if((tx16 > tx26 ? tx26 > tx36 ? tx36 : tx26 : tx16 > tx36 ? tx36 : tx16) <= _this31.x + _this31.width) {
				onScreen20 = (tx16 < tx26 ? tx26 < tx36 ? tx36 : tx26 : tx16 < tx36 ? tx36 : tx16) >= _this30.visibleArea.x;
			} else {
				onScreen20 = false;
			}
			if(onScreen20) {
				var _this32 = _this30.visibleArea;
				onScreen19 = (ty16 > ty26 ? ty26 > ty36 ? ty36 : ty26 : ty16 > ty36 ? ty36 : ty16) <= _this32.y + _this32.height;
			} else {
				onScreen19 = false;
			}
			if(onScreen19) {
				onScreen18 = (ty16 < ty26 ? ty26 < ty36 ? ty36 : ty26 : ty16 < ty36 ? ty36 : ty16) >= _this30.visibleArea.y;
			} else {
				onScreen18 = false;
			}
			if(onScreen18) {
				var data12;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data12 = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data12._next = null;
				} else {
					data12 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data13 = data12;
				data13.tx1 = tx16;
				data13.ty1 = ty16;
				data13.uvx1 = 0;
				data13.uvy1 = 0;
				data13.tx2 = tx26;
				data13.ty2 = ty26;
				data13.uvx2 = 0;
				data13.uvy2 = 0;
				data13.tx3 = tx36;
				data13.ty3 = ty36;
				data13.uvx3 = 0;
				data13.uvy3 = 0;
				data13.color = color6;
				data13.alpha = alpha6;
				if(_this30.data == null) {
					_this30.data = data13;
				} else {
					_this30._lastData._next = data13;
				}
				_this30._lastData = data13;
				++_this30.triangleCount;
				var a24 = data13.tx1;
				var b24 = data13.tx2;
				var c24 = data13.tx3;
				var x16 = a24 > b24 ? b24 > c24 ? c24 : b24 : a24 > c24 ? c24 : a24;
				var a25 = data13.tx1;
				var b25 = data13.tx2;
				var c25 = data13.tx3;
				var x26 = a25 < b25 ? b25 < c25 ? c25 : b25 : a25 < c25 ? c25 : a25;
				var a26 = data13.ty1;
				var b26 = data13.ty2;
				var c26 = data13.ty3;
				var y17 = a26 > b26 ? b26 > c26 ? c26 : b26 : a26 > c26 ? c26 : a26;
				var a27 = data13.ty1;
				var b27 = data13.ty2;
				var c27 = data13.ty3;
				var y27 = a27 < b27 ? b27 < c27 ? c27 : b27 : a27 < c27 ? c27 : a27;
				if(_this30.bounds.width == 0) {
					_this30.bounds.x = x16;
					_this30.bounds.width = x26 - x16;
				} else {
					if(x16 < _this30.bounds.x) {
						_this30.bounds.width += _this30.bounds.x - x16;
						_this30.bounds.x = x16;
					}
					var _this33 = _this30.bounds;
					if(x26 > _this33.x + _this33.width) {
						_this30.bounds.width = x26 - _this30.bounds.x;
					}
				}
				if(_this30.bounds.height == 0) {
					_this30.bounds.y = y17;
					_this30.bounds.height = y27 - y17;
				} else {
					if(y17 < _this30.bounds.y) {
						_this30.bounds.height += _this30.bounds.y - y17;
						_this30.bounds.y = y17;
					}
					var _this34 = _this30.bounds;
					if(y27 > _this34.y + _this34.height) {
						_this30.bounds.height = y27 - _this30.bounds.y;
					}
				}
			}
		}
	}
	,rect: function(x,y,width,height) {
		var ht = this.lineThickness / 2;
		var x2 = x + width;
		var y2 = y + height;
		this.line(x - ht,y,x2 + ht,y);
		this.line(x - ht,y2,x2 + ht,y2);
		this.line(x,y + ht,x,y2 - ht);
		this.line(x2,y + ht,x2,y2 - ht);
	}
	,rectFilled: function(x,y,width,height) {
		if(this.shader == null) {
			this.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : this.scene;
		this.command = scene.batch.getDrawCommand(null,this.shader,this.smooth,this.blend,null);
		var x2 = x + width;
		var x3 = x + width;
		var y3 = y + height;
		var y4 = y + height;
		var _this = this.command;
		var color = this.color;
		var alpha = this.alpha;
		if(alpha > 0) {
			var onScreen;
			var onScreen1;
			var onScreen2;
			var _this1 = _this.visibleArea;
			if((x > x2 ? x2 > x3 ? x3 : x2 : x > x3 ? x3 : x) <= _this1.x + _this1.width) {
				onScreen2 = (x < x2 ? x2 < x3 ? x3 : x2 : x < x3 ? x3 : x) >= _this.visibleArea.x;
			} else {
				onScreen2 = false;
			}
			if(onScreen2) {
				var _this2 = _this.visibleArea;
				onScreen1 = (y > y ? y > y3 ? y3 : y : y > y3 ? y3 : y) <= _this2.y + _this2.height;
			} else {
				onScreen1 = false;
			}
			if(onScreen1) {
				onScreen = (y < y ? y < y3 ? y3 : y : y < y3 ? y3 : y) >= _this.visibleArea.y;
			} else {
				onScreen = false;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = x;
				data1.ty1 = y;
				data1.uvx1 = 0;
				data1.uvy1 = 0;
				data1.tx2 = x2;
				data1.ty2 = y;
				data1.uvx2 = 0;
				data1.uvy2 = 0;
				data1.tx3 = x3;
				data1.ty3 = y3;
				data1.uvx3 = 0;
				data1.uvy3 = 0;
				data1.color = color;
				data1.alpha = alpha;
				if(_this.data == null) {
					_this.data = data1;
				} else {
					_this._lastData._next = data1;
				}
				_this._lastData = data1;
				++_this.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a1 = data1.tx1;
				var b1 = data1.tx2;
				var c1 = data1.tx3;
				var x21 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
				var a2 = data1.ty1;
				var b2 = data1.ty2;
				var c2 = data1.ty3;
				var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
				var a3 = data1.ty1;
				var b3 = data1.ty2;
				var c3 = data1.ty3;
				var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
				if(_this.bounds.width == 0) {
					_this.bounds.x = x1;
					_this.bounds.width = x21 - x1;
				} else {
					if(x1 < _this.bounds.x) {
						_this.bounds.width += _this.bounds.x - x1;
						_this.bounds.x = x1;
					}
					var _this3 = _this.bounds;
					if(x21 > _this3.x + _this3.width) {
						_this.bounds.width = x21 - _this.bounds.x;
					}
				}
				if(_this.bounds.height == 0) {
					_this.bounds.y = y1;
					_this.bounds.height = y2 - y1;
				} else {
					if(y1 < _this.bounds.y) {
						_this.bounds.height += _this.bounds.y - y1;
						_this.bounds.y = y1;
					}
					var _this4 = _this.bounds;
					if(y2 > _this4.y + _this4.height) {
						_this.bounds.height = y2 - _this.bounds.y;
					}
				}
			}
		}
		var _this5 = this.command;
		var color1 = this.color;
		var alpha1 = this.alpha;
		if(alpha1 > 0) {
			var onScreen3;
			var onScreen4;
			var onScreen5;
			var _this6 = _this5.visibleArea;
			if((x > x3 ? x3 > x ? x : x3 : x > x ? x : x) <= _this6.x + _this6.width) {
				onScreen5 = (x < x3 ? x3 < x ? x : x3 : x < x ? x : x) >= _this5.visibleArea.x;
			} else {
				onScreen5 = false;
			}
			if(onScreen5) {
				var _this7 = _this5.visibleArea;
				onScreen4 = (y > y3 ? y3 > y4 ? y4 : y3 : y > y4 ? y4 : y) <= _this7.y + _this7.height;
			} else {
				onScreen4 = false;
			}
			if(onScreen4) {
				onScreen3 = (y < y3 ? y3 < y4 ? y4 : y3 : y < y4 ? y4 : y) >= _this5.visibleArea.y;
			} else {
				onScreen3 = false;
			}
			if(onScreen3) {
				var data2;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data2._next = null;
				} else {
					data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data3 = data2;
				data3.tx1 = x;
				data3.ty1 = y;
				data3.uvx1 = 0;
				data3.uvy1 = 0;
				data3.tx2 = x3;
				data3.ty2 = y3;
				data3.uvx2 = 0;
				data3.uvy2 = 0;
				data3.tx3 = x;
				data3.ty3 = y4;
				data3.uvx3 = 0;
				data3.uvy3 = 0;
				data3.color = color1;
				data3.alpha = alpha1;
				if(_this5.data == null) {
					_this5.data = data3;
				} else {
					_this5._lastData._next = data3;
				}
				_this5._lastData = data3;
				++_this5.triangleCount;
				var a4 = data3.tx1;
				var b4 = data3.tx2;
				var c4 = data3.tx3;
				var x11 = a4 > b4 ? b4 > c4 ? c4 : b4 : a4 > c4 ? c4 : a4;
				var a5 = data3.tx1;
				var b5 = data3.tx2;
				var c5 = data3.tx3;
				var x22 = a5 < b5 ? b5 < c5 ? c5 : b5 : a5 < c5 ? c5 : a5;
				var a6 = data3.ty1;
				var b6 = data3.ty2;
				var c6 = data3.ty3;
				var y11 = a6 > b6 ? b6 > c6 ? c6 : b6 : a6 > c6 ? c6 : a6;
				var a7 = data3.ty1;
				var b7 = data3.ty2;
				var c7 = data3.ty3;
				var y21 = a7 < b7 ? b7 < c7 ? c7 : b7 : a7 < c7 ? c7 : a7;
				if(_this5.bounds.width == 0) {
					_this5.bounds.x = x11;
					_this5.bounds.width = x22 - x11;
				} else {
					if(x11 < _this5.bounds.x) {
						_this5.bounds.width += _this5.bounds.x - x11;
						_this5.bounds.x = x11;
					}
					var _this8 = _this5.bounds;
					if(x22 > _this8.x + _this8.width) {
						_this5.bounds.width = x22 - _this5.bounds.x;
					}
				}
				if(_this5.bounds.height == 0) {
					_this5.bounds.y = y11;
					_this5.bounds.height = y21 - y11;
				} else {
					if(y11 < _this5.bounds.y) {
						_this5.bounds.height += _this5.bounds.y - y11;
						_this5.bounds.y = y11;
					}
					var _this9 = _this5.bounds;
					if(y21 > _this9.y + _this9.height) {
						_this5.bounds.height = y21 - _this5.bounds.y;
					}
				}
			}
		}
	}
	,circle: function(x,y,radius,segments,scaleX,scaleY) {
		if(scaleY == null) {
			scaleY = 1;
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		if(segments == null) {
			segments = 25;
		}
		var radians = 2 * Math.PI / segments;
		var halfThick = this.lineThickness / 2;
		var innerRadius = radius - halfThick;
		var outerRadius = radius + halfThick;
		var inner_y;
		var inner_x = 0;
		inner_y = 0;
		var outer_y;
		var outer_x = 0;
		outer_y = 0;
		var lastOuter_y;
		var lastOuter_x = 0;
		lastOuter_y = 0;
		var lastInner_y;
		var lastInner_x = 0;
		lastInner_y = 0;
		if(this.shader == null) {
			this.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : this.scene;
		this.command = scene.batch.getDrawCommand(null,this.shader,this.smooth,this.blend,null);
		var _g1 = 0;
		var _g = segments + 1;
		while(_g1 < _g) {
			var segment = _g1++;
			var theta = segment * radians;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			inner_x = x + sin * innerRadius * scaleX;
			inner_y = y + cos * innerRadius * scaleY;
			outer_x = x + sin * outerRadius * scaleX;
			outer_y = y + cos * outerRadius * scaleY;
			if(segment != 0) {
				var _this = this.command;
				var tx1 = lastInner_x;
				var ty1 = lastInner_y;
				var tx2 = lastOuter_x;
				var ty2 = lastOuter_y;
				var tx3 = outer_x;
				var ty3 = outer_y;
				var color = this.color;
				var alpha = this.alpha;
				if(alpha > 0) {
					var onScreen;
					var onScreen1;
					var onScreen2;
					var _this1 = _this.visibleArea;
					if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width) {
						onScreen2 = (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x;
					} else {
						onScreen2 = false;
					}
					if(onScreen2) {
						var _this2 = _this.visibleArea;
						onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this2.y + _this2.height;
					} else {
						onScreen1 = false;
					}
					if(onScreen1) {
						onScreen = (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
					} else {
						onScreen = false;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx1;
						data1.ty1 = ty1;
						data1.uvx1 = 0;
						data1.uvy1 = 0;
						data1.tx2 = tx2;
						data1.ty2 = ty2;
						data1.uvx2 = 0;
						data1.uvy2 = 0;
						data1.tx3 = tx3;
						data1.ty3 = ty3;
						data1.uvx3 = 0;
						data1.uvy3 = 0;
						data1.color = color;
						data1.alpha = alpha;
						if(_this.data == null) {
							_this.data = data1;
						} else {
							_this._lastData._next = data1;
						}
						_this._lastData = data1;
						++_this.triangleCount;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x1 = a > b ? b > c ? c : b : a > c ? c : a;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c1 = data1.tx3;
						var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
						var a2 = data1.ty1;
						var b2 = data1.ty2;
						var c2 = data1.ty3;
						var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
						var a3 = data1.ty1;
						var b3 = data1.ty2;
						var c3 = data1.ty3;
						var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
						if(_this.bounds.width == 0) {
							_this.bounds.x = x1;
							_this.bounds.width = x2 - x1;
						} else {
							if(x1 < _this.bounds.x) {
								_this.bounds.width += _this.bounds.x - x1;
								_this.bounds.x = x1;
							}
							var _this3 = _this.bounds;
							if(x2 > _this3.x + _this3.width) {
								_this.bounds.width = x2 - _this.bounds.x;
							}
						}
						if(_this.bounds.height == 0) {
							_this.bounds.y = y1;
							_this.bounds.height = y2 - y1;
						} else {
							if(y1 < _this.bounds.y) {
								_this.bounds.height += _this.bounds.y - y1;
								_this.bounds.y = y1;
							}
							var _this4 = _this.bounds;
							if(y2 > _this4.y + _this4.height) {
								_this.bounds.height = y2 - _this.bounds.y;
							}
						}
					}
				}
				var _this5 = this.command;
				var tx11 = lastInner_x;
				var ty11 = lastInner_y;
				var tx21 = outer_x;
				var ty21 = outer_y;
				var tx31 = inner_x;
				var ty31 = inner_y;
				var color1 = this.color;
				var alpha1 = this.alpha;
				if(alpha1 > 0) {
					var onScreen3;
					var onScreen4;
					var onScreen5;
					var _this6 = _this5.visibleArea;
					if((tx11 > tx21 ? tx21 > tx31 ? tx31 : tx21 : tx11 > tx31 ? tx31 : tx11) <= _this6.x + _this6.width) {
						onScreen5 = (tx11 < tx21 ? tx21 < tx31 ? tx31 : tx21 : tx11 < tx31 ? tx31 : tx11) >= _this5.visibleArea.x;
					} else {
						onScreen5 = false;
					}
					if(onScreen5) {
						var _this7 = _this5.visibleArea;
						onScreen4 = (ty11 > ty21 ? ty21 > ty31 ? ty31 : ty21 : ty11 > ty31 ? ty31 : ty11) <= _this7.y + _this7.height;
					} else {
						onScreen4 = false;
					}
					if(onScreen4) {
						onScreen3 = (ty11 < ty21 ? ty21 < ty31 ? ty31 : ty21 : ty11 < ty31 ? ty31 : ty11) >= _this5.visibleArea.y;
					} else {
						onScreen3 = false;
					}
					if(onScreen3) {
						var data2;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data2._next = null;
						} else {
							data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data3 = data2;
						data3.tx1 = tx11;
						data3.ty1 = ty11;
						data3.uvx1 = 0;
						data3.uvy1 = 0;
						data3.tx2 = tx21;
						data3.ty2 = ty21;
						data3.uvx2 = 0;
						data3.uvy2 = 0;
						data3.tx3 = tx31;
						data3.ty3 = ty31;
						data3.uvx3 = 0;
						data3.uvy3 = 0;
						data3.color = color1;
						data3.alpha = alpha1;
						if(_this5.data == null) {
							_this5.data = data3;
						} else {
							_this5._lastData._next = data3;
						}
						_this5._lastData = data3;
						++_this5.triangleCount;
						var a4 = data3.tx1;
						var b4 = data3.tx2;
						var c4 = data3.tx3;
						var x11 = a4 > b4 ? b4 > c4 ? c4 : b4 : a4 > c4 ? c4 : a4;
						var a5 = data3.tx1;
						var b5 = data3.tx2;
						var c5 = data3.tx3;
						var x21 = a5 < b5 ? b5 < c5 ? c5 : b5 : a5 < c5 ? c5 : a5;
						var a6 = data3.ty1;
						var b6 = data3.ty2;
						var c6 = data3.ty3;
						var y11 = a6 > b6 ? b6 > c6 ? c6 : b6 : a6 > c6 ? c6 : a6;
						var a7 = data3.ty1;
						var b7 = data3.ty2;
						var c7 = data3.ty3;
						var y21 = a7 < b7 ? b7 < c7 ? c7 : b7 : a7 < c7 ? c7 : a7;
						if(_this5.bounds.width == 0) {
							_this5.bounds.x = x11;
							_this5.bounds.width = x21 - x11;
						} else {
							if(x11 < _this5.bounds.x) {
								_this5.bounds.width += _this5.bounds.x - x11;
								_this5.bounds.x = x11;
							}
							var _this8 = _this5.bounds;
							if(x21 > _this8.x + _this8.width) {
								_this5.bounds.width = x21 - _this5.bounds.x;
							}
						}
						if(_this5.bounds.height == 0) {
							_this5.bounds.y = y11;
							_this5.bounds.height = y21 - y11;
						} else {
							if(y11 < _this5.bounds.y) {
								_this5.bounds.height += _this5.bounds.y - y11;
								_this5.bounds.y = y11;
							}
							var _this9 = _this5.bounds;
							if(y21 > _this9.y + _this9.height) {
								_this5.bounds.height = y21 - _this5.bounds.y;
							}
						}
					}
				}
			}
			lastOuter_x = outer_x;
			lastOuter_y = outer_y;
			lastInner_x = inner_x;
			lastInner_y = inner_y;
		}
	}
	,circleFilled: function(x,y,radius,segments,scaleX,scaleY) {
		if(scaleY == null) {
			scaleY = 1;
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		if(segments == null) {
			segments = 25;
		}
		var radians = 2 * Math.PI / segments;
		var x1 = x;
		var y1 = y + radius;
		if(this.shader == null) {
			this.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : this.scene;
		this.command = scene.batch.getDrawCommand(null,this.shader,this.smooth,this.blend,null);
		var _g1 = 1;
		var _g = segments + 1;
		while(_g1 < _g) {
			var segment = _g1++;
			var theta = segment * radians;
			var x2 = x + Math.sin(theta) * radius * scaleX;
			var y2 = y + Math.cos(theta) * radius * scaleY;
			var _this = this.command;
			var color = this.color;
			var alpha = this.alpha;
			if(alpha > 0) {
				var onScreen;
				var onScreen1;
				var onScreen2;
				var _this1 = _this.visibleArea;
				if((x > x1 ? x1 > x2 ? x2 : x1 : x > x2 ? x2 : x) <= _this1.x + _this1.width) {
					onScreen2 = (x < x1 ? x1 < x2 ? x2 : x1 : x < x2 ? x2 : x) >= _this.visibleArea.x;
				} else {
					onScreen2 = false;
				}
				if(onScreen2) {
					var _this2 = _this.visibleArea;
					onScreen1 = (y > y1 ? y1 > y2 ? y2 : y1 : y > y2 ? y2 : y) <= _this2.y + _this2.height;
				} else {
					onScreen1 = false;
				}
				if(onScreen1) {
					onScreen = (y < y1 ? y1 < y2 ? y2 : y1 : y < y2 ? y2 : y) >= _this.visibleArea.y;
				} else {
					onScreen = false;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = x;
					data1.ty1 = y;
					data1.uvx1 = 0;
					data1.uvy1 = 0;
					data1.tx2 = x1;
					data1.ty2 = y1;
					data1.uvx2 = 0;
					data1.uvy2 = 0;
					data1.tx3 = x2;
					data1.ty3 = y2;
					data1.uvx3 = 0;
					data1.uvy3 = 0;
					data1.color = color;
					data1.alpha = alpha;
					if(_this.data == null) {
						_this.data = data1;
					} else {
						_this._lastData._next = data1;
					}
					_this._lastData = data1;
					++_this.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x11 = a > b ? b > c ? c : b : a > c ? c : a;
					var a1 = data1.tx1;
					var b1 = data1.tx2;
					var c1 = data1.tx3;
					var x21 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
					var a2 = data1.ty1;
					var b2 = data1.ty2;
					var c2 = data1.ty3;
					var y11 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
					var a3 = data1.ty1;
					var b3 = data1.ty2;
					var c3 = data1.ty3;
					var y21 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
					if(_this.bounds.width == 0) {
						_this.bounds.x = x11;
						_this.bounds.width = x21 - x11;
					} else {
						if(x11 < _this.bounds.x) {
							_this.bounds.width += _this.bounds.x - x11;
							_this.bounds.x = x11;
						}
						var _this3 = _this.bounds;
						if(x21 > _this3.x + _this3.width) {
							_this.bounds.width = x21 - _this.bounds.x;
						}
					}
					if(_this.bounds.height == 0) {
						_this.bounds.y = y11;
						_this.bounds.height = y21 - y11;
					} else {
						if(y11 < _this.bounds.y) {
							_this.bounds.height += _this.bounds.y - y11;
							_this.bounds.y = y11;
						}
						var _this4 = _this.bounds;
						if(y21 > _this4.y + _this4.height) {
							_this.bounds.height = y21 - _this.bounds.y;
						}
					}
				}
			}
			x1 = x2;
			y1 = y2;
		}
	}
	,arc: function(x,y,radius,start,angle,segments) {
		if(segments == null) {
			segments = 25;
		}
		var radians = angle / segments;
		var points = [];
		var _g1 = 0;
		var _g = segments + 1;
		while(_g1 < _g) {
			var segment = _g1++;
			var theta = segment * radians + start;
			points.push(x + Math.sin(theta) * radius);
			points.push(y + Math.cos(theta) * radius);
		}
		this.polyline(points,true);
	}
	,curve: function(x1,y1,x2,y2,x3,y3,segments) {
		if(segments == null) {
			segments = 25;
		}
		var points = [];
		points.push(x1);
		points.push(y1);
		var deltaT = 1 / segments;
		var _g1 = 1;
		var _g = segments;
		while(_g1 < _g) {
			var segment = _g1++;
			var t = segment * deltaT;
			var x = (1 - t) * (1 - t) * x1 + 2 * t * (1 - t) * x2 + t * t * x3;
			var y = (1 - t) * (1 - t) * y1 + 2 * t * (1 - t) * y2 + t * t * y3;
			points.push(x);
			points.push(y);
		}
		points.push(x3);
		points.push(y3);
		this.polyline(points);
	}
	,begin: function() {
		if(this.shader == null) {
			this.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : this.scene;
		this.command = scene.batch.getDrawCommand(null,this.shader,this.smooth,this.blend,null);
	}
	,drawTriangle: function(v1,v2,v3) {
		var _this = this.command;
		var tx1 = v1.x;
		var ty1 = v1.y;
		var tx2 = v2.x;
		var ty2 = v2.y;
		var tx3 = v3.x;
		var ty3 = v3.y;
		var color = this.color;
		var alpha = this.alpha;
		if(alpha > 0) {
			var onScreen;
			var onScreen1;
			var onScreen2;
			var _this1 = _this.visibleArea;
			if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width) {
				onScreen2 = (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x;
			} else {
				onScreen2 = false;
			}
			if(onScreen2) {
				var _this2 = _this.visibleArea;
				onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this2.y + _this2.height;
			} else {
				onScreen1 = false;
			}
			if(onScreen1) {
				onScreen = (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
			} else {
				onScreen = false;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = tx1;
				data1.ty1 = ty1;
				data1.uvx1 = 0;
				data1.uvy1 = 0;
				data1.tx2 = tx2;
				data1.ty2 = ty2;
				data1.uvx2 = 0;
				data1.uvy2 = 0;
				data1.tx3 = tx3;
				data1.ty3 = ty3;
				data1.uvx3 = 0;
				data1.uvy3 = 0;
				data1.color = color;
				data1.alpha = alpha;
				if(_this.data == null) {
					_this.data = data1;
				} else {
					_this._lastData._next = data1;
				}
				_this._lastData = data1;
				++_this.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a1 = data1.tx1;
				var b1 = data1.tx2;
				var c1 = data1.tx3;
				var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
				var a2 = data1.ty1;
				var b2 = data1.ty2;
				var c2 = data1.ty3;
				var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
				var a3 = data1.ty1;
				var b3 = data1.ty2;
				var c3 = data1.ty3;
				var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
				if(_this.bounds.width == 0) {
					_this.bounds.x = x1;
					_this.bounds.width = x2 - x1;
				} else {
					if(x1 < _this.bounds.x) {
						_this.bounds.width += _this.bounds.x - x1;
						_this.bounds.x = x1;
					}
					var _this3 = _this.bounds;
					if(x2 > _this3.x + _this3.width) {
						_this.bounds.width = x2 - _this.bounds.x;
					}
				}
				if(_this.bounds.height == 0) {
					_this.bounds.y = y1;
					_this.bounds.height = y2 - y1;
				} else {
					if(y1 < _this.bounds.y) {
						_this.bounds.height += _this.bounds.y - y1;
						_this.bounds.y = y1;
					}
					var _this4 = _this.bounds;
					if(y2 > _this4.y + _this4.height) {
						_this.bounds.height = y2 - _this.bounds.y;
					}
				}
			}
		}
	}
	,drawQuad: function(x1,y1,x2,y2,x3,y3,x4,y4) {
		var _this = this.command;
		var color = this.color;
		var alpha = this.alpha;
		if(alpha > 0) {
			var onScreen;
			var onScreen1;
			var onScreen2;
			var _this1 = _this.visibleArea;
			if((x1 > x2 ? x2 > x3 ? x3 : x2 : x1 > x3 ? x3 : x1) <= _this1.x + _this1.width) {
				onScreen2 = (x1 < x2 ? x2 < x3 ? x3 : x2 : x1 < x3 ? x3 : x1) >= _this.visibleArea.x;
			} else {
				onScreen2 = false;
			}
			if(onScreen2) {
				var _this2 = _this.visibleArea;
				onScreen1 = (y1 > y2 ? y2 > y3 ? y3 : y2 : y1 > y3 ? y3 : y1) <= _this2.y + _this2.height;
			} else {
				onScreen1 = false;
			}
			if(onScreen1) {
				onScreen = (y1 < y2 ? y2 < y3 ? y3 : y2 : y1 < y3 ? y3 : y1) >= _this.visibleArea.y;
			} else {
				onScreen = false;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = x1;
				data1.ty1 = y1;
				data1.uvx1 = 0;
				data1.uvy1 = 0;
				data1.tx2 = x2;
				data1.ty2 = y2;
				data1.uvx2 = 0;
				data1.uvy2 = 0;
				data1.tx3 = x3;
				data1.ty3 = y3;
				data1.uvx3 = 0;
				data1.uvy3 = 0;
				data1.color = color;
				data1.alpha = alpha;
				if(_this.data == null) {
					_this.data = data1;
				} else {
					_this._lastData._next = data1;
				}
				_this._lastData = data1;
				++_this.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x11 = a > b ? b > c ? c : b : a > c ? c : a;
				var a1 = data1.tx1;
				var b1 = data1.tx2;
				var c1 = data1.tx3;
				var x21 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
				var a2 = data1.ty1;
				var b2 = data1.ty2;
				var c2 = data1.ty3;
				var y11 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
				var a3 = data1.ty1;
				var b3 = data1.ty2;
				var c3 = data1.ty3;
				var y21 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
				if(_this.bounds.width == 0) {
					_this.bounds.x = x11;
					_this.bounds.width = x21 - x11;
				} else {
					if(x11 < _this.bounds.x) {
						_this.bounds.width += _this.bounds.x - x11;
						_this.bounds.x = x11;
					}
					var _this3 = _this.bounds;
					if(x21 > _this3.x + _this3.width) {
						_this.bounds.width = x21 - _this.bounds.x;
					}
				}
				if(_this.bounds.height == 0) {
					_this.bounds.y = y11;
					_this.bounds.height = y21 - y11;
				} else {
					if(y11 < _this.bounds.y) {
						_this.bounds.height += _this.bounds.y - y11;
						_this.bounds.y = y11;
					}
					var _this4 = _this.bounds;
					if(y21 > _this4.y + _this4.height) {
						_this.bounds.height = y21 - _this.bounds.y;
					}
				}
			}
		}
		var _this5 = this.command;
		var color1 = this.color;
		var alpha1 = this.alpha;
		if(alpha1 > 0) {
			var onScreen3;
			var onScreen4;
			var onScreen5;
			var _this6 = _this5.visibleArea;
			if((x1 > x3 ? x3 > x4 ? x4 : x3 : x1 > x4 ? x4 : x1) <= _this6.x + _this6.width) {
				onScreen5 = (x1 < x3 ? x3 < x4 ? x4 : x3 : x1 < x4 ? x4 : x1) >= _this5.visibleArea.x;
			} else {
				onScreen5 = false;
			}
			if(onScreen5) {
				var _this7 = _this5.visibleArea;
				onScreen4 = (y1 > y3 ? y3 > y4 ? y4 : y3 : y1 > y4 ? y4 : y1) <= _this7.y + _this7.height;
			} else {
				onScreen4 = false;
			}
			if(onScreen4) {
				onScreen3 = (y1 < y3 ? y3 < y4 ? y4 : y3 : y1 < y4 ? y4 : y1) >= _this5.visibleArea.y;
			} else {
				onScreen3 = false;
			}
			if(onScreen3) {
				var data2;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data2._next = null;
				} else {
					data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data3 = data2;
				data3.tx1 = x1;
				data3.ty1 = y1;
				data3.uvx1 = 0;
				data3.uvy1 = 0;
				data3.tx2 = x3;
				data3.ty2 = y3;
				data3.uvx2 = 0;
				data3.uvy2 = 0;
				data3.tx3 = x4;
				data3.ty3 = y4;
				data3.uvx3 = 0;
				data3.uvy3 = 0;
				data3.color = color1;
				data3.alpha = alpha1;
				if(_this5.data == null) {
					_this5.data = data3;
				} else {
					_this5._lastData._next = data3;
				}
				_this5._lastData = data3;
				++_this5.triangleCount;
				var a4 = data3.tx1;
				var b4 = data3.tx2;
				var c4 = data3.tx3;
				var x12 = a4 > b4 ? b4 > c4 ? c4 : b4 : a4 > c4 ? c4 : a4;
				var a5 = data3.tx1;
				var b5 = data3.tx2;
				var c5 = data3.tx3;
				var x22 = a5 < b5 ? b5 < c5 ? c5 : b5 : a5 < c5 ? c5 : a5;
				var a6 = data3.ty1;
				var b6 = data3.ty2;
				var c6 = data3.ty3;
				var y12 = a6 > b6 ? b6 > c6 ? c6 : b6 : a6 > c6 ? c6 : a6;
				var a7 = data3.ty1;
				var b7 = data3.ty2;
				var c7 = data3.ty3;
				var y22 = a7 < b7 ? b7 < c7 ? c7 : b7 : a7 < c7 ? c7 : a7;
				if(_this5.bounds.width == 0) {
					_this5.bounds.x = x12;
					_this5.bounds.width = x22 - x12;
				} else {
					if(x12 < _this5.bounds.x) {
						_this5.bounds.width += _this5.bounds.x - x12;
						_this5.bounds.x = x12;
					}
					var _this8 = _this5.bounds;
					if(x22 > _this8.x + _this8.width) {
						_this5.bounds.width = x22 - _this5.bounds.x;
					}
				}
				if(_this5.bounds.height == 0) {
					_this5.bounds.y = y12;
					_this5.bounds.height = y22 - y12;
				} else {
					if(y12 < _this5.bounds.y) {
						_this5.bounds.height += _this5.bounds.y - y12;
						_this5.bounds.y = y12;
					}
					var _this9 = _this5.bounds;
					if(y22 > _this9.y + _this9.height) {
						_this5.bounds.height = y22 - _this5.bounds.y;
					}
				}
			}
		}
	}
	,command: null
	,__class__: haxepunk_utils_DrawContext
};
var haxepunk_Scene = function() {
	this.onInputReleased = new haxepunk_Signals();
	this.onInputPressed = new haxepunk_Signals();
	this.onResize = new haxepunk_Signal0();
	this.postRender = new haxepunk_Signal0();
	this.preRender = new haxepunk_Signal0();
	this.postUpdate = new haxepunk_Signal0();
	this.preUpdate = new haxepunk_Signal0();
	this.height = null;
	this._height = null;
	this.width = null;
	this._width = null;
	this.y = 0;
	this.x = 0;
	this.trackDrawCalls = true;
	this.bgAlpha = 1;
	this.bgColor = null;
	this.visible = true;
	haxepunk_Tweener.call(this);
	this.camera = new haxepunk_Camera();
	this.assetCache = new haxepunk_assets_AssetCache();
	this.batch = new haxepunk_graphics_hardware_DrawCommandBatch();
	this._layerList = [];
	this._add = [];
	this._remove = [];
	this._recycle = [];
	this._update = new List();
	this._layerDisplay = new haxe_ds_IntMap();
	this._layers = new haxe_ds_IntMap();
	this._types = new haxe_ds_StringMap();
	this._classCount = new haxe_ds_StringMap();
	this._recycled = new haxe_ds_StringMap();
	this._entityNames = new haxe_ds_StringMap();
};
$hxClasses["haxepunk.Scene"] = haxepunk_Scene;
haxepunk_Scene.__name__ = ["haxepunk","Scene"];
haxepunk_Scene.squareRects = function(x1,y1,w1,h1,x2,y2,w2,h2) {
	if(x1 < x2 + w2 && x2 < x1 + w1) {
		if(y1 < y2 + h2 && y2 < y1 + h1) {
			return 0;
		}
		if(y1 > y2) {
			return (y1 - (y2 + h2)) * (y1 - (y2 + h2));
		}
		return (y2 - (y1 + h1)) * (y2 - (y1 + h1));
	}
	if(y1 < y2 + h2 && y2 < y1 + h1) {
		if(x1 > x2) {
			return (x1 - (x2 + w2)) * (x1 - (x2 + w2));
		}
		return (x2 - (x1 + w1)) * (x2 - (x1 + w1));
	}
	if(x1 > x2) {
		if(y1 > y2) {
			var x11 = x2 + w2;
			var y11 = y2 + h2;
			return (x1 - x11) * (x1 - x11) + (y1 - y11) * (y1 - y11);
		}
		var x12 = x2 + w2;
		var y21 = y1 + h1;
		return (x1 - x12) * (x1 - x12) + (y21 - y2) * (y21 - y2);
	}
	if(y1 > y2) {
		var y12 = y2 + h2;
		var x21 = x1 + w1;
		return (x21 - x2) * (x21 - x2) + (y1 - y12) * (y1 - y12);
	}
	var x22 = x1 + w1;
	var y22 = y1 + h1;
	return (x22 - x2) * (x22 - x2) + (y22 - y2) * (y22 - y2);
};
haxepunk_Scene.squarePointRect = function(px,py,rx,ry,rw,rh) {
	if(px >= rx && px <= rx + rw) {
		if(py >= ry && py <= ry + rh) {
			return 0;
		}
		if(py > ry) {
			return (py - (ry + rh)) * (py - (ry + rh));
		}
		return (ry - py) * (ry - py);
	}
	if(py >= ry && py <= ry + rh) {
		if(px > rx) {
			return (px - (rx + rw)) * (px - (rx + rw));
		}
		return (rx - px) * (rx - px);
	}
	if(px > rx) {
		if(py > ry) {
			var x1 = rx + rw;
			var y1 = ry + rh;
			return (px - x1) * (px - x1) + (py - y1) * (py - y1);
		}
		var x11 = rx + rw;
		return (px - x11) * (px - x11) + (py - ry) * (py - ry);
	}
	if(py > ry) {
		var y11 = ry + rh;
		return (px - rx) * (px - rx) + (py - y11) * (py - y11);
	}
	return (px - rx) * (px - rx) + (py - ry) * (py - ry);
};
haxepunk_Scene.__super__ = haxepunk_Tweener;
haxepunk_Scene.prototype = $extend(haxepunk_Tweener.prototype,{
	visible: null
	,bgColor: null
	,bgAlpha: null
	,trackDrawCalls: null
	,camera: null
	,assetCache: null
	,x: null
	,y: null
	,_width: null
	,width: null
	,get_width: function() {
		if(this._width == null) {
			return haxepunk_HXP.screen.width - this.x;
		} else {
			return this._width;
		}
	}
	,set_width: function(v) {
		return this._width = v;
	}
	,_height: null
	,height: null
	,get_height: function() {
		if(this._height == null) {
			return haxepunk_HXP.screen.height - this.y;
		} else {
			return this._height;
		}
	}
	,set_height: function(v) {
		return this._height = v;
	}
	,batch: null
	,shaders: null
	,preUpdate: null
	,postUpdate: null
	,preRender: null
	,postRender: null
	,onResize: null
	,onInputPressed: null
	,onInputReleased: null
	,begin: function() {
	}
	,end: function() {
	}
	,_resize: function() {
		var _g_head = this._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			e.resized();
		}
		var _g = 0;
		var _g1 = this.onResize.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
	}
	,focusGained: function() {
	}
	,focusLost: function() {
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.preUpdate.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		this.camera.update();
		var _g_head = this._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(e.get_active()) {
				if(e.get_hasTween()) {
					e.updateTweens(haxepunk_HXP.elapsed);
				}
				if(e.get_active()) {
					if(e.shouldUpdate()) {
						var _g2 = 0;
						var _g11 = e.preUpdate.callbacks;
						while(_g2 < _g11.length) {
							var callback1 = _g11[_g2];
							++_g2;
							callback1();
						}
						e.update();
						var _g3 = 0;
						var _g12 = e.postUpdate.callbacks;
						while(_g3 < _g12.length) {
							var callback2 = _g12[_g3];
							++_g3;
							callback2();
						}
					}
				}
			}
			if(e.graphic != null && e.graphic.active) {
				e.graphic.update();
			}
		}
		this.camera.update();
		if(haxepunk_HXP.cursor != null && haxepunk_HXP.cursor.get_active()) {
			haxepunk_HXP.cursor.update();
		}
		var _g4 = 0;
		var _g13 = this.postUpdate.callbacks;
		while(_g4 < _g13.length) {
			var callback3 = _g13[_g4];
			++_g4;
			callback3();
		}
	}
	,showLayer: function(layer,show) {
		if(show == null) {
			show = true;
		}
		this._layerDisplay.h[layer] = show;
	}
	,layerVisible: function(layer) {
		if(!(!this._layerDisplay.h.hasOwnProperty(layer))) {
			return this._layerDisplay.h[layer];
		} else {
			return true;
		}
	}
	,layerSort: function(a,b) {
		return b - a;
	}
	,render: function() {
		var batch = this.batch;
		haxepunk_graphics_atlas_AtlasData._batch = batch;
		batch.head.recycle();
		batch.last = null;
		this.batch.visibleArea.setTo(0,0,this._width == null ? haxepunk_HXP.screen.width - this.x : this._width,this._height == null ? haxepunk_HXP.screen.height - this.y : this._height);
		if(this.bgAlpha > 0) {
			var screen = haxepunk_HXP.screen;
			haxepunk_Scene.drawContext.scene = this;
			haxepunk_Scene.drawContext.blend = 1;
			var _this = haxepunk_Scene.drawContext;
			_this.color = this.bgColor == null ? screen.color : this.bgColor;
			_this.alpha = this.bgAlpha;
			haxepunk_Scene.drawContext.rectFilled(0,0,this._width == null ? haxepunk_HXP.screen.width - this.x : this._width,this._height == null ? haxepunk_HXP.screen.height - this.y : this._height);
		}
		var _g = 0;
		var _g1 = this.preRender.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		var _g2 = 0;
		var _g11 = this._layerList;
		while(_g2 < _g11.length) {
			var layer = _g11[_g2];
			++_g2;
			if(!(!this._layerDisplay.exists(layer) || this._layerDisplay.get(layer))) {
				continue;
			}
			var _g2_head = this._layers.h[layer].h;
			while(_g2_head != null) {
				var val = _g2_head.item;
				_g2_head = _g2_head.next;
				var e = val;
				if(e.get_visible()) {
					e.render(e.camera == null ? this.camera : e.camera);
				}
			}
		}
		if(haxepunk_HXP.cursor != null && haxepunk_HXP.cursor.get_visible() && this == haxepunk_HXP.engine._scene) {
			haxepunk_HXP.cursor.render(this.camera);
		}
		var _g3 = 0;
		var _g12 = this.postRender.callbacks;
		while(_g3 < _g12.length) {
			var callback1 = _g12[_g3];
			++_g3;
			callback1();
		}
	}
	,mouseX: null
	,get_mouseX: function() {
		var x = haxepunk_HXP.app.getMouseX() - haxepunk_HXP.screen.x - this.x;
		var _this = this.camera;
		return x / (_this.scale * _this.scaleX * haxepunk_HXP.screen.fullScaleX) + this.camera.x | 0;
	}
	,mouseY: null
	,get_mouseY: function() {
		var x = haxepunk_HXP.app.getMouseY() - haxepunk_HXP.screen.y - this.y;
		var _this = this.camera;
		return x / (_this.scale * _this.scaleY * haxepunk_HXP.screen.fullScaleY) + this.camera.y | 0;
	}
	,add: function(e) {
		this._add[this._add.length] = e;
		return e;
	}
	,remove: function(e) {
		this._remove[this._remove.length] = e;
		return e;
	}
	,removeAll: function() {
		var _g_head = this._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			this._remove[this._remove.length] = e;
		}
	}
	,addList: function(list) {
		var e = $iterator(list)();
		while(e.hasNext()) {
			var e1 = e.next();
			this.add(e1);
		}
	}
	,removeList: function(list) {
		var e = $iterator(list)();
		while(e.hasNext()) {
			var e1 = e.next();
			this.remove(e1);
		}
	}
	,addGraphic: function(graphic,layer,x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		var e = new haxepunk_Entity(x,y,graphic);
		e.set_layer(layer);
		e.set_active(false);
		return this.add(e);
	}
	,addMask: function(mask,type,x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var e = new haxepunk_Entity(x,y,null,mask);
		if(type != "") {
			e.set_type(type);
		}
		e.set_active(e.set_visible(false));
		return this.add(e);
	}
	,create: function(classType,addToScene,constructorsArgs) {
		if(addToScene == null) {
			addToScene = true;
		}
		var className = Type.getClassName(classType);
		var _this = this._recycled;
		var e = __map_reserved[className] != null ? _this.getReserved(className) : _this.h[className];
		if(e != null) {
			var value = e._recycleNext;
			var _this1 = this._recycled;
			if(__map_reserved[className] != null) {
				_this1.setReserved(className,value);
			} else {
				_this1.h[className] = value;
			}
			e._recycleNext = null;
		} else if(constructorsArgs != null) {
			e = Type.createInstance(classType,constructorsArgs);
		} else {
			e = Type.createInstance(classType,[]);
		}
		return addToScene ? this.add(e) : e;
	}
	,recycle: function(e) {
		this._recycle[this._recycle.length] = e;
		return this.remove(e);
	}
	,clearRecycled: function(classType) {
		var className = Type.getClassName(classType);
		var _this = this._recycled;
		var e = __map_reserved[className] != null ? _this.getReserved(className) : _this.h[className];
		var n;
		while(e != null) {
			n = e._recycleNext;
			e._recycleNext = null;
			e = n;
		}
		this._recycled.remove(className);
	}
	,clearRecycledAll: function() {
		var e;
		var _this = this._recycled;
		var e1 = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(e1.hasNext()) {
			var e2 = e1.next();
			this.clearRecycled(e2 == null ? null : js_Boot.getClass(e2));
		}
	}
	,bringToFront: function(e) {
		if(e._scene != this) {
			return false;
		}
		var list = this._layers.h[e._layer];
		list.remove(e);
		list.push(e);
		return true;
	}
	,sendToBack: function(e) {
		if(e._scene != this) {
			return false;
		}
		var list = this._layers.h[e._layer];
		list.remove(e);
		list.add(e);
		return true;
	}
	,bringForward: function(e) {
		if(e._scene != this) {
			return false;
		}
		return true;
	}
	,sendBackward: function(e) {
		if(e._scene != this) {
			return false;
		}
		return true;
	}
	,isAtFront: function(e) {
		return e == this._layers.h[e._layer].first();
	}
	,isAtBack: function(e) {
		return e == this._layers.h[e._layer].last();
	}
	,collideRect: function(type,rX,rY,rWidth,rHeight) {
		var _this = this._types;
		if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
			var _g_head;
			var _this1 = this._types;
			_g_head = (__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type]).h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e = val;
				if(e.get_collidable() && e.collideRect(e.get_x(),e.get_y(),rX,rY,rWidth,rHeight)) {
					return e;
				}
			}
		}
		return null;
	}
	,collidePoint: function(type,pX,pY) {
		var result = null;
		var _this = this._types;
		if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
			var _g_head;
			var _this1 = this._types;
			_g_head = (__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type]).h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e = val;
				if(e.get_collidable() && e.collidePoint(e.get_x(),e.get_y(),pX,pY)) {
					if(result == null) {
						result = e;
					} else if(e._layer < result._layer) {
						result = e;
					}
				}
			}
		}
		return result;
	}
	,collideLine: function(type,fromX,fromY,toX,toY,precision,p) {
		if(precision == null) {
			precision = 1;
		}
		if(precision < 1) {
			precision = 1;
		}
		if(Math.sqrt((toX - fromX) * (toX - fromX) + (toY - fromY) * (toY - fromY)) < precision) {
			if(p != null) {
				if(fromX == toX && fromY == toY) {
					p.x = toX;
					p.y = toY;
					return this.collidePoint(type,toX,toY);
				}
				return this.collideLine(type,fromX,fromY,toX,toY,1,p);
			} else {
				return this.collidePoint(type,fromX,toY);
			}
		}
		var xDelta = Math.abs(toX - fromX) | 0;
		var yDelta = Math.abs(toY - fromY) | 0;
		var xSign = toX > fromX ? precision : -precision;
		var ySign = toY > fromY ? precision : -precision;
		var x = fromX;
		var y = fromY;
		var e;
		if(xDelta > yDelta) {
			ySign *= yDelta / xDelta;
			if(xSign > 0) {
				while(x < toX) {
					e = this.collidePoint(type,x,y);
					if(e != null) {
						if(p == null) {
							return e;
						}
						if(precision < 2) {
							p.x = x - xSign;
							p.y = y - ySign;
							return e;
						}
						return this.collideLine(type,x - xSign | 0,y - ySign | 0,toX,toY,1,p);
					}
					x += xSign;
					y += ySign;
				}
			} else {
				while(x > toX) {
					e = this.collidePoint(type,x,y);
					if(e != null) {
						if(p == null) {
							return e;
						}
						if(precision < 2) {
							p.x = x - xSign;
							p.y = y - ySign;
							return e;
						}
						return this.collideLine(type,x - xSign | 0,y - ySign | 0,toX,toY,1,p);
					}
					x += xSign;
					y += ySign;
				}
			}
		} else {
			xSign *= xDelta / yDelta;
			if(ySign > 0) {
				while(y < toY) {
					e = this.collidePoint(type,x,y);
					if(e != null) {
						if(p == null) {
							return e;
						}
						if(precision < 2) {
							p.x = x - xSign;
							p.y = y - ySign;
							return e;
						}
						return this.collideLine(type,x - xSign | 0,y - ySign | 0,toX,toY,1,p);
					}
					x += xSign;
					y += ySign;
				}
			} else {
				while(y > toY) {
					e = this.collidePoint(type,x,y);
					if(e != null) {
						if(p == null) {
							return e;
						}
						if(precision < 2) {
							p.x = x - xSign;
							p.y = y - ySign;
							return e;
						}
						return this.collideLine(type,x - xSign | 0,y - ySign | 0,toX,toY,1,p);
					}
					x += xSign;
					y += ySign;
				}
			}
		}
		if(precision > 1) {
			if(p == null) {
				return this.collidePoint(type,toX,toY);
			}
			if(this.collidePoint(type,toX,toY) != null) {
				return this.collideLine(type,x - xSign | 0,y - ySign | 0,toX,toY,1,p);
			}
		}
		if(p != null) {
			p.x = toX;
			p.y = toY;
		}
		return null;
	}
	,collideRectInto: function(type,rX,rY,rWidth,rHeight,into) {
		var n = into.length;
		var _this = this._types;
		if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
			var _g_head;
			var _this1 = this._types;
			_g_head = (__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type]).h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e = val;
				if(e.get_collidable() && e.collideRect(e.get_x(),e.get_y(),rX,rY,rWidth,rHeight)) {
					into[n++] = e;
				}
			}
		}
	}
	,collideCircleInto: function(type,circleX,circleY,radius,into) {
		var _this = this._types;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			return;
		}
		var n = into.length;
		radius *= radius;
		var _g_head;
		var _this1 = this._types;
		_g_head = (__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type]).h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			var x2 = e.get_x();
			var y2 = e.get_y();
			if((x2 - circleX) * (x2 - circleX) + (y2 - circleY) * (y2 - circleY) < radius) {
				into[n++] = e;
			}
		}
	}
	,collidePointInto: function(type,pX,pY,into,cameraAdjust) {
		if(cameraAdjust == null) {
			cameraAdjust = false;
		}
		var _this = this._types;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			return;
		}
		var n = into.length;
		var _g_head;
		var _this1 = this._types;
		_g_head = (__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type]).h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(e.get_collidable()) {
				if(cameraAdjust && e.camera != null) {
					var _this2 = this.camera;
					var _this3 = e.camera;
					var px = (pX + e.camera.x - this.camera.x) * (_this2.scale * _this2.scaleX) / (_this3.scale * _this3.scaleX);
					var _this4 = this.camera;
					var _this5 = e.camera;
					var py = (pY + e.camera.y - this.camera.y) * (_this4.scale * _this4.scaleY) / (_this5.scale * _this5.scaleY);
					if(e.collidePoint(e.get_x(),e.get_y(),px,py)) {
						into[n++] = e;
					}
				} else if(e.collidePoint(e.get_x(),e.get_y(),pX,pY)) {
					into[n++] = e;
				}
			}
		}
	}
	,nearestToRect: function(type,x,y,width,height) {
		var _this = this._types;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			return null;
		}
		var nearDist = 179 * Math.pow(10,306);
		var near = null;
		var dist;
		var _g_head;
		var _this1 = this._types;
		_g_head = (__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type]).h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			dist = haxepunk_Scene.squareRects(x,y,width,height,e.get_x() - e.originX,e.get_y() - e.originY,e.get_width(),e.get_height());
			if(dist < nearDist) {
				nearDist = dist;
				near = e;
			}
		}
		return near;
	}
	,nearestToEntity: function(type,e,useHitboxes) {
		if(useHitboxes == null) {
			useHitboxes = false;
		}
		var _this = this._types;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			return null;
		}
		if(useHitboxes) {
			return this.nearestToRect(type,e.get_x() - e.originX,e.get_y() - e.originY,e.get_width(),e.get_height());
		}
		var nearDist = 179 * Math.pow(10,306);
		var near = null;
		var dist;
		var x = e.get_x() - e.originX;
		var y = e.get_y() - e.originY;
		var _g_head;
		var _this1 = this._types;
		_g_head = (__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type]).h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var n = val;
			dist = (x - n.get_x()) * (x - n.get_x()) + (y - n.get_y()) * (y - n.get_y());
			if(dist < nearDist) {
				nearDist = dist;
				near = n;
			}
		}
		return near;
	}
	,nearestToClass: function(type,e,classType,useHitboxes) {
		if(useHitboxes == null) {
			useHitboxes = false;
		}
		var _this = this._types;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			return null;
		}
		if(useHitboxes) {
			return this.nearestToRect(type,e.get_x() - e.originX,e.get_y() - e.originY,e.get_width(),e.get_height());
		}
		var nearDist = 179 * Math.pow(10,306);
		var near = null;
		var dist;
		var x = e.get_x() - e.originX;
		var y = e.get_y() - e.originY;
		var _g_head;
		var _this1 = this._types;
		_g_head = (__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type]).h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var n = val;
			dist = (x - n.get_x()) * (x - n.get_x()) + (y - n.get_y()) * (y - n.get_y());
			if(dist < nearDist && js_Boot.__instanceof(e,classType)) {
				nearDist = dist;
				near = n;
			}
		}
		return near;
	}
	,nearestToPoint: function(type,x,y,useHitboxes) {
		if(useHitboxes == null) {
			useHitboxes = false;
		}
		var _this = this._types;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			return null;
		}
		var nearDist = 179 * Math.pow(10,306);
		var near = null;
		var dist;
		if(useHitboxes) {
			var _g_head;
			var _this1 = this._types;
			_g_head = (__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type]).h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var n = val;
				dist = haxepunk_Scene.squarePointRect(x,y,n.get_x() - n.originX,n.get_y() - n.originY,n.get_width(),n.get_height());
				if(dist < nearDist) {
					nearDist = dist;
					near = n;
				}
			}
		} else {
			var _g_head1;
			var _this2 = this._types;
			_g_head1 = (__map_reserved[type] != null ? _this2.getReserved(type) : _this2.h[type]).h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var n1 = val1;
				dist = (x - n1.get_x()) * (x - n1.get_x()) + (y - n1.get_y()) * (y - n1.get_y());
				if(dist < nearDist) {
					nearDist = dist;
					near = n1;
				}
			}
		}
		return near;
	}
	,get_count: function() {
		return this._update.length;
	}
	,typeCount: function(type) {
		var _this = this._types;
		if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
			var _this1 = this._types;
			return (__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type]).length;
		} else {
			return 0;
		}
	}
	,classCount: function(c) {
		var _this = this._classCount;
		if(__map_reserved[c] != null ? _this.existsReserved(c) : _this.h.hasOwnProperty(c)) {
			var _this1 = this._classCount;
			if(__map_reserved[c] != null) {
				return _this1.getReserved(c);
			} else {
				return _this1.h[c];
			}
		} else {
			return 0;
		}
	}
	,layerCount: function(layer) {
		if(this._layers.h.hasOwnProperty(layer)) {
			return this._layers.h[layer].length;
		} else {
			return 0;
		}
	}
	,first: null
	,get_first: function() {
		return this._update.first();
	}
	,layers: null
	,get_layers: function() {
		return this._layerList.length;
	}
	,entitiesForType: function(type) {
		var _this = this._types;
		if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
			var _this1 = this._types;
			if(__map_reserved[type] != null) {
				return _this1.getReserved(type);
			} else {
				return _this1.h[type];
			}
		} else {
			return null;
		}
	}
	,classFirst: function(c) {
		var _g_head = this._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(js_Boot.__instanceof(e,c)) {
				return e;
			}
		}
		return null;
	}
	,layerFirst: function(layer) {
		if(this._layers.h.hasOwnProperty(layer)) {
			return this._layers.h[layer].first();
		} else {
			return null;
		}
	}
	,layerLast: function(layer) {
		if(this._layers.h.hasOwnProperty(layer)) {
			return this._layers.h[layer].last();
		} else {
			return null;
		}
	}
	,farthest: null
	,get_farthest: function() {
		if(this._layerList.length == 0) {
			return null;
		}
		return this._layers.h[this._layerList[this._layerList.length - 1]].last();
	}
	,nearest: null
	,get_nearest: function() {
		if(this._layerList.length == 0) {
			return null;
		}
		return this._layers.h[this._layerList[0]].first();
	}
	,layerFarthest: null
	,get_layerFarthest: function() {
		if(this._layerList.length == 0) {
			return 0;
		}
		return this._layerList[this._layerList.length - 1];
	}
	,layerNearest: null
	,get_layerNearest: function() {
		if(this._layerList.length == 0) {
			return 0;
		}
		return this._layerList[0];
	}
	,uniqueTypes: null
	,get_uniqueTypes: function() {
		var i = 0;
		var _this = this._types;
		var type = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(type.hasNext()) {
			var type1 = type.next();
			++i;
		}
		return i;
	}
	,getType: function(type,into) {
		var _this = this._types;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			return;
		}
		var n = into.length;
		var _g_head;
		var _this1 = this._types;
		_g_head = (__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type]).h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			into[n++] = e;
		}
	}
	,getClass: function(c,into) {
		var n = into.length;
		var _g_head = this._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(js_Boot.__instanceof(e,c)) {
				into[n++] = e;
			}
		}
	}
	,getLayer: function(layer,into) {
		var n = into.length;
		var _g_head = this._layers.h[layer].h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			into[n++] = e;
		}
	}
	,getAll: function(into) {
		var n = into.length;
		var _g_head = this._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			into[n++] = e;
		}
	}
	,getInstance: function(name) {
		var _this = this._entityNames;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,updateLists: function(shouldAdd) {
		if(shouldAdd == null) {
			shouldAdd = true;
		}
		var e;
		if(haxepunk_HXP.cursor != null) {
			haxepunk_HXP.cursor._scene = this;
		}
		if(this._remove.length > 0) {
			var _g = 0;
			var _g1 = this._remove;
			while(_g < _g1.length) {
				var e1 = _g1[_g];
				++_g;
				if(e1._scene == null) {
					var idx = this._add.indexOf(e1);
					if(idx >= 0) {
						this._add.splice(idx,1);
					}
					continue;
				}
				if(e1._scene != this) {
					continue;
				}
				e1.removed();
				e1._scene = null;
				this.removeUpdate(e1);
				this.removeRender(e1);
				if(e1._type != "") {
					this.removeType(e1);
				}
				if(e1._name != "") {
					this._entityNames.remove(e1._name);
				}
				if(e1.autoClear && e1.get_hasTween()) {
					e1.clearTweens();
				}
			}
			this._remove.length = 0;
		}
		if(shouldAdd && this._add.length > 0) {
			var _g2 = 0;
			var _g11 = this._add;
			while(_g2 < _g11.length) {
				var e2 = _g11[_g2];
				++_g2;
				if(e2._scene != null) {
					continue;
				}
				e2._scene = this;
				this.addUpdate(e2);
				this.addRender(e2);
				if(e2._type != "") {
					this.addType(e2);
				}
				if(e2._name != "") {
					this._entityNames.set(e2._name,e2);
				}
				e2.added();
			}
			this._add.length = 0;
		}
		if(this._recycle.length > 0) {
			var _g3 = 0;
			var _g12 = this._recycle;
			while(_g3 < _g12.length) {
				var e3 = _g12[_g3];
				++_g3;
				if(e3._scene != null || e3._recycleNext != null) {
					continue;
				}
				var key = e3._class;
				var _this = this._recycled;
				e3._recycleNext = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				var key1 = e3._class;
				var _this1 = this._recycled;
				if(__map_reserved[key1] != null) {
					_this1.setReserved(key1,e3);
				} else {
					_this1.h[key1] = e3;
				}
			}
			this._recycle.length = 0;
		}
	}
	,getTexture: function(id) {
		return this.assetCache.getTexture(id);
	}
	,addUpdate: function(e) {
		this._update.add(e);
		var key = e._class;
		var _this = this._classCount;
		if((__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]) != 0) {
			var key1 = e._class;
			var _this1 = this._classCount;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,0);
			} else {
				_this1.h[key1] = 0;
			}
		}
		var this1 = this._classCount;
		var key2 = e._class;
		var key3 = e._class;
		var _this2 = this._classCount;
		var value = (__map_reserved[key3] != null ? _this2.getReserved(key3) : _this2.h[key3]) + 1;
		var _this3 = this1;
		if(__map_reserved[key2] != null) {
			_this3.setReserved(key2,value);
		} else {
			_this3.h[key2] = value;
		}
	}
	,removeUpdate: function(e) {
		this._update.remove(e);
		var this1 = this._classCount;
		var key = e._class;
		var key1 = e._class;
		var _this = this._classCount;
		var value = (__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]) - 1;
		var _this1 = this1;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,value);
		} else {
			_this1.h[key] = value;
		}
	}
	,addRender: function(e) {
		var list;
		if(this._layers.h.hasOwnProperty(e._layer)) {
			list = this._layers.h[e._layer];
		} else {
			if(haxepunk_Scene._pooledEntityLists.length > 0) {
				list = haxepunk_Scene._pooledEntityLists.pop();
			} else {
				list = new List();
			}
			this._layers.h[e._layer] = list;
			if(this._layerList.length == 0) {
				this._layerList[0] = e._layer;
			} else {
				haxepunk_HXP.insertSortedKey(this._layerList,e._layer,$bind(this,this.layerSort));
			}
		}
		list.add(e);
	}
	,removeRender: function(e) {
		var list = this._layers.h[e._layer];
		list.remove(e);
		if(list.length == 0) {
			HxOverrides.remove(this._layerList,e._layer);
			this._layers.remove(e._layer);
			haxepunk_Scene._pooledEntityLists.push(list);
		}
	}
	,addType: function(e) {
		var list;
		var key = e._type;
		var _this = this._types;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = e._type;
			var _this1 = this._types;
			if(__map_reserved[key1] != null) {
				list = _this1.getReserved(key1);
			} else {
				list = _this1.h[key1];
			}
		} else {
			if(haxepunk_Scene._pooledEntityLists.length > 0) {
				list = haxepunk_Scene._pooledEntityLists.pop();
			} else {
				list = new List();
			}
			var key2 = e._type;
			var _this2 = this._types;
			if(__map_reserved[key2] != null) {
				_this2.setReserved(key2,list);
			} else {
				_this2.h[key2] = list;
			}
		}
		list.push(e);
	}
	,removeType: function(e) {
		var key = e._type;
		var _this = this._types;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			return;
		}
		var key1 = e._type;
		var _this1 = this._types;
		var list = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
		list.remove(e);
		if(list.length == 0) {
			this._types.remove(e._type);
			haxepunk_Scene._pooledEntityLists.push(list);
		}
	}
	,registerName: function(e) {
		var key = e._name;
		var _this = this._entityNames;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,e);
		} else {
			_this.h[key] = e;
		}
	}
	,unregisterName: function(e) {
		this._entityNames.remove(e._name);
	}
	,_add: null
	,_remove: null
	,_recycle: null
	,_update: null
	,_layerList: null
	,_layerDisplay: null
	,_layers: null
	,_classCount: null
	,_types: null
	,_recycled: null
	,_entityNames: null
	,__class__: haxepunk_Scene
	,__properties__: $extend(haxepunk_Tweener.prototype.__properties__,{get_uniqueTypes:"get_uniqueTypes",get_layerNearest:"get_layerNearest",get_layerFarthest:"get_layerFarthest",get_nearest:"get_nearest",get_farthest:"get_farthest",get_layers:"get_layers",get_first:"get_first",get_count:"get_count",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"})
});
var MainScene = function() {
	haxepunk_Scene.call(this);
};
$hxClasses["MainScene"] = MainScene;
MainScene.__name__ = ["MainScene"];
MainScene.__super__ = haxepunk_Scene;
MainScene.prototype = $extend(haxepunk_Scene.prototype,{
	_tileset: null
	,begin: function() {
		this.createGraphics();
		this.createMap();
	}
	,createGraphics: function() {
		var data = null;
		if(haxepunk_graphics_atlas_AtlasData._dataPool.exists("graphics/wall.png")) {
			data = haxepunk_graphics_atlas_AtlasData._dataPool.get("graphics/wall.png");
		} else {
			var texture = haxepunk_assets_AssetCache.global.getTexture("graphics/wall.png");
			if(texture != null) {
				data = new haxepunk_graphics_atlas_AtlasData(texture,"graphics/wall.png");
			}
		}
		var this1 = data;
		this._tileset = new haxepunk_graphics_atlas_TileAtlas(this1,16,16);
	}
	,createMap: function() {
		var this1 = new haxe_xml_Fast(Xml.parse(haxepunk_backend_flash_AssetLoader.getText("maps/example.tmx")));
		var this2 = new haxepunk_tmx_TmxMap(this1);
		var e = new haxepunk_tmx_TmxEntity(this2);
		this.add(e);
		e.loadGraphic(this._tileset,["background","foreground"]);
	}
	,__class__: MainScene
});
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = ["ManifestResources"];
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	var rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) {
		rootPath = Reflect.field(config,"rootPath");
	}
	if(rootPath == null) {
		rootPath = "";
	}
	lime_utils_Assets.defaultRootPath = rootPath;
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf);
	var data;
	var manifest;
	var library;
	data = "{\"name\":null,\"assets\":\"aoy4:pathy35:graphics%2Fpreloader%2Fhaxepunk.pngy4:sizei21044y4:typey5:IMAGEy2:idR1y7:preloadtgoR0y36:graphics%2Fdebug%2Fconsole_pause.pngR2i213R3R4R5R7R6tgoR0y35:graphics%2Fdebug%2Fconsole_play.pngR2i242R3R4R5R8R6tgoR0y43:graphics%2Fdebug%2Fconsole_drawcall_add.pngR2i183R3R4R5R9R6tgoR0y37:graphics%2Fdebug%2Fconsole_hidden.pngR2i1216R3R4R5R10R6tgoR0y43:graphics%2Fdebug%2Fconsole_drawcall_all.pngR2i189R3R4R5R11R6tgoR0y35:graphics%2Fdebug%2Fconsole_logo.pngR2i21764R3R4R5R12R6tgoR0y37:graphics%2Fdebug%2Fconsole_output.pngR2i186R3R4R5R13R6tgoR0y35:graphics%2Fdebug%2Fconsole_step.pngR2i251R3R4R5R14R6tgoR0y36:graphics%2Fdebug%2Fconsole_debug.pngR2i242R3R4R5R15R6tgoR0y38:graphics%2Fdebug%2Fconsole_visible.pngR2i1275R3R4R5R16R6tgoR0y29:graphics%2Fdebug%2Fbutton.pngR2i248R3R4R5R17R6tgoR2i58088R3y4:FONTy9:classNamey27:__ASSET__font_monofonto_ttfR5y20:font%2Fmonofonto.ttfR6tgoR0y20:font%2Fmonofonto.fntR2i11598R3y4:TEXTR5R22R6tgoR0y20:font%2Fmonofonto.pngR2i19822R3R4R5R24R6tgoR0y19:graphics%2Fwall.pngR2i2520R3R4R5R25R6tgoR0y18:maps%2Fexample.tmxR2i659R3R23R5R26R6tgh\",\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	manifest = lime_utils_AssetManifest.parse(data,rootPath);
	library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(this.__fontID != null) {
		if(lime_utils_Assets.isLocal(this.__fontID)) {
			this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
		}
	} else if(this.__fontPath != null) {
		this.__fromFile(this.__fontPath);
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes));
};
lime_text_Font.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$text_$Font();
	return request.load(path).then(function(font) {
		if(font != null) {
			return lime_app_Future.withValue(font);
		} else {
			return lime_app_Future.withError("");
		}
	});
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontID: null
	,__fontPath: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) {
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		}
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var ua = window.navigator.userAgent.toLowerCase();
		var isSafari = ua.indexOf(" safari/") >= 0 && ua.indexOf(" chrome/") < 0;
		if(!isSafari && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) {
			window.document.fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_1) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "Font.hx", lineNumber : 482, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				if(node1.offsetWidth == width1) {
					loaded = node2.offsetWidth != width2;
				} else {
					loaded = true;
				}
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "Font.hx", lineNumber : 518, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__setSize: function(size) {
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime_text_Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var _$_$ASSET_$_$font_$monofonto_$ttf = $hx_exports["__ASSET__font_monofonto_ttf"] = function() {
	this.name = "Monofonto-Regular";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__font_monofonto_ttf"] = _$_$ASSET_$_$font_$monofonto_$ttf;
_$_$ASSET_$_$font_$monofonto_$ttf.__name__ = ["__ASSET__font_monofonto_ttf"];
_$_$ASSET_$_$font_$monofonto_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$font_$monofonto_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$font_$monofonto_$ttf
});
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.registerFont = function(font) {
	var instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
		var k = instance.name;
		var _this = openfl_text_Font.__fontByName;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,instance);
		} else {
			_this.h[k] = instance;
		}
	}
};
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,__initialized: null
	,__initialize: function() {
		return this.__initialized;
	}
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: $extend(lime_text_Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
var _$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf = $hx_exports["__ASSET__OPENFL__font_monofonto_ttf"] = function() {
	var font = new _$_$ASSET_$_$font_$monofonto_$ttf();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__font_monofonto_ttf"] = _$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf;
_$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf.__name__ = ["__ASSET__OPENFL__font_monofonto_ttf"];
_$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf
});
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s += c;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) {
		return 4294967296.0 + $int;
	} else {
		return $int + 0.0;
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var format_png_Color = $hxClasses["format.png.Color"] = { __ename__ : ["format","png","Color"], __constructs__ : ["ColGrey","ColTrue","ColIndexed"] };
format_png_Color.ColGrey = function(alpha) { var $x = ["ColGrey",0,alpha]; $x.__enum__ = format_png_Color; $x.toString = $estr; return $x; };
format_png_Color.ColTrue = function(alpha) { var $x = ["ColTrue",1,alpha]; $x.__enum__ = format_png_Color; $x.toString = $estr; return $x; };
format_png_Color.ColIndexed = ["ColIndexed",2];
format_png_Color.ColIndexed.toString = $estr;
format_png_Color.ColIndexed.__enum__ = format_png_Color;
var format_png_Chunk = $hxClasses["format.png.Chunk"] = { __ename__ : ["format","png","Chunk"], __constructs__ : ["CEnd","CHeader","CData","CPalette","CUnknown"] };
format_png_Chunk.CEnd = ["CEnd",0];
format_png_Chunk.CEnd.toString = $estr;
format_png_Chunk.CEnd.__enum__ = format_png_Chunk;
format_png_Chunk.CHeader = function(h) { var $x = ["CHeader",1,h]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.CData = function(b) { var $x = ["CData",2,b]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.CPalette = function(b) { var $x = ["CPalette",3,b]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.CUnknown = function(id,data) { var $x = ["CUnknown",4,id,data]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
var format_png_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.checkCRC = true;
};
$hxClasses["format.png.Reader"] = format_png_Reader;
format_png_Reader.__name__ = ["format","png","Reader"];
format_png_Reader.prototype = {
	i: null
	,checkCRC: null
	,read: function() {
		var _g = 0;
		var _g1 = [137,80,78,71,13,10,26,10];
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(this.i.readByte() != b) {
				throw new js__$Boot_HaxeError("Invalid header");
			}
		}
		var l = new List();
		while(true) {
			var c = this.readChunk();
			l.add(c);
			if(c == format_png_Chunk.CEnd) {
				break;
			}
		}
		return l;
	}
	,readHeader: function(i) {
		i.set_bigEndian(true);
		var width = i.readInt32();
		var height = i.readInt32();
		var colbits = i.readByte();
		var color = i.readByte();
		var color1;
		switch(color) {
		case 0:
			color1 = format_png_Color.ColGrey(false);
			break;
		case 2:
			color1 = format_png_Color.ColTrue(false);
			break;
		case 3:
			color1 = format_png_Color.ColIndexed;
			break;
		case 4:
			color1 = format_png_Color.ColGrey(true);
			break;
		case 6:
			color1 = format_png_Color.ColTrue(true);
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown color model " + color + ":" + colbits);
		}
		var compress = i.readByte();
		var filter = i.readByte();
		if(compress != 0 || filter != 0) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var interlace = i.readByte();
		if(interlace != 0 && interlace != 1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		return { width : width, height : height, colbits : colbits, color : color1, interlaced : interlace == 1};
	}
	,readChunk: function() {
		var dataLen = this.i.readInt32();
		var id = this.i.readString(4);
		var data = this.i.read(dataLen);
		var crc = this.i.readInt32();
		if(this.checkCRC) {
			var c = new haxe_crypto_Crc32();
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				c["byte"](HxOverrides.cca(id,i));
			}
			c.update(data,0,data.length);
			if(c.get() != crc) {
				throw new js__$Boot_HaxeError("CRC check failure");
			}
		}
		switch(id) {
		case "IDAT":
			return format_png_Chunk.CData(data);
		case "IEND":
			return format_png_Chunk.CEnd;
		case "IHDR":
			return format_png_Chunk.CHeader(this.readHeader(new haxe_io_BytesInput(data)));
		case "PLTE":
			return format_png_Chunk.CPalette(data);
		default:
			return format_png_Chunk.CUnknown(id,data);
		}
	}
	,__class__: format_png_Reader
};
var format_png_Tools = function() { };
$hxClasses["format.png.Tools"] = format_png_Tools;
format_png_Tools.__name__ = ["format","png","Tools"];
format_png_Tools.getHeader = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c[1] == 1) {
			var h = c[2];
			return h;
		}
	}
	throw new js__$Boot_HaxeError("Header not found");
};
format_png_Tools.getPalette = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c[1] == 3) {
			var b = c[2];
			return b;
		}
	}
	return null;
};
format_png_Tools.filter = function(data,x,y,stride,prev,p,numChannels) {
	if(numChannels == null) {
		numChannels = 4;
	}
	var b = y == 0 ? 0 : data.b[p - stride];
	var c = x == 0 || y == 0 ? 0 : data.b[p - stride - numChannels];
	var k = prev + b - c;
	var pa = k - prev;
	if(pa < 0) {
		pa = -pa;
	}
	var pb = k - b;
	if(pb < 0) {
		pb = -pb;
	}
	var pc = k - c;
	if(pc < 0) {
		pc = -pc;
	}
	if(pa <= pb && pa <= pc) {
		return prev;
	} else if(pb <= pc) {
		return b;
	} else {
		return c;
	}
};
format_png_Tools.reverseBytes = function(b) {
	var p = 0;
	var _g1 = 0;
	var _g = b.length >> 2;
	while(_g1 < _g) {
		var i = _g1++;
		var b1 = b.b[p];
		var g = b.b[p + 1];
		var r = b.b[p + 2];
		var a = b.b[p + 3];
		b.b[p++] = a & 255;
		b.b[p++] = r & 255;
		b.b[p++] = g & 255;
		b.b[p++] = b1 & 255;
	}
};
format_png_Tools.extractGrey = function(d) {
	var h = format_png_Tools.getHeader(d);
	var grey = new haxe_io_Bytes(new ArrayBuffer(h.width * h.height));
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c[1] == 2) {
			var b = c[2];
			if(fullData != null) {
				var b1 = fullData.b;
				var b2 = b.b;
				var _g1 = 0;
				var _g = b.length;
				while(_g1 < _g) {
					var i = _g1++;
					fullData.b.push(b2[i]);
				}
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				var b11 = fullData.b;
				var b21 = data.b;
				var _g11 = 0;
				var _g2 = data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					fullData.b.push(b21[i1]);
				}
				var b12 = fullData.b;
				var b22 = b.b;
				var _g12 = 0;
				var _g3 = b.length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					fullData.b.push(b22[i2]);
				}
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw new js__$Boot_HaxeError("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var _g4 = h.color;
	if(_g4[1] == 0) {
		var alpha = _g4[2];
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var rinc = alpha ? 2 : 1;
		var _g13 = 0;
		var _g5 = h.height;
		while(_g13 < _g5) {
			var y = _g13++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				var _g31 = 0;
				var _g21 = width;
				while(_g31 < _g21) {
					var x = _g31++;
					var v = data.b[r];
					r += rinc;
					grey.b[w++] = v & 255;
				}
				break;
			case 1:
				var cv = 0;
				var _g32 = 0;
				var _g22 = width;
				while(_g32 < _g22) {
					var x1 = _g32++;
					cv += data.b[r];
					r += rinc;
					grey.b[w++] = cv & 255;
				}
				break;
			case 2:
				var stride1 = y == 0 ? 0 : width;
				var _g33 = 0;
				var _g23 = width;
				while(_g33 < _g23) {
					var x2 = _g33++;
					var v1 = data.b[r] + grey.b[w - stride1];
					r += rinc;
					grey.b[w++] = v1 & 255;
				}
				break;
			case 3:
				var cv1 = 0;
				var stride2 = y == 0 ? 0 : width;
				var _g34 = 0;
				var _g24 = width;
				while(_g34 < _g24) {
					var x3 = _g34++;
					cv1 = data.b[r] + (cv1 + grey.b[w - stride2] >> 1) & 255;
					r += rinc;
					grey.b[w++] = cv1 & 255;
				}
				break;
			case 4:
				var stride3 = width;
				var cv2 = 0;
				var _g35 = 0;
				var _g25 = width;
				while(_g35 < _g25) {
					var x4 = _g35++;
					var b3 = y == 0 ? 0 : grey.b[w - stride3];
					var c1 = x4 == 0 || y == 0 ? 0 : grey.b[w - stride3 - 1];
					var k = cv2 + b3 - c1;
					var pa = k - cv2;
					if(pa < 0) {
						pa = -pa;
					}
					var pb = k - b3;
					if(pb < 0) {
						pb = -pb;
					}
					var pc = k - c1;
					if(pc < 0) {
						pc = -pc;
					}
					cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b3 : c1) + data.b[r] & 255;
					r += rinc;
					grey.b[w++] = cv2 & 255;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f);
			}
		}
	} else {
		throw new js__$Boot_HaxeError("Unsupported color mode");
	}
	return grey;
};
format_png_Tools.extract32 = function(d,bytes,flipY) {
	var h = format_png_Tools.getHeader(d);
	var bgra = bytes == null ? new haxe_io_Bytes(new ArrayBuffer(h.width * h.height * 4)) : bytes;
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c[1] == 2) {
			var b = c[2];
			if(fullData != null) {
				var b1 = fullData.b;
				var b2 = b.b;
				var _g1 = 0;
				var _g = b.length;
				while(_g1 < _g) {
					var i = _g1++;
					fullData.b.push(b2[i]);
				}
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				var b11 = fullData.b;
				var b21 = data.b;
				var _g11 = 0;
				var _g2 = data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					fullData.b.push(b21[i1]);
				}
				var b12 = fullData.b;
				var b22 = b.b;
				var _g12 = 0;
				var _g3 = b.length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					fullData.b.push(b22[i2]);
				}
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw new js__$Boot_HaxeError("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var lineDelta = 0;
	if(flipY) {
		lineDelta = -h.width * 8;
		w = (h.height - 1) * (h.width * 4);
	}
	var flipY1 = flipY ? -1 : 1;
	var _g4 = h.color;
	switch(_g4[1]) {
	case 0:
		var alpha = _g4[2];
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var alphvaIdx = -1;
		if(!alpha) {
			var _g_head1 = d.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var t = val1;
				if(t[1] == 4) {
					if(t[2] == "tRNS") {
						var data1 = t[3];
						if(data1.length >= 2) {
							alphvaIdx = data1.b[1];
						}
						break;
					}
				}
			}
		}
		var _g13 = 0;
		var _g5 = h.height;
		while(_g13 < _g5) {
			var y = _g13++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g31 = 0;
					var _g21 = width;
					while(_g31 < _g21) {
						var x = _g31++;
						var v = data.b[r++];
						bgra.b[w++] = v & 255;
						bgra.b[w++] = v & 255;
						bgra.b[w++] = v & 255;
						bgra.b[w++] = data.b[r++] & 255;
					}
				} else {
					var _g32 = 0;
					var _g22 = width;
					while(_g32 < _g22) {
						var x1 = _g32++;
						var v1 = data.b[r++];
						bgra.b[w++] = v1 & 255;
						bgra.b[w++] = v1 & 255;
						bgra.b[w++] = v1 & 255;
						bgra.b[w++] = (v1 == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			case 1:
				var cv = 0;
				var ca = 0;
				if(alpha) {
					var _g33 = 0;
					var _g23 = width;
					while(_g33 < _g23) {
						var x2 = _g33++;
						cv += data.b[r++];
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = cv & 255;
						ca += data.b[r++];
						bgra.b[w++] = ca & 255;
					}
				} else {
					var _g34 = 0;
					var _g24 = width;
					while(_g34 < _g24) {
						var x3 = _g34++;
						cv += data.b[r++];
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = (cv == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			case 2:
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g35 = 0;
					var _g25 = width;
					while(_g35 < _g25) {
						var x4 = _g35++;
						var v2 = data.b[r++] + bgra.b[w - stride1];
						bgra.b[w++] = v2 & 255;
						bgra.b[w++] = v2 & 255;
						bgra.b[w++] = v2 & 255;
						bgra.b[w++] = data.b[r++] + bgra.b[w - stride1] & 255;
					}
				} else {
					var _g36 = 0;
					var _g26 = width;
					while(_g36 < _g26) {
						var x5 = _g36++;
						var v3 = data.b[r++] + bgra.b[w - stride1];
						bgra.b[w++] = v3 & 255;
						bgra.b[w++] = v3 & 255;
						bgra.b[w++] = v3 & 255;
						bgra.b[w++] = (v3 == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			case 3:
				var cv1 = 0;
				var ca1 = 0;
				var stride2 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g37 = 0;
					var _g27 = width;
					while(_g37 < _g27) {
						var x6 = _g37++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = cv1 & 255;
						ca1 = data.b[r++] + (ca1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = ca1 & 255;
					}
				} else {
					var _g38 = 0;
					var _g28 = width;
					while(_g38 < _g28) {
						var x7 = _g38++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = (cv1 == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			case 4:
				var stride3 = width * 4 * flipY1;
				var cv2 = 0;
				var ca2 = 0;
				if(alpha) {
					var _g39 = 0;
					var _g29 = width;
					while(_g39 < _g29) {
						var x8 = _g39++;
						var b3 = y == 0 ? 0 : bgra.b[w - stride3];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k = cv2 + b3 - c1;
						var pa = k - cv2;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b3;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c1;
						if(pc < 0) {
							pc = -pc;
						}
						cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b3 : c1) + data.b[r++] & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = cv2 & 255;
						var b4 = y == 0 ? 0 : bgra.b[w - stride3];
						var c2 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k1 = ca2 + b4 - c2;
						var pa1 = k1 - ca2;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b4;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c2;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						ca2 = (pa1 <= pb1 && pa1 <= pc1 ? ca2 : pb1 <= pc1 ? b4 : c2) + data.b[r++] & 255;
						bgra.b[w++] = ca2 & 255;
					}
				} else {
					var _g310 = 0;
					var _g210 = width;
					while(_g310 < _g210) {
						var x9 = _g310++;
						var b5 = y == 0 ? 0 : bgra.b[w - stride3];
						var c3 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k2 = cv2 + b5 - c3;
						var pa2 = k2 - cv2;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b5;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c3;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						cv2 = (pa2 <= pb2 && pa2 <= pc2 ? cv2 : pb2 <= pc2 ? b5 : c3) + data.b[r++] & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = (cv2 == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 1:
		var alpha1 = _g4[2];
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width1 = h.width;
		var stride4 = (alpha1 ? 4 : 3) * width1 + 1;
		if(data.length < h.height * stride4) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var alphaRed = -1;
		var alphaGreen = -1;
		var alphaBlue = -1;
		if(!alpha1) {
			var _g_head2 = d.h;
			while(_g_head2 != null) {
				var val2 = _g_head2.item;
				_g_head2 = _g_head2.next;
				var t1 = val2;
				if(t1[1] == 4) {
					if(t1[2] == "tRNS") {
						var data2 = t1[3];
						if(data2.length >= 6) {
							alphaRed = data2.b[1];
							alphaGreen = data2.b[3];
							alphaBlue = data2.b[5];
						}
						break;
					}
				}
			}
		}
		var cr = 0;
		var cg = 0;
		var cb = 0;
		var ca3 = 0;
		var _g14 = 0;
		var _g6 = h.height;
		while(_g14 < _g6) {
			var y1 = _g14++;
			var f1 = data.b[r++];
			switch(f1) {
			case 0:
				if(alpha1) {
					var _g311 = 0;
					var _g211 = width1;
					while(_g311 < _g211) {
						var x10 = _g311++;
						bgra.b[w++] = data.b[r + 2] & 255;
						bgra.b[w++] = data.b[r + 1] & 255;
						bgra.b[w++] = data.b[r] & 255;
						bgra.b[w++] = data.b[r + 3] & 255;
						r += 4;
					}
				} else {
					var _g312 = 0;
					var _g212 = width1;
					while(_g312 < _g212) {
						var x11 = _g312++;
						cb = data.b[r + 2];
						bgra.b[w++] = cb & 255;
						cg = data.b[r + 1];
						bgra.b[w++] = cg & 255;
						cr = data.b[r];
						bgra.b[w++] = cr & 255;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			case 1:
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				if(alpha1) {
					var _g313 = 0;
					var _g213 = width1;
					while(_g313 < _g213) {
						var x12 = _g313++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb & 255;
						cg += data.b[r + 1];
						bgra.b[w++] = cg & 255;
						cr += data.b[r];
						bgra.b[w++] = cr & 255;
						ca3 += data.b[r + 3];
						bgra.b[w++] = ca3 & 255;
						r += 4;
					}
				} else {
					var _g314 = 0;
					var _g214 = width1;
					while(_g314 < _g214) {
						var x13 = _g314++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb & 255;
						cg += data.b[r + 1];
						bgra.b[w++] = cg & 255;
						cr += data.b[r];
						bgra.b[w++] = cr & 255;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			case 2:
				var stride5 = y1 == 0 ? 0 : width1 * 4 * flipY1;
				if(alpha1) {
					var _g315 = 0;
					var _g215 = width1;
					while(_g315 < _g215) {
						var x14 = _g315++;
						bgra.b[w] = data.b[r + 2] + bgra.b[w - stride5] & 255;
						++w;
						bgra.b[w] = data.b[r + 1] + bgra.b[w - stride5] & 255;
						++w;
						bgra.b[w] = data.b[r] + bgra.b[w - stride5] & 255;
						++w;
						bgra.b[w] = data.b[r + 3] + bgra.b[w - stride5] & 255;
						++w;
						r += 4;
					}
				} else {
					var _g316 = 0;
					var _g216 = width1;
					while(_g316 < _g216) {
						var x15 = _g316++;
						cb = data.b[r + 2] + bgra.b[w - stride5];
						bgra.b[w] = cb & 255;
						++w;
						cg = data.b[r + 1] + bgra.b[w - stride5];
						bgra.b[w] = cg & 255;
						++w;
						cr = data.b[r] + bgra.b[w - stride5];
						bgra.b[w] = cr & 255;
						++w;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			case 3:
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				var stride6 = y1 == 0 ? 0 : width1 * 4 * flipY1;
				if(alpha1) {
					var _g317 = 0;
					var _g217 = width1;
					while(_g317 < _g217) {
						var x16 = _g317++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cb & 255;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cg & 255;
						cr = data.b[r] + (cr + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cr & 255;
						ca3 = data.b[r + 3] + (ca3 + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = ca3 & 255;
						r += 4;
					}
				} else {
					var _g318 = 0;
					var _g218 = width1;
					while(_g318 < _g218) {
						var x17 = _g318++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cb & 255;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cg & 255;
						cr = data.b[r] + (cr + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cr & 255;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			case 4:
				var stride7 = width1 * 4 * flipY1;
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				if(alpha1) {
					var _g319 = 0;
					var _g219 = width1;
					while(_g319 < _g219) {
						var x18 = _g319++;
						var b6 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c4 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k3 = cb + b6 - c4;
						var pa3 = k3 - cb;
						if(pa3 < 0) {
							pa3 = -pa3;
						}
						var pb3 = k3 - b6;
						if(pb3 < 0) {
							pb3 = -pb3;
						}
						var pc3 = k3 - c4;
						if(pc3 < 0) {
							pc3 = -pc3;
						}
						cb = (pa3 <= pb3 && pa3 <= pc3 ? cb : pb3 <= pc3 ? b6 : c4) + data.b[r + 2] & 255;
						bgra.b[w++] = cb & 255;
						var b7 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c5 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k4 = cg + b7 - c5;
						var pa4 = k4 - cg;
						if(pa4 < 0) {
							pa4 = -pa4;
						}
						var pb4 = k4 - b7;
						if(pb4 < 0) {
							pb4 = -pb4;
						}
						var pc4 = k4 - c5;
						if(pc4 < 0) {
							pc4 = -pc4;
						}
						cg = (pa4 <= pb4 && pa4 <= pc4 ? cg : pb4 <= pc4 ? b7 : c5) + data.b[r + 1] & 255;
						bgra.b[w++] = cg & 255;
						var b8 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c6 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k5 = cr + b8 - c6;
						var pa5 = k5 - cr;
						if(pa5 < 0) {
							pa5 = -pa5;
						}
						var pb5 = k5 - b8;
						if(pb5 < 0) {
							pb5 = -pb5;
						}
						var pc5 = k5 - c6;
						if(pc5 < 0) {
							pc5 = -pc5;
						}
						cr = (pa5 <= pb5 && pa5 <= pc5 ? cr : pb5 <= pc5 ? b8 : c6) + data.b[r] & 255;
						bgra.b[w++] = cr & 255;
						var b9 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c7 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k6 = ca3 + b9 - c7;
						var pa6 = k6 - ca3;
						if(pa6 < 0) {
							pa6 = -pa6;
						}
						var pb6 = k6 - b9;
						if(pb6 < 0) {
							pb6 = -pb6;
						}
						var pc6 = k6 - c7;
						if(pc6 < 0) {
							pc6 = -pc6;
						}
						ca3 = (pa6 <= pb6 && pa6 <= pc6 ? ca3 : pb6 <= pc6 ? b9 : c7) + data.b[r + 3] & 255;
						bgra.b[w++] = ca3 & 255;
						r += 4;
					}
				} else {
					var _g320 = 0;
					var _g220 = width1;
					while(_g320 < _g220) {
						var x19 = _g320++;
						var b10 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c8 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k7 = cb + b10 - c8;
						var pa7 = k7 - cb;
						if(pa7 < 0) {
							pa7 = -pa7;
						}
						var pb7 = k7 - b10;
						if(pb7 < 0) {
							pb7 = -pb7;
						}
						var pc7 = k7 - c8;
						if(pc7 < 0) {
							pc7 = -pc7;
						}
						cb = (pa7 <= pb7 && pa7 <= pc7 ? cb : pb7 <= pc7 ? b10 : c8) + data.b[r + 2] & 255;
						bgra.b[w++] = cb & 255;
						var b13 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c9 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k8 = cg + b13 - c9;
						var pa8 = k8 - cg;
						if(pa8 < 0) {
							pa8 = -pa8;
						}
						var pb8 = k8 - b13;
						if(pb8 < 0) {
							pb8 = -pb8;
						}
						var pc8 = k8 - c9;
						if(pc8 < 0) {
							pc8 = -pc8;
						}
						cg = (pa8 <= pb8 && pa8 <= pc8 ? cg : pb8 <= pc8 ? b13 : c9) + data.b[r + 1] & 255;
						bgra.b[w++] = cg & 255;
						var b14 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c10 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k9 = cr + b14 - c10;
						var pa9 = k9 - cr;
						if(pa9 < 0) {
							pa9 = -pa9;
						}
						var pb9 = k9 - b14;
						if(pb9 < 0) {
							pb9 = -pb9;
						}
						var pc9 = k9 - c10;
						if(pc9 < 0) {
							pc9 = -pc9;
						}
						cr = (pa9 <= pb9 && pa9 <= pc9 ? cr : pb9 <= pc9 ? b14 : c10) + data.b[r] & 255;
						bgra.b[w++] = cr & 255;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f1);
			}
			w += lineDelta;
		}
		break;
	case 2:
		var pal = format_png_Tools.getPalette(d);
		if(pal == null) {
			throw new js__$Boot_HaxeError("PNG Palette is missing");
		}
		var alpha2 = null;
		var _g_head3 = d.h;
		while(_g_head3 != null) {
			var val3 = _g_head3.item;
			_g_head3 = _g_head3.next;
			var t2 = val3;
			if(t2[1] == 4) {
				if(t2[2] == "tRNS") {
					var data3 = t2[3];
					alpha2 = data3;
					break;
				}
			}
		}
		if(alpha2 != null && alpha2.length < 1 << h.colbits) {
			var alpha21 = new haxe_io_Bytes(new ArrayBuffer(1 << h.colbits));
			alpha21.blit(0,alpha2,0,alpha2.length);
			alpha21.fill(alpha2.length,alpha21.length - alpha2.length,255);
			alpha2 = alpha21;
		}
		var width2 = h.width;
		var stride8 = Math.ceil(width2 * h.colbits / 8) + 1;
		if(data.length < h.height * stride8) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var rline = h.width * h.colbits >> 3;
		var _g15 = 0;
		var _g7 = h.height;
		while(_g15 < _g7) {
			var y2 = _g15++;
			var f2 = data.b[r++];
			if(f2 == 0) {
				r += rline;
				continue;
			}
			switch(f2) {
			case 1:
				var c11 = 0;
				var _g321 = 0;
				var _g221 = width2;
				while(_g321 < _g221) {
					var x20 = _g321++;
					var v4 = data.b[r];
					c11 += v4;
					data.b[r++] = c11 & 255 & 255;
				}
				break;
			case 2:
				var stride9 = y2 == 0 ? 0 : rline + 1;
				var _g322 = 0;
				var _g222 = width2;
				while(_g322 < _g222) {
					var x21 = _g322++;
					var v5 = data.b[r];
					data.b[r] = v5 + data.b[r - stride9] & 255;
					++r;
				}
				break;
			case 3:
				var c12 = 0;
				var stride10 = y2 == 0 ? 0 : rline + 1;
				var _g323 = 0;
				var _g223 = width2;
				while(_g323 < _g223) {
					var x22 = _g323++;
					var v6 = data.b[r];
					c12 = v6 + (c12 + data.b[r - stride10] >> 1) & 255;
					data.b[r++] = c12 & 255;
				}
				break;
			case 4:
				var stride11 = rline + 1;
				var c13 = 0;
				var _g324 = 0;
				var _g224 = width2;
				while(_g324 < _g224) {
					var x23 = _g324++;
					var v7 = data.b[r];
					var b15 = y2 == 0 ? 0 : data.b[r - stride11];
					var c14 = x23 == 0 || y2 == 0 ? 0 : data.b[r - stride11 - 1];
					var k10 = c13 + b15 - c14;
					var pa10 = k10 - c13;
					if(pa10 < 0) {
						pa10 = -pa10;
					}
					var pb10 = k10 - b15;
					if(pb10 < 0) {
						pb10 = -pb10;
					}
					var pc10 = k10 - c14;
					if(pc10 < 0) {
						pc10 = -pc10;
					}
					c13 = (pa10 <= pb10 && pa10 <= pc10 ? c13 : pb10 <= pc10 ? b15 : c14) + v7 & 255;
					data.b[r++] = c13 & 255;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f2);
			}
		}
		var r1 = 0;
		if(h.colbits == 8) {
			var _g16 = 0;
			var _g8 = h.height;
			while(_g16 < _g8) {
				var y3 = _g16++;
				++r1;
				var _g325 = 0;
				var _g225 = h.width;
				while(_g325 < _g225) {
					var x24 = _g325++;
					var c15 = data.b[r1++];
					bgra.b[w++] = pal.b[c15 * 3 + 2] & 255;
					bgra.b[w++] = pal.b[c15 * 3 + 1] & 255;
					bgra.b[w++] = pal.b[c15 * 3] & 255;
					bgra.b[w++] = (alpha2 != null ? alpha2.b[c15] : 255) & 255;
				}
				w += lineDelta;
			}
		} else if(h.colbits < 8) {
			var req = h.colbits;
			var mask = (1 << req) - 1;
			var _g17 = 0;
			var _g9 = h.height;
			while(_g17 < _g9) {
				var y4 = _g17++;
				++r1;
				var bits = 0;
				var nbits = 0;
				var v8;
				var _g326 = 0;
				var _g226 = h.width;
				while(_g326 < _g226) {
					var x25 = _g326++;
					if(nbits < req) {
						bits = bits << 8 | data.b[r1++];
						nbits += 8;
					}
					var c16 = bits >>> nbits - req & mask;
					nbits -= req;
					bgra.b[w++] = pal.b[c16 * 3 + 2] & 255;
					bgra.b[w++] = pal.b[c16 * 3 + 1] & 255;
					bgra.b[w++] = pal.b[c16 * 3] & 255;
					bgra.b[w++] = (alpha2 != null ? alpha2.b[c16] : 255) & 255;
				}
				w += lineDelta;
			}
		} else {
			throw new js__$Boot_HaxeError(h.colbits + " indexed bits per pixel not supported");
		}
		break;
	}
	return bgra;
};
format_png_Tools.buildGrey = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height + height));
	var w = 0;
	var r = 0;
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var y = _g1++;
		rgb.b[w++] = 0;
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var x = _g3++;
			rgb.b[w++] = data.b[r++] & 255;
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColGrey(false), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.buildRGB = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height * 3 + height));
	var w = 0;
	var r = 0;
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var y = _g1++;
		rgb.b[w++] = 0;
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var x = _g3++;
			rgb.b[w++] = data.b[r + 2] & 255;
			rgb.b[w++] = data.b[r + 1] & 255;
			rgb.b[w++] = data.b[r] & 255;
			r += 3;
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(false), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.build32ARGB = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
	var w = 0;
	var r = 0;
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var y = _g1++;
		rgba.b[w++] = 0;
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var x = _g3++;
			rgba.b[w++] = data.b[r + 1] & 255;
			rgba.b[w++] = data.b[r + 2] & 255;
			rgba.b[w++] = data.b[r + 3] & 255;
			rgba.b[w++] = data.b[r] & 255;
			r += 4;
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(true), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgba,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.build32BGRA = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
	var w = 0;
	var r = 0;
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var y = _g1++;
		rgba.b[w++] = 0;
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var x = _g3++;
			rgba.b[w++] = data.b[r + 2] & 255;
			rgba.b[w++] = data.b[r + 1] & 255;
			rgba.b[w++] = data.b[r] & 255;
			rgba.b[w++] = data.b[r + 3] & 255;
			r += 4;
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(true), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgba,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
var format_png_Writer = function(o) {
	this.o = o;
	o.set_bigEndian(true);
};
$hxClasses["format.png.Writer"] = format_png_Writer;
format_png_Writer.__name__ = ["format","png","Writer"];
format_png_Writer.prototype = {
	o: null
	,write: function(png) {
		var _g = 0;
		var _g1 = [137,80,78,71,13,10,26,10];
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			this.o.writeByte(b);
		}
		var _g_head = png.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var c = val;
			switch(c[1]) {
			case 0:
				this.writeChunk("IEND",new haxe_io_Bytes(new ArrayBuffer(0)));
				break;
			case 1:
				var h = c[2];
				var b1 = new haxe_io_BytesOutput();
				b1.set_bigEndian(true);
				b1.writeInt32(h.width);
				b1.writeInt32(h.height);
				b1.writeByte(h.colbits);
				var _g2 = h.color;
				var tmp;
				switch(_g2[1]) {
				case 0:
					var alpha = _g2[2];
					if(alpha) {
						tmp = 4;
					} else {
						tmp = 0;
					}
					break;
				case 1:
					var alpha1 = _g2[2];
					if(alpha1) {
						tmp = 6;
					} else {
						tmp = 2;
					}
					break;
				case 2:
					tmp = 3;
					break;
				}
				b1.writeByte(tmp);
				b1.writeByte(0);
				b1.writeByte(0);
				b1.writeByte(h.interlaced ? 1 : 0);
				this.writeChunk("IHDR",b1.getBytes());
				break;
			case 2:
				var d = c[2];
				this.writeChunk("IDAT",d);
				break;
			case 3:
				var b2 = c[2];
				this.writeChunk("PLTE",b2);
				break;
			case 4:
				var data = c[3];
				var id = c[2];
				this.writeChunk(id,data);
				break;
			}
		}
	}
	,writeChunk: function(id,data) {
		this.o.writeInt32(data.length);
		this.o.writeString(id);
		this.o.write(data);
		var crc = new haxe_crypto_Crc32();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			crc["byte"](HxOverrides.cca(id,i));
		}
		crc.update(data,0,data.length);
		this.o.writeInt32(crc.get());
	}
	,__class__: format_png_Writer
};
var format_tools_Deflate = function() { };
$hxClasses["format.tools.Deflate"] = format_tools_Deflate;
format_tools_Deflate.__name__ = ["format","tools","Deflate"];
format_tools_Deflate.run = function(b,level) {
	if(level == null) {
		level = 9;
	}
	return haxe_zip_Compress.run(b,level);
};
var format_tools_Inflate = function() { };
$hxClasses["format.tools.Inflate"] = format_tools_Inflate;
format_tools_Inflate.__name__ = ["format","tools","Inflate"];
format_tools_Inflate.run = function(bytes) {
	return haxe_zip_Uncompress.run(bytes);
};
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null ? "null" : "" + cname;
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = Type.getClassName(v);
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
			break;
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case List:
				this.buf.b += "l";
				var v3 = v;
				var _g_head = v3.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i1 = val;
					this.serialize(i1);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v4 = v;
				var k = v4.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v4.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v5.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var k4 = v6.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(__map_reserved[k5] != null ? v6.getReserved(k5) : v6.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i2 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var length = haxe_Serializer.BASE64.length;
					var this1 = new Array(length);
					b64 = this1;
					var _g11 = 0;
					var _g3 = haxe_Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i3 = _g11++;
						b64[i3] = HxOverrides.cca(haxe_Serializer.BASE64,i3);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i2 < max) {
					var b1 = v7.b[i2++];
					var b2 = v7.b[i2++];
					var b3 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b1 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCharCode(b64[b3 & 63]);
				}
				if(i2 == max) {
					var b11 = v7.b[i2++];
					var b21 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b11 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[b21 << 2 & 63]);
				} else if(i2 == max + 1) {
					var b12 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b12 >> 2]);
					this.buf.b += String.fromCharCode(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g[2];
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(Type.getEnumName(e));
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.b += ":";
			var l1 = v["length"];
			this.buf.b += Std.string(l1 - 2);
			var _g12 = 2;
			var _g4 = l1;
			while(_g12 < _g4) {
				var i4 = _g12++;
				this.serialize(v[i4]);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = window.performance.now() / 1000;
	var r = f();
	haxe_Log.trace(window.performance.now() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return window.performance.now() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = ["haxe","_Unserializer","NullResolver"];
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_Utf8 = function(size) {
	this.__b = "";
};
$hxClasses["haxe.Utf8"] = haxe_Utf8;
haxe_Utf8.__name__ = ["haxe","Utf8"];
haxe_Utf8.prototype = {
	__b: null
	,__class__: haxe_Utf8
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = ["haxe","crypto","Adler32"];
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	a1: null
	,a2: null
	,update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.b[pos++] = value & 255;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len = this.length < other.length ? this.length : other.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g1 = 0;
		var _g = str.length;
		while(_g1 < _g) {
			var i = _g1++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g11 = 0;
		var _g2 = this.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var c = this.b[i1];
			s_b += String.fromCharCode(chars[c >> 4]);
			s_b += String.fromCharCode(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Crc32 = function() {
	this.crc = -1;
};
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = ["haxe","crypto","Crc32"];
haxe_crypto_Crc32.prototype = {
	crc: null
	,'byte': function(b) {
		var tmp = (this.crc ^ b) & 255;
		var _g = 0;
		while(_g < 8) {
			var j = _g++;
			if((tmp & 1) == 1) {
				tmp = tmp >>> 1 ^ -306674912;
			} else {
				tmp >>>= 1;
			}
		}
		this.crc = this.crc >>> 8 ^ tmp;
	}
	,update: function(b,pos,len) {
		var b1 = b.b.bufferValue;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			var tmp = (this.crc ^ b1.bytes[i]) & 255;
			var _g2 = 0;
			while(_g2 < 8) {
				var j = _g2++;
				if((tmp & 1) == 1) {
					tmp = tmp >>> 1 ^ -306674912;
				} else {
					tmp >>>= 1;
				}
			}
			this.crc = this.crc >>> 8 ^ tmp;
		}
	}
	,get: function() {
		return this.crc ^ -1;
	}
	,__class__: haxe_crypto_Crc32
};
var haxe_ds_Either = $hxClasses["haxe.ds.Either"] = { __ename__ : ["haxe","ds","Either"], __constructs__ : ["Left","Right"] };
haxe_ds_Either.Left = function(v) { var $x = ["Left",0,v]; $x.__enum__ = haxe_ds_Either; $x.toString = $estr; return $x; };
haxe_ds_Either.Right = function(v) { var $x = ["Right",1,v]; $x.__enum__ = haxe_ds_Either; $x.toString = $estr; return $x; };
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe_ds_ObjectMap.count;
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe_io_BytesBuffer.prototype = {
	b: null
	,getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = ["haxe","io","Input"];
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			haxe_CallStack.lastException = eof;
			if (eof instanceof js__$Boot_HaxeError) eof = eof.val;
			if( js_Boot.__instanceof(eof,haxe_io_Eof) ) {
			} else throw(eof);
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readLine: function() {
		var buf = new haxe_io_BytesBuffer();
		var last;
		var s;
		try {
			while(true) {
				last = this.readByte();
				if(!(last != 10)) {
					break;
				}
				buf.b.push(last);
			}
			s = buf.getBytes().toString();
			if(HxOverrides.cca(s,s.length - 1) == 13) {
				s = HxOverrides.substr(s,0,-1);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,haxe_io_Eof) ) {
				s = buf.getBytes().toString();
				if(s.length == 0) {
					throw new js__$Boot_HaxeError(e);
				}
			} else throw(e);
		}
		return s;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe_io_Input
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = ["haxe","io","Output"];
haxe_io_Output.prototype = {
	bigEndian: null
	,writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s) {
		var b = haxe_io_Bytes.ofString(s);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = ["haxe","io","BytesOutput"];
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeByte: function(c) {
		this.b.b.push(c);
	}
	,writeBytes: function(buf,pos,len) {
		var _this = this.b;
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = _this.b;
		var b2 = buf.b;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			_this.b.push(b2[i]);
		}
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.join = function(paths) {
	var paths1 = paths.filter(function(s) {
		if(s != null) {
			return s != "";
		} else {
			return false;
		}
	});
	if(paths1.length == 0) {
		return "";
	}
	var path = paths1[0];
	var _g1 = 1;
	var _g = paths1.length;
	while(_g1 < _g) {
		var i = _g1++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths1[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var regex_r = new RegExp("([^:])/+","g".split("u").join(""));
	var result = tmp.replace(regex_r,"$1" + slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g11 = 0;
	var _g2 = tmp.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var _g21 = tmp.charCodeAt(i);
		switch(_g21) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i1 = _g21;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCharCode(i1);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i2 = _g21;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCharCode(i2);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,__class__: haxe_io_Path
};
var haxe_io_StringInput = function(s) {
	haxe_io_BytesInput.call(this,haxe_io_Bytes.ofString(s));
};
$hxClasses["haxe.io.StringInput"] = haxe_io_StringInput;
haxe_io_StringInput.__name__ = ["haxe","io","StringInput"];
haxe_io_StringInput.__super__ = haxe_io_BytesInput;
haxe_io_StringInput.prototype = $extend(haxe_io_BytesInput.prototype,{
	__class__: haxe_io_StringInput
});
var haxe_xml__$Fast_NodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeAccess"] = haxe_xml__$Fast_NodeAccess;
haxe_xml__$Fast_NodeAccess.__name__ = ["haxe","xml","_Fast","NodeAccess"];
haxe_xml__$Fast_NodeAccess.prototype = {
	__x: null
	,resolve: function(name) {
		var x = this.__x.elementsNamed(name).next();
		if(x == null) {
			var xname;
			if(this.__x.nodeType == Xml.Document) {
				xname = "Document";
			} else {
				var _this = this.__x;
				if(_this.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _this.nodeType);
				}
				xname = _this.nodeName;
			}
			throw new js__$Boot_HaxeError(xname + " is missing element " + name);
		}
		return new haxe_xml_Fast(x);
	}
	,__class__: haxe_xml__$Fast_NodeAccess
};
var haxe_xml__$Fast_AttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.AttribAccess"] = haxe_xml__$Fast_AttribAccess;
haxe_xml__$Fast_AttribAccess.__name__ = ["haxe","xml","_Fast","AttribAccess"];
haxe_xml__$Fast_AttribAccess.prototype = {
	__x: null
	,resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) {
			throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		}
		var v = this.__x.get(name);
		if(v == null) {
			var _this = this.__x;
			if(_this.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _this.nodeType);
			}
			throw new js__$Boot_HaxeError(_this.nodeName + " is missing attribute " + name);
		}
		return v;
	}
	,__class__: haxe_xml__$Fast_AttribAccess
};
var haxe_xml__$Fast_HasAttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasAttribAccess"] = haxe_xml__$Fast_HasAttribAccess;
haxe_xml__$Fast_HasAttribAccess.__name__ = ["haxe","xml","_Fast","HasAttribAccess"];
haxe_xml__$Fast_HasAttribAccess.prototype = {
	__x: null
	,resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) {
			throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		}
		return this.__x.exists(name);
	}
	,__class__: haxe_xml__$Fast_HasAttribAccess
};
var haxe_xml__$Fast_HasNodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasNodeAccess"] = haxe_xml__$Fast_HasNodeAccess;
haxe_xml__$Fast_HasNodeAccess.__name__ = ["haxe","xml","_Fast","HasNodeAccess"];
haxe_xml__$Fast_HasNodeAccess.prototype = {
	__x: null
	,resolve: function(name) {
		return this.__x.elementsNamed(name).hasNext();
	}
	,__class__: haxe_xml__$Fast_HasNodeAccess
};
var haxe_xml__$Fast_NodeListAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeListAccess"] = haxe_xml__$Fast_NodeListAccess;
haxe_xml__$Fast_NodeListAccess.__name__ = ["haxe","xml","_Fast","NodeListAccess"];
haxe_xml__$Fast_NodeListAccess.prototype = {
	__x: null
	,resolve: function(name) {
		var l = new List();
		var x = this.__x.elementsNamed(name);
		while(x.hasNext()) {
			var x1 = x.next();
			l.add(new haxe_xml_Fast(x1));
		}
		return l;
	}
	,__class__: haxe_xml__$Fast_NodeListAccess
};
var haxe_xml_Fast = function(x) {
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Invalid nodeType " + x.nodeType);
	}
	this.x = x;
	this.node = new haxe_xml__$Fast_NodeAccess(x);
	this.nodes = new haxe_xml__$Fast_NodeListAccess(x);
	this.att = new haxe_xml__$Fast_AttribAccess(x);
	this.has = new haxe_xml__$Fast_HasAttribAccess(x);
	this.hasNode = new haxe_xml__$Fast_HasNodeAccess(x);
};
$hxClasses["haxe.xml.Fast"] = haxe_xml_Fast;
haxe_xml_Fast.__name__ = ["haxe","xml","Fast"];
haxe_xml_Fast.prototype = {
	x: null
	,node: null
	,nodes: null
	,att: null
	,has: null
	,hasNode: null
	,get_name: function() {
		if(this.x.nodeType == Xml.Document) {
			return "Document";
		} else {
			var _this = this.x;
			if(_this.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _this.nodeType);
			}
			return _this.nodeName;
		}
	}
	,get_innerData: function() {
		var _this = this.x;
		if(_this.nodeType != Xml.Document && _this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _this.nodeType);
		}
		var it = HxOverrides.iter(_this.children);
		if(!it.hasNext()) {
			throw new js__$Boot_HaxeError(this.get_name() + " does not have data");
		}
		var v = it.next();
		if(it.hasNext()) {
			var n = it.next();
			var tmp;
			if(v.nodeType == Xml.PCData && n.nodeType == Xml.CData) {
				if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + v.nodeType);
				}
				tmp = StringTools.trim(v.nodeValue) == "";
			} else {
				tmp = false;
			}
			if(tmp) {
				if(!it.hasNext()) {
					if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, unexpected " + n.nodeType);
					}
					return n.nodeValue;
				}
				var n2 = it.next();
				var tmp1;
				var tmp2;
				if(n2.nodeType == Xml.PCData) {
					if(n2.nodeType == Xml.Document || n2.nodeType == Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, unexpected " + n2.nodeType);
					}
					tmp2 = StringTools.trim(n2.nodeValue) == "";
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = !it.hasNext();
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, unexpected " + n.nodeType);
					}
					return n.nodeValue;
				}
			}
			throw new js__$Boot_HaxeError(this.get_name() + " does not only have data");
		}
		if(v.nodeType != Xml.PCData && v.nodeType != Xml.CData) {
			throw new js__$Boot_HaxeError(this.get_name() + " does not have data");
		}
		if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, unexpected " + v.nodeType);
		}
		return v.nodeValue;
	}
	,__class__: haxe_xml_Fast
	,__properties__: {get_innerData:"get_innerData",get_name:"get_name"}
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	var _g = position;
	while(_g1 < _g) {
		var i = _g1++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_zip_Compress = function() { };
$hxClasses["haxe.zip.Compress"] = haxe_zip_Compress;
haxe_zip_Compress.__name__ = ["haxe","zip","Compress"];
haxe_zip_Compress.run = function(s,level) {
	throw new js__$Boot_HaxeError("Not implemented for this platform");
};
var haxe_zip_Huffman = $hxClasses["haxe.zip.Huffman"] = { __ename__ : ["haxe","zip","Huffman"], __constructs__ : ["Found","NeedBit","NeedBits"] };
haxe_zip_Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = ["haxe","zip","HuffTools"];
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			throw new js__$Boot_HaxeError("assert");
			break;
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t[1] == 1) {
				var b = t[3];
				var a = t[2];
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t[1] == 1) {
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g1 = 0;
		var _g = maxbits;
		while(_g1 < _g) {
			var i = _g1++;
			counts.push(0);
			tmp.push(0);
		}
		var _g11 = 0;
		var _g2 = nlengths;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g12 = 1;
		var _g3 = maxbits - 1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g13 = 0;
		var _g4 = nlengths;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = ["haxe","zip","_InflateImpl","Window"];
haxe_zip__$InflateImpl_Window.prototype = {
	buffer: null
	,pos: null
	,crc: null
	,slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxClasses["haxe.zip._InflateImpl.State"] = { __ename__ : ["haxe","zip","_InflateImpl","State"], __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
haxe_zip__$InflateImpl_State.Head = ["Head",0];
haxe_zip__$InflateImpl_State.Head.toString = $estr;
haxe_zip__$InflateImpl_State.Head.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Block = ["Block",1];
haxe_zip__$InflateImpl_State.Block.toString = $estr;
haxe_zip__$InflateImpl_State.Block.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.CData = ["CData",2];
haxe_zip__$InflateImpl_State.CData.toString = $estr;
haxe_zip__$InflateImpl_State.CData.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Flat = ["Flat",3];
haxe_zip__$InflateImpl_State.Flat.toString = $estr;
haxe_zip__$InflateImpl_State.Flat.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Crc = ["Crc",4];
haxe_zip__$InflateImpl_State.Crc.toString = $estr;
haxe_zip__$InflateImpl_State.Crc.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Dist = ["Dist",5];
haxe_zip__$InflateImpl_State.Dist.toString = $estr;
haxe_zip__$InflateImpl_State.Dist.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.DistOne = ["DistOne",6];
haxe_zip__$InflateImpl_State.DistOne.toString = $estr;
haxe_zip__$InflateImpl_State.DistOne.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Done = ["Done",7];
haxe_zip__$InflateImpl_State.Done.toString = $estr;
haxe_zip__$InflateImpl_State.Done.__enum__ = haxe_zip__$InflateImpl_State;
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this["final"] = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = ["haxe","zip","InflateImpl"];
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		if(len < 0 || len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = output.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i1 = _g1++;
			output.b.push(b2[i1]);
		}
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	nbits: null
	,bits: null
	,state: null
	,'final': null
	,huffman: null
	,huffdist: null
	,htools: null
	,len: null
	,dist: null
	,needed: null
	,output: null
	,outpos: null
	,input: null
	,lengths: null
	,window: null
	,buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this["final"] = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g11 = 0;
				var _g2 = hclen;
				while(_g11 < _g2) {
					var i = _g11++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g3 = hclen;
				while(_g3 < 19) {
					var i1 = _g3++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g12 = 0;
				var _g4 = hlit + hdist;
				while(_g12 < _g4) {
					var i2 = _g12++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this["final"] ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this["final"] ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
$hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
haxe_zip_Uncompress.__name__ = ["haxe","zip","Uncompress"];
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var haxepunk_App = function() { };
$hxClasses["haxepunk.App"] = haxepunk_App;
haxepunk_App.__name__ = ["haxepunk","App"];
haxepunk_App.prototype = {
	get_fullscreen: null
	,set_fullscreen: null
	,init: null
	,getTimeMillis: null
	,multiTouchSupported: null
	,getMouseX: null
	,getMouseY: null
	,__class__: haxepunk_App
	,__properties__: {set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen"}
};
var haxepunk_Camera = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.anchorY = 0;
	this.anchorX = 0;
	this.pixelSnapping = false;
	this.scaleY = 1;
	this.scaleX = 1;
	this.scale = 1;
	this.y = 0;
	this.x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["haxepunk.Camera"] = haxepunk_Camera;
haxepunk_Camera.__name__ = ["haxepunk","Camera"];
haxepunk_Camera.prototype = {
	x: null
	,y: null
	,scale: null
	,scaleX: null
	,scaleY: null
	,setTo: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,pixelSnapping: null
	,get_fullScaleX: function() {
		return this.scale * this.scaleX;
	}
	,get_fullScaleY: function() {
		return this.scale * this.scaleY;
	}
	,get_screenScaleX: function() {
		return this.scale * this.scaleX * haxepunk_HXP.screen.fullScaleX;
	}
	,get_screenScaleY: function() {
		return this.scale * this.scaleY * haxepunk_HXP.screen.fullScaleY;
	}
	,get_width: function() {
		return haxepunk_HXP.screen.width / (this.scale * this.scaleX * haxepunk_HXP.screen.fullScaleX);
	}
	,get_height: function() {
		return haxepunk_HXP.screen.height / (this.scale * this.scaleY * haxepunk_HXP.screen.fullScaleY);
	}
	,floorX: function(x) {
		return Math.floor(x * (this.scale * this.scaleX * haxepunk_HXP.screen.fullScaleX)) / (this.scale * this.scaleX * haxepunk_HXP.screen.fullScaleX);
	}
	,floorY: function(y) {
		return Math.floor(y * (this.scale * this.scaleY * haxepunk_HXP.screen.fullScaleY)) / (this.scale * this.scaleY * haxepunk_HXP.screen.fullScaleY);
	}
	,anchorTarget: null
	,anchorX: null
	,anchorY: null
	,anchor: function(target,anchorX,anchorY) {
		if(anchorY == null) {
			anchorY = 0.5;
		}
		if(anchorX == null) {
			anchorX = 0.5;
		}
		this.anchorTarget = target;
		this.anchorX = anchorX;
		this.anchorY = anchorY;
	}
	,onCamera: function(entity) {
		return entity.collideRect(entity.get_x(),entity.get_y(),this.x,this.y,haxepunk_HXP.width,haxepunk_HXP.height);
	}
	,update: function() {
		if(this.anchorTarget != null) {
			var tx = this.anchorTarget.x;
			var ty = this.anchorTarget.y;
			if(js_Boot.__instanceof(this.anchorTarget,haxepunk_Entity)) {
				var e = this.anchorTarget;
				tx += e.get_width() / 2;
				ty += e.get_height() / 2;
			}
			this.x = tx - haxepunk_HXP.width / (this.scale * this.scaleX) * this.anchorX;
			this.y = ty - haxepunk_HXP.height / (this.scale * this.scaleY) * this.anchorY;
		}
	}
	,__class__: haxepunk_Camera
	,__properties__: {get_height:"get_height",get_width:"get_width",get_screenScaleY:"get_screenScaleY",get_screenScaleX:"get_screenScaleX",get_fullScaleY:"get_fullScaleY",get_fullScaleX:"get_fullScaleX"}
};
var haxepunk_Mask = function() {
	this._parent = haxepunk_Entity._EMPTY;
	this._class = Type.getClassName(js_Boot.getClass(this));
	this._check = new haxe_ds_StringMap();
	var this1 = this._check;
	var key = Type.getClassName(haxepunk_Mask);
	var _this = this1;
	var value = $bind(this,this.collideMask);
	if(__map_reserved[key] != null) {
		_this.setReserved(key,value);
	} else {
		_this.h[key] = value;
	}
	var this2 = this._check;
	var key1 = Type.getClassName(haxepunk_masks_Masklist);
	var _this1 = this2;
	var value1 = $bind(this,this.collideMasklist);
	if(__map_reserved[key1] != null) {
		_this1.setReserved(key1,value1);
	} else {
		_this1.h[key1] = value1;
	}
};
$hxClasses["haxepunk.Mask"] = haxepunk_Mask;
haxepunk_Mask.__name__ = ["haxepunk","Mask"];
haxepunk_Mask.__properties__ = {get_drawContext:"get_drawContext"};
haxepunk_Mask.get_drawContext = function() {
	if(haxepunk_Mask.drawContext == null) {
		haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
		haxepunk_Mask.drawContext.lineThickness = 2;
	}
	return haxepunk_Mask.drawContext;
};
haxepunk_Mask.prototype = {
	get_parent: function() {
		if(this._parent != haxepunk_Entity._EMPTY) {
			return this._parent;
		} else {
			return null;
		}
	}
	,set_parent: function(value) {
		if(value == null) {
			this._parent = haxepunk_Entity._EMPTY;
		} else {
			this._parent = value;
		}
		this.update();
		return value;
	}
	,list: null
	,collide: function(mask) {
		var key = mask._class;
		var _this = this._check;
		var cbFunc = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(cbFunc != null) {
			return cbFunc(mask);
		}
		var key1 = this._class;
		var _this1 = mask._check;
		if(__map_reserved[key1] != null) {
			cbFunc = _this1.getReserved(key1);
		} else {
			cbFunc = _this1.h[key1];
		}
		if(cbFunc != null) {
			return cbFunc(this);
		}
		return false;
	}
	,collideMask: function(other) {
		if(this._parent.get_x() - this._parent.originX + this._parent.get_width() > other._parent.get_x() - other._parent.originX && this._parent.get_y() - this._parent.originY + this._parent.get_height() > other._parent.get_y() - other._parent.originY && this._parent.get_x() - this._parent.originX < other._parent.get_x() - other._parent.originX + other._parent.get_width()) {
			return this._parent.get_y() - this._parent.originY < other._parent.get_y() - other._parent.originY + other._parent.get_height();
		} else {
			return false;
		}
	}
	,collideMasklist: function(other) {
		return other.collide(this);
	}
	,debugDraw: function(camera) {
	}
	,update: function() {
	}
	,project: function(axis,projection) {
		var cur;
		var max = -Infinity;
		var min = Infinity;
		cur = -this._parent.originX * axis.x - this._parent.originY * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = (-this._parent.originX + this._parent.get_width()) * axis.x - this._parent.originY * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = -this._parent.originX * axis.x + (-this._parent.originY + this._parent.get_height()) * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = (-this._parent.originX + this._parent.get_width()) * axis.x + (-this._parent.originY + this._parent.get_height()) * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		projection.min = min;
		projection.max = max;
	}
	,_class: null
	,_check: null
	,_parent: null
	,__class__: haxepunk_Mask
	,__properties__: {set_parent:"set_parent",get_parent:"get_parent"}
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var haxepunk_masks_Hitbox = function(width,height,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	this._y = 0;
	this._x = 0;
	this._height = 0;
	this._width = 0;
	haxepunk_Mask.call(this);
	this._width = width;
	this._height = height;
	this._x = x;
	this._y = y;
	var this1 = this._check;
	var key = Type.getClassName(haxepunk_masks_Hitbox);
	var _this = this1;
	var value = $bind(this,this.collideHitbox);
	if(__map_reserved[key] != null) {
		_this.setReserved(key,value);
	} else {
		_this.h[key] = value;
	}
};
$hxClasses["haxepunk.masks.Hitbox"] = haxepunk_masks_Hitbox;
haxepunk_masks_Hitbox.__name__ = ["haxepunk","masks","Hitbox"];
haxepunk_masks_Hitbox.__super__ = haxepunk_Mask;
haxepunk_masks_Hitbox.prototype = $extend(haxepunk_Mask.prototype,{
	collideMask: function(other) {
		var px = this._x + this._parent.get_x();
		var py = this._y + this._parent.get_y();
		var ox = other._parent.originX + other._parent.get_x();
		var oy = other._parent.originY + other._parent.get_y();
		if(px + this._width > ox && py + this._height > oy && px < ox + other._parent.get_width()) {
			return py < oy + other._parent.get_height();
		} else {
			return false;
		}
	}
	,collideHitbox: function(other) {
		var px = this._x + this._parent.get_x();
		var py = this._y + this._parent.get_y();
		var ox = other._x + other._parent.get_x();
		var oy = other._y + other._parent.get_y();
		if(px + this._width > ox && py + this._height > oy && px < ox + other._width) {
			return py < oy + other._height;
		} else {
			return false;
		}
	}
	,get_x: function() {
		return this._x;
	}
	,set_x: function(value) {
		if(this._x == value) {
			return value;
		}
		this._x = value;
		if(this.list != null) {
			this.list.update();
		} else if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this.update();
		}
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,set_y: function(value) {
		if(this._y == value) {
			return value;
		}
		this._y = value;
		if(this.list != null) {
			this.list.update();
		} else if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this.update();
		}
		return this._y;
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		if(this._width == value) {
			return value;
		}
		this._width = value;
		if(this.list != null) {
			this.list.update();
		} else if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this.update();
		}
		return this._width;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		if(this._height == value) {
			return value;
		}
		this._height = value;
		if(this.list != null) {
			this.list.update();
		} else if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this.update();
		}
		return this._height;
	}
	,update: function() {
		if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this._parent.originX = -this._x;
			this._parent.originY = -this._y;
			this._parent.set_width(this._width);
			this._parent.set_height(this._height);
			if(this.list != null) {
				this.list.update();
			}
		}
	}
	,debugDraw: function(camera) {
		if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			var _this = haxepunk_Mask.drawContext;
			_this.color = 16711680;
			_this.alpha = 0.25;
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			haxepunk_Mask.drawContext.rectFilled(((this._parent != haxepunk_Entity._EMPTY ? this._parent : null).get_x() - camera.x + this.get_x()) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),((this._parent != haxepunk_Entity._EMPTY ? this._parent : null).get_y() - camera.y + this.get_y()) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY),this.get_width() * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),this.get_height() * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY));
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			var _this1 = haxepunk_Mask.drawContext;
			_this1.color = 16711680;
			_this1.alpha = 0.5;
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			haxepunk_Mask.drawContext.rect(((this._parent != haxepunk_Entity._EMPTY ? this._parent : null).get_x() - camera.x + this.get_x()) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),((this._parent != haxepunk_Entity._EMPTY ? this._parent : null).get_y() - camera.y + this.get_y()) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY),this.get_width() * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),this.get_height() * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY));
		}
	}
	,project: function(axis,projection) {
		var px = this._x;
		var py = this._y;
		var cur;
		var max = -Infinity;
		var min = Infinity;
		cur = px * axis.x + py * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = (px + this._width) * axis.x + py * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = px * axis.x + (py + this._height) * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = (px + this._width) * axis.x + (py + this._height) * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		projection.min = min;
		projection.max = max;
	}
	,_width: null
	,_height: null
	,_x: null
	,_y: null
	,__class__: haxepunk_masks_Hitbox
	,__properties__: $extend(haxepunk_Mask.prototype.__properties__,{set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"})
});
var haxepunk_masks_Masklist = function(masks) {
	haxepunk_masks_Hitbox.call(this);
	this._masks = [];
	this._temp = [];
	this._count = 0;
	if(masks != null) {
		var _g = 0;
		while(_g < masks.length) {
			var m = masks[_g];
			++_g;
			this.add(m);
		}
	}
};
$hxClasses["haxepunk.masks.Masklist"] = haxepunk_masks_Masklist;
haxepunk_masks_Masklist.__name__ = ["haxepunk","masks","Masklist"];
haxepunk_masks_Masklist.__super__ = haxepunk_masks_Hitbox;
haxepunk_masks_Masklist.prototype = $extend(haxepunk_masks_Hitbox.prototype,{
	collide: function(mask) {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.collide(mask)) {
				return true;
			}
		}
		return false;
	}
	,collideMasklist: function(other) {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = other._masks;
			while(_g2 < _g3.length) {
				var b = _g3[_g2];
				++_g2;
				if(a.collide(b)) {
					return true;
				}
			}
		}
		return true;
	}
	,add: function(mask) {
		this._masks[this._count++] = mask;
		mask.list = this;
		mask.set_parent(this._parent != haxepunk_Entity._EMPTY ? this._parent : null);
		this.update();
		return mask;
	}
	,remove: function(mask) {
		if(this._masks.indexOf(mask) < 0) {
			return mask;
		}
		this._temp.length = 0;
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m == mask) {
				mask.list = null;
				mask.set_parent(null);
				this._count--;
				this.update();
			} else {
				this._temp[this._temp.length] = m;
			}
		}
		var temp = this._masks;
		this._masks = this._temp;
		this._temp = temp;
		return mask;
	}
	,removeAt: function(index) {
		if(index == null) {
			index = 0;
		}
		this._temp.length = 0;
		var i = this._masks.length;
		index %= i;
		while(i-- > 0) if(i == index) {
			this._masks[index].list = null;
			this._count--;
			this.update();
		} else {
			this._temp[this._temp.length] = this._masks[index];
		}
		var temp = this._masks;
		this._masks = this._temp;
		this._temp = temp;
	}
	,removeAll: function() {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.list = null;
		}
		this._count = 0;
		this._masks.length = 0;
		this._temp.length = 0;
		this.update();
	}
	,getMask: function(index) {
		if(index == null) {
			index = 0;
		}
		return this._masks[index % this._masks.length];
	}
	,set_parent: function(parent) {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.set_parent(parent);
		}
		return haxepunk_masks_Hitbox.prototype.set_parent.call(this,parent);
	}
	,update: function() {
		var t;
		var l;
		var r;
		var b;
		var h;
		l = 2147483647;
		t = l;
		b = -2147483648;
		r = b;
		var h1;
		var p;
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(m,haxepunk_masks_Polygon)) {
				p = m;
				if(p != null) {
					if(p.minX < l) {
						l = p.minX;
					}
					if(p.minY < t) {
						t = p.minY;
					}
					if(p.maxX > r) {
						r = p.maxX;
					}
					if(p.maxY > b) {
						b = p.maxY;
					}
				}
			} else {
				h1 = js_Boot.__cast(m , haxepunk_masks_Hitbox);
				if(h1 != null) {
					if(h1.get_x() < l) {
						l = h1.get_x();
					}
					if(h1.get_y() < t) {
						t = h1.get_y();
					}
					if(h1.get_x() + h1.get_width() > r) {
						r = h1.get_x() + h1.get_width();
					}
					if(h1.get_y() + h1.get_height() > b) {
						b = h1.get_y() + h1.get_height();
					}
				}
			}
		}
		this._x = l;
		this._y = t;
		this._width = r - l;
		this._height = b - t;
		haxepunk_masks_Hitbox.prototype.update.call(this);
	}
	,debugDraw: function(camera) {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.debugDraw(camera);
		}
	}
	,count: null
	,get_count: function() {
		return this._count;
	}
	,_masks: null
	,_temp: null
	,_count: null
	,__class__: haxepunk_masks_Masklist
	,__properties__: $extend(haxepunk_masks_Hitbox.prototype.__properties__,{get_count:"get_count"})
});
var haxepunk_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["haxepunk.math.Vector2"] = haxepunk_math_Vector2;
haxepunk_math_Vector2.__name__ = ["haxepunk","math","Vector2"];
haxepunk_math_Vector2.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(value) {
		if(!(this.x == 0 && this.y == 0)) {
			var normal = value / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= normal;
			this.y *= normal;
		}
		return value;
	}
	,setTo: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,perpendicular: function() {
		var y = this.x;
		this.x = -this.y;
		this.y = y;
	}
	,inverse: function() {
		this.x = -this.x;
		this.y = -this.y;
	}
	,copyFrom: function(other) {
		this.x = other.x;
		this.y = other.y;
	}
	,scale: function(scalar) {
		this.x *= scalar;
		this.y *= scalar;
	}
	,add: function(other) {
		this.x += other.x;
		this.y += other.y;
	}
	,subtract: function(other) {
		this.x -= other.x;
		this.y -= other.y;
	}
	,distance: function(other) {
		var dx = this.x - other.x;
		var dy = this.y - other.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,normalize: function(size) {
		if(size == null) {
			size = 1;
		}
		if(!(this.x == 0 && this.y == 0)) {
			var normal = size / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= normal;
			this.y *= normal;
		}
	}
	,rotate: function(angle) {
		var sin = Math.sin(angle);
		var cos = Math.cos(angle);
		var y = sin * this.x + cos * this.y;
		this.x = cos * this.x - sin * this.y;
		this.y = y;
	}
	,dot: function(other) {
		return this.x * other.x + this.y * other.y;
	}
	,zcross: function(other) {
		return this.x * other.y - this.y * other.x;
	}
	,clone: function() {
		return new haxepunk_math_Vector2(this.x,this.y);
	}
	,__class__: haxepunk_math_Vector2
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var haxepunk_Entity = function(x,y,graphic,mask) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this._moveY = 0;
	this._moveX = 0;
	this._y = 0;
	this._x = 0;
	this._frames = -1;
	this._layer = 0;
	this.postUpdate = new haxepunk_Signal0();
	this.preUpdate = new haxepunk_Signal0();
	this.originY = 0;
	this.originX = 0;
	this.height = 0;
	this.width = 0;
	this.followCamera = null;
	this.y = 0;
	this.x = 0;
	this.collidable = true;
	this.visible = true;
	this.skipFrames = 0;
	this.camera = null;
	haxepunk_Tweener.call(this);
	this.set_x(x);
	this.set_y(y);
	this.originX = this.originY = 0;
	this.set_width(this.set_height(0));
	this._moveX = this._moveY = 0;
	this._type = "";
	this._name = "";
	this.HITBOX = new haxepunk_Mask();
	this.set_layer(0);
	if(graphic != null) {
		this.graphic = graphic;
	}
	if(mask != null) {
		this.set_mask(mask);
	}
	this.HITBOX.set_parent(this);
	this._class = Type.getClassName(js_Boot.getClass(this));
};
$hxClasses["haxepunk.Entity"] = haxepunk_Entity;
haxepunk_Entity.__name__ = ["haxepunk","Entity"];
haxepunk_Entity.toPosition = function(entity) {
	return haxepunk__$Position_Position_$Impl_$._new(entity);
};
haxepunk_Entity.__super__ = haxepunk_Tweener;
haxepunk_Entity.prototype = $extend(haxepunk_Tweener.prototype,{
	parent: null
	,camera: null
	,set_camera: function(v) {
		return this.camera = v;
	}
	,skipFrames: null
	,visible: null
	,get_visible: function() {
		if(this.visible) {
			if(this.parent != null) {
				return this.parent.get_visible();
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,set_visible: function(v) {
		return this.visible = v;
	}
	,get_active: function() {
		if(this.active) {
			if(this.parent != null) {
				return this.parent.get_active();
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,collidable: null
	,get_collidable: function() {
		if(this.collidable) {
			if(this.parent != null) {
				return this.parent.get_collidable();
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,set_collidable: function(v) {
		return this.collidable = v;
	}
	,get_enabled: function() {
		if(this.get_active() && this.get_visible()) {
			return this.get_collidable();
		} else {
			return false;
		}
	}
	,set_enabled: function(v) {
		return this.set_active(this.set_visible(this.set_collidable(v)));
	}
	,x: null
	,get_x: function() {
		var parentX = this.parent == null ? 0 : this.parent.get_x();
		return parentX + this.x + (this.followCamera == null ? 0 : this.followCamera.x);
	}
	,set_x: function(v) {
		var parentX = this.parent == null ? 0 : this.parent.get_x();
		return this.x = v - parentX;
	}
	,y: null
	,get_y: function() {
		var parentY = this.parent == null ? 0 : this.parent.get_y();
		return parentY + this.y + (this.followCamera == null ? 0 : this.followCamera.y);
	}
	,set_y: function(v) {
		var parentY = this.parent == null ? 0 : this.parent.get_y();
		return this.y = v - parentY;
	}
	,get_localX: function() {
		return this.get_x() - (this.parent == null ? 0 : this.parent.get_x());
	}
	,set_localX: function(v) {
		return this.set_x((this.parent == null ? 0 : this.parent.get_x()) + v);
	}
	,get_localY: function() {
		return this.get_y() - (this.parent == null ? 0 : this.parent.get_y());
	}
	,set_localY: function(v) {
		return this.set_y((this.parent == null ? 0 : this.parent.get_y()) + v);
	}
	,followCamera: null
	,width: null
	,get_width: function() {
		return this.width;
	}
	,set_width: function(w) {
		return this.width = w;
	}
	,height: null
	,get_height: function() {
		return this.height;
	}
	,set_height: function(h) {
		return this.height = h;
	}
	,originX: null
	,originY: null
	,preUpdate: null
	,postUpdate: null
	,added: function() {
	}
	,removed: function() {
	}
	,resized: function() {
	}
	,shouldUpdate: function() {
		if(this.skipFrames == 0) {
			return true;
		} else if(++this._frames % this.skipFrames == 0) {
			this._frames %= this.skipFrames;
			return true;
		} else {
			return false;
		}
	}
	,update: function() {
	}
	,render: function(camera) {
		if(this.graphic != null && this.graphic._visible) {
			if(this.graphic.relative) {
				haxepunk_Entity._point.x = this.get_x();
				haxepunk_Entity._point.y = this.get_y();
			} else {
				haxepunk_Entity._point.x = haxepunk_Entity._point.y = 0;
			}
			this.graphic.doRender(haxepunk_Entity._point,camera);
		}
	}
	,debugDraw: function(camera,selected) {
		if(selected == null) {
			selected = false;
		}
		if(this._mask == null && this.get_width() > 0 && this.get_height() > 0 && this.get_collidable()) {
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			haxepunk_Mask.drawContext.lineThickness = 2;
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			var _this = haxepunk_Mask.drawContext;
			_this.color = 16711680;
			_this.alpha = 0.25;
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			haxepunk_Mask.drawContext.rectFilled((this.get_x() - camera.x - this.originX) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),(this.get_y() - camera.y - this.originY) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY),this.get_width() * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),this.get_height() * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY));
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			var _this1 = haxepunk_Mask.drawContext;
			_this1.color = 16711680;
			_this1.alpha = 0.5;
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			haxepunk_Mask.drawContext.rect((this.get_x() - camera.x - this.originX) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),(this.get_y() - camera.y - this.originY) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY),this.get_width() * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),this.get_height() * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY));
		} else if(this._mask != null) {
			this._mask.debugDraw(camera);
		}
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		var _this2 = haxepunk_Mask.drawContext;
		_this2.color = selected ? 65280 : 16777215;
		_this2.alpha = 1;
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		var _this3 = haxepunk_Mask.drawContext;
		var x = (this.get_x() - camera.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX);
		var y = (this.get_y() - camera.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY);
		var radians = 2 * Math.PI / 8;
		var halfThick = _this3.lineThickness / 2;
		var innerRadius = 3 - halfThick;
		var outerRadius = 3 + halfThick;
		var inner_y;
		var inner_x = 0;
		inner_y = 0;
		var outer_y;
		var outer_x = 0;
		outer_y = 0;
		var lastOuter_y;
		var lastOuter_x = 0;
		lastOuter_y = 0;
		var lastInner_y;
		var lastInner_x = 0;
		lastInner_y = 0;
		if(_this3.shader == null) {
			_this3.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = _this3.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : _this3.scene;
		_this3.command = scene.batch.getDrawCommand(null,_this3.shader,_this3.smooth,_this3.blend,null);
		var _g1 = 0;
		var _g = 9;
		while(_g1 < _g) {
			var segment = _g1++;
			var theta = segment * radians;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			inner_x = x + sin * innerRadius;
			inner_y = y + cos * innerRadius;
			outer_x = x + sin * outerRadius;
			outer_y = y + cos * outerRadius;
			if(segment != 0) {
				var _this4 = _this3.command;
				var tx1 = lastInner_x;
				var ty1 = lastInner_y;
				var tx2 = lastOuter_x;
				var ty2 = lastOuter_y;
				var tx3 = outer_x;
				var ty3 = outer_y;
				var color = _this3.color;
				var alpha = _this3.alpha;
				if(alpha > 0) {
					var onScreen;
					var onScreen1;
					var onScreen2;
					var _this5 = _this4.visibleArea;
					if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this5.x + _this5.width) {
						onScreen2 = (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this4.visibleArea.x;
					} else {
						onScreen2 = false;
					}
					if(onScreen2) {
						var _this6 = _this4.visibleArea;
						onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this6.y + _this6.height;
					} else {
						onScreen1 = false;
					}
					if(onScreen1) {
						onScreen = (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this4.visibleArea.y;
					} else {
						onScreen = false;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx1;
						data1.ty1 = ty1;
						data1.uvx1 = 0;
						data1.uvy1 = 0;
						data1.tx2 = tx2;
						data1.ty2 = ty2;
						data1.uvx2 = 0;
						data1.uvy2 = 0;
						data1.tx3 = tx3;
						data1.ty3 = ty3;
						data1.uvx3 = 0;
						data1.uvy3 = 0;
						data1.color = color;
						data1.alpha = alpha;
						if(_this4.data == null) {
							_this4.data = data1;
						} else {
							_this4._lastData._next = data1;
						}
						_this4._lastData = data1;
						++_this4.triangleCount;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x1 = a > b ? b > c ? c : b : a > c ? c : a;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c1 = data1.tx3;
						var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
						var a2 = data1.ty1;
						var b2 = data1.ty2;
						var c2 = data1.ty3;
						var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
						var a3 = data1.ty1;
						var b3 = data1.ty2;
						var c3 = data1.ty3;
						var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
						if(_this4.bounds.width == 0) {
							_this4.bounds.x = x1;
							_this4.bounds.width = x2 - x1;
						} else {
							if(x1 < _this4.bounds.x) {
								_this4.bounds.width += _this4.bounds.x - x1;
								_this4.bounds.x = x1;
							}
							var _this7 = _this4.bounds;
							if(x2 > _this7.x + _this7.width) {
								_this4.bounds.width = x2 - _this4.bounds.x;
							}
						}
						if(_this4.bounds.height == 0) {
							_this4.bounds.y = y1;
							_this4.bounds.height = y2 - y1;
						} else {
							if(y1 < _this4.bounds.y) {
								_this4.bounds.height += _this4.bounds.y - y1;
								_this4.bounds.y = y1;
							}
							var _this8 = _this4.bounds;
							if(y2 > _this8.y + _this8.height) {
								_this4.bounds.height = y2 - _this4.bounds.y;
							}
						}
					}
				}
				var _this9 = _this3.command;
				var tx11 = lastInner_x;
				var ty11 = lastInner_y;
				var tx21 = outer_x;
				var ty21 = outer_y;
				var tx31 = inner_x;
				var ty31 = inner_y;
				var color1 = _this3.color;
				var alpha1 = _this3.alpha;
				if(alpha1 > 0) {
					var onScreen3;
					var onScreen4;
					var onScreen5;
					var _this10 = _this9.visibleArea;
					if((tx11 > tx21 ? tx21 > tx31 ? tx31 : tx21 : tx11 > tx31 ? tx31 : tx11) <= _this10.x + _this10.width) {
						onScreen5 = (tx11 < tx21 ? tx21 < tx31 ? tx31 : tx21 : tx11 < tx31 ? tx31 : tx11) >= _this9.visibleArea.x;
					} else {
						onScreen5 = false;
					}
					if(onScreen5) {
						var _this11 = _this9.visibleArea;
						onScreen4 = (ty11 > ty21 ? ty21 > ty31 ? ty31 : ty21 : ty11 > ty31 ? ty31 : ty11) <= _this11.y + _this11.height;
					} else {
						onScreen4 = false;
					}
					if(onScreen4) {
						onScreen3 = (ty11 < ty21 ? ty21 < ty31 ? ty31 : ty21 : ty11 < ty31 ? ty31 : ty11) >= _this9.visibleArea.y;
					} else {
						onScreen3 = false;
					}
					if(onScreen3) {
						var data2;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data2._next = null;
						} else {
							data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data3 = data2;
						data3.tx1 = tx11;
						data3.ty1 = ty11;
						data3.uvx1 = 0;
						data3.uvy1 = 0;
						data3.tx2 = tx21;
						data3.ty2 = ty21;
						data3.uvx2 = 0;
						data3.uvy2 = 0;
						data3.tx3 = tx31;
						data3.ty3 = ty31;
						data3.uvx3 = 0;
						data3.uvy3 = 0;
						data3.color = color1;
						data3.alpha = alpha1;
						if(_this9.data == null) {
							_this9.data = data3;
						} else {
							_this9._lastData._next = data3;
						}
						_this9._lastData = data3;
						++_this9.triangleCount;
						var a4 = data3.tx1;
						var b4 = data3.tx2;
						var c4 = data3.tx3;
						var x11 = a4 > b4 ? b4 > c4 ? c4 : b4 : a4 > c4 ? c4 : a4;
						var a5 = data3.tx1;
						var b5 = data3.tx2;
						var c5 = data3.tx3;
						var x21 = a5 < b5 ? b5 < c5 ? c5 : b5 : a5 < c5 ? c5 : a5;
						var a6 = data3.ty1;
						var b6 = data3.ty2;
						var c6 = data3.ty3;
						var y11 = a6 > b6 ? b6 > c6 ? c6 : b6 : a6 > c6 ? c6 : a6;
						var a7 = data3.ty1;
						var b7 = data3.ty2;
						var c7 = data3.ty3;
						var y21 = a7 < b7 ? b7 < c7 ? c7 : b7 : a7 < c7 ? c7 : a7;
						if(_this9.bounds.width == 0) {
							_this9.bounds.x = x11;
							_this9.bounds.width = x21 - x11;
						} else {
							if(x11 < _this9.bounds.x) {
								_this9.bounds.width += _this9.bounds.x - x11;
								_this9.bounds.x = x11;
							}
							var _this12 = _this9.bounds;
							if(x21 > _this12.x + _this12.width) {
								_this9.bounds.width = x21 - _this9.bounds.x;
							}
						}
						if(_this9.bounds.height == 0) {
							_this9.bounds.y = y11;
							_this9.bounds.height = y21 - y11;
						} else {
							if(y11 < _this9.bounds.y) {
								_this9.bounds.height += _this9.bounds.y - y11;
								_this9.bounds.y = y11;
							}
							var _this13 = _this9.bounds;
							if(y21 > _this13.y + _this13.height) {
								_this9.bounds.height = y21 - _this9.bounds.y;
							}
						}
					}
				}
			}
			lastOuter_x = outer_x;
			lastOuter_y = outer_y;
			lastInner_x = inner_x;
			lastInner_y = inner_y;
		}
	}
	,collide: function(type,x,y) {
		if(this._scene == null) {
			return null;
		}
		var _this = this._scene;
		var entities = _this._types.exists(type) ? _this._types.get(type) : null;
		if(!this.get_collidable() || entities == null) {
			return null;
		}
		this._x = this.get_x();
		this._y = this.get_y();
		this.set_x(x);
		this.set_y(y);
		if(this._mask == null) {
			var _g_head = entities.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e = val;
				if(e.get_collidable() && e != this && x - this.originX + this.get_width() > e.get_x() - e.originX && y - this.originY + this.get_height() > e.get_y() - e.originY && x - this.originX < e.get_x() - e.originX + e.get_width() && y - this.originY < e.get_y() - e.originY + e.get_height()) {
					if(e._mask == null || e._mask.collide(this.HITBOX)) {
						this.set_x(this._x);
						this.set_y(this._y);
						return e;
					}
				}
			}
		} else {
			var _g_head1 = entities.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var e1 = val1;
				if(e1.get_collidable() && e1 != this && x - this.originX + this.get_width() > e1.get_x() - e1.originX && y - this.originY + this.get_height() > e1.get_y() - e1.originY && x - this.originX < e1.get_x() - e1.originX + e1.get_width() && y - this.originY < e1.get_y() - e1.originY + e1.get_height()) {
					if(this._mask.collide(e1._mask != null ? e1._mask : e1.HITBOX)) {
						this.set_x(this._x);
						this.set_y(this._y);
						return e1;
					}
				}
			}
		}
		this.set_x(this._x);
		this.set_y(this._y);
		return null;
	}
	,collideTypes: function(types,x,y) {
		switch(types[1]) {
		case 0:
			var s = types[2];
			return this.collide(s,x,y);
		case 1:
			var a = types[2];
			var e;
			var _g = 0;
			while(_g < a.length) {
				var type = a[_g];
				++_g;
				e = this.collide(type,x,y);
				if(e != null) {
					return e;
				}
			}
			break;
		}
		return null;
	}
	,collideWith: function(e,x,y) {
		this._x = this.get_x();
		this._y = this.get_y();
		this.set_x(x);
		this.set_y(y);
		if(this.get_collidable() && e.get_collidable() && x - this.originX + this.get_width() > e.get_x() - e.originX && y - this.originY + this.get_height() > e.get_y() - e.originY && x - this.originX < e.get_x() - e.originX + e.get_width() && y - this.originY < e.get_y() - e.originY + e.get_height()) {
			if(this._mask == null) {
				if(e._mask == null || e._mask.collide(this.HITBOX)) {
					this.set_x(this._x);
					this.set_y(this._y);
					return e;
				}
				this.set_x(this._x);
				this.set_y(this._y);
				return null;
			}
			if(this._mask.collide(e._mask != null ? e._mask : e.HITBOX)) {
				this.set_x(this._x);
				this.set_y(this._y);
				return e;
			}
		}
		this.set_x(this._x);
		this.set_y(this._y);
		return null;
	}
	,collideRect: function(x,y,rX,rY,rWidth,rHeight) {
		if(x - this.originX + this.get_width() >= rX && y - this.originY + this.get_height() >= rY && x - this.originX <= rX + rWidth && y - this.originY <= rY + rHeight) {
			if(this._mask == null) {
				return true;
			}
			this._x = this.get_x();
			this._y = this.get_y();
			this.set_x(x);
			this.set_y(y);
			haxepunk_HXP.entity.set_x(rX);
			haxepunk_HXP.entity.set_y(rY);
			haxepunk_HXP.entity.set_width(rWidth | 0);
			haxepunk_HXP.entity.set_height(rHeight | 0);
			if(this._mask.collide(haxepunk_HXP.entity.HITBOX)) {
				this.set_x(this._x);
				this.set_y(this._y);
				return true;
			}
			this.set_x(this._x);
			this.set_y(this._y);
			return false;
		}
		return false;
	}
	,collidePoint: function(x,y,pX,pY) {
		if(pX >= x - this.originX && pY >= y - this.originY && pX < x - this.originX + this.get_width() && pY < y - this.originY + this.get_height()) {
			if(this._mask == null) {
				return true;
			}
			this._x = this.get_x();
			this._y = this.get_y();
			this.set_x(x);
			this.set_y(y);
			haxepunk_HXP.entity.set_x(pX);
			haxepunk_HXP.entity.set_y(pY);
			haxepunk_HXP.entity.set_width(1);
			haxepunk_HXP.entity.set_height(1);
			if(this._mask.collide(haxepunk_HXP.entity.HITBOX)) {
				this.set_x(this._x);
				this.set_y(this._y);
				return true;
			}
			this.set_x(this._x);
			this.set_y(this._y);
			return false;
		}
		return false;
	}
	,collideInto: function(type,x,y,array) {
		if(this._scene == null) {
			return;
		}
		var _this = this._scene;
		var entities = _this._types.exists(type) ? _this._types.get(type) : null;
		if(!this.get_collidable() || entities == null) {
			return;
		}
		this._x = this.get_x();
		this._y = this.get_y();
		this.set_x(x);
		this.set_y(y);
		var n = array.length;
		if(this._mask == null) {
			var _g_head = entities.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e = val;
				e = e;
				if(e.get_collidable() && e != this && x - this.originX + this.get_width() > e.get_x() - e.originX && y - this.originY + this.get_height() > e.get_y() - e.originY && x - this.originX < e.get_x() - e.originX + e.get_width() && y - this.originY < e.get_y() - e.originY + e.get_height()) {
					if(e._mask == null || e._mask.collide(this.HITBOX)) {
						array[n++] = e;
					}
				}
			}
		} else {
			var _g_head1 = entities.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var e1 = val1;
				e1 = e1;
				if(e1.get_collidable() && e1 != this && x - this.originX + this.get_width() > e1.get_x() - e1.originX && y - this.originY + this.get_height() > e1.get_y() - e1.originY && x - this.originX < e1.get_x() - e1.originX + e1.get_width() && y - this.originY < e1.get_y() - e1.originY + e1.get_height()) {
					if(this._mask.collide(e1._mask != null ? e1._mask : e1.HITBOX)) {
						array[n++] = e1;
					}
				}
			}
		}
		this.set_x(this._x);
		this.set_y(this._y);
	}
	,collideTypesInto: function(types,x,y,array) {
		if(this._scene == null) {
			return;
		}
		var _g = 0;
		while(_g < types.length) {
			var type = types[_g];
			++_g;
			this.collideInto(type,x,y,array);
		}
	}
	,get_scene: function() {
		return this._scene;
	}
	,halfWidth: null
	,get_halfWidth: function() {
		return this.get_width() / 2;
	}
	,halfHeight: null
	,get_halfHeight: function() {
		return this.get_height() / 2;
	}
	,centerX: null
	,get_centerX: function() {
		return this.get_x() - this.originX + this.get_width() / 2;
	}
	,centerY: null
	,get_centerY: function() {
		return this.get_y() - this.originY + this.get_height() / 2;
	}
	,left: null
	,get_left: function() {
		return this.get_x() - this.originX;
	}
	,right: null
	,get_right: function() {
		return this.get_x() - this.originX + this.get_width();
	}
	,top: null
	,get_top: function() {
		return this.get_y() - this.originY;
	}
	,bottom: null
	,get_bottom: function() {
		return this.get_y() - this.originY + this.get_height();
	}
	,get_layer: function() {
		return this._layer;
	}
	,set_layer: function(value) {
		if(this._layer == value) {
			return this._layer;
		}
		if(this._scene == null) {
			return this._layer = value;
		}
		this._scene.removeRender(this);
		this._layer = value;
		this._scene.addRender(this);
		return this._layer;
	}
	,get_type: function() {
		return this._type;
	}
	,set_type: function(value) {
		if(this._type == value) {
			return this._type;
		}
		if(this._scene == null) {
			return this._type = value;
		}
		if(this._type != "") {
			this._scene.removeType(this);
		}
		this._type = value;
		if(value != "") {
			this._scene.addType(this);
		}
		return this._type;
	}
	,get_mask: function() {
		return this._mask;
	}
	,set_mask: function(value) {
		if(this._mask == value) {
			return value;
		}
		if(this._mask != null) {
			this._mask.set_parent(null);
		}
		this._mask = value;
		if(value != null) {
			this._mask.set_parent(this);
		}
		return this._mask;
	}
	,graphic: null
	,get_name: function() {
		return this._name;
	}
	,set_name: function(value) {
		if(this._name == value) {
			return this._name;
		}
		if(this._scene == null) {
			return this._name = value;
		}
		if(this._name != "") {
			this._scene._entityNames.remove(this._name);
		}
		this._name = value;
		if(value != "") {
			this._scene._entityNames.set(this._name,this);
		}
		return this._name;
	}
	,addGraphic: function(g) {
		if(this.graphic == null) {
			this.graphic = g;
		} else if(js_Boot.__instanceof(this.graphic,haxepunk_graphics_Graphiclist)) {
			(js_Boot.__cast(this.graphic , haxepunk_graphics_Graphiclist)).add(g);
		} else {
			var list = new haxepunk_graphics_Graphiclist();
			list.add(this.graphic);
			list.add(g);
			this.graphic = list;
		}
		return g;
	}
	,setHitbox: function(width,height,originX,originY) {
		if(originY == null) {
			originY = 0;
		}
		if(originX == null) {
			originX = 0;
		}
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		this.set_width(width);
		this.set_height(height);
		this.originX = originX;
		this.originY = originY;
	}
	,setHitboxTo: function(o) {
		var value = o.width;
		this.set_width(typeof(value) == "number" && ((value | 0) === value) || typeof(value) == "number" ? value : 0);
		var value1 = o.height;
		this.set_height(typeof(value1) == "number" && ((value1 | 0) === value1) || typeof(value1) == "number" ? value1 : 0);
		var value2 = o.originX;
		var value3 = o.x;
		var defaultValue = typeof(value3) == "number" && ((value3 | 0) === value3) || typeof(value3) == "number" ? value3 : 0;
		this.originX = typeof(value2) == "number" && ((value2 | 0) === value2) || typeof(value2) == "number" ? value2 : -defaultValue;
		var value4 = o.originY;
		var value5 = o.y;
		var defaultValue1 = typeof(value5) == "number" && ((value5 | 0) === value5) || typeof(value5) == "number" ? value5 : 0;
		this.originY = typeof(value4) == "number" && ((value4 | 0) === value4) || typeof(value4) == "number" ? value4 : -defaultValue1;
	}
	,setOrigin: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.originX = x;
		this.originY = y;
	}
	,centerOrigin: function() {
		this.originX = this.get_width() / 2 | 0;
		this.originY = this.get_height() / 2 | 0;
	}
	,distanceFrom: function(e,useHitboxes) {
		if(useHitboxes == null) {
			useHitboxes = false;
		}
		if(!useHitboxes) {
			return Math.sqrt((this.get_x() - e.get_x()) * (this.get_x() - e.get_x()) + (this.get_y() - e.get_y()) * (this.get_y() - e.get_y()));
		} else {
			return haxepunk_math_MathUtil.distanceRects(this.get_x() - this.originX,this.get_y() - this.originY,this.get_width(),this.get_height(),e.get_x() - e.originX,e.get_y() - e.originY,e.get_width(),e.get_height());
		}
	}
	,distanceToPoint: function(px,py,useHitbox) {
		if(useHitbox == null) {
			useHitbox = false;
		}
		if(!useHitbox) {
			return Math.sqrt((this.get_x() - px) * (this.get_x() - px) + (this.get_y() - py) * (this.get_y() - py));
		} else {
			return haxepunk_math_MathUtil.distanceRectPoint(px,py,this.get_x() - this.originX,this.get_y() - this.originY,this.get_width(),this.get_height());
		}
	}
	,distanceToRect: function(rx,ry,rwidth,rheight) {
		return haxepunk_math_MathUtil.distanceRects(rx,ry,rwidth,rheight,this.get_x() - this.originX,this.get_y() - this.originY,this.get_width(),this.get_height());
	}
	,toString: function() {
		return this._class;
	}
	,moveBy: function(x,y,solidType,sweep) {
		if(sweep == null) {
			sweep = false;
		}
		this._moveX += x;
		this._moveY += y;
		x = Math.round(this._moveX);
		y = Math.round(this._moveY);
		this._moveX -= x;
		this._moveY -= y;
		if(solidType != null) {
			var sign;
			var e;
			if(x != 0) {
				if(this.get_collidable() && (sweep || this.collideTypes(solidType,this.get_x() + x,this.get_y()) != null)) {
					if(x > 0) {
						sign = 1;
					} else {
						sign = -1;
					}
					while(x != 0) {
						e = this.collideTypes(solidType,this.get_x() + sign,this.get_y());
						if(e != null) {
							if(this.moveCollideX(e)) {
								break;
							} else {
								var _g = this;
								_g.set_x(_g.get_x() + sign);
							}
						} else {
							var _g1 = this;
							_g1.set_x(_g1.get_x() + sign);
						}
						x -= sign;
					}
				} else {
					var _g2 = this;
					_g2.set_x(_g2.get_x() + x);
				}
			}
			if(y != 0) {
				if(this.get_collidable() && (sweep || this.collideTypes(solidType,this.get_x(),this.get_y() + y) != null)) {
					if(y > 0) {
						sign = 1;
					} else {
						sign = -1;
					}
					while(y != 0) {
						e = this.collideTypes(solidType,this.get_x(),this.get_y() + sign);
						if(e != null) {
							if(this.moveCollideY(e)) {
								break;
							} else {
								var _g3 = this;
								_g3.set_y(_g3.get_y() + sign);
							}
						} else {
							var _g4 = this;
							_g4.set_y(_g4.get_y() + sign);
						}
						y -= sign;
					}
				} else {
					var _g5 = this;
					_g5.set_y(_g5.get_y() + y);
				}
			}
		} else {
			var _g6 = this;
			_g6.set_x(_g6.get_x() + x);
			var _g7 = this;
			_g7.set_y(_g7.get_y() + y);
		}
	}
	,moveTo: function(x,y,solidType,sweep) {
		if(sweep == null) {
			sweep = false;
		}
		this.moveBy(x - this.get_x(),y - this.get_y(),solidType,sweep);
	}
	,moveTowards: function(x,y,amount,solidType,sweep) {
		if(sweep == null) {
			sweep = false;
		}
		var tmp = this.get_x();
		haxepunk_Entity._point.x = x - tmp;
		var tmp1 = this.get_y();
		haxepunk_Entity._point.y = y - tmp1;
		if(haxepunk_Entity._point.x * haxepunk_Entity._point.x + haxepunk_Entity._point.y * haxepunk_Entity._point.y > amount * amount) {
			var _this = haxepunk_Entity._point;
			if(!(_this.x == 0 && _this.y == 0)) {
				var normal = amount / Math.sqrt(_this.x * _this.x + _this.y * _this.y);
				_this.x *= normal;
				_this.y *= normal;
			}
		}
		this.moveBy(haxepunk_Entity._point.x,haxepunk_Entity._point.y,solidType,sweep);
	}
	,moveAtAngle: function(angle,amount,solidType,sweep) {
		if(sweep == null) {
			sweep = false;
		}
		angle *= Math.PI / -180;
		this.moveBy(Math.cos(angle) * amount,Math.sin(angle) * amount,solidType,sweep);
	}
	,moveCollideX: function(e) {
		return true;
	}
	,moveCollideY: function(e) {
		return true;
	}
	,clampHorizontal: function(left,right,padding) {
		if(padding == null) {
			padding = 0;
		}
		if(this.get_x() - this.originX < left + padding) {
			this.set_x(left + this.originX + padding);
		}
		if(this.get_x() - this.originX + this.get_width() > right - padding) {
			this.set_x(right - this.get_width() + this.originX - padding);
		}
	}
	,clampVertical: function(top,bottom,padding) {
		if(padding == null) {
			padding = 0;
		}
		if(this.get_y() - this.originY < top + padding) {
			this.set_y(top + this.originY + padding);
		}
		if(this.get_y() - this.originY + this.get_height() > bottom - padding) {
			this.set_y(bottom - this.get_height() + this.originY - padding);
		}
	}
	,centerGraphicInRect: function() {
		if(this.graphic != null) {
			this.graphic.x = this.get_width() / 2;
			this.graphic.y = this.get_height() / 2;
		}
	}
	,_class: null
	,_scene: null
	,_type: null
	,_layer: null
	,_name: null
	,_frames: null
	,_recycleNext: null
	,HITBOX: null
	,_mask: null
	,_x: null
	,_y: null
	,_moveX: null
	,_moveY: null
	,__class__: haxepunk_Entity
	,__properties__: $extend(haxepunk_Tweener.prototype.__properties__,{set_name:"set_name",get_name:"get_name",set_mask:"set_mask",get_mask:"get_mask",set_type:"set_type",get_type:"get_type",set_layer:"set_layer",get_layer:"get_layer",get_bottom:"get_bottom",get_top:"get_top",get_right:"get_right",get_left:"get_left",get_centerY:"get_centerY",get_centerX:"get_centerX",get_halfHeight:"get_halfHeight",get_halfWidth:"get_halfWidth",get_scene:"get_scene",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_localY:"set_localY",get_localY:"get_localY",set_localX:"set_localX",get_localX:"get_localX",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_enabled:"set_enabled",get_enabled:"get_enabled",set_collidable:"set_collidable",get_collidable:"get_collidable",set_visible:"set_visible",get_visible:"get_visible",set_camera:"set_camera"})
});
var haxepunk_Cursor = function(image) {
	var img = new haxepunk_graphics_Image(image);
	img.smooth = true;
	haxepunk_Entity.call(this,0,0,img);
};
$hxClasses["haxepunk.Cursor"] = haxepunk_Cursor;
haxepunk_Cursor.__name__ = ["haxepunk","Cursor"];
haxepunk_Cursor.__super__ = haxepunk_Entity;
haxepunk_Cursor.prototype = $extend(haxepunk_Entity.prototype,{
	update: function() {
		haxepunk_Entity.prototype.update.call(this);
		var _this = this._scene;
		var x = haxepunk_HXP.app.getMouseX() - haxepunk_HXP.screen.x - _this.x;
		var _this1 = _this.camera;
		this.set_x(x / (_this1.scale * _this1.scaleX * haxepunk_HXP.screen.fullScaleX) + _this.camera.x | 0);
		var _this2 = this._scene;
		var x1 = haxepunk_HXP.app.getMouseY() - haxepunk_HXP.screen.y - _this2.y;
		var _this3 = _this2.camera;
		this.set_y(x1 / (_this3.scale * _this3.scaleY * haxepunk_HXP.screen.fullScaleY) + _this2.camera.y | 0);
	}
	,render: function(camera) {
		var img = this.graphic;
		if(img != null) {
			img.scaleX = 1 / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX);
			img.scaleY = 1 / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY);
		}
		haxepunk_Entity.prototype.render.call(this,camera);
	}
	,show: function() {
		this.set_visible(true);
	}
	,hide: function() {
		this.set_visible(false);
	}
	,__class__: haxepunk_Cursor
});
var haxepunk__$Engine_VisibleSceneIterator = function() {
	this.scenes = [];
};
$hxClasses["haxepunk._Engine.VisibleSceneIterator"] = haxepunk__$Engine_VisibleSceneIterator;
haxepunk__$Engine_VisibleSceneIterator.__name__ = ["haxepunk","_Engine","VisibleSceneIterator"];
haxepunk__$Engine_VisibleSceneIterator.prototype = {
	hasNext: function() {
		return this.scenes.length > 0;
	}
	,next: function() {
		return this.scenes.pop();
	}
	,reset: function(engine) {
		this.scenes.length = 0;
		if(engine.console != null) {
			this.scenes.push(engine.console);
		}
		var scene;
		var i = engine._scenes.length - 1;
		while(i >= 0) {
			scene = engine._scenes[i];
			if(scene.visible) {
				this.scenes.push(scene);
			}
			if(scene.bgAlpha == 1) {
				break;
			}
			--i;
		}
		return this;
	}
	,scenes: null
	,__class__: haxepunk__$Engine_VisibleSceneIterator
};
var haxepunk_EntityList = function() {
	this.entities = [];
	this._recycled = new List();
	haxepunk_Entity.call(this);
};
$hxClasses["haxepunk.EntityList"] = haxepunk_EntityList;
haxepunk_EntityList.__name__ = ["haxepunk","EntityList"];
haxepunk_EntityList.__super__ = haxepunk_Entity;
haxepunk_EntityList.prototype = $extend(haxepunk_Entity.prototype,{
	entities: null
	,get_count: function() {
		return this.entities.length;
	}
	,add: function(entity,index) {
		if(index == null) {
			index = -1;
		}
		if(index < 0) {
			this.entities.push(entity);
		} else {
			this.entities.splice(index,0,entity);
		}
		if(this._type != "") {
			entity.set_type(this._type);
		}
		if(this._scene != null) {
			this._scene.add(entity);
		}
		entity.parent = this;
		entity.set_layer(this._layer);
		entity.set_camera(this.camera);
		return entity;
	}
	,remove: function(entity) {
		HxOverrides.remove(this.entities,entity);
		if(this._scene != null) {
			this._scene.remove(entity);
		}
		entity.parent = null;
		return entity;
	}
	,pop: function() {
		var entity = this.entities.pop();
		if(entity != null) {
			if(this._scene != null) {
				this._scene.remove(entity);
			}
			entity.parent = null;
		}
		return entity;
	}
	,apply: function(f) {
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			f(entity);
		}
	}
	,map: function(f) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.entities;
		while(_g1 < _g2.length) {
			var entity = _g2[_g1];
			++_g1;
			_g.push(f(entity));
		}
		return _g;
	}
	,added: function() {
		haxepunk_Entity.prototype.added.call(this);
		if(this._scene != null) {
			var _g = 0;
			var _g1 = this.entities;
			while(_g < _g1.length) {
				var entity = _g1[_g];
				++_g;
				this._scene.add(entity);
			}
		}
	}
	,removed: function() {
		if(this._scene != null) {
			var _g = 0;
			var _g1 = this.entities;
			while(_g < _g1.length) {
				var entity = _g1[_g];
				++_g;
				this._scene.remove(entity);
			}
		}
		haxepunk_Entity.prototype.removed.call(this);
	}
	,set_type: function(value) {
		if(value != "") {
			var _g = 0;
			var _g1 = this.entities;
			while(_g < _g1.length) {
				var entity = _g1[_g];
				++_g;
				entity.set_type(value);
			}
		}
		return this._type = value;
	}
	,set_layer: function(value) {
		var originalLayer = this._layer;
		var value1 = haxepunk_Entity.prototype.set_layer.call(this,value);
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			entity.set_layer(entity._layer - originalLayer + value1);
		}
		return value1;
	}
	,set_camera: function(value) {
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			entity.set_camera(value);
		}
		return this.camera = value;
	}
	,create: function(cls,constructorArgs) {
		var entity = this._recycled.pop();
		if(entity == null || entity._scene != null) {
			if(entity != null) {
				this.recycle(entity);
			}
			if(constructorArgs != null) {
				entity = Type.createInstance(cls,constructorArgs);
			} else {
				entity = Type.createInstance(cls,[]);
			}
		}
		entity.set_active(true);
		return this.add(entity);
	}
	,recycle: function(entity) {
		this.remove(entity);
		entity.set_active(false);
		return this.remove(entity);
	}
	,clearRecycled: function() {
		this._recycled.clear();
	}
	,_recycled: null
	,__class__: haxepunk_EntityList
	,__properties__: $extend(haxepunk_Entity.prototype.__properties__,{get_count:"get_count"})
});
var haxepunk__$Graphic_TileType_$Impl_$ = {};
$hxClasses["haxepunk._Graphic.TileType_Impl_"] = haxepunk__$Graphic_TileType_$Impl_$;
haxepunk__$Graphic_TileType_$Impl_$.__name__ = ["haxepunk","_Graphic","TileType_Impl_"];
haxepunk__$Graphic_TileType_$Impl_$.fromString = function(tileset) {
	var data = null;
	if(haxepunk_graphics_atlas_AtlasData._dataPool.exists(tileset)) {
		data = haxepunk_graphics_atlas_AtlasData._dataPool.get(tileset);
	} else {
		var texture = haxepunk_assets_AssetCache.global.getTexture(tileset);
		if(texture != null) {
			data = new haxepunk_graphics_atlas_AtlasData(texture,tileset);
		}
	}
	var this1 = data;
	return new haxepunk_graphics_atlas_TileAtlas(this1);
};
haxepunk__$Graphic_TileType_$Impl_$.fromTileAtlas = function(atlas) {
	return atlas;
};
haxepunk__$Graphic_TileType_$Impl_$.fromTexture = function(bd) {
	var this1 = new haxepunk_graphics_atlas_AtlasData(bd);
	return new haxepunk_graphics_atlas_TileAtlas(this1);
};
var haxepunk__$Graphic_ImageType_$Impl_$ = {};
$hxClasses["haxepunk._Graphic.ImageType_Impl_"] = haxepunk__$Graphic_ImageType_$Impl_$;
haxepunk__$Graphic_ImageType_$Impl_$.__name__ = ["haxepunk","_Graphic","ImageType_Impl_"];
haxepunk__$Graphic_ImageType_$Impl_$.fromString = function(s) {
	var region = haxepunk_assets_AssetCache.getRegion(s);
	if(region == null) {
		var data = null;
		if(haxepunk_graphics_atlas_AtlasData._dataPool.exists(s)) {
			data = haxepunk_graphics_atlas_AtlasData._dataPool.get(s);
		} else {
			var texture = haxepunk_assets_AssetCache.global.getTexture(s);
			if(texture != null) {
				data = new haxepunk_graphics_atlas_AtlasData(texture,s);
			}
		}
		var this1 = data;
		return haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1);
	} else {
		return region;
	}
};
haxepunk__$Graphic_ImageType_$Impl_$.fromTileAtlas = function(atlas) {
	return atlas.getRegion(0);
};
haxepunk__$Graphic_ImageType_$Impl_$.fromAtlasRegion = function(region) {
	return region;
};
haxepunk__$Graphic_ImageType_$Impl_$.fromTexture = function(bd) {
	var this1 = new haxepunk_graphics_atlas_AtlasData(bd);
	return haxepunk__$Graphic_ImageType_$Impl_$.fromAtlasRegion(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1));
};
haxepunk__$Graphic_ImageType_$Impl_$.fromStrings = function(v) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < v.length) {
		var image = v[_g1];
		++_g1;
		var data = null;
		if(haxepunk_graphics_atlas_AtlasData._dataPool.exists(image)) {
			data = haxepunk_graphics_atlas_AtlasData._dataPool.get(image);
		} else {
			var texture = haxepunk_assets_AssetCache.global.getTexture(image);
			if(texture != null) {
				data = new haxepunk_graphics_atlas_AtlasData(texture,image);
			}
		}
		var this1 = data;
		_g.push(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1));
	}
	return haxepunk__$Graphic_ImageType_$Impl_$.fromAtlasRegion(new haxepunk_graphics_atlas_AtlasResolutions(_g));
};
haxepunk__$Graphic_ImageType_$Impl_$.fromAtlasRegions = function(v) {
	return haxepunk__$Graphic_ImageType_$Impl_$.fromAtlasRegion(new haxepunk_graphics_atlas_AtlasResolutions(v));
};
var haxepunk__$Graphic_ImageOrTileType_$Impl_$ = {};
$hxClasses["haxepunk._Graphic.ImageOrTileType_Impl_"] = haxepunk__$Graphic_ImageOrTileType_$Impl_$;
haxepunk__$Graphic_ImageOrTileType_$Impl_$.__name__ = ["haxepunk","_Graphic","ImageOrTileType_Impl_"];
haxepunk__$Graphic_ImageOrTileType_$Impl_$.fromString = function(tileset) {
	var data = null;
	if(haxepunk_graphics_atlas_AtlasData._dataPool.exists(tileset)) {
		data = haxepunk_graphics_atlas_AtlasData._dataPool.get(tileset);
	} else {
		var texture = haxepunk_assets_AssetCache.global.getTexture(tileset);
		if(texture != null) {
			data = new haxepunk_graphics_atlas_AtlasData(texture,tileset);
		}
	}
	var this1 = data;
	return haxe_ds_Either.Right(new haxepunk_graphics_atlas_TileAtlas(this1));
};
haxepunk__$Graphic_ImageOrTileType_$Impl_$.fromTexture = function(bd) {
	var this1 = new haxepunk_graphics_atlas_AtlasData(bd);
	return haxe_ds_Either.Right(new haxepunk_graphics_atlas_TileAtlas(this1));
};
haxepunk__$Graphic_ImageOrTileType_$Impl_$.fromTileAtlas = function(atlas) {
	return haxe_ds_Either.Right(atlas);
};
haxepunk__$Graphic_ImageOrTileType_$Impl_$.fromAtlasRegion = function(region) {
	return haxe_ds_Either.Left(region);
};
var haxepunk_Graphic = function() {
	this._visible = true;
	this._point = new haxepunk_math_Vector2();
	this._scroll = true;
	this.relative = true;
	this.alpha = 1;
	this.scrollY = 1;
	this.scrollX = 1;
	this.y = 0;
	this.x = 0;
	this.blend = 1;
	this.flexibleLayer = false;
	this.pixelSnapping = false;
	this.active = false;
	this.smooth = true;
	this.set_color(16777215);
	if(haxepunk_graphics_shader_TextureShader.defaultShader == null) {
		haxepunk_graphics_shader_TextureShader.defaultShader = new haxepunk_graphics_shader_TextureShader();
	}
	this.shader = haxepunk_graphics_shader_TextureShader.defaultShader;
	this._class = Type.getClassName(js_Boot.getClass(this));
};
$hxClasses["haxepunk.Graphic"] = haxepunk_Graphic;
haxepunk_Graphic.__name__ = ["haxepunk","Graphic"];
haxepunk_Graphic.prototype = {
	active: null
	,smooth: null
	,pixelSnapping: null
	,flexibleLayer: null
	,blend: null
	,clipRect: null
	,shader: null
	,get_visible: function() {
		return this._visible;
	}
	,set_visible: function(value) {
		return this._visible = value;
	}
	,x: null
	,get_x: function() {
		return this.x;
	}
	,set_x: function(value) {
		return this.x = value;
	}
	,y: null
	,get_y: function() {
		return this.y;
	}
	,set_y: function(value) {
		return this.y = value;
	}
	,scrollX: null
	,scrollY: null
	,alpha: null
	,set_alpha: function(value) {
		return this.alpha = value < 0 ? 0 : value > 1 ? 1 : value;
	}
	,color: null
	,set_color: function(value) {
		return this.color = value & 16777215;
	}
	,relative: null
	,_screenClipRect: null
	,screenClipRect: function(camera,x,y) {
		if(this.clipRect != null) {
			if(this._screenClipRect == null) {
				this._screenClipRect = new haxepunk_math_Rectangle();
			}
			this._screenClipRect.setTo((x + this.clipRect.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),(y + this.clipRect.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY),this.clipRect.width * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),this.clipRect.height * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY));
			return this._screenClipRect;
		} else {
			return null;
		}
	}
	,floorX: function(camera,x) {
		if(this.pixelSnapping || camera.pixelSnapping) {
			return Math.floor(x * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX);
		} else {
			return x;
		}
	}
	,floorY: function(camera,y) {
		if(this.pixelSnapping || camera.pixelSnapping) {
			return Math.floor(y * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY);
		} else {
			return y;
		}
	}
	,update: function() {
	}
	,destroy: function() {
	}
	,isPixelPerfect: function(camera) {
		if(!this.pixelSnapping) {
			return camera.pixelSnapping;
		} else {
			return true;
		}
	}
	,doRender: function(point,camera) {
		if(this.pixelSnapping || camera.pixelSnapping) {
			this.pixelPerfectRender(point,camera);
		} else {
			this.render(point,camera);
		}
	}
	,render: function(point,camera) {
	}
	,pixelPerfectRender: function(point,camera) {
		this.render(point,camera);
	}
	,pause: function() {
		this.active = false;
	}
	,resume: function() {
		this.active = true;
	}
	,toString: function() {
		return "[" + this._class + "]";
	}
	,_class: null
	,_scroll: null
	,_point: null
	,_visible: null
	,__class__: haxepunk_Graphic
	,__properties__: {set_color:"set_color",set_alpha:"set_alpha",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_visible:"set_visible",get_visible:"get_visible"}
};
var haxepunk_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.setTo(x,y,width,height);
};
$hxClasses["haxepunk.math.Rectangle"] = haxepunk_math_Rectangle;
haxepunk_math_Rectangle.__name__ = ["haxepunk","math","Rectangle"];
haxepunk_math_Rectangle.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,get_left: function() {
		return this.x;
	}
	,set_left: function(value) {
		return this.x = value;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(value) {
		this.x = value - this.width;
		return value;
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(value) {
		return this.y = value;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(value) {
		this.y = value - this.height;
		return value;
	}
	,setTo: function(x,y,width,height) {
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
	}
	,clone: function() {
		return new haxepunk_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,isEmpty: function() {
		if(this.width <= 0) {
			return this.height <= 0;
		} else {
			return false;
		}
	}
	,intersects: function(other) {
		if(this.x <= other.x + other.width && other.x <= this.x + this.width && this.y <= other.y + other.height) {
			return other.y <= this.y + this.height;
		} else {
			return false;
		}
	}
	,intersection: function(other) {
		var left = Math.max(this.x,other.x);
		var right = Math.min(this.x + this.width,other.x + other.width);
		var top = Math.max(this.y,other.y);
		var bottom = Math.min(this.y + this.height,other.y + other.height);
		if(right >= left && bottom >= top) {
			return new haxepunk_math_Rectangle(left,top,right - left,bottom - this.y);
		} else {
			return null;
		}
	}
	,__class__: haxepunk_math_Rectangle
	,__properties__: {set_bottom:"set_bottom",get_bottom:"get_bottom",set_top:"set_top",get_top:"get_top",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left"}
};
var haxepunk_HXP = function() { };
$hxClasses["haxepunk.HXP"] = haxepunk_HXP;
haxepunk_HXP.__name__ = ["haxepunk","HXP"];
haxepunk_HXP.__properties__ = {set_time:"set_time",set_pan:"set_pan",get_pan:"get_pan",set_volume:"set_volume",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_scene:"set_scene",get_scene:"get_scene",get_choose:"get_choose",set_cursor:"set_cursor",get_camera:"get_camera"};
haxepunk_HXP.get_camera = function() {
	if(haxepunk_HXP.engine._scene == null) {
		return null;
	} else {
		return haxepunk_HXP.engine._scene.camera;
	}
};
haxepunk_HXP.set_cursor = function(cursor) {
	if(haxepunk_HXP.cursor == cursor) {
		return cursor;
	}
	if(cursor == null) {
		haxepunk_input_Mouse.showCursor();
	} else {
		haxepunk_input_Mouse.hideCursor();
	}
	return haxepunk_HXP.cursor = cursor;
};
haxepunk_HXP.get_choose = function() {
	return Reflect.makeVarArgs(haxepunk_HXP._choose);
};
haxepunk_HXP._choose = function(objs) {
	if(objs == null || objs.length == 0) {
		throw new js__$Boot_HaxeError("Can't choose a random element on an empty array");
	}
	if((objs[0] instanceof Array) && objs[0].__enum__ == null) {
		var c = js_Boot.__cast(objs[0] , Array);
		if(c.length != 0) {
			haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
			return c[haxepunk_math_Random._seed / 2147483647 * c.length | 0];
		} else {
			throw new js__$Boot_HaxeError("Can't choose a random element on an empty array");
		}
	} else {
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		return objs[haxepunk_math_Random._seed / 2147483647 * objs.length | 0];
	}
};
haxepunk_HXP.get_scene = function() {
	return haxepunk_HXP.engine._scene;
};
haxepunk_HXP.set_scene = function(value) {
	return haxepunk_HXP.engine.set_scene(value);
};
haxepunk_HXP.resize = function(width,height) {
	haxepunk_HXP.windowWidth = width;
	haxepunk_HXP.windowHeight = height;
	haxepunk_HXP.screen.resize(width,height);
	haxepunk_HXP.halfWidth = haxepunk_HXP.width / 2;
	haxepunk_HXP.halfHeight = haxepunk_HXP.height / 2;
	haxepunk_HXP.bounds.width = width;
	haxepunk_HXP.bounds.height = height;
	haxepunk_HXP.engine._scene._resize();
};
haxepunk_HXP.clear = function(array) {
	array.length = 0;
};
haxepunk_HXP.setCamera = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	(haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).x = x;
	(haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).y = y;
};
haxepunk_HXP.resetCamera = function() {
	(haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).x = (haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).y = 0;
};
haxepunk_HXP.get_fullscreen = function() {
	return haxepunk_HXP.app.get_fullscreen();
};
haxepunk_HXP.set_fullscreen = function(value) {
	return haxepunk_HXP.app.set_fullscreen(value);
};
haxepunk_HXP.set_volume = function(value) {
	value = haxepunk_math_MathUtil.clamp(value,0,1);
	if(haxepunk_HXP.volume == value) {
		return value;
	}
	haxepunk_HXP.volume = value;
	haxepunk_backend_flash_Sfx.onGlobalUpdated(false);
	return haxepunk_HXP.volume;
};
haxepunk_HXP.get_pan = function() {
	return haxepunk_HXP._pan;
};
haxepunk_HXP.set_pan = function(value) {
	if(value < -1) {
		value = -1;
	}
	if(value > 1) {
		value = 1;
	}
	if(haxepunk_HXP._pan == value) {
		return value;
	}
	haxepunk_HXP._pan = value;
	haxepunk_backend_flash_Sfx.onGlobalUpdated(true);
	return haxepunk_HXP._pan;
};
haxepunk_HXP.indexOf = function(arr,v) {
	return arr.indexOf(v);
};
haxepunk_HXP.next = function(current,options,loop) {
	if(loop == null) {
		loop = true;
	}
	if(loop) {
		return options[(options.indexOf(current) + 1) % options.length];
	} else {
		return options[Math.min(options.indexOf(current) + 1,options.length - 1) | 0];
	}
};
haxepunk_HXP.prev = function(current,options,loop) {
	if(loop == null) {
		loop = true;
	}
	if(loop) {
		return options[(options.indexOf(current) - 1 + options.length) % options.length];
	} else {
		return options[Math.max(options.indexOf(current) - 1,0) | 0];
	}
};
haxepunk_HXP.swap = function(current,a,b) {
	if(current == a) {
		return b;
	} else {
		return a;
	}
};
haxepunk_HXP.insertSortedKey = function(list,key,compare) {
	var result = 0;
	var mid = 0;
	var min = 0;
	var max = list.length - 1;
	while(max >= min) {
		mid = min + ((max - min) / 2 | 0);
		result = compare(list[mid],key);
		if(result > 0) {
			max = mid - 1;
		} else if(result < 0) {
			min = mid + 1;
		} else {
			return;
		}
	}
	list.splice(result > 0 ? mid : mid + 1,0,key);
};
haxepunk_HXP.timeFlag = function() {
	var t = window.performance.now() / 1000;
	var e = t - haxepunk_HXP._time;
	haxepunk_HXP._time = t;
	return e;
};
haxepunk_HXP.tween = function(object,values,duration,options) {
	if(options != null && Object.prototype.hasOwnProperty.call(options,"delay")) {
		var delay = options.delay;
		Reflect.deleteField(options,"delay");
		haxepunk_HXP.alarm(delay,function() {
			haxepunk_HXP.tween(object,values,duration,options);
		});
		return null;
	}
	var type = haxepunk_TweenType.OneShot;
	var complete = null;
	var ease = null;
	var tweener = haxepunk_HXP.tweener;
	if(js_Boot.__instanceof(object,haxepunk_Tweener)) {
		tweener = js_Boot.__cast(object , haxepunk_Tweener);
	}
	if(options != null) {
		if(Object.prototype.hasOwnProperty.call(options,"type")) {
			type = options.type;
		}
		if(Object.prototype.hasOwnProperty.call(options,"complete")) {
			complete = options.complete;
		}
		if(Object.prototype.hasOwnProperty.call(options,"ease")) {
			ease = options.ease;
		}
		if(Object.prototype.hasOwnProperty.call(options,"tweener")) {
			tweener = options.tweener;
		}
	}
	var tween = new haxepunk_tweens_misc_MultiVarTween(type);
	if(complete != null) {
		tween.onComplete.callbacks.push(complete);
	}
	tween.tween(object,values,duration,ease);
	tweener.addTween(tween,true);
	return tween;
};
haxepunk_HXP.alarm = function(delay,complete,type,tweener) {
	if(type == null) {
		type = haxepunk_TweenType.OneShot;
	}
	if(tweener == null) {
		tweener = haxepunk_HXP.tweener;
	}
	var alarm = new haxepunk_tweens_misc_Alarm(delay,type);
	if(complete != null) {
		alarm.onComplete.callbacks.push(complete);
	}
	tweener.addTween(alarm,true);
	return alarm;
};
haxepunk_HXP.frames = function(from,to,skip) {
	if(skip == null) {
		skip = 0;
	}
	var a = [];
	++skip;
	if(from < to) {
		while(from <= to) {
			a.push(from);
			from += skip;
		}
	} else {
		while(from >= to) {
			a.push(from);
			from -= skip;
		}
	}
	return a;
};
haxepunk_HXP.shuffle = function(a) {
	var i = a.length;
	var j;
	var t;
	while(--i > 0) {
		t = a[i];
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		j = haxepunk_math_Random._seed / 2147483647 * (i + 1) | 0;
		a[i] = a[j];
		a[j] = t;
	}
};
haxepunk_HXP.set_time = function(value) {
	haxepunk_HXP._time = value;
	return haxepunk_HXP._time;
};
var haxepunk__$Position_Position_$Impl_$ = {};
$hxClasses["haxepunk._Position.Position_Impl_"] = haxepunk__$Position_Position_$Impl_$;
haxepunk__$Position_Position_$Impl_$.__name__ = ["haxepunk","_Position","Position_Impl_"];
haxepunk__$Position_Position_$Impl_$.__properties__ = {get_length:"get_length",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"};
haxepunk__$Position_Position_$Impl_$._new = function(obj) {
	var this1;
	if(obj == null) {
		obj = { x : 0, y : 0};
	}
	this1 = obj;
	return this1;
};
haxepunk__$Position_Position_$Impl_$.get_x = function(this1) {
	return this1.x;
};
haxepunk__$Position_Position_$Impl_$.set_x = function(this1,value) {
	return this1.x = value;
};
haxepunk__$Position_Position_$Impl_$.get_y = function(this1) {
	return this1.y;
};
haxepunk__$Position_Position_$Impl_$.set_y = function(this1,value) {
	return this1.y = value;
};
haxepunk__$Position_Position_$Impl_$.get_length = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
};
haxepunk__$Position_Position_$Impl_$.fromObject = function(obj) {
	return haxepunk__$Position_Position_$Impl_$._new(obj);
};
haxepunk__$Position_Position_$Impl_$.normalize = function(this1,thickness) {
	if(this1.x != 0 || this1.y != 0) {
		var norm = thickness / Math.sqrt(this1.x * this1.x + this1.y * this1.y);
		var _g = this1;
		_g.x *= norm;
		var _g1 = this1;
		_g1.y *= norm;
	}
};
var haxepunk_Screen = function() {
	this._shakeY = 0;
	this._shakeX = 0;
	this._shakeMagnitude = 0;
	this._shakeTime = 0;
	this.height = 0;
	this.width = 0;
	this.needsResize = false;
	this.fullScaleY = 1;
	this.fullScaleX = 1;
	this.scale = 1;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	this.color = 0;
	this.scaleMode = new haxepunk_screen_ScaleMode();
	this.set_x(this.set_y(0));
	this._current = 0;
	this.set_scale(this.set_scaleX(this.set_scaleY(1)));
};
$hxClasses["haxepunk.Screen"] = haxepunk_Screen;
haxepunk_Screen.__name__ = ["haxepunk","Screen"];
haxepunk_Screen.prototype = {
	scaleMode: null
	,resize: function(width,height) {
		var oldWidth = haxepunk_HXP.width;
		var oldHeight = haxepunk_HXP.height;
		this.scaleMode.resize(width,height);
		width = haxepunk_HXP.width = haxepunk_HXP.screen.width / haxepunk_HXP.screen.fullScaleX | 0;
		height = haxepunk_HXP.height = haxepunk_HXP.screen.height / haxepunk_HXP.screen.fullScaleY | 0;
		this._current = 0;
		this.needsResize = false;
	}
	,update: function() {
		if(this._shakeTime > 0) {
			var sx = Std.random(this._shakeMagnitude * 2 + 1) - this._shakeMagnitude;
			var sy = Std.random(this._shakeMagnitude * 2 + 1) - this._shakeMagnitude;
			var _g = this;
			_g.set_x(_g.x + (sx - this._shakeX));
			var _g1 = this;
			_g1.set_y(_g1.y + (sy - this._shakeY));
			this._shakeX = sx;
			this._shakeY = sy;
			this._shakeTime -= haxepunk_HXP.elapsed;
			if(this._shakeTime < 0) {
				this._shakeTime = 0;
			}
		} else if(this._shakeX != 0 || this._shakeY != 0) {
			var _g2 = this;
			_g2.set_x(_g2.x - this._shakeX);
			var _g3 = this;
			_g3.set_y(_g3.y - this._shakeY);
			this._shakeX = this._shakeY = 0;
		}
	}
	,color: null
	,x: null
	,set_x: function(value) {
		if(this.x == value) {
			return value;
		}
		this.x = value;
		return this.x;
	}
	,y: null
	,set_y: function(value) {
		if(this.y == value) {
			return value;
		}
		this.y = value;
		return this.y;
	}
	,scaleX: null
	,set_scaleX: function(value) {
		if(this.scaleX == value) {
			return value;
		}
		this.scaleX = value;
		this.fullScaleX = this.scaleX * this.scale;
		this.needsResize = true;
		return this.scaleX;
	}
	,scaleY: null
	,set_scaleY: function(value) {
		if(this.scaleY == value) {
			return value;
		}
		this.scaleY = value;
		this.fullScaleY = this.scaleY * this.scale;
		this.needsResize = true;
		return this.scaleY;
	}
	,scale: null
	,set_scale: function(value) {
		if(this.scale == value) {
			return value;
		}
		this.scale = value;
		this.fullScaleX = this.scaleX * this.scale;
		this.fullScaleY = this.scaleY * this.scale;
		this.needsResize = true;
		return this.scale;
	}
	,fullScaleX: null
	,fullScaleY: null
	,needsResize: null
	,get_smoothing: function() {
		return haxepunk_graphics_atlas_Atlas.smooth;
	}
	,set_smoothing: function(value) {
		return haxepunk_graphics_atlas_Atlas.smooth = value;
	}
	,width: null
	,height: null
	,mouseX: null
	,get_mouseX: function() {
		return (haxepunk_HXP.app.getMouseX() - this.x) / this.fullScaleX | 0;
	}
	,mouseY: null
	,get_mouseY: function() {
		return (haxepunk_HXP.app.getMouseY() - this.y) / this.fullScaleY | 0;
	}
	,capture: function() {
		throw new js__$Boot_HaxeError("Screen.capture not currently supported");
	}
	,shake: function(duration,magnitude) {
		if(magnitude == null) {
			magnitude = 4;
		}
		if(duration == null) {
			duration = 0.5;
		}
		if(this._shakeTime < duration) {
			this._shakeTime = duration;
		}
		this._shakeMagnitude = magnitude;
	}
	,shakeStop: function() {
		this._shakeTime = 0;
	}
	,_current: null
	,_shakeTime: null
	,_shakeMagnitude: null
	,_shakeX: null
	,_shakeY: null
	,__class__: haxepunk_Screen
	,__properties__: {get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_smoothing:"set_smoothing",get_smoothing:"get_smoothing",set_scale:"set_scale",set_scaleY:"set_scaleY",set_scaleX:"set_scaleX",set_y:"set_y",set_x:"set_x"}
};
var haxepunk_Signal = function() {
	this.callbacks = [];
};
$hxClasses["haxepunk.Signal"] = haxepunk_Signal;
haxepunk_Signal.__name__ = ["haxepunk","Signal"];
haxepunk_Signal.prototype = {
	callbacks: null
	,exists: function(callback) {
		return this.callbacks.indexOf(callback) > -1;
	}
	,bind: function(callback) {
		this.callbacks.push(callback);
	}
	,remove: function(callback) {
		HxOverrides.remove(this.callbacks,callback);
	}
	,clear: function() {
		while(this.callbacks.length > 0) this.callbacks.pop();
	}
	,__class__: haxepunk_Signal
};
var haxepunk_Signal0 = function() {
	haxepunk_Signal.call(this);
};
$hxClasses["haxepunk.Signal0"] = haxepunk_Signal0;
haxepunk_Signal0.__name__ = ["haxepunk","Signal0"];
haxepunk_Signal0.__super__ = haxepunk_Signal;
haxepunk_Signal0.prototype = $extend(haxepunk_Signal.prototype,{
	invoke: function() {
		var _g = 0;
		var _g1 = this.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
	}
	,__class__: haxepunk_Signal0
});
var haxepunk_Signal1 = function() {
	haxepunk_Signal.call(this);
};
$hxClasses["haxepunk.Signal1"] = haxepunk_Signal1;
haxepunk_Signal1.__name__ = ["haxepunk","Signal1"];
haxepunk_Signal1.__super__ = haxepunk_Signal;
haxepunk_Signal1.prototype = $extend(haxepunk_Signal.prototype,{
	invoke: function(a) {
		var _g = 0;
		var _g1 = this.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback(a);
		}
	}
	,__class__: haxepunk_Signal1
});
var haxepunk_Signal2 = function() {
	haxepunk_Signal.call(this);
};
$hxClasses["haxepunk.Signal2"] = haxepunk_Signal2;
haxepunk_Signal2.__name__ = ["haxepunk","Signal2"];
haxepunk_Signal2.__super__ = haxepunk_Signal;
haxepunk_Signal2.prototype = $extend(haxepunk_Signal.prototype,{
	invoke: function(a,b) {
		var _g = 0;
		var _g1 = this.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback(a,b);
		}
	}
	,__class__: haxepunk_Signal2
});
var haxepunk_Signals = function() {
	this.signals = new haxe_ds_StringMap();
};
$hxClasses["haxepunk.Signals"] = haxepunk_Signals;
haxepunk_Signals.__name__ = ["haxepunk","Signals"];
haxepunk_Signals.prototype = {
	signals: null
	,exists: function(field) {
		var _this = this.signals;
		if(__map_reserved[field] != null) {
			return _this.existsReserved(field);
		} else {
			return _this.h.hasOwnProperty(field);
		}
	}
	,invoke: function(field) {
		if(this.signals.exists(field)) {
			var _this = this.signals;
			var _g = 0;
			var _g1 = (__map_reserved[field] != null ? _this.getReserved(field) : _this.h[field]).callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
		}
	}
	,resolve: function(field) {
		if(!this.signals.exists(field)) {
			var this1 = this.signals;
			var v = new haxepunk_Signal0();
			var _this = this1;
			if(__map_reserved[field] != null) {
				_this.setReserved(field,v);
			} else {
				_this.h[field] = v;
			}
		}
		var _this1 = this.signals;
		if(__map_reserved[field] != null) {
			return _this1.getReserved(field);
		} else {
			return _this1.h[field];
		}
	}
	,__class__: haxepunk_Signals
};
var haxepunk_TweenType = $hxClasses["haxepunk.TweenType"] = { __ename__ : ["haxepunk","TweenType"], __constructs__ : ["Persist","Looping","OneShot","PingPong"] };
haxepunk_TweenType.Persist = ["Persist",0];
haxepunk_TweenType.Persist.toString = $estr;
haxepunk_TweenType.Persist.__enum__ = haxepunk_TweenType;
haxepunk_TweenType.Looping = ["Looping",1];
haxepunk_TweenType.Looping.toString = $estr;
haxepunk_TweenType.Looping.__enum__ = haxepunk_TweenType;
haxepunk_TweenType.OneShot = ["OneShot",2];
haxepunk_TweenType.OneShot.toString = $estr;
haxepunk_TweenType.OneShot.__enum__ = haxepunk_TweenType;
haxepunk_TweenType.PingPong = ["PingPong",3];
haxepunk_TweenType.PingPong.toString = $estr;
haxepunk_TweenType.PingPong.__enum__ = haxepunk_TweenType;
var haxepunk_Tween = function(duration,type,ease) {
	this._time = 0;
	this.onComplete = new haxepunk_Signal0();
	this.onUpdate = new haxepunk_Signal0();
	this.onStart = new haxepunk_Signal0();
	this.forward = true;
	this.active = false;
	if(duration < 0) {
		throw new js__$Boot_HaxeError("Tween duration must be positive!");
	}
	this._target = duration;
	this._type = type == null ? haxepunk_TweenType.Persist : type;
	this._ease = ease;
	this._t = 0;
};
$hxClasses["haxepunk.Tween"] = haxepunk_Tween;
haxepunk_Tween.__name__ = ["haxepunk","Tween"];
haxepunk_Tween.prototype = {
	active: null
	,forward: null
	,onStart: null
	,onUpdate: null
	,onComplete: null
	,updateInternal: function() {
	}
	,update: function(elapsed) {
		var _gthis = this;
		var isFinished = false;
		if(this.active) {
			this._time += elapsed;
			this._t = this.get_percent();
			if(this._t > 0 && this._t < 1) {
				var this1 = this._ease;
				if(this1 != null) {
					_gthis._t = this1(_gthis._t);
				}
			}
			if(this._time >= this._target) {
				this._t = this.forward ? 1 : 0;
				isFinished = true;
			}
			this.updateInternal();
			var _g = 0;
			var _g1 = this.onUpdate.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
		}
		if(isFinished) {
			this.finish();
		}
	}
	,start: function() {
		this._time = 0;
		if(this._target == 0) {
			this.active = false;
			var _g = 0;
			var _g1 = this.onComplete.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
		} else {
			this.active = true;
			var _g2 = 0;
			var _g11 = this.onStart.callbacks;
			while(_g2 < _g11.length) {
				var callback1 = _g11[_g2];
				++_g2;
				callback1();
			}
		}
	}
	,finish: function() {
		var _g = this._type;
		switch(_g[1]) {
		case 0:
			this._time = this._target;
			this.active = false;
			break;
		case 2:
			this._time = this._target;
			this.cancel();
			break;
		case 1:case 3:
			if(this._type == haxepunk_TweenType.PingPong) {
				this.forward = !this.forward;
			}
			this.start();
			break;
		}
		var _g1 = 0;
		var _g11 = this.onComplete.callbacks;
		while(_g1 < _g11.length) {
			var callback = _g11[_g1];
			++_g1;
			callback();
		}
		if(this._type == haxepunk_TweenType.OneShot) {
			var _this = this.onComplete;
			while(_this.callbacks.length > 0) _this.callbacks.pop();
		}
	}
	,cancel: function() {
		this.active = false;
		if(this._parent != null) {
			this._parent.removeTween(this);
		}
	}
	,get_percent: function() {
		if(this._target == 0) {
			return 0;
		} else {
			return (this.forward ? this._time : this._target - this._time) / this._target;
		}
	}
	,set_percent: function(value) {
		return this._time = this._target * value;
	}
	,scale: null
	,get_scale: function() {
		return this._t;
	}
	,_type: null
	,_ease: null
	,_t: null
	,_time: null
	,_target: null
	,_parent: null
	,_prev: null
	,_next: null
	,__class__: haxepunk_Tween
	,__properties__: {get_scale:"get_scale",set_percent:"set_percent",get_percent:"get_percent"}
};
var haxepunk_assets_AssetCache = function() {
	this.bitmapFonts = new haxe_ds_StringMap();
	this.regions = new haxe_ds_StringMap();
	this.textures = new haxe_ds_StringMap();
};
$hxClasses["haxepunk.assets.AssetCache"] = haxepunk_assets_AssetCache;
haxepunk_assets_AssetCache.__name__ = ["haxepunk","assets","AssetCache"];
haxepunk_assets_AssetCache.getBitmapFont = function(fontName) {
	var _g = 0;
	var _g1 = haxepunk_assets_AssetCache.active;
	while(_g < _g1.length) {
		var cache = _g1[_g];
		++_g;
		var _this = cache.bitmapFonts;
		if(__map_reserved[fontName] != null ? _this.existsReserved(fontName) : _this.h.hasOwnProperty(fontName)) {
			var _this1 = cache.bitmapFonts;
			if(__map_reserved[fontName] != null) {
				return _this1.getReserved(fontName);
			} else {
				return _this1.h[fontName];
			}
		}
	}
	return null;
};
haxepunk_assets_AssetCache.getRegion = function(id) {
	var _g = 0;
	var _g1 = haxepunk_assets_AssetCache.active;
	while(_g < _g1.length) {
		var cache = _g1[_g];
		++_g;
		var _this = cache.regions;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = cache.regions;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		}
	}
	return null;
};
haxepunk_assets_AssetCache.prototype = {
	get_enabled: function() {
		return haxepunk_assets_AssetCache.active.indexOf(this) > -1;
	}
	,textures: null
	,regions: null
	,bitmapFonts: null
	,hasTexture: function(id) {
		var _this = this.textures;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,getTexture: function(id) {
		var _this = this.textures;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.textures;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		}
		var _g = 0;
		var _g1 = haxepunk_assets_AssetCache.active;
		while(_g < _g1.length) {
			var cache = _g1[_g];
			++_g;
			if(cache.hasTexture(id)) {
				var this1 = this.textures;
				var _this2 = cache.textures;
				var v = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
				var _this3 = this1;
				if(__map_reserved[id] != null) {
					_this3.setReserved(id,v);
				} else {
					_this3.h[id] = v;
				}
				return v;
			}
		}
		var this2 = this.textures;
		var v1 = haxepunk_backend_flash_AssetLoader.getTexture(id);
		var _this4 = this2;
		if(__map_reserved[id] != null) {
			_this4.setReserved(id,v1);
		} else {
			_this4.h[id] = v1;
		}
		return v1;
	}
	,saveTexture: function(id,texture) {
		var _this = this.textures;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,texture);
		} else {
			_this.h[id] = texture;
		}
	}
	,addResolutions: function(assetName,assets) {
		var _this = this.regions;
		if(__map_reserved[assetName] != null ? _this.existsReserved(assetName) : _this.h.hasOwnProperty(assetName)) {
			var _this1 = this.regions;
			var resolutions = __map_reserved[assetName] != null ? _this1.getReserved(assetName) : _this1.h[assetName];
			var _g = 0;
			while(_g < assets.length) {
				var asset = assets[_g];
				++_g;
				var region = haxepunk_assets_AssetCache.getRegion(asset);
				resolutions.addResolution(region);
			}
			return resolutions;
		} else {
			var _g1 = [];
			var _g11 = 0;
			while(_g11 < assets.length) {
				var asset1 = assets[_g11];
				++_g11;
				var data = null;
				if(haxepunk_graphics_atlas_AtlasData._dataPool.exists(asset1)) {
					data = haxepunk_graphics_atlas_AtlasData._dataPool.get(asset1);
				} else {
					var texture = haxepunk_assets_AssetCache.global.getTexture(asset1);
					if(texture != null) {
						data = new haxepunk_graphics_atlas_AtlasData(texture,asset1);
					}
				}
				var this1 = data;
				_g1.push(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1));
			}
			var resolutions1 = new haxepunk_graphics_atlas_AtlasResolutions(_g1);
			var _this2 = this.regions;
			if(__map_reserved[assetName] != null) {
				_this2.setReserved(assetName,resolutions1);
			} else {
				_this2.h[assetName] = resolutions1;
			}
			return resolutions1;
		}
	}
	,addTextureAtlas: function(atlas) {
		var key = atlas._regions.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var this1 = this.regions;
			var v;
			if(atlas._regions.exists(key1)) {
				v = atlas._regions.get(key1);
			} else {
				throw new js__$Boot_HaxeError("Region has not been defined yet \"" + key1 + "\".");
			}
			var _this = this1;
			if(__map_reserved[key1] != null) {
				_this.setReserved(key1,v);
			} else {
				_this.h[key1] = v;
			}
		}
	}
	,addAtlasRegion: function(assetName,region) {
		var _this = this.regions;
		if(__map_reserved[assetName] != null) {
			_this.setReserved(assetName,region);
		} else {
			_this.h[assetName] = region;
		}
	}
	,removeRegion: function(assetName) {
		this.regions.remove(assetName);
	}
	,addBitmapFont: function(fontName,fonts,format,extraParams) {
		if(format == null) {
			format = 1;
		}
		var _this = this.bitmapFonts;
		if(!(__map_reserved[fontName] != null ? _this.existsReserved(fontName) : _this.h.hasOwnProperty(fontName))) {
			var this1 = this.bitmapFonts;
			var v = new haxepunk_graphics_text_BitmapFont(fontName);
			var _this1 = this1;
			if(__map_reserved[fontName] != null) {
				_this1.setReserved(fontName,v);
			} else {
				_this1.h[fontName] = v;
			}
		}
		var _this2 = this.bitmapFonts;
		var bitmapFont = __map_reserved[fontName] != null ? _this2.getReserved(fontName) : _this2.h[fontName];
		var _g = 0;
		while(_g < fonts.length) {
			var font = fonts[_g];
			++_g;
			bitmapFont.addSize(haxepunk_graphics_text_BitmapFontAtlas.getFont(font,format,extraParams));
		}
		return bitmapFont;
	}
	,removeBitmapFont: function(fontName) {
		this.bitmapFonts.remove(fontName);
	}
	,enable: function() {
		if(haxepunk_assets_AssetCache.active.indexOf(this) <= -1) {
			haxepunk_assets_AssetCache.active.push(this);
		}
	}
	,dispose: function() {
		HxOverrides.remove(haxepunk_assets_AssetCache.active,this);
		var key = this.textures.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var stillNeeded = false;
			var _g = 0;
			var _g1 = haxepunk_assets_AssetCache.active;
			while(_g < _g1.length) {
				var cache = _g1[_g];
				++_g;
				var _this = cache.textures;
				if(__map_reserved[key1] != null ? _this.existsReserved(key1) : _this.h.hasOwnProperty(key1)) {
					stillNeeded = true;
					break;
				}
			}
			if(!stillNeeded) {
				var _this1 = this.textures;
				var texture = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
				texture.dispose();
			}
			this.textures.remove(key1);
		}
	}
	,__class__: haxepunk_assets_AssetCache
	,__properties__: {get_enabled:"get_enabled"}
};
var haxepunk_backend_flash_AssetLoader = function() { };
$hxClasses["haxepunk.backend.flash.AssetLoader"] = haxepunk_backend_flash_AssetLoader;
haxepunk_backend_flash_AssetLoader.__name__ = ["haxepunk","backend","flash","AssetLoader"];
haxepunk_backend_flash_AssetLoader.getText = function(id) {
	return openfl_utils_Assets.getText(id);
};
haxepunk_backend_flash_AssetLoader.getSound = function(id) {
	return openfl_utils_Assets.getSound(id,false);
};
haxepunk_backend_flash_AssetLoader.getTexture = function(id) {
	return openfl_utils_Assets.getBitmapData(id,false);
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		var _this = this.__eventMap;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			var _this1 = this.__eventMap;
			if(__map_reserved[type] != null) {
				_this1.setReserved(type,list);
			} else {
				_this1.h[type] = list;
			}
			var _this2 = this.__iterators;
			var value = [iterator];
			if(__map_reserved[type] != null) {
				_this2.setReserved(type,value);
			} else {
				_this2.h[type] = value;
			}
		} else {
			var _this3 = this.__eventMap;
			var list1 = __map_reserved[type] != null ? _this3.getReserved(type) : _this3.h[type];
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(list1[i].match(listener,useCapture)) {
					return;
				}
			}
			var _this4 = this.__iterators;
			var iterators = __map_reserved[type] != null ? _this4.getReserved(type) : _this4.h[type];
			var _g2 = 0;
			while(_g2 < iterators.length) {
				var iterator1 = iterators[_g2];
				++_g2;
				if(iterator1.active) {
					iterator1.copy();
				}
			}
			this.__addListenerByPriority(list1,new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		var _this = this.__eventMap;
		if(__map_reserved[type] != null) {
			return _this.existsReserved(type);
		} else {
			return _this.h.hasOwnProperty(type);
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		if(list == null) {
			return;
		}
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			this.__eventMap.remove(type);
			this.__iterators.remove(type);
		}
		var _this2 = this.__eventMap;
		if(!new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys()).hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var full = Type.getClassName(js_Boot.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var index = 0;
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.reset(list);
		var listener = iterator;
		while(listener.hasNext()) {
			var listener1 = listener.next();
			if(listener1 == null) {
				continue;
			}
			if(listener1.useCapture == capture) {
				listener1.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		}
		return true;
	}
	,__removeAllListeners: function() {
		this.__eventMap = null;
		this.__iterators = null;
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g1 = 0;
		var _g = numElements;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__blendMode: null
	,__isMask: null
	,__renderable: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__getBounds: null
	,__renderCairo: null
	,__renderCairoMask: null
	,__renderCanvas: null
	,__renderCanvasMask: null
	,__renderGL: null
	,__renderGLMask: null
	,__updateChildren: null
	,__updateTransforms: null
	,__updateMask: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length",set_fixed:"set_fixed",get_fixed:"get_fixed"};
openfl__$Vector_Vector_$Impl_$.concat = function(this1,a) {
	var data = a != null ? a.data : null;
	return new openfl__$Vector_AbstractVector(this1.data.concat(data));
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	return new openfl__$Vector_AbstractVector(this1.data.copy());
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.data.get(index);
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,x,from) {
	if(from == null) {
		from = 0;
	}
	return this1.data.indexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.insertAt = function(this1,index,element) {
	this1.data.insertAt(index,element);
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return this1.data.iterator();
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	if(sep == null) {
		sep = ",";
	}
	return this1.data.join(sep);
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,x,from) {
	if(from == null) {
		from = 0;
	}
	return this1.data.lastIndexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	return this1.data.pop();
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,x) {
	return this1.data.push(x);
};
openfl__$Vector_Vector_$Impl_$.removeAt = function(this1,index) {
	return this1.data.removeAt(index);
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	return new openfl__$Vector_AbstractVector(this1.data.reverse());
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,index,value) {
	return this1.data.set(index,value);
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	return this1.data.shift();
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,pos,end) {
	return new openfl__$Vector_AbstractVector(this1.data.slice(pos,end));
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	this1.data.sort(f);
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,pos,len) {
	return new openfl__$Vector_AbstractVector(this1.data.splice(pos,len));
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	if(this1 != null && this1.data != null) {
		return this1.data.toString();
	} else {
		return null;
	}
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,x) {
	this1.data.unshift(x);
};
openfl__$Vector_Vector_$Impl_$.ofArray = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.data.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.convert = function(v) {
	return v;
};
openfl__$Vector_Vector_$Impl_$.toBoolVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_BoolVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toIntVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_IntVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toFloatVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_FloatVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toFunctionVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_FunctionVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toObjectVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_ObjectVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.data.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.data.fixed = value;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.data.get_length();
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	return this1.data.set_length(value);
};
var lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject = function(create,clean,size) {
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new List();
};
$hxClasses["lime.utils.ObjectPool_openfl_Vector_openfl_display_DisplayObject"] = lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject;
lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject.__name__ = ["lime","utils","ObjectPool_openfl_Vector_openfl_display_DisplayObject"];
lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			this.__pool.set(object,false);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.__pool.set(object1,true);
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		if(!this.__pool.exists(object)) {
			lime_utils_Log.error("Object is not a member of the pool",{ fileName : "ObjectPool.hx", lineNumber : 130, className : "lime.utils.ObjectPool", methodName : "release"});
		} else if(!this.__pool.get(object)) {
			lime_utils_Log.error("Object has already been released",{ fileName : "ObjectPool.hx", lineNumber : 134, className : "lime.utils.ObjectPool", methodName : "release"});
		}
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			this.__pool.set(object,false);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,__addInactive: function(object) {
		this.__pool.set(object,false);
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.__pool.set(object,true);
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var object = val;
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__worldAlpha = 1;
	this.__worldBlendMode = 10;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,scale9Grid: null
	,stage: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cacheBitmap: null
	,__cacheBitmapBackground: null
	,__cacheBitmapColorTransform: null
	,__cacheBitmapData: null
	,__cacheBitmapRender: null
	,__cairo: null
	,__children: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__maskTarget: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__renderTransformCache: null
	,__renderTransformChanged: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldBlendMode: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldTransformInvalid: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
				openfl_display_DisplayObject.__broadcastEvents.set(type,[]);
			}
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.get(type);
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(js_Boot.__instanceof(event,openfl_events_MouseEvent)) {
			var mouseEvent = event;
			var _this = this.__getRenderTransform();
			mouseEvent.stageX = mouseEvent.localX * _this.a + mouseEvent.localY * _this.c + _this.tx;
			var _this1 = this.__getRenderTransform();
			mouseEvent.stageY = mouseEvent.localX * _this1.b + mouseEvent.localY * _this1.d + _this1.ty;
		} else if(js_Boot.__instanceof(event,openfl_events_TouchEvent)) {
			var touchEvent = event;
			var _this2 = this.__getRenderTransform();
			touchEvent.stageX = touchEvent.localX * _this2.a + touchEvent.localY * _this2.c + _this2.tx;
			var _this3 = this.__getRenderTransform();
			touchEvent.stageY = touchEvent.localX * _this3.b + touchEvent.localY * _this3.d + _this3.ty;
		}
		return this.__dispatchWithCapture(event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix;
		var usingTemp = false;
		if(targetCoordinateSpace != null) {
			matrix = this.__getWorldTransform().clone();
			matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
		} else {
			usingTemp = true;
			matrix = openfl_geom_Matrix.__pool.get();
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		if(usingTemp) {
			openfl_geom_Matrix.__pool.release(matrix);
		}
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__globalToLocal(pos,new openfl_geom_Point());
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		if(this.stage != null) {
			return this.__hitTest(x,y,shapeFlag,null,true,this);
		} else {
			return false;
		}
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				if(openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
					HxOverrides.remove(openfl_display_DisplayObject.__broadcastEvents.get(type),this);
				}
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
	}
	,__dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			this.parent.__dispatchEvent(event);
		}
		return result;
	}
	,__dispatchStack: function(event,stack) {
		var target;
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = 2;
			target = event.target;
			target.__dispatch(event);
		} else {
			event.eventPhase = 1;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__dispatch(event);
				if(event.__isCanceled) {
					return;
				}
			}
			event.eventPhase = 2;
			target = event.target;
			target.__dispatch(event);
			if(event.__isCanceled) {
				return;
			}
			if(event.bubbles) {
				event.eventPhase = 3;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__dispatch(event);
					if(event.__isCanceled) {
						return;
					}
					--i1;
				}
			}
		}
	}
	,__dispatchWithCapture: function(event) {
		if(event.target == null) {
			event.target = this;
		}
		if(this.parent != null) {
			event.eventPhase = 1;
			if(this.parent == this.stage) {
				this.parent.__dispatch(event);
			} else {
				var stack = openfl_display_DisplayObject.__tempStack.get();
				var parent = this.parent;
				var i = 0;
				while(parent != null) {
					stack.data.set(i,parent);
					parent = parent.parent;
					++i;
				}
				var _g1 = 0;
				var _g = i;
				while(_g1 < _g) {
					var j = _g1++;
					stack.data.get(i - j - 1).__dispatch(event);
				}
				openfl_display_DisplayObject.__tempStack.release(stack);
			}
		}
		event.eventPhase = 2;
		return this.__dispatchEvent(event);
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getFilterBounds: function(rect,matrix) {
		this.__getBounds(rect,matrix);
		if(this.__filters != null && this.__filters.length > 0) {
			var extension = openfl_geom_Rectangle.__pool.get();
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				extension.__expand(-filter.__leftExtension,-filter.__topExtension,filter.__leftExtension + filter.__rightExtension,filter.__topExtension + filter.__bottomExtension);
			}
			rect.width += extension.width;
			rect.height += extension.height;
			rect.x += extension.x;
			rect.y += extension.y;
			openfl_geom_Rectangle.__pool.release(extension);
		}
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
		rect.x -= this.__transform.tx;
		rect.y -= this.__transform.ty;
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__pool.get();
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(matrix.tx,matrix.ty,r.width,r.height);
			openfl_geom_Rectangle.__pool.release(r);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		var transformDirty = this.__transformDirty || this.__worldTransformInvalid;
		if(transformDirty) {
			var list = [];
			var current = this;
			if(this.parent == null) {
				this.__update(true,false);
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current == null) {
						break;
					}
				}
			}
			var i = list.length;
			while(--i >= 0) {
				current = list[i];
				current.__update(true,false);
				current.__worldTransformInvalid = false;
			}
		}
		return this.__worldTransform;
	}
	,__globalToLocal: function(global,local) {
		this.__getRenderTransform();
		if(global == local) {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				global.x = -_this.tx;
				global.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
				global.y = 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
				global.x = px;
			}
		} else {
			var _this1 = this.__renderTransform;
			var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
			local.x = norm1 == 0 ? -_this1.tx : 1.0 / norm1 * (_this1.c * (_this1.ty - global.y) + _this1.d * (global.x - _this1.tx));
			var _this2 = this.__renderTransform;
			var norm2 = _this2.a * _this2.d - _this2.b * _this2.c;
			local.y = norm2 == 0 ? -_this2.ty : 1.0 / norm2 * (_this2.a * (global.y - _this2.ty) + _this2.b * (_this2.tx - global.x));
		}
		return local;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.get_visible() || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		if(this.__graphics != null) {
			this.__graphics.__readGraphicsData(graphicsData);
		}
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(this.get_mask() == null || this.get_mask().get_width() > 0 && this.get_mask().get_height() > 0) {
			this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
			if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
				var bitmap = this.__cacheBitmap;
				if(!(!bitmap.__renderable || bitmap.__worldAlpha <= 0)) {
					var context = renderSession.context;
					if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid && bitmap.bitmapData.readable) {
						renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
						renderSession.maskManager.pushObject(bitmap,false);
						lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.bitmapData.image);
						context.globalAlpha = bitmap.__worldAlpha;
						var transform = bitmap.__renderTransform;
						var scrollRect = bitmap.__scrollRect;
						if(renderSession.roundPixels) {
							context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
						} else {
							context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
						}
						if(!renderSession.allowSmoothing || !bitmap.smoothing) {
							context.mozImageSmoothingEnabled = false;
							context.msImageSmoothingEnabled = false;
							context.imageSmoothingEnabled = false;
						}
						if(scrollRect == null) {
							context.drawImage(bitmap.bitmapData.image.get_src(),0,0);
						} else {
							context.drawImage(bitmap.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
						}
						if(!renderSession.allowSmoothing || !bitmap.smoothing) {
							context.mozImageSmoothingEnabled = true;
							context.msImageSmoothingEnabled = true;
							context.imageSmoothingEnabled = true;
						}
						renderSession.maskManager.popObject(bitmap,false);
					}
				}
			} else if(!(this.opaqueBackground == null && this.__graphics == null)) {
				if(!(!this.__renderable || this.__worldAlpha <= 0)) {
					if(this.opaqueBackground != null && !this.__cacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
						renderSession.blendModeManager.setBlendMode(this.__worldBlendMode);
						renderSession.maskManager.pushObject(this);
						var context1 = renderSession.context;
						var transform1 = this.__renderTransform;
						if(renderSession.roundPixels) {
							context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
						} else {
							context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
						}
						var color = this.opaqueBackground;
						context1.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
						context1.fillRect(0,0,this.get_width(),this.get_height());
						renderSession.maskManager.popObject(this);
					}
					if(this.__graphics != null) {
						if(!(!this.__renderable || this.__worldAlpha <= 0)) {
							var graphics = this.__graphics;
							if(graphics != null) {
								openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
								var bounds = graphics.__bounds;
								var width = graphics.__width;
								var height = graphics.__height;
								if(graphics.__canvas != null) {
									var context2 = renderSession.context;
									var scrollRect1 = this.__scrollRect;
									if(width > 0 && height > 0 && (scrollRect1 == null || scrollRect1.width > 0 && scrollRect1.height > 0)) {
										renderSession.blendModeManager.setBlendMode(this.__worldBlendMode);
										renderSession.maskManager.pushObject(this);
										context2.globalAlpha = this.__worldAlpha;
										var transform2 = graphics.__worldTransform;
										if(renderSession.roundPixels) {
											context2.setTransform(transform2.a,transform2.b,transform2.c,transform2.d,transform2.tx | 0,transform2.ty | 0);
										} else {
											context2.setTransform(transform2.a,transform2.b,transform2.c,transform2.d,transform2.tx,transform2.ty);
										}
										context2.drawImage(graphics.__canvas,0,0);
										renderSession.maskManager.popObject(this);
									}
								}
							}
						}
					}
				}
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
	}
	,__renderDOMClear: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.render(this.__cacheBitmap,renderSession);
		} else if(!(this.opaqueBackground == null && this.__graphics == null)) {
			if(!(!this.__renderable || this.__worldAlpha <= 0)) {
				if(this.opaqueBackground != null && !this.__cacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
					renderSession.blendModeManager.setBlendMode(this.__worldBlendMode);
					renderSession.maskManager.pushObject(this);
					var gl = renderSession.gl;
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,this.get_width(),this.get_height());
					renderSession.maskManager.pushRect(rect,this.__renderTransform);
					var color = this.opaqueBackground;
					gl.__context.clearColor((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1);
					gl.__context.clear(gl.COLOR_BUFFER_BIT);
					renderSession.maskManager.popRect();
					renderSession.maskManager.popObject(this);
					openfl_geom_Rectangle.__pool.release(rect);
				}
				if(this.__graphics != null) {
					if(!(!this.__renderable || this.__worldAlpha <= 0)) {
						var graphics = this.__graphics;
						if(graphics != null) {
							openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
							var bounds = graphics.__bounds;
							if(graphics.__bitmap != null && graphics.__visible) {
								var renderer = renderSession.renderer;
								var gl1 = renderSession.gl;
								renderSession.blendModeManager.setBlendMode(this.__worldBlendMode);
								renderSession.maskManager.pushObject(this);
								var shader = renderSession.filterManager.pushObject(this);
								renderSession.shaderManager.setShader(shader);
								shader.get_data().uImage0.input = graphics.__bitmap;
								shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
								shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
								var useColorTransform = !this.__worldColorTransform.__isDefault();
								if(shader.get_data().uColorTransform.value == null) {
									shader.get_data().uColorTransform.value = [];
								}
								shader.get_data().uColorTransform.value[0] = useColorTransform;
								renderSession.shaderManager.updateShader(shader);
								var target = gl1.ARRAY_BUFFER;
								var buffer = graphics.__bitmap.getBuffer(gl1,this.__worldAlpha,this.__worldColorTransform);
								gl1.__context.bindBuffer(target,buffer);
								var index = shader.get_data().aPosition.index;
								var type = gl1.FLOAT;
								var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
								gl1.__context.vertexAttribPointer(index,3,type,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
								var index1 = shader.get_data().aTexCoord.index;
								var type1 = gl1.FLOAT;
								var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
								gl1.__context.vertexAttribPointer(index1,2,type1,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
								var index2 = shader.get_data().aAlpha.index;
								var type2 = gl1.FLOAT;
								var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
								gl1.__context.vertexAttribPointer(index2,1,type2,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset2));
								var index3 = shader.get_data().aColorMultipliers.index;
								var type3 = gl1.FLOAT;
								var offset3 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(24);
								gl1.__context.vertexAttribPointer(index3,4,type3,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset3));
								var index4 = shader.get_data().aColorMultipliers.index + 1;
								var type4 = gl1.FLOAT;
								var offset4 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(40);
								gl1.__context.vertexAttribPointer(index4,4,type4,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset4));
								var index5 = shader.get_data().aColorMultipliers.index + 2;
								var type5 = gl1.FLOAT;
								var offset5 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(56);
								gl1.__context.vertexAttribPointer(index5,4,type5,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset5));
								var index6 = shader.get_data().aColorMultipliers.index + 3;
								var type6 = gl1.FLOAT;
								var offset6 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(72);
								gl1.__context.vertexAttribPointer(index6,4,type6,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset6));
								var index7 = shader.get_data().aColorOffsets.index;
								var type7 = gl1.FLOAT;
								var offset7 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(88);
								gl1.__context.vertexAttribPointer(index7,4,type7,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset7));
								gl1.__context.drawArrays(gl1.TRIANGLE_STRIP,0,4);
								renderSession.filterManager.popObject(this);
								renderSession.maskManager.popObject(this);
							}
						}
					}
				}
			}
		}
	}
	,__renderGLMask: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.renderMask(this.__cacheBitmap,renderSession);
		} else if(!(this.opaqueBackground == null && this.__graphics == null)) {
			if(this.opaqueBackground != null && !this.__cacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
				var gl = renderSession.gl;
			}
			if(this.__graphics != null) {
				var graphics = this.__graphics;
				if(graphics != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
					var bounds = graphics.__bounds;
					if(graphics.__bitmap != null) {
						var renderer = renderSession.renderer;
						var gl1 = renderSession.gl;
						var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
						renderSession.shaderManager.setShader(shader);
						shader.get_data().uImage0.input = graphics.__bitmap;
						shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
						shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
						renderSession.shaderManager.updateShader(shader);
						var target = gl1.ARRAY_BUFFER;
						var buffer = graphics.__bitmap.getBuffer(gl1,this.__worldAlpha,this.__worldColorTransform);
						gl1.__context.bindBuffer(target,buffer);
						var index = shader.get_data().aPosition.index;
						var type = gl1.FLOAT;
						var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
						gl1.__context.vertexAttribPointer(index,3,type,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
						var index1 = shader.get_data().aTexCoord.index;
						var type1 = gl1.FLOAT;
						var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
						gl1.__context.vertexAttribPointer(index1,2,type1,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
						gl1.__context.drawArrays(gl1.TRIANGLE_STRIP,0,4);
					}
				}
			}
		}
	}
	,__setParentRenderDirty: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null && !renderParent.__renderDirty) {
			renderParent.__renderDirty = true;
			renderParent.__setParentRenderDirty();
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			this.__setWorldTransformInvalid();
			this.__setParentRenderDirty();
		}
	}
	,__setWorldTransformInvalid: function() {
		this.__worldTransformInvalid = true;
	}
	,__stopAllMovieClips: function() {
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(this.__isMask && renderParent == null) {
			renderParent = this.__maskTarget;
		}
		this.__renderable = this.get_visible() && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
		if(maskGraphics != null) {
			this.__updateMask(maskGraphics);
		}
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) {
				this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			}
			if(renderParent != null) {
				this.__worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
				this.__worldColorTransform.__combine(renderParent.__worldColorTransform);
				if(this.__blendMode == null || this.__blendMode == 10) {
					this.__worldBlendMode = renderParent.__blendMode;
				} else {
					this.__worldBlendMode = this.__blendMode;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
			}
		}
		if(updateChildren && this.get_mask() != null) {
			this.get_mask().__update(transformOnly,true,maskGraphics);
		}
	}
	,__updateCacheBitmap: function(renderSession,force) {
		if(this.__cacheBitmapRender) {
			return;
		}
		if(this.get_cacheAsBitmap()) {
			var matrix = null;
			var rect = null;
			this.__update(false,true);
			var needRender = this.__cacheBitmap == null || this.__renderDirty && (force || this.__children != null && this.__children.length > 0 || this.__graphics != null && this.__graphics.__dirty) || this.opaqueBackground != this.__cacheBitmapBackground || !this.__cacheBitmapColorTransform.__equals(this.__worldColorTransform);
			var updateTransform = needRender || !this.__cacheBitmap.__worldTransform.equals(this.__worldTransform);
			var hasFilters = this.__filters != null && this.__filters.length > 0;
			var bitmapWidth = 0;
			var bitmapHeight = 0;
			if(updateTransform || hasFilters) {
				matrix = openfl_geom_Matrix.__pool.get();
				rect = openfl_geom_Rectangle.__pool.get();
				matrix.identity();
				this.__getFilterBounds(rect,this.__renderTransform);
				bitmapWidth = Math.ceil(rect.width);
				bitmapHeight = Math.ceil(rect.height);
			}
			if(hasFilters) {
				if(this.__cacheBitmap != null && (bitmapWidth != this.__cacheBitmap.get_width() || bitmapHeight != this.__cacheBitmap.get_height())) {
					needRender = true;
				} else {
					var _g = 0;
					var _g1 = this.__filters;
					while(_g < _g1.length) {
						var filter = _g1[_g];
						++_g;
						if(filter.__renderDirty) {
							needRender = true;
							break;
						}
					}
				}
			}
			if(needRender) {
				this.__cacheBitmapBackground = this.opaqueBackground;
				var color = this.opaqueBackground != null ? -16777216 | this.opaqueBackground : 0;
				if(rect.width >= 0.5 && rect.height >= 0.5) {
					if(this.__cacheBitmap == null || bitmapWidth != this.__cacheBitmap.get_width() || bitmapHeight != this.__cacheBitmap.get_height()) {
						this.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,color);
						if(this.__cacheBitmap == null) {
							this.__cacheBitmap = new openfl_display_Bitmap();
						}
						this.__cacheBitmap.set_bitmapData(this.__cacheBitmapData);
					} else {
						this.__cacheBitmapData.fillRect(this.__cacheBitmapData.rect,color);
					}
				} else {
					this.__cacheBitmap = null;
					this.__cacheBitmapData = null;
					return;
				}
			}
			if(updateTransform || needRender) {
				this.__cacheBitmap.__worldTransform.copyFrom(this.__worldTransform);
				this.__cacheBitmap.__renderTransform.identity();
				this.__cacheBitmap.__renderTransform.tx = rect.x;
				this.__cacheBitmap.__renderTransform.ty = rect.y;
				matrix.concat(this.__renderTransform);
				matrix.tx -= Math.round(rect.x);
				matrix.ty -= Math.round(rect.y);
			}
			this.__cacheBitmap.smoothing = renderSession.allowSmoothing;
			this.__cacheBitmap.__renderable = this.__renderable;
			this.__cacheBitmap.__worldAlpha = this.__worldAlpha;
			this.__cacheBitmap.__worldBlendMode = this.__worldBlendMode;
			this.__cacheBitmap.__scrollRect = this.__scrollRect;
			this.__cacheBitmap.set_mask(this.__mask);
			if(needRender) {
				this.__cacheBitmapRender = true;
				this.__cacheBitmapData.__draw(this,matrix,null,null,null,renderSession.allowSmoothing);
				if(hasFilters) {
					var needSecondBitmapData = false;
					var needCopyOfOriginal = false;
					var _g2 = 0;
					var _g11 = this.__filters;
					while(_g2 < _g11.length) {
						var filter1 = _g11[_g2];
						++_g2;
						if(filter1.__needSecondBitmapData) {
							needSecondBitmapData = true;
						}
						if(filter1.__preserveObject) {
							needCopyOfOriginal = true;
						}
					}
					var bitmapData = this.__cacheBitmapData;
					var bitmapData2 = null;
					var bitmapData3 = null;
					if(needSecondBitmapData) {
						bitmapData2 = new openfl_display_BitmapData(bitmapData.width,bitmapData.height,true,0);
					} else {
						bitmapData2 = bitmapData;
					}
					if(needCopyOfOriginal) {
						bitmapData3 = new openfl_display_BitmapData(bitmapData.width,bitmapData.height,true,0);
					}
					var sourceRect = bitmapData.rect;
					var destPoint = new openfl_geom_Point();
					var cacheBitmap;
					var lastBitmap;
					var _g3 = 0;
					var _g12 = this.__filters;
					while(_g3 < _g12.length) {
						var filter2 = _g12[_g3];
						++_g3;
						if(filter2.__preserveObject) {
							bitmapData3.copyPixels(bitmapData,bitmapData.rect,destPoint);
						}
						lastBitmap = filter2.__applyFilter(bitmapData2,bitmapData,sourceRect,destPoint);
						if(filter2.__preserveObject) {
							lastBitmap.draw(bitmapData3,null,this.get_transform().get_colorTransform());
						}
						filter2.__renderDirty = false;
						if(needSecondBitmapData && lastBitmap == bitmapData2) {
							cacheBitmap = bitmapData;
							bitmapData = bitmapData2;
							bitmapData2 = cacheBitmap;
						}
					}
					this.__cacheBitmap.set_bitmapData(bitmapData);
				}
				this.__cacheBitmapRender = false;
				if(this.__cacheBitmapColorTransform == null) {
					this.__cacheBitmapColorTransform = new openfl_geom_ColorTransform();
				}
				this.__cacheBitmapColorTransform.__copyFrom(this.__worldColorTransform);
				if(!this.__cacheBitmapColorTransform.__isDefault()) {
					this.__cacheBitmapData.colorTransform(this.__cacheBitmapData.rect,this.__cacheBitmapColorTransform);
				}
			}
			if(updateTransform) {
				this.__update(false,true);
				openfl_geom_Matrix.__pool.release(matrix);
				openfl_geom_Rectangle.__pool.release(rect);
			}
		} else if(this.__cacheBitmap != null) {
			this.__cacheBitmap = null;
			this.__cacheBitmapData = null;
			this.__cacheBitmapColorTransform = null;
		}
	}
	,__updateChildren: function(transformOnly) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		this.__renderable = this.get_visible() && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__worldAlpha = this.get_alpha();
		this.__worldBlendMode = this.get_blendMode();
		if(this.__transformDirty) {
			this.__transformDirty = false;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.__commands.append(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) {
				maskGraphics.__bounds = new openfl_geom_Rectangle();
			}
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided ? overrideTransform : this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		var parentTransform;
		if(!overrided && this.parent != null) {
			parentTransform = this.parent.__worldTransform;
			this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
		}
		if(!overrided && renderParent != null) {
			parentTransform = renderParent.__renderTransform;
			this.__renderTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__renderTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__renderTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__renderTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__renderTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__renderTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		if(value != this.__blendMode) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,set_cacheAsBitmap: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return this.__cacheAsBitmapMatrix = value.clone();
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
		} else {
			this.__filters = null;
		}
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_height: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var height = rect.height;
		openfl_geom_Rectangle.__pool.release(rect);
		return height;
	}
	,set_height: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.height) {
			this.set_scaleY(value / rect.height);
		} else {
			this.set_scaleY(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl__$internal_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			this.__setTransformDirty();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskTarget = null;
			this.__mask.__setTransformDirty();
			var _this = this.__mask;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		if(value != null) {
			value.__isMask = true;
			value.__maskTarget = this;
			value.__setWorldTransformInvalid();
		}
		if(this.__cacheBitmap != null && this.__cacheBitmap.get_mask() != value) {
			this.__cacheBitmap.set_mask(value);
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) {
			return openfl__$internal_Lib.current;
		}
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			this.__transform.a = this.__rotationCosine * this.__scaleX;
			this.__transform.b = this.__rotationSine * this.__scaleX;
			this.__transform.c = -this.__rotationSine * this.__scaleY;
			this.__transform.d = this.__rotationCosine * this.__scaleY;
			this.__setTransformDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__transform.b == 0) {
				if(value != this.__transform.a) {
					this.__setTransformDirty();
				}
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if(this.__transform.a != a || this.__transform.b != b) {
					this.__setTransformDirty();
				}
				this.__transform.a = a;
				this.__transform.b = b;
			}
		}
		return value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__transform.c == 0) {
				if(value != this.__transform.d) {
					this.__setTransformDirty();
				}
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if(this.__transform.d != d || this.__transform.c != c) {
					this.__setTransformDirty();
				}
				this.__transform.c = c;
				this.__transform.d = d;
			}
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			this.__setTransformDirty();
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		this.__setTransformDirty();
		this.__objectTransform.set_matrix(value.get_matrix());
		this.__objectTransform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var width = rect.width;
		openfl_geom_Rectangle.__pool.release(rect);
		return width;
	}
	,set_width: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.width) {
			this.set_scaleX(value / rect.width);
		} else {
			this.set_scaleX(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = null;
	this.__tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,__tabEnabled: null
	,__tabIndex: null
	,requestSoftKeyboard: function() {
		openfl__$internal_Lib.notImplemented({ fileName : "InteractiveObject.hx", lineNumber : 43, className : "openfl.display.InteractiveObject", methodName : "requestSoftKeyboard"});
		return false;
	}
	,__allowMouseFocus: function() {
		return this.get_tabEnabled();
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == true) {
			return true;
		} else {
			return false;
		}
	}
	,set_tabEnabled: function(value) {
		return this.__tabEnabled = value;
	}
	,get_tabIndex: function() {
		return this.__tabIndex;
	}
	,set_tabIndex: function(value) {
		return this.__tabIndex = value;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabIndex:"set_tabIndex",get_tabIndex:"get_tabIndex",set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,tabChildren: null
	,__removedChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(child == null) {
			var error = new openfl_errors_TypeError("Error #2007: Parameter child must be non-null.");
			error.errorID = 2007;
			throw new js__$Boot_HaxeError(error);
		}
		if(index > this.__children.length || index < 0) {
			throw new js__$Boot_HaxeError("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				this.__setStageReference(this.stage);
			}
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchWithCapture(event);
			if(addedToStage) {
				var event1 = new openfl_events_Event("addedToStage",false,false);
				child.__dispatchWithCapture(event1);
				child.__dispatchChildren(event1);
			}
		}
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("removed",true);
			child.__dispatchWithCapture(event);
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				var event1 = new openfl_events_Event("removedFromStage",false,false);
				child.__dispatchWithCapture(event1);
				child.__dispatchChildren(event1);
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.data.push(child);
			child.__setTransformDirty();
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) {
				return;
			}
		}
		if(beginIndex > this.__children.length - 1) {
			return;
		} else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		}
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			--numRemovals;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) {
				return child;
			}
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,stopAllMovieClips: function() {
		this.__stopAllMovieClips();
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = this.__children.indexOf(child1);
			var index2 = this.__children.indexOf(child2);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__dispatchChildren: function(event) {
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchWithCapture(event)) {
					break;
				}
				child.__dispatchChildren(event);
			}
		}
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0) {
				continue;
			}
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getFilterBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getFilterBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			child.__getFilterBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			child.__getRenderBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return false;
			}
			openfl_geom_Point.__pool.release(point);
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i]);
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this,graphicsData,recurse);
		if(recurse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__readGraphicsData(graphicsData,recurse);
			}
		}
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.get_mask() != null && (this.get_mask().get_width() <= 0 || this.get_mask().get_height() <= 0)) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		if(renderSession.clearRenderDirty) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderCanvas(renderSession);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				child1.__renderCanvas(renderSession);
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.data.set_length(0);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(bounds);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__renderDOM: function(renderSession) {
	}
	,__renderDOMClear: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		if(this.__children.length > 0) {
			renderSession.maskManager.pushObject(this);
			renderSession.filterManager.pushObject(this);
			if(renderSession.clearRenderDirty) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__renderGL(renderSession);
					child.__renderDirty = false;
				}
				this.__renderDirty = false;
			} else {
				var _g2 = 0;
				var _g11 = this.__children;
				while(_g2 < _g11.length) {
					var child1 = _g11[_g2];
					++_g2;
					child1.__renderGL(renderSession);
				}
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.data.set_length(0);
		if(this.__children.length > 0) {
			renderSession.filterManager.popObject(this);
			renderSession.maskManager.popObject(this);
		}
	}
	,__renderGLMask: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderGLMask.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		if(renderSession.clearRenderDirty) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderGLMask(renderSession);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				child1.__renderGLMask(renderSession);
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.data.set_length(0);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__setWorldTransformInvalid: function() {
		if(!this.__worldTransformInvalid) {
			this.__worldTransformInvalid = true;
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setWorldTransformInvalid();
				}
			}
		}
	}
	,__stopAllMovieClips: function() {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__stopAllMovieClips();
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	buttonMode: null
	,dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		if(this.stage != null) {
			this.stage.__startDrag(this,lockCenter,bounds);
		}
	}
	,stopDrag: function() {
		if(this.stage != null) {
			this.stage.__stopDrag(this);
		}
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return this.__hitTestHitArea(x,y,shapeFlag,stack,true,hitObject);
			}
			openfl_geom_Point.__pool.release(point);
		}
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
			return interactiveOnly;
		} else if(this.hitArea == null && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
			if(stack != null && (!interactiveOnly || this.mouseEnabled)) {
				stack.push(hitObject);
			}
			return true;
		}
		return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__hitTestHitArea: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.buttonMode;
		} else {
			return this.__tabEnabled;
		}
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var haxepunk_backend_flash_FlashApiApp = function(engine) {
	openfl_display_Sprite.call(this);
	this.engine = engine;
	this.addEventListener("addedToStage",$bind(this,this.onStage));
};
$hxClasses["haxepunk.backend.flash.FlashApiApp"] = haxepunk_backend_flash_FlashApiApp;
haxepunk_backend_flash_FlashApiApp.__name__ = ["haxepunk","backend","flash","FlashApiApp"];
haxepunk_backend_flash_FlashApiApp.__interfaces__ = [haxepunk_App];
haxepunk_backend_flash_FlashApiApp.__super__ = openfl_display_Sprite;
haxepunk_backend_flash_FlashApiApp.prototype = $extend(openfl_display_Sprite.prototype,{
	get_fullscreen: function() {
		return this.stage.get_displayState() == 0;
	}
	,set_fullscreen: function(value) {
		if(value) {
			this.stage.set_displayState(0);
		} else {
			this.stage.set_displayState(2);
		}
		return value;
	}
	,engine: null
	,init: function() {
		openfl_Lib.get_current().addChild(this);
	}
	,getTimeMillis: function() {
		return openfl_Lib.getTimer();
	}
	,multiTouchSupported: function() {
		return openfl_ui_Multitouch.get_supportsTouchEvents();
	}
	,onEnterFrame: function(e) {
		this.engine.onUpdate();
	}
	,onStage: function(e) {
		var _gthis = this;
		this.removeEventListener("addedToStage",$bind(this,this.onStage));
		this.setStageProperties();
		var view = new openfl_display_OpenGLView();
		view.set_render(function(rect) {
			_gthis.engine.onRender();
		});
		this.addChild(view);
		this.initKeyInput();
		this.initMouseInput();
		this.initGamepadInput();
		if(this.multiTouchSupported()) {
			this.initTouchInput();
		}
		var _this = this.engine;
		if(_this._scene != null && _this._scenes.length > 0 && _this._scenes[_this._scenes.length - 1] != _this._scene) {
			_this._scene.end();
			_this._scene.updateLists();
			if(_this._scene.autoClear && _this._scene.get_hasTween()) {
				_this._scene.clearTweens();
			}
			_this._scene = _this._scenes[_this._scenes.length - 1];
			_this._scene.updateLists();
			_this._scene.begin();
			_this._scene.assetCache.enable();
			_this._scene.updateLists();
			var _g = 0;
			var _g1 = _this.onSceneSwitch.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
		}
		this.engine.init();
		this.engine._rate = 1000 / haxepunk_HXP.assignedFrameRate;
		this.engine._last = this.getTimeMillis();
		this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		openfl_Lib.get_current().stage.application.onExit.add(function(_) {
			var _g2 = 0;
			var _g11 = _gthis.engine.onClose.callbacks;
			while(_g2 < _g11.length) {
				var callback1 = _g11[_g2];
				++_g2;
				callback1();
			}
		});
		if(true != (haxepunk_HXP.engine.console != null)) {
			haxepunk_HXP.engine.console = new haxepunk_debug_Console();
		}
	}
	,setStageProperties: function() {
		var _gthis = this;
		this.stage.set_frameRate(haxepunk_HXP.assignedFrameRate);
		this.stage.align = 6;
		this.stage.scaleMode = 2;
		this.stage.set_displayState(2);
		haxepunk_HXP.screen.color = this.stage.get_color();
		this._resize();
		this.stage.addEventListener("resize",function(e) {
			_gthis._resize();
		});
		this.stage.addEventListener("activate",function(e1) {
			haxepunk_HXP.focused = true;
			_gthis.engine.focusGained();
			_gthis.engine._scene.focusGained();
		});
		this.stage.addEventListener("deactivate",function(e2) {
			haxepunk_HXP.focused = false;
			_gthis.engine.focusLost();
			_gthis.engine._scene.focusLost();
		});
	}
	,initMouseInput: function() {
		haxepunk_backend_flash_MouseInput.init(this);
	}
	,initKeyInput: function() {
		haxepunk_backend_flash_KeyInput.init(this);
	}
	,initGamepadInput: function() {
	}
	,initTouchInput: function() {
		haxepunk_backend_flash_TouchInput.init(this);
	}
	,getMouseX: function() {
		return this.stage.get_mouseX();
	}
	,getMouseY: function() {
		return this.stage.get_mouseY();
	}
	,_resize: function() {
		if(haxepunk_HXP.width == 0 || haxepunk_HXP.height == 0) {
			haxepunk_HXP.width = this.stage.stageWidth;
			haxepunk_HXP.height = this.stage.stageHeight;
			haxepunk_HXP.screen.scaleMode.setBaseSize();
		}
		haxepunk_HXP.resize(this.stage.stageWidth,this.stage.stageHeight);
		if(this.get_scrollRect() == null) {
			this.set_scrollRect(new openfl_geom_Rectangle());
		}
		this.get_scrollRect().width = haxepunk_HXP.screen.width;
		this.get_scrollRect().height = haxepunk_HXP.screen.height;
		var _g = 0;
		var _g1 = this.engine.onResize.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
	}
	,__class__: haxepunk_backend_flash_FlashApiApp
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen"})
});
var haxepunk_backend_flash_KeyInput = function() { };
$hxClasses["haxepunk.backend.flash.KeyInput"] = haxepunk_backend_flash_KeyInput;
haxepunk_backend_flash_KeyInput.__name__ = ["haxepunk","backend","flash","KeyInput"];
haxepunk_backend_flash_KeyInput.init = function(app) {
	var stage = app.stage;
	stage.addEventListener("keyDown",haxepunk_backend_flash_KeyInput.keyDownCallback,false,2);
	stage.addEventListener("keyUp",haxepunk_backend_flash_KeyInput.keyUpCallback,false,2);
};
haxepunk_backend_flash_KeyInput.keyCode = function(e) {
	return e.keyCode;
};
haxepunk_backend_flash_KeyInput.keyDownCallback = function(e) {
	var code = e.keyCode;
	if(code == -1) {
		return;
	}
	haxepunk_input__$Key_Key_$Impl_$.onKeyDown(code,e.shiftKey);
};
haxepunk_backend_flash_KeyInput.keyUpCallback = function(e) {
	var code = e.keyCode;
	if(code == -1) {
		return;
	}
	haxepunk_input__$Key_Key_$Impl_$.onKeyUp(code);
};
var haxepunk_backend_flash_MouseInput = function() { };
$hxClasses["haxepunk.backend.flash.MouseInput"] = haxepunk_backend_flash_MouseInput;
haxepunk_backend_flash_MouseInput.__name__ = ["haxepunk","backend","flash","MouseInput"];
haxepunk_backend_flash_MouseInput.init = function(app) {
	var stage = app.stage;
	stage.addEventListener("mouseDown",haxepunk_input_Mouse.onMouseDown,false,2);
	stage.addEventListener("mouseUp",haxepunk_input_Mouse.onMouseUp,false,2);
	stage.addEventListener("mouseWheel",function(e) {
		haxepunk_input_Mouse.onMouseWheel(e.delta);
	},false,2);
	stage.addEventListener("middleMouseDown",haxepunk_input_Mouse.onMiddleMouseDown,false,2);
	stage.addEventListener("middleMouseUp",haxepunk_input_Mouse.onMiddleMouseUp,false,2);
	stage.addEventListener("rightMouseDown",haxepunk_input_Mouse.onRightMouseDown,false,2);
	stage.addEventListener("rightMouseUp",haxepunk_input_Mouse.onRightMouseUp,false,2);
};
var openfl_display_DefaultPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) {
		color = 16777215;
	}
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.outline.set_alpha(0);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.progress.set_alpha(0);
	this.addChild(this.progress);
	this.startAnimation = openfl_Lib.getTimer() + 100;
	this.endAnimation = this.startAnimation + 1000;
	this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
};
$hxClasses["openfl.display.DefaultPreloader"] = openfl_display_DefaultPreloader;
openfl_display_DefaultPreloader.__name__ = ["openfl","display","DefaultPreloader"];
openfl_display_DefaultPreloader.__super__ = openfl_display_Sprite;
openfl_display_DefaultPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	endAnimation: null
	,outline: null
	,progress: null
	,startAnimation: null
	,getBackgroundColor: function() {
		return openfl_Lib.get_current().stage.window.config.background;
	}
	,getHeight: function() {
		var height = openfl_Lib.get_current().stage.window.config.height;
		if(height > 0) {
			return height;
		} else {
			return openfl_Lib.get_current().stage.stageHeight;
		}
	}
	,getWidth: function() {
		var width = openfl_Lib.get_current().stage.window.config.width;
		if(width > 0) {
			return width;
		} else {
			return openfl_Lib.get_current().stage.stageWidth;
		}
	}
	,onInit: function() {
		this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,onLoaded: function() {
		this.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.dispatchEvent(new openfl_events_Event("unload"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = 0.0;
		if(bytesTotal > 0) {
			percentLoaded = bytesLoaded / bytesTotal;
			if(percentLoaded > 1) {
				percentLoaded = 1;
			}
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,this_onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
		this.onInit();
		this.onUpdate(this.get_loaderInfo().bytesLoaded,this.get_loaderInfo().bytesTotal);
		this.addEventListener("progress",$bind(this,this.this_onProgress));
		this.addEventListener("complete",$bind(this,this.this_onComplete));
	}
	,this_onComplete: function(event) {
		event.preventDefault();
		this.removeEventListener("progress",$bind(this,this.this_onProgress));
		this.removeEventListener("complete",$bind(this,this.this_onComplete));
		this.onLoaded();
	}
	,this_onEnterFrame: function(event) {
		var elapsed = openfl_Lib.getTimer() - this.startAnimation;
		var total = this.endAnimation - this.startAnimation;
		var percent = elapsed / total;
		if(percent < 0) {
			percent = 0;
		}
		if(percent > 1) {
			percent = 1;
		}
		this.outline.set_alpha(percent);
		this.progress.set_alpha(percent);
	}
	,this_onProgress: function(event) {
		this.onUpdate(event.bytesLoaded | 0,event.bytesTotal | 0);
	}
	,__class__: openfl_display_DefaultPreloader
});
var haxepunk_backend_flash_Preloader = function() {
	var _gthis = this;
	openfl_display_DefaultPreloader.call(this);
	openfl_utils_Assets.loadBitmapData("graphics/preloader/haxepunk.png").onComplete(function(bmd) {
		_gthis.scaleIncrement = 0.002;
		var width = 260;
		var height = 340;
		var color = -3448027;
		var padding = 5;
		_gthis.outline.set_x((_gthis.getWidth() - width) / 2);
		_gthis.outline.set_y((_gthis.getHeight() - height) / 2);
		_gthis.outline.get_graphics().clear();
		var img = new openfl_display_Bitmap(_gthis.crop(bmd,new openfl_geom_Rectangle(0,0,274,58)));
		_gthis.addChild(img);
		img.set_x(_gthis.outline.get_x());
		img.set_y(_gthis.outline.get_y());
		var img1 = new openfl_display_Bitmap(_gthis.crop(bmd,new openfl_geom_Rectangle(0,65,274,80)));
		_gthis.addChild(img1);
		img1.set_x(_gthis.outline.get_x());
		img1.set_y(_gthis.outline.get_y() + 260);
		_gthis.factory = new openfl_display_Sprite();
		_gthis.factory.set_x(_gthis.outline.get_x() + 187);
		_gthis.factory.set_y(_gthis.outline.get_y() + 260);
		var img2 = new openfl_display_Bitmap(_gthis.crop(bmd,new openfl_geom_Rectangle(0,165,114,190)));
		img2.set_x(-57);
		img2.set_y(-190);
		_gthis.factory.addChild(img2);
		_gthis.addChild(_gthis.factory);
		_gthis.largeCog = new openfl_display_Sprite();
		_gthis.largeCog.set_x(_gthis.outline.get_x() + 80);
		_gthis.largeCog.set_y(_gthis.outline.get_y() + 190);
		var img3 = new openfl_display_Bitmap(_gthis.crop(bmd,new openfl_geom_Rectangle(115,164,134,136)));
		img3.set_x(-67);
		img3.set_y(-68);
		_gthis.largeCog.addChild(img3);
		_gthis.addChild(_gthis.largeCog);
		_gthis.smallCog = new openfl_display_Sprite();
		_gthis.smallCog.set_x(_gthis.outline.get_x() + 190);
		_gthis.smallCog.set_y(_gthis.outline.get_y() + 185);
		var img4 = new openfl_display_Bitmap(_gthis.crop(bmd,new openfl_geom_Rectangle(123,305,56,56)));
		img4.set_x(-28);
		img4.set_y(-28);
		_gthis.smallCog.addChild(img4);
		_gthis.addChild(_gthis.smallCog);
		var complete = new openfl_display_Sprite();
		complete.set_x(_gthis.outline.get_x() + width / 2);
		complete.set_y(_gthis.outline.get_y() + 60);
		complete.get_graphics().lineStyle(1,-1);
		complete.get_graphics().moveTo(-width / 2 + padding,0);
		complete.get_graphics().lineTo(width / 2 - padding,0);
		_gthis.addChildAt(complete,0);
		_gthis.progress.set_y(_gthis.outline.get_y() + 60);
		_gthis.progress.set_x(_gthis.outline.get_x() + width / 2);
		_gthis.progress.get_graphics().clear();
		_gthis.progress.get_graphics().lineStyle(1,color);
		_gthis.progress.get_graphics().moveTo(-width / 2 + padding,0);
		_gthis.progress.get_graphics().lineTo(width / 2 - padding,0);
		_gthis.addEventListener("enterFrame",$bind(_gthis,_gthis.onEnterFrame));
		_gthis.onEnterFrame(null);
	});
};
$hxClasses["haxepunk.backend.flash.Preloader"] = haxepunk_backend_flash_Preloader;
haxepunk_backend_flash_Preloader.__name__ = ["haxepunk","backend","flash","Preloader"];
haxepunk_backend_flash_Preloader.__super__ = openfl_display_DefaultPreloader;
haxepunk_backend_flash_Preloader.prototype = $extend(openfl_display_DefaultPreloader.prototype,{
	largeCog: null
	,smallCog: null
	,factory: null
	,onEnterFrame: function(e) {
		var _g = this.largeCog;
		_g.set_rotation(_g.get_rotation() + 1);
		var _g1 = this.smallCog;
		_g1.set_rotation(_g1.get_rotation() - 1);
		var _g2 = this.factory;
		_g2.set_scaleX(_g2.get_scaleX() + this.scaleIncrement);
		var _g3 = this.factory;
		_g3.set_scaleY(_g3.get_scaleY() + this.scaleIncrement);
		if(this.factory.get_scaleX() > 1.02 || this.factory.get_scaleX() < 1) {
			this.scaleIncrement = -this.scaleIncrement;
		}
		this.outline.get_graphics().clear();
	}
	,crop: function(bmd,rect) {
		var cropped = new openfl_display_BitmapData(rect.width | 0,rect.height | 0);
		cropped.copyPixels(bmd,rect,new openfl_geom_Point());
		return cropped;
	}
	,scaleIncrement: null
	,__class__: haxepunk_backend_flash_Preloader
});
var haxepunk_backend_flash_Sfx = function(source,complete) {
	this._position = 0;
	this._pan = 0;
	this._volume = 1;
	this._transform = new openfl_media_SoundTransform();
	this._volume = 1;
	this._pan = 0;
	this._position = 0;
	this._type = "";
	if(source == null) {
		throw new js__$Boot_HaxeError("Invalid source Sound.");
	}
	if(typeof(source) == "string") {
		this._sound = openfl_utils_Assets.getSound(source);
		var value = this._sound;
		var _this = haxepunk_backend_flash_Sfx._sounds;
		var key = source;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	} else {
		var o = source;
		var className = Type.getClassName(o == null ? null : js_Boot.getClass(o));
		if(StringTools.endsWith(className,"media.Sound")) {
			var __sound = source;
			var key1 = __sound.url;
			var _this1 = haxepunk_backend_flash_Sfx._sounds;
			this._sound = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
			if(this._sound == null) {
				this._sound = source;
				var key2 = __sound.url;
				var _this2 = haxepunk_backend_flash_Sfx._sounds;
				var value1 = source;
				if(__map_reserved[key2] != null) {
					_this2.setReserved(key2,value1);
				} else {
					_this2.h[key2] = value1;
				}
			}
		} else {
			var _this3 = haxepunk_backend_flash_Sfx._sounds;
			this._sound = __map_reserved[className] != null ? _this3.getReserved(className) : _this3.h[className];
			if(this._sound == null) {
				this._sound = source;
				var _this4 = haxepunk_backend_flash_Sfx._sounds;
				var value2 = source;
				if(__map_reserved[className] != null) {
					_this4.setReserved(className,value2);
				} else {
					_this4.h[className] = value2;
				}
			}
		}
	}
	this.complete = complete;
};
$hxClasses["haxepunk.backend.flash.Sfx"] = haxepunk_backend_flash_Sfx;
haxepunk_backend_flash_Sfx.__name__ = ["haxepunk","backend","flash","Sfx"];
haxepunk_backend_flash_Sfx.getPan = function(type) {
	var result = 0;
	var _this = haxepunk_backend_flash_Sfx._typeTransforms;
	if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
		var _this1 = haxepunk_backend_flash_Sfx._typeTransforms;
		var transform = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		if(transform != null) {
			result = transform.pan;
		}
	}
	return result + haxepunk_HXP._pan;
};
haxepunk_backend_flash_Sfx.getVolume = function(type) {
	var result = 1;
	var _this = haxepunk_backend_flash_Sfx._typeTransforms;
	if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
		var _this1 = haxepunk_backend_flash_Sfx._typeTransforms;
		var transform = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		if(transform != null) {
			result = transform.volume;
		}
	}
	return result * haxepunk_HXP.volume;
};
haxepunk_backend_flash_Sfx.setPan = function(type,pan) {
	var _this = haxepunk_backend_flash_Sfx._typeTransforms;
	var transform = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
	if(transform == null) {
		transform = new openfl_media_SoundTransform();
		var _this1 = haxepunk_backend_flash_Sfx._typeTransforms;
		if(__map_reserved[type] != null) {
			_this1.setReserved(type,transform);
		} else {
			_this1.h[type] = transform;
		}
	}
	transform.pan = haxepunk_math_MathUtil.clamp(pan,-1,1);
	var _this2 = haxepunk_backend_flash_Sfx._typePlaying;
	if(__map_reserved[type] != null ? _this2.existsReserved(type) : _this2.h.hasOwnProperty(type)) {
		var _g = 0;
		var _this3 = haxepunk_backend_flash_Sfx._typePlaying;
		var _g1 = __map_reserved[type] != null ? _this3.getReserved(type) : _this3.h[type];
		while(_g < _g1.length) {
			var sfx = _g1[_g];
			++_g;
			sfx.set_pan(sfx.get_pan());
		}
	}
};
haxepunk_backend_flash_Sfx.setVolume = function(type,volume) {
	var _this = haxepunk_backend_flash_Sfx._typeTransforms;
	var transform = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
	if(transform == null) {
		transform = new openfl_media_SoundTransform();
		var _this1 = haxepunk_backend_flash_Sfx._typeTransforms;
		if(__map_reserved[type] != null) {
			_this1.setReserved(type,transform);
		} else {
			_this1.h[type] = transform;
		}
	}
	transform.volume = volume < 0 ? 0 : volume;
	var _this2 = haxepunk_backend_flash_Sfx._typePlaying;
	if(__map_reserved[type] != null ? _this2.existsReserved(type) : _this2.h.hasOwnProperty(type)) {
		var _g = 0;
		var _this3 = haxepunk_backend_flash_Sfx._typePlaying;
		var _g1 = __map_reserved[type] != null ? _this3.getReserved(type) : _this3.h[type];
		while(_g < _g1.length) {
			var sfx = _g1[_g];
			++_g;
			sfx.set_volume(sfx.get_volume());
		}
	}
};
haxepunk_backend_flash_Sfx.onGlobalUpdated = function(updatePan) {
	var type = haxepunk_backend_flash_Sfx._typePlaying.keys();
	while(type.hasNext()) {
		var type1 = type.next();
		var _g = 0;
		var _this = haxepunk_backend_flash_Sfx._typePlaying;
		var _g1 = __map_reserved[type1] != null ? _this.getReserved(type1) : _this.h[type1];
		while(_g < _g1.length) {
			var sfx = _g1[_g];
			++_g;
			if(updatePan) {
				sfx.set_pan(sfx.get_pan());
			} else {
				sfx.set_volume(sfx.get_volume());
			}
		}
	}
};
haxepunk_backend_flash_Sfx.prototype = {
	complete: null
	,play: function(volume,pan,loop) {
		if(loop == null) {
			loop = false;
		}
		if(pan == null) {
			pan = 0;
		}
		if(volume == null) {
			volume = 1;
		}
		if(this._sound == null) {
			return;
		}
		if(this._channel != null) {
			this.stop();
		}
		this._pan = haxepunk_math_MathUtil.clamp(pan,-1,1);
		this._volume = volume < 0 ? 0 : volume;
		this._filteredPan = haxepunk_math_MathUtil.clamp(this._pan + haxepunk_backend_flash_Sfx.getPan(this._type),-1,1);
		this._filteredVol = Math.max(0,this._volume * haxepunk_backend_flash_Sfx.getVolume(this._type));
		this._transform.pan = this._filteredPan;
		this._transform.volume = this._filteredVol;
		this._channel = this._sound.play(0,loop ? -1 : 0,this._transform);
		if(this._channel != null) {
			this.addPlaying();
			this._channel.addEventListener("soundComplete",$bind(this,this.onComplete));
		}
		this._looping = loop;
		this._position = 0;
	}
	,loop: function(vol,pan) {
		if(pan == null) {
			pan = 0;
		}
		if(vol == null) {
			vol = 1;
		}
		this.play(vol,pan,true);
	}
	,stop: function() {
		if(this._channel == null) {
			return false;
		}
		this.removePlaying();
		this._position = this._channel.get_position();
		this._channel.removeEventListener("soundComplete",$bind(this,this.onComplete));
		this._channel.stop();
		this._channel = null;
		return true;
	}
	,resume: function() {
		this._channel = this._sound.play(this._position,this._looping ? -1 : 0,this._transform);
		if(this._channel != null) {
			this.addPlaying();
			this._channel.addEventListener("soundComplete",$bind(this,this.onComplete));
		}
		this._position = 0;
	}
	,onComplete: function(e) {
		if(this._looping) {
			this.loop(this._volume,this._pan);
		} else {
			this.stop();
		}
		this._position = 0;
		if(this.complete != null) {
			this.complete();
		}
	}
	,addPlaying: function() {
		var list;
		var key = this._type;
		var _this = haxepunk_backend_flash_Sfx._typePlaying;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			list = [];
			var key1 = this._type;
			var _this1 = haxepunk_backend_flash_Sfx._typePlaying;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,list);
			} else {
				_this1.h[key1] = list;
			}
		} else {
			var key2 = this._type;
			var _this2 = haxepunk_backend_flash_Sfx._typePlaying;
			if(__map_reserved[key2] != null) {
				list = _this2.getReserved(key2);
			} else {
				list = _this2.h[key2];
			}
		}
		list.push(this);
	}
	,removePlaying: function() {
		var key = this._type;
		var _this = haxepunk_backend_flash_Sfx._typePlaying;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = this._type;
			var _this1 = haxepunk_backend_flash_Sfx._typePlaying;
			HxOverrides.remove(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1],this);
		}
	}
	,get_volume: function() {
		return this._volume;
	}
	,set_volume: function(value) {
		if(value < 0) {
			value = 0;
		}
		if(this._channel == null) {
			return value;
		}
		this._volume = value;
		var filteredVol = value * haxepunk_backend_flash_Sfx.getVolume(this._type);
		if(filteredVol < 0) {
			filteredVol = 0;
		}
		if(this._filteredVol == filteredVol) {
			return value;
		}
		this._filteredVol = this._transform.volume = filteredVol;
		this._channel.set_soundTransform(this._transform);
		return this._volume;
	}
	,get_pan: function() {
		return this._pan;
	}
	,set_pan: function(value) {
		value = haxepunk_math_MathUtil.clamp(value,-1,1);
		if(this._channel == null) {
			return value;
		}
		var filteredPan = haxepunk_math_MathUtil.clamp(value + haxepunk_backend_flash_Sfx.getPan(this._type),-1,1);
		if(this._filteredPan == filteredPan) {
			return value;
		}
		this._pan = value;
		this._filteredPan = this._transform.pan = filteredPan;
		this._channel.set_soundTransform(this._transform);
		return this._pan;
	}
	,get_type: function() {
		return this._type;
	}
	,set_type: function(value) {
		if(this._type == value) {
			return value;
		}
		if(this._channel != null) {
			this.removePlaying();
			this._type = value;
			this.addPlaying();
			this.set_pan(this.get_pan());
			this.set_volume(this.get_volume());
		} else {
			this._type = value;
		}
		return value;
	}
	,playing: null
	,get_playing: function() {
		return this._channel != null;
	}
	,position: null
	,get_position: function() {
		return (this._channel != null ? this._channel.get_position() : this._position) / 1000;
	}
	,length: null
	,get_length: function() {
		return this._sound.get_length() / 1000;
	}
	,_type: null
	,_volume: null
	,_pan: null
	,_filteredVol: null
	,_filteredPan: null
	,_sound: null
	,_channel: null
	,_transform: null
	,_position: null
	,_looping: null
	,__class__: haxepunk_backend_flash_Sfx
	,__properties__: {get_length:"get_length",get_position:"get_position",get_playing:"get_playing",set_type:"set_type",get_type:"get_type",set_pan:"set_pan",get_pan:"get_pan",set_volume:"set_volume",get_volume:"get_volume"}
};
var lime_utils_ObjectPool_$openfl_$geom_$Point = function(create,clean,size) {
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new List();
};
$hxClasses["lime.utils.ObjectPool_openfl_geom_Point"] = lime_utils_ObjectPool_$openfl_$geom_$Point;
lime_utils_ObjectPool_$openfl_$geom_$Point.__name__ = ["lime","utils","ObjectPool_openfl_geom_Point"];
lime_utils_ObjectPool_$openfl_$geom_$Point.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			this.__pool.set(object,false);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.__pool.set(object1,true);
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		if(!this.__pool.exists(object)) {
			lime_utils_Log.error("Object is not a member of the pool",{ fileName : "ObjectPool.hx", lineNumber : 130, className : "lime.utils.ObjectPool", methodName : "release"});
		} else if(!this.__pool.get(object)) {
			lime_utils_Log.error("Object has already been released",{ fileName : "ObjectPool.hx", lineNumber : 134, className : "lime.utils.ObjectPool", methodName : "release"});
		}
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			this.__pool.set(object,false);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,__addInactive: function(object) {
		this.__pool.set(object,false);
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.__pool.set(object,true);
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var object = val;
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool_$openfl_$geom_$Point
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		}
		var _this = openfl_geom_Point.__limeVector2;
		_this.x = this.x;
		_this.y = this.y;
		return openfl_geom_Point.__limeVector2;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var haxepunk_backend_flash__$Texture_Texture_$Impl_$ = {};
$hxClasses["haxepunk.backend.flash._Texture.Texture_Impl_"] = haxepunk_backend_flash__$Texture_Texture_$Impl_$;
haxepunk_backend_flash__$Texture_Texture_$Impl_$.__name__ = ["haxepunk","backend","flash","_Texture","Texture_Impl_"];
haxepunk_backend_flash__$Texture_Texture_$Impl_$.create = function(width,height,transparent,color) {
	if(color == null) {
		color = 0;
	}
	if(transparent == null) {
		transparent = false;
	}
	return new openfl_display_BitmapData(width,height,transparent,color);
};
haxepunk_backend_flash__$Texture_Texture_$Impl_$.removeColor = function(this1,color) {
	this1.threshold(this1,this1.rect,haxepunk_backend_flash__$Texture_Texture_$Impl_$._zero,"==",color,0,-1,true);
};
haxepunk_backend_flash__$Texture_Texture_$Impl_$.clearColor = function(this1,color) {
	this1.fillRect(this1.rect,color);
};
haxepunk_backend_flash__$Texture_Texture_$Impl_$.drawCircle = function(this1,x,y,radius) {
	var sprite = new openfl_display_Sprite();
	sprite.get_graphics().clear();
	sprite.get_graphics().beginFill(16777215);
	sprite.get_graphics().drawCircle(x,y,radius);
	this1.draw(sprite);
};
var haxepunk_backend_flash_TouchInput = function() { };
$hxClasses["haxepunk.backend.flash.TouchInput"] = haxepunk_backend_flash_TouchInput;
haxepunk_backend_flash_TouchInput.__name__ = ["haxepunk","backend","flash","TouchInput"];
haxepunk_backend_flash_TouchInput.init = function(app) {
	var stage = app.stage;
	openfl_ui_Multitouch.inputMode = 2;
	stage.addEventListener("touchBegin",haxepunk_backend_flash_TouchInput.onTouchBegin);
	stage.addEventListener("touchMove",haxepunk_backend_flash_TouchInput.onTouchMove);
	stage.addEventListener("touchEnd",haxepunk_backend_flash_TouchInput.onTouchEnd);
};
haxepunk_backend_flash_TouchInput.onTouchBegin = function(e) {
	var touchPoint = new haxepunk_input_Touch(e.stageX / haxepunk_HXP.screen.fullScaleX,e.stageY / haxepunk_HXP.screen.fullScaleY,e.touchPointID);
	haxepunk_input_Touch._touches.h[e.touchPointID] = touchPoint;
	haxepunk_input_Touch._touchOrder.push(e.touchPointID);
};
haxepunk_backend_flash_TouchInput.onTouchMove = function(e) {
	if(haxepunk_input_Touch._touches.h.hasOwnProperty(e.touchPointID)) {
		var point = haxepunk_input_Touch._touches.h[e.touchPointID];
		point.x = e.stageX / haxepunk_HXP.screen.fullScaleX;
		point.y = e.stageY / haxepunk_HXP.screen.fullScaleY;
	}
};
haxepunk_backend_flash_TouchInput.onTouchEnd = function(e) {
	if(haxepunk_input_Touch._touches.h.hasOwnProperty(e.touchPointID)) {
		haxepunk_input_Touch._touches.h[e.touchPointID].released = true;
	}
};
var haxepunk_backend_lime_App = function(engine) {
	haxepunk_backend_flash_FlashApiApp.call(this,engine);
};
$hxClasses["haxepunk.backend.lime.App"] = haxepunk_backend_lime_App;
haxepunk_backend_lime_App.__name__ = ["haxepunk","backend","lime","App"];
haxepunk_backend_lime_App.__super__ = haxepunk_backend_flash_FlashApiApp;
haxepunk_backend_lime_App.prototype = $extend(haxepunk_backend_flash_FlashApiApp.prototype,{
	initGamepadInput: function() {
		haxepunk_backend_lime_GamepadInput.init(this);
	}
	,__class__: haxepunk_backend_lime_App
});
var haxepunk_backend_lime_GLInternal = function() { };
$hxClasses["haxepunk.backend.lime.GLInternal"] = haxepunk_backend_lime_GLInternal;
haxepunk_backend_lime_GLInternal.__name__ = ["haxepunk","backend","lime","GLInternal"];
haxepunk_backend_lime_GLInternal.bindTexture = function(texture) {
	var renderer = (js_Boot.__cast(haxepunk_HXP.app , openfl_display_Sprite)).stage.__renderer;
	var renderSession = renderer.renderSession;
	var bmd = texture;
	var texture1 = bmd.getTexture(renderSession.gl);
	lime_graphics_opengl_GL.context.__context.bindTexture(3553,texture1);
};
haxepunk_backend_lime_GLInternal.invalid = function(object) {
	return object == null;
};
var haxepunk_backend_lime_GamepadInput = function() { };
$hxClasses["haxepunk.backend.lime.GamepadInput"] = haxepunk_backend_lime_GamepadInput;
haxepunk_backend_lime_GamepadInput.__name__ = ["haxepunk","backend","lime","GamepadInput"];
haxepunk_backend_lime_GamepadInput.init = function(app) {
	lime_ui_Gamepad.onConnect.add(haxepunk_backend_lime_GamepadInput.onJoyDeviceAdded);
	var device = lime_ui_Gamepad.devices.iterator();
	while(device.hasNext()) {
		var device1 = device.next();
		haxepunk_backend_lime_GamepadInput.onJoyDeviceAdded(device1);
	}
};
haxepunk_backend_lime_GamepadInput.onJoyDeviceAdded = function(limeGamepad) {
	var joy = new haxepunk_input_Gamepad(limeGamepad.id);
	haxepunk_input_Gamepad.gamepads.h[limeGamepad.id] = joy;
	++haxepunk_input_Gamepad.gamepadCount;
	limeGamepad.onButtonUp.add($bind(joy,joy.onButtonUp));
	limeGamepad.onButtonDown.add($bind(joy,joy.onButtonDown));
	var a1 = limeGamepad;
	var tmp = function(a,v) {
		haxepunk_backend_lime_GamepadInput.onJoyAxisMove(a1,a,v);
	};
	limeGamepad.onAxisMove.add(tmp);
	var a11 = limeGamepad;
	var tmp1 = function() {
		haxepunk_backend_lime_GamepadInput.onJoyDeviceRemoved(a11);
	};
	limeGamepad.onDisconnect.add(tmp1);
	haxepunk_input_Input.handlers.push(joy);
	var _g = 0;
	var _g1 = haxepunk_input_Gamepad.onConnect.callbacks;
	while(_g < _g1.length) {
		var callback = _g1[_g];
		++_g;
		callback(joy);
	}
};
haxepunk_backend_lime_GamepadInput.onJoyDeviceRemoved = function(limeGamepad) {
	var joy = haxepunk_input_Gamepad.gamepad(limeGamepad.id);
	joy.connected = false;
	haxepunk_input_Gamepad.gamepads.remove(limeGamepad.id);
	--haxepunk_input_Gamepad.gamepadCount;
	if(haxepunk_input_Input.handlers.indexOf(joy) > -1) {
		HxOverrides.remove(haxepunk_input_Input.handlers,joy);
	}
	var _g = 0;
	var _g1 = haxepunk_input_Gamepad.onDisconnect.callbacks;
	while(_g < _g1.length) {
		var callback = _g1[_g];
		++_g;
		callback(joy);
	}
};
haxepunk_backend_lime_GamepadInput.onJoyAxisMove = function(limeGamepad,a,v) {
	var joy = haxepunk_input_Gamepad.gamepad(limeGamepad.id);
	joy.onAxisMove(a,v);
};
var haxepunk_cameras_StaticCamera = function(x,y) {
	haxepunk_Camera.call(this,x,y);
};
$hxClasses["haxepunk.cameras.StaticCamera"] = haxepunk_cameras_StaticCamera;
haxepunk_cameras_StaticCamera.__name__ = ["haxepunk","cameras","StaticCamera"];
haxepunk_cameras_StaticCamera.__super__ = haxepunk_Camera;
haxepunk_cameras_StaticCamera.prototype = $extend(haxepunk_Camera.prototype,{
	update: function() {
		haxepunk_Camera.prototype.update.call(this);
		this.x = this.y = 0;
	}
	,__class__: haxepunk_cameras_StaticCamera
});
var haxepunk_cameras_UICamera = function(x,y) {
	haxepunk_cameras_StaticCamera.call(this,x,y);
};
$hxClasses["haxepunk.cameras.UICamera"] = haxepunk_cameras_UICamera;
haxepunk_cameras_UICamera.__name__ = ["haxepunk","cameras","UICamera"];
haxepunk_cameras_UICamera.__super__ = haxepunk_cameras_StaticCamera;
haxepunk_cameras_UICamera.prototype = $extend(haxepunk_cameras_StaticCamera.prototype,{
	update: function() {
		haxepunk_cameras_StaticCamera.prototype.update.call(this);
		this.scale = 1;
		this.scaleX = 1 / haxepunk_HXP.screen.fullScaleX;
		this.scaleY = 1 / haxepunk_HXP.screen.fullScaleY;
	}
	,__class__: haxepunk_cameras_UICamera
});
var haxepunk_debug_ButtonTray = function(mouseManager,onHide,onPause,onStep) {
	var _gthis = this;
	haxepunk_EntityList.call(this);
	var btn = new haxepunk_debug_DebugButton("graphics/debug/console_visible.png",mouseManager,onHide);
	btn.set_x(_gthis.get_width());
	var _g = _gthis;
	_g.set_width(_g.get_width() + btn.get_width());
	_gthis.add(btn);
	var btn1 = new haxepunk_debug_DebugButton("graphics/debug/console_pause.png",mouseManager,onPause);
	btn1.set_x(_gthis.get_width());
	var _g1 = _gthis;
	_g1.set_width(_g1.get_width() + btn1.get_width());
	_gthis.add(btn1);
	var btn2 = new haxepunk_debug_DebugButton("graphics/debug/console_step.png",mouseManager,onStep);
	btn2.set_x(_gthis.get_width());
	var _g2 = _gthis;
	_g2.set_width(_g2.get_width() + btn2.get_width());
	_gthis.add(btn2);
	var btn3 = new haxepunk_debug_DebugButton("graphics/debug/console_drawcall_add.png",mouseManager,$bind(this,this.incrementDrawCallDebug));
	btn3.set_x(_gthis.get_width());
	var _g3 = _gthis;
	_g3.set_width(_g3.get_width() + btn3.get_width());
	_gthis.add(btn3);
	var btn4 = new haxepunk_debug_DebugButton("graphics/debug/console_drawcall_all.png",mouseManager,$bind(this,this.resetDrawCallDebug));
	btn4.set_x(_gthis.get_width());
	var _g4 = _gthis;
	_g4.set_width(_g4.get_width() + btn4.get_width());
	_gthis.add(btn4);
};
$hxClasses["haxepunk.debug.ButtonTray"] = haxepunk_debug_ButtonTray;
haxepunk_debug_ButtonTray.__name__ = ["haxepunk","debug","ButtonTray"];
haxepunk_debug_ButtonTray.__super__ = haxepunk_EntityList;
haxepunk_debug_ButtonTray.prototype = $extend(haxepunk_EntityList.prototype,{
	resetDrawCallDebug: function() {
		haxepunk_graphics_hardware_HardwareRenderer.drawCallLimit = -1;
	}
	,incrementDrawCallDebug: function() {
		haxepunk_graphics_hardware_HardwareRenderer.drawCallLimit++;
	}
	,__class__: haxepunk_debug_ButtonTray
});
var haxepunk_debug_Console = function() {
	this._stepping = false;
	this.panning = false;
	this.dragging = false;
	this.clickActive = false;
	this.selBox = new haxepunk_math_Rectangle();
	this.click = new haxepunk_math_Vector2();
	this._t = 0;
	this._dc = 0;
	this._tri = 0;
	this._ent = 0;
	this._mem = 0;
	this._fps = 0;
	this.selected = [];
	this.debugDraw = false;
	haxepunk_Scene.call(this);
	this.trackDrawCalls = false;
	this.fps = new haxepunk_utils_CircularBuffer(15);
	this.memory = new haxepunk_utils_CircularBuffer(15);
	this.entities = new haxepunk_utils_CircularBuffer(15);
	this.triangles = new haxepunk_utils_CircularBuffer(15);
	this.drawCalls = new haxepunk_utils_CircularBuffer(15);
	var region = haxepunk_assets_AssetCache.getRegion("graphics/debug/console_logo.png");
	var tmp;
	if(region == null) {
		var data = null;
		if(haxepunk_graphics_atlas_AtlasData._dataPool.exists("graphics/debug/console_logo.png")) {
			data = haxepunk_graphics_atlas_AtlasData._dataPool.get("graphics/debug/console_logo.png");
		} else {
			var texture = haxepunk_assets_AssetCache.global.getTexture("graphics/debug/console_logo.png");
			if(texture != null) {
				data = new haxepunk_graphics_atlas_AtlasData(texture,"graphics/debug/console_logo.png");
			}
		}
		var this1 = data;
		tmp = haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1);
	} else {
		tmp = region;
	}
	this.logo = new haxepunk_graphics_Image(tmp);
	this.logo.blend = 9;
	this.addGraphic(this.logo);
	this.fpsChart = new haxepunk_debug_Metric("FPS",this.fps,16711680,haxepunk_HXP.frameRate);
	this.fpsChart.set_x(this.fpsChart.set_y(8));
	this.add(this.fpsChart);
	this.memoryChart = new haxepunk_debug_Metric("Memory Used (MB)",this.memory,16768341,256);
	this.memoryChart.set_x(this.fpsChart.get_x());
	this.memoryChart.set_y(this.fpsChart.get_y() + this.fpsChart.get_height() + 8);
	this.add(this.memoryChart);
	this.entitiesChart = new haxepunk_debug_Metric("Entities",this.entities,16737792,16);
	this.entitiesChart.set_x(this.memoryChart.get_x());
	this.entitiesChart.set_y(this.memoryChart.get_y() + this.memoryChart.get_height() + 8);
	this.add(this.entitiesChart);
	this.trianglesChart = new haxepunk_debug_Metric("Triangles",this.triangles,65280,128);
	this.trianglesChart.set_x(this.entitiesChart.get_x());
	this.trianglesChart.set_y(this.entitiesChart.get_y() + this.entitiesChart.get_height() + 8);
	this.add(this.trianglesChart);
	this.drawCallsChart = new haxepunk_debug_Metric("Draw calls",this.drawCalls,255,16);
	this.drawCallsChart.set_x(this.trianglesChart.get_x());
	this.drawCallsChart.set_y(this.trianglesChart.get_y() + this.trianglesChart.get_height() + 8);
	this.add(this.drawCallsChart);
	this.mouseManager = new haxepunk_input_MouseManager();
	this.mouseManager.set_type("hxp_debug_ui");
	this.buttonTray = new haxepunk_debug_ButtonTray(this.mouseManager,$bind(this,this.toggleDebugDraw),$bind(this,this.togglePause),$bind(this,this.step));
	this.buttonTray.set_y(8);
	this.add(this.buttonTray);
	this.layerList = new haxepunk_debug_LayerList(this.mouseManager);
	this.layerList.set_y(8);
	this.add(this.layerList);
	this.logPanel = new haxepunk_debug_LogPanel(this.mouseManager);
	this.logPanel.set_x(8);
	this.add(this.logPanel);
	this.add(this.mouseManager);
	this.bgColor = 12632256;
	this.preRender.callbacks.push($bind(this,this.debugRender));
	this.camera = new haxepunk_cameras_UICamera();
	if(haxepunk_debug_Console.drawContext == null) {
		haxepunk_debug_Console.drawContext = new haxepunk_utils_DrawContext();
		haxepunk_debug_Console.drawContext.lineThickness = 2;
	}
};
$hxClasses["haxepunk.debug.Console"] = haxepunk_debug_Console;
haxepunk_debug_Console.__name__ = ["haxepunk","debug","Console"];
haxepunk_debug_Console.__properties__ = {set_enabled:"set_enabled",get_enabled:"get_enabled"};
haxepunk_debug_Console.enable = function() {
	if(true != (haxepunk_HXP.engine.console != null)) {
		haxepunk_HXP.engine.console = new haxepunk_debug_Console();
	}
};
haxepunk_debug_Console.get_enabled = function() {
	return haxepunk_HXP.engine.console != null;
};
haxepunk_debug_Console.set_enabled = function(v) {
	if(v != (haxepunk_HXP.engine.console != null)) {
		var tmp = v ? new haxepunk_debug_Console() : null;
		haxepunk_HXP.engine.console = tmp;
	}
	return v;
};
haxepunk_debug_Console.avg = function(buffer) {
	if(buffer.len == 0) {
		return 0;
	} else {
		return Lambda.fold(buffer,haxepunk_debug_Console.add2,0) / buffer.len;
	}
};
haxepunk_debug_Console.add2 = function(a,b) {
	return a + b;
};
haxepunk_debug_Console.__super__ = haxepunk_Scene;
haxepunk_debug_Console.prototype = $extend(haxepunk_Scene.prototype,{
	fps: null
	,memory: null
	,entities: null
	,triangles: null
	,drawCalls: null
	,get_paused: function() {
		return haxepunk_HXP.engine.paused;
	}
	,set_paused: function(v) {
		return haxepunk_HXP.engine.paused = v;
	}
	,debugDraw: null
	,logo: null
	,buttonTray: null
	,logPanel: null
	,layerList: null
	,fpsChart: null
	,memoryChart: null
	,entitiesChart: null
	,trianglesChart: null
	,drawCallsChart: null
	,selected: null
	,_fps: null
	,_mem: null
	,_ent: null
	,_tri: null
	,_dc: null
	,_t: null
	,click: null
	,selBox: null
	,clickActive: null
	,dragging: null
	,panning: null
	,mouseManager: null
	,update: function() {
		haxepunk_Scene.prototype.update.call(this);
		var key = 192;
		if(key < 0 ? haxepunk_input__$Key_Key_$Impl_$._pressNum != 0 : haxepunk_input__$Key_Key_$Impl_$._press.indexOf(key) >= 0) {
			this.togglePause();
			this.debugDraw = haxepunk_HXP.engine.paused;
		}
		if(!haxepunk_HXP.engine.paused) {
			this.updateMetrics();
		}
		if(haxepunk_HXP.engine.paused) {
			var key1 = 221;
			if(key1 < 0 && haxepunk_input__$Key_Key_$Impl_$._keyNum > 0 || haxepunk_input__$Key_Key_$Impl_$._key.get(key1)) {
				this.step();
			}
			var key2 = 16;
			if(key2 < 0 && haxepunk_input__$Key_Key_$Impl_$._keyNum > 0 || haxepunk_input__$Key_Key_$Impl_$._key.get(key2)) {
				var mx = 0;
				var my = 0;
				var key3 = 37;
				if(key3 < 0 && haxepunk_input__$Key_Key_$Impl_$._keyNum > 0 || haxepunk_input__$Key_Key_$Impl_$._key.get(key3)) {
					mx = -1;
				} else {
					var key4 = 39;
					if(key4 < 0 && haxepunk_input__$Key_Key_$Impl_$._keyNum > 0 || haxepunk_input__$Key_Key_$Impl_$._key.get(key4)) {
						mx = 1;
					}
				}
				var key5 = 38;
				if(key5 < 0 && haxepunk_input__$Key_Key_$Impl_$._keyNum > 0 || haxepunk_input__$Key_Key_$Impl_$._key.get(key5)) {
					my = -1;
				} else {
					var key6 = 40;
					if(key6 < 0 && haxepunk_input__$Key_Key_$Impl_$._keyNum > 0 || haxepunk_input__$Key_Key_$Impl_$._key.get(key6)) {
						my = 1;
					}
				}
				if(mx != 0 || my != 0) {
					var camera = haxepunk_HXP.engine._scene.camera;
					camera.x = camera.x + haxepunk_HXP.elapsed * 256 * mx | 0;
					camera.y = camera.y + haxepunk_HXP.elapsed * 256 * my | 0;
				}
				if(!this.clickActive && haxepunk_input_Mouse.mouseDown) {
					this.panning = true;
				}
			}
			if(haxepunk_input_Mouse.mousePressed) {
				this.clickActive = true;
				this.dragging = false;
				var _this = this.click;
				var _this1 = haxepunk_HXP.engine._scene;
				var x = haxepunk_HXP.app.getMouseX() - haxepunk_HXP.screen.x - _this1.x;
				var _this2 = _this1.camera;
				var x1 = x / (_this2.scale * _this2.scaleX * haxepunk_HXP.screen.fullScaleX) + _this1.camera.x | 0;
				var _this3 = haxepunk_HXP.engine._scene;
				var x2 = haxepunk_HXP.app.getMouseY() - haxepunk_HXP.screen.y - _this3.y;
				var _this4 = _this3.camera;
				_this.x = x1;
				_this.y = x2 / (_this4.scale * _this4.scaleY * haxepunk_HXP.screen.fullScaleY) + _this3.camera.y | 0;
			}
			if(this.clickActive) {
				var _this5 = haxepunk_HXP.engine._scene;
				var x3 = haxepunk_HXP.app.getMouseX() - haxepunk_HXP.screen.x - _this5.x;
				var _this6 = _this5.camera;
				var mx1 = x3 / (_this6.scale * _this6.scaleX * haxepunk_HXP.screen.fullScaleX) + _this5.camera.x | 0;
				var _this7 = haxepunk_HXP.engine._scene;
				var x4 = haxepunk_HXP.app.getMouseY() - haxepunk_HXP.screen.y - _this7.y;
				var _this8 = _this7.camera;
				var my1 = x4 / (_this8.scale * _this8.scaleY * haxepunk_HXP.screen.fullScaleY) + _this7.camera.y | 0;
				if(this.panning) {
					var dx = mx1 - this.click.x | 0;
					var dy = my1 - this.click.y | 0;
					if(dx != 0 || dy != 0) {
						if(this.selected.length > 0) {
							var _g = 0;
							var _g1 = this.selected;
							while(_g < _g1.length) {
								var e = _g1[_g];
								++_g;
								var _g2 = e;
								_g2.set_x(_g2.get_x() + dx);
								var _g21 = e;
								_g21.set_y(_g21.get_y() + dy);
							}
						} else {
							haxepunk_HXP.engine._scene.camera.x -= dx;
							haxepunk_HXP.engine._scene.camera.y -= dy;
						}
						var _this9 = this.click;
						var _this10 = haxepunk_HXP.engine._scene;
						var x5 = haxepunk_HXP.app.getMouseX() - haxepunk_HXP.screen.x - _this10.x;
						var _this11 = _this10.camera;
						var x6 = x5 / (_this11.scale * _this11.scaleX * haxepunk_HXP.screen.fullScaleX) + _this10.camera.x | 0;
						var _this12 = haxepunk_HXP.engine._scene;
						var x7 = haxepunk_HXP.app.getMouseY() - haxepunk_HXP.screen.y - _this12.y;
						var _this13 = _this12.camera;
						_this9.x = x6;
						_this9.y = x7 / (_this13.scale * _this13.scaleY * haxepunk_HXP.screen.fullScaleY) + _this12.camera.y | 0;
					}
				} else {
					var moved = Math.abs(mx1 - this.click.x) + Math.abs(my1 - this.click.y);
					if(moved > 8) {
						this.dragging = true;
					}
					if(this.dragging) {
						this.selBox.setTo(Math.min(mx1,this.click.x),Math.min(my1,this.click.y),Math.abs(mx1 - this.click.x),Math.abs(my1 - this.click.y));
					}
					if(haxepunk_input_Mouse.mouseReleased) {
						if(!this.dragging) {
							this.selBox.setTo(this.click.x,this.click.y,1,1);
						}
						this.setSelection();
						this.clickActive = this.dragging = false;
					}
				}
			}
			if(!haxepunk_input_Mouse.mouseDown) {
				this.clickActive = this.dragging = this.panning = false;
			}
		}
		var _this14 = this.fpsChart;
		var _this15 = this.memoryChart;
		var _this16 = this.entitiesChart;
		var _this17 = this.trianglesChart;
		var _this18 = this.drawCallsChart;
		var _this19 = this.logPanel;
		var _this20 = this.layerList;
		_this14.set_active(_this14.set_visible(_this14.set_collidable(_this15.set_active(_this15.set_visible(_this15.set_collidable(_this16.set_active(_this16.set_visible(_this16.set_collidable(_this17.set_active(_this17.set_visible(_this17.set_collidable(_this18.set_active(_this18.set_visible(_this18.set_collidable(_this19.set_active(_this19.set_visible(_this19.set_collidable(_this20.set_active(_this20.set_visible(_this20.set_collidable(this.debugDraw)))))))))))))))))))));
		var _this21 = this.camera;
		this.logo.x = (haxepunk_HXP.screen.width / (_this21.scale * _this21.scaleX * haxepunk_HXP.screen.fullScaleX) - this.logo.get_width()) / 2;
		var _this22 = this.camera;
		this.logo.y = (haxepunk_HXP.screen.height / (_this22.scale * _this22.scaleY * haxepunk_HXP.screen.fullScaleY) - this.logo.get_height()) / 2;
		this.logo._visible = haxepunk_HXP.engine.paused;
		var _this23 = this.camera;
		this.buttonTray.set_x((haxepunk_HXP.screen.width / (_this23.scale * _this23.scaleX * haxepunk_HXP.screen.fullScaleX) - this.buttonTray.get_width()) / 2);
		var _this24 = this.camera;
		this.logPanel.set_width(haxepunk_HXP.screen.width / (_this24.scale * _this24.scaleX * haxepunk_HXP.screen.fullScaleX) - this.logPanel.get_x() - 8 | 0);
		var _this25 = this.camera;
		this.logPanel.set_y(haxepunk_HXP.screen.height / (_this25.scale * _this25.scaleY * haxepunk_HXP.screen.fullScaleY) - this.logPanel.get_height() - 8);
		var _this26 = this.camera;
		this.layerList.set_x(haxepunk_HXP.screen.width / (_this26.scale * _this26.scaleX * haxepunk_HXP.screen.fullScaleX) - this.layerList.get_width() - 8);
		this.bgAlpha = haxepunk_HXP.engine.paused ? 0.75 : 0;
		this.updateLists();
	}
	,log: function(data) {
		this.logPanel.log(data);
	}
	,watch: function(properties) {
	}
	,toggleDebugDraw: function() {
		this.debugDraw = !this.debugDraw;
	}
	,togglePause: function() {
		haxepunk_HXP.engine.paused = !haxepunk_HXP.engine.paused;
	}
	,_stepping: null
	,step: function() {
		if(this._stepping || !haxepunk_HXP.engine.paused) {
			return;
		}
		this._stepping = true;
		haxepunk_HXP.engine.update();
		this.updateMetrics();
		this._stepping = false;
	}
	,getMemory: function() {
		return openfl_system_System.get_totalMemory();
	}
	,updateMetrics: function() {
		var s = haxepunk_HXP.elapsed / 0.333333333333333315;
		this._fps += 1 / haxepunk_HXP.elapsed * s;
		this._mem += openfl_system_System.get_totalMemory() / 1024 / 1024 * s;
		this._ent += haxepunk_HXP.engine._scene._update.length * s;
		this._tri += haxepunk_graphics_hardware_HardwareRenderer.triangleCount * s;
		this._dc += haxepunk_graphics_hardware_HardwareRenderer.drawCallCount * s;
		this._t += s;
		if(this._t >= 1) {
			var _this = this.fps;
			_this.data[(_this.pos + _this.len) % _this.data.length] = this._fps / this._t;
			if(_this.len < _this.data.length) {
				++_this.len;
			} else {
				++_this.pos;
			}
			var _this1 = this.memory;
			_this1.data[(_this1.pos + _this1.len) % _this1.data.length] = this._mem / this._t;
			if(_this1.len < _this1.data.length) {
				++_this1.len;
			} else {
				++_this1.pos;
			}
			var _this2 = this.entities;
			_this2.data[(_this2.pos + _this2.len) % _this2.data.length] = this._ent / this._t | 0;
			if(_this2.len < _this2.data.length) {
				++_this2.len;
			} else {
				++_this2.pos;
			}
			var _this3 = this.triangles;
			_this3.data[(_this3.pos + _this3.len) % _this3.data.length] = this._tri / this._t | 0;
			if(_this3.len < _this3.data.length) {
				++_this3.len;
			} else {
				++_this3.pos;
			}
			var _this4 = this.drawCalls;
			_this4.data[(_this4.pos + _this4.len) % _this4.data.length] = this._dc / this._t | 0;
			if(_this4.len < _this4.data.length) {
				++_this4.len;
			} else {
				++_this4.pos;
			}
			this._fps = this._mem = this._ent = this._tri = this._dc = this._t = 0;
		}
	}
	,debugRender: function() {
		if(this.debugDraw) {
			var scene = haxepunk_HXP.engine._scene;
			var _g = 0;
			var _g1 = scene._layerList;
			while(_g < _g1.length) {
				var layer = _g1[_g];
				++_g;
				if(!(!scene._layerDisplay.exists(layer) || scene._layerDisplay.get(layer))) {
					continue;
				}
				var _g2_head = scene._layers.h[layer].h;
				while(_g2_head != null) {
					var val = _g2_head.item;
					_g2_head = _g2_head.next;
					var e = val;
					e.debugDraw(e.camera == null ? scene.camera : e.camera,this.selected.indexOf(e) > -1);
				}
			}
		}
		if(this.dragging) {
			var _this = haxepunk_debug_Console.drawContext;
			_this.color = 16777215;
			_this.alpha = 0.9;
			var camera = haxepunk_HXP.engine._scene.camera;
			haxepunk_debug_Console.drawContext.rect((this.selBox.x - camera.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),(this.selBox.y - camera.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY),this.selBox.width * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),this.selBox.height * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY));
		}
	}
	,setSelection: function() {
		var _rect = haxepunk_HXP.rect;
		this.selected.length = 0;
		var _g_head = haxepunk_HXP.engine._scene._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var entity = val;
			_rect.setTo(entity.get_x() - 4,entity.get_y() - 4,8,8);
			if(this.selBox.intersects(_rect)) {
				this.selected.push(entity);
			}
		}
	}
	,__class__: haxepunk_debug_Console
	,__properties__: $extend(haxepunk_Scene.prototype.__properties__,{set_paused:"set_paused",get_paused:"get_paused"})
});
var haxepunk_debug_DebugButton = function(img,mouseManager,onPress) {
	haxepunk_Entity.call(this);
	var region = haxepunk_assets_AssetCache.getRegion("graphics/debug/button.png");
	var tmp;
	if(region == null) {
		var data = null;
		if(haxepunk_graphics_atlas_AtlasData._dataPool.exists("graphics/debug/button.png")) {
			data = haxepunk_graphics_atlas_AtlasData._dataPool.get("graphics/debug/button.png");
		} else {
			var texture = haxepunk_assets_AssetCache.global.getTexture("graphics/debug/button.png");
			if(texture != null) {
				data = new haxepunk_graphics_atlas_AtlasData(texture,"graphics/debug/button.png");
			}
		}
		var this1 = data;
		tmp = haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1);
	} else {
		tmp = region;
	}
	this.bg = new haxepunk_graphics_NineSlice(tmp,8,8,8,8);
	this.bg.set_alpha(0.5);
	this.addGraphic(this.bg);
	var region1 = haxepunk_assets_AssetCache.getRegion(img);
	var tmp1;
	if(region1 == null) {
		var data1 = null;
		if(haxepunk_graphics_atlas_AtlasData._dataPool.exists(img)) {
			data1 = haxepunk_graphics_atlas_AtlasData._dataPool.get(img);
		} else {
			var texture1 = haxepunk_assets_AssetCache.global.getTexture(img);
			if(texture1 != null) {
				data1 = new haxepunk_graphics_atlas_AtlasData(texture1,img);
			}
		}
		var this2 = data1;
		tmp1 = haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this2);
	} else {
		tmp1 = region1;
	}
	this.icon = new haxepunk_graphics_Image(tmp1);
	this.icon.smooth = true;
	this.addGraphic(this.icon);
	this.set_type(mouseManager._type);
	mouseManager.add(this,null,onPress,$bind(this,this.onEnter),$bind(this,this.onExit));
	this.set_width(this.set_height(64));
};
$hxClasses["haxepunk.debug.DebugButton"] = haxepunk_debug_DebugButton;
haxepunk_debug_DebugButton.__name__ = ["haxepunk","debug","DebugButton"];
haxepunk_debug_DebugButton.__super__ = haxepunk_Entity;
haxepunk_debug_DebugButton.prototype = $extend(haxepunk_Entity.prototype,{
	bg: null
	,icon: null
	,update: function() {
		haxepunk_Entity.prototype.update.call(this);
		this.bg.width = this.get_width();
		this.bg.height = this.get_height();
		this.icon.x = (this.get_width() - this.icon.get_width()) / 2;
		this.icon.y = (this.get_height() - this.icon.get_height()) / 2;
	}
	,onEnter: function() {
		this.bg.set_alpha(1);
	}
	,onExit: function() {
		this.bg.set_alpha(0.5);
	}
	,__class__: haxepunk_debug_DebugButton
});
var haxepunk_debug__$LayerList_LayerToggle = function(mouseManager) {
	haxepunk_Entity.call(this);
	this.label = new haxepunk_graphics_text_BitmapText("Layer");
	this.label.set_alpha(0.75);
	this.addGraphic(this.label);
	this.set_width(220);
	this.set_height(24);
	this.set_type(mouseManager._type);
	mouseManager.add(this,null,$bind(this,this.onClick),$bind(this,this.onEnter),$bind(this,this.onExit),null,true);
};
$hxClasses["haxepunk.debug._LayerList.LayerToggle"] = haxepunk_debug__$LayerList_LayerToggle;
haxepunk_debug__$LayerList_LayerToggle.__name__ = ["haxepunk","debug","_LayerList","LayerToggle"];
haxepunk_debug__$LayerList_LayerToggle.__super__ = haxepunk_Entity;
haxepunk_debug__$LayerList_LayerToggle.prototype = $extend(haxepunk_Entity.prototype,{
	layerNumber: null
	,label: null
	,update: function() {
		this.set_visible(this.set_collidable(this.layerNumber != null));
		if(this.layerNumber != null) {
			var entityCount = haxepunk_HXP.engine._scene._layers.h.hasOwnProperty(this.layerNumber) ? Lambda.count(haxepunk_HXP.engine._scene._layers.h[this.layerNumber]) : 0;
			var txt = "Layer " + this.layerNumber + " [" + entityCount + "]";
			if(this.label.text != txt) {
				this.label.set_text(txt);
			}
			var tmp = this.label;
			var tmp1;
			var _this = haxepunk_HXP.engine._scene;
			var layer = this.layerNumber;
			if(!_this._layerDisplay.exists(layer) || _this._layerDisplay.get(layer)) {
				tmp1 = 65280;
			} else {
				tmp1 = 16711680;
			}
			tmp.set_color(tmp1);
		}
	}
	,onClick: function() {
		if(this.layerNumber != null) {
			var _this = haxepunk_HXP.engine._scene;
			var layer = this.layerNumber;
			var display = !(!_this._layerDisplay.exists(layer) || _this._layerDisplay.get(layer));
			haxepunk_HXP.engine._scene._layerDisplay.set(this.layerNumber,display);
			haxepunk_HXP.engine._scene.updateLists();
		}
	}
	,onEnter: function() {
		this.label.set_alpha(1);
	}
	,onExit: function() {
		this.label.set_alpha(0.75);
	}
	,__class__: haxepunk_debug__$LayerList_LayerToggle
});
var haxepunk_debug_LayerList = function(mouseManager) {
	this.childY = 8;
	this.alpha = 0.5;
	haxepunk_EntityList.call(this);
	this.mouseManager = mouseManager;
	this.set_width(280);
	this.set_height(320);
	this.sceneLabel = new haxepunk_graphics_text_BitmapText("Scene");
	this.sceneLabel.y = this.childY;
	var tmp = this;
	var tmp1 = tmp.childY;
	var _this = this.sceneLabel;
	if(_this._dirty) {
		_this.parseText();
	}
	tmp.childY = tmp1 + _this.textHeight;
	this.graphic = this.sceneLabel;
	this.set_type(mouseManager._type);
	mouseManager.add(this,null,null,$bind(this,this.onEnter),$bind(this,this.onExit));
};
$hxClasses["haxepunk.debug.LayerList"] = haxepunk_debug_LayerList;
haxepunk_debug_LayerList.__name__ = ["haxepunk","debug","LayerList"];
haxepunk_debug_LayerList.__super__ = haxepunk_EntityList;
haxepunk_debug_LayerList.prototype = $extend(haxepunk_EntityList.prototype,{
	alpha: null
	,mouseManager: null
	,sceneLabel: null
	,childY: null
	,update: function() {
		haxepunk_EntityList.prototype.update.call(this);
		var layerCount = haxepunk_HXP.engine._scene._layerList.length;
		while(this.entities.length < layerCount) {
			var toggle = new haxepunk_debug__$LayerList_LayerToggle(this.mouseManager);
			this.add(toggle);
			toggle.set_localY(this.childY);
			this.childY += toggle.get_height() + 4;
		}
		var _g1 = 0;
		var _g = this.entities.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.entities[i].layerNumber = i >= haxepunk_HXP.engine._scene._layerList.length ? null : haxepunk_HXP.engine._scene._layerList[i];
			this.entities[i].update();
		}
		var o = haxepunk_HXP.engine._scene;
		var txt = Type.getClassName(o == null ? null : js_Boot.getClass(o));
		if(this.sceneLabel.text != txt) {
			this.sceneLabel.set_text(txt);
		}
	}
	,render: function(camera) {
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY;
		var alpha = this.alpha;
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.color = 0;
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.alpha = alpha;
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.lineThickness = 4;
		haxepunk_utils_Draw.rectFilled(this.get_x() * fsx,this.get_y() * fsy,this.get_width() * fsx,this.get_height() * fsy);
		haxepunk_EntityList.prototype.render.call(this,camera);
	}
	,onEnter: function() {
		this.alpha = 0.75;
	}
	,onExit: function() {
		this.alpha = 0.5;
	}
	,__class__: haxepunk_debug_LayerList
});
var haxepunk_debug_LogPanel = function(mouseManager) {
	this.logMessages = new haxepunk_utils_CircularBuffer(24);
	this.alpha = 0.5;
	this.expanded = false;
	haxepunk_Entity.call(this);
	this.label = new haxepunk_graphics_text_BitmapText("Mouse");
	this.addGraphic(this.label);
	this.set_height(48);
	this.set_type(mouseManager._type);
	mouseManager.add(this,null,$bind(this,this.onClick),$bind(this,this.onEnter),$bind(this,this.onExit));
};
$hxClasses["haxepunk.debug.LogPanel"] = haxepunk_debug_LogPanel;
haxepunk_debug_LogPanel.__name__ = ["haxepunk","debug","LogPanel"];
haxepunk_debug_LogPanel.__super__ = haxepunk_Entity;
haxepunk_debug_LogPanel.prototype = $extend(haxepunk_Entity.prototype,{
	label: null
	,expanded: null
	,alpha: null
	,logMessages: null
	,update: function() {
		haxepunk_Entity.prototype.update.call(this);
		var targetHeight = (this.expanded ? 480 : 40) + 8;
		if(this.get_height() != targetHeight) {
			var change = 2048 * haxepunk_HXP.elapsed | 0;
			if(Math.abs(this.get_height() - targetHeight) < change) {
				this.set_height(targetHeight);
			} else {
				var _g = this;
				_g.set_height(_g.get_height() + change * (this.get_height() > targetHeight ? -1 : 1));
			}
		}
		var txt = "";
		if(this.expanded && this.get_height() == targetHeight) {
			var _this = this.logMessages;
			_this._iterator.i = 0;
			var _g1 = _this._iterator;
			while(_g1.i < _g1.buffer.len) {
				var _this1 = _g1.buffer;
				var i = _g1.i++;
				var msg = i < 0 || i >= _this1.len ? null : _this1.data[(_this1.pos + i) % _this1.data.length];
				txt += msg + "\n";
			}
		} else if(this.logMessages.len > 0) {
			var _this2 = this.logMessages;
			txt += (_this2.len < 1 ? null : _this2.data[(_this2.pos + (_this2.len - 1)) % _this2.data.length]) + "\n";
		}
		var _this3 = haxepunk_HXP.engine._scene;
		var x = haxepunk_HXP.app.getMouseX() - haxepunk_HXP.screen.x - _this3.x;
		var _this4 = _this3.camera;
		var mouseLabel = "Mouse: " + (x / (_this4.scale * _this4.scaleX * haxepunk_HXP.screen.fullScaleX) + _this3.camera.x | 0) + ",";
		var _this5 = haxepunk_HXP.engine._scene;
		var x1 = haxepunk_HXP.app.getMouseY() - haxepunk_HXP.screen.y - _this5.y;
		var _this6 = _this5.camera;
		var mouseLabel1 = StringTools.rpad(mouseLabel + (x1 / (_this6.scale * _this6.scaleY * haxepunk_HXP.screen.fullScaleY) + _this5.camera.y | 0)," ",20);
		txt += mouseLabel1 + "Camera: " + haxepunk_HXP.engine._scene.camera.x + "," + haxepunk_HXP.engine._scene.camera.y;
		if(this.label.text != txt) {
			this.label.set_text(txt);
		}
		var _this7 = this.label;
		var value = this.get_height();
		var _this8 = this.label;
		if(_this8._dirty) {
			_this8.parseText();
		}
		_this7.y = value - _this8.textHeight - 4;
	}
	,render: function(camera) {
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY;
		var alpha = this.alpha;
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.color = 0;
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.alpha = alpha;
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.lineThickness = 4;
		haxepunk_utils_Draw.rectFilled(this.get_x() * fsx,this.get_y() * fsy,this.get_width() * fsx,this.get_height() * fsy);
		haxepunk_Entity.prototype.render.call(this,camera);
	}
	,log: function(data) {
		var _g = 0;
		while(_g < data.length) {
			var msgs = data[_g];
			++_g;
			var _g1 = 0;
			var _g2 = Std.string(msgs).split("\n");
			while(_g1 < _g2.length) {
				var msg = _g2[_g1];
				++_g1;
				var _this = this.logMessages;
				_this.data[(_this.pos + _this.len) % _this.data.length] = msg == null ? "null" : "" + msg;
				if(_this.len < _this.data.length) {
					++_this.len;
				} else {
					++_this.pos;
				}
			}
		}
	}
	,onClick: function() {
		this.expanded = !this.expanded;
	}
	,onEnter: function() {
		this.alpha = 0.75;
	}
	,onExit: function() {
		this.alpha = 0.5;
	}
	,__class__: haxepunk_debug_LogPanel
});
var haxepunk_debug_Metric = function(name,data,color,minScale) {
	this.points = [];
	this.color = 16777215;
	this.minScale = 0;
	haxepunk_Entity.call(this);
	this.metricName = name;
	this.data = data;
	this.color = color;
	this.minScale = minScale;
	this.label = new haxepunk_graphics_text_BitmapText(name);
	this.label.x = this.label.y = 4;
	this.addGraphic(this.label);
	this.set_width(240);
	this.set_height(80);
	if(haxepunk_debug_Metric.drawContext == null) {
		haxepunk_debug_Metric.drawContext = new haxepunk_utils_DrawContext();
		haxepunk_debug_Metric.drawContext.lineThickness = 4;
	}
};
$hxClasses["haxepunk.debug.Metric"] = haxepunk_debug_Metric;
haxepunk_debug_Metric.__name__ = ["haxepunk","debug","Metric"];
haxepunk_debug_Metric.__super__ = haxepunk_Entity;
haxepunk_debug_Metric.prototype = $extend(haxepunk_Entity.prototype,{
	metricName: null
	,data: null
	,minScale: null
	,color: null
	,label: null
	,update: function() {
		var last;
		var _this = this.data;
		if((_this.len < 1 ? null : _this.data[(_this.pos + (_this.len - 1)) % _this.data.length]) == null) {
			last = 0;
		} else {
			var _this1 = this.data;
			last = ((_this1.len < 1 ? null : _this1.data[(_this1.pos + (_this1.len - 1)) % _this1.data.length]) * Math.pow(10,2) | 0) / Math.pow(10,2);
		}
		this.label.set_text("" + this.metricName + ": " + last);
	}
	,render: function(camera) {
		var _gthis = this;
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY;
		haxepunk_debug_Metric.drawContext.scene = this._scene;
		var _this = haxepunk_debug_Metric.drawContext;
		var this1 = this.color;
		var a = this1 >>> 24 & 255;
		var r = this1 >>> 16 & 255;
		var g = this1 >>> 8 & 255;
		var b = this1 & 255;
		var dA = (0 >>> 24 & 255) - a;
		var dR = (0 >>> 16 & 255) - r;
		var dG = (0 >>> 8 & 255) - g;
		var dB = (0 & 255) - b;
		a += dA * 0.9 | 0;
		r += dR * 0.9 | 0;
		g += dG * 0.9 | 0;
		b += dB * 0.9 | 0;
		_this.color = a << 24 | r << 16 | g << 8 | b;
		_this.alpha = 0.8;
		haxepunk_debug_Metric.drawContext.rectFilled(this.get_x() * fsx,this.get_y() * fsy,this.get_width() * fsx,this.get_height() * fsy);
		if(this.data.len > 1) {
			this.points.length = 0;
			var max = this.minScale;
			var _this1 = this.data;
			_this1._iterator.i = 0;
			var _g = _this1._iterator;
			while(_g.i < _g.buffer.len) {
				var _this2 = _g.buffer;
				var i = _g.i++;
				var value = i < 0 || i >= _this2.len ? null : _this2.data[(_this2.pos + i) % _this2.data.length];
				if(value > max) {
					max = value;
				}
			}
			var _g1 = 0;
			var _g2 = this.data.len;
			while(_g1 < _g2) {
				var i1 = _g1++;
				var v = i1 / this.data.data.length;
				this.points.push((_gthis.get_x() + _gthis.get_width() * haxepunk_math_MathUtil.clamp(v,0,1)) * fsx);
				var _this3 = this.data;
				var v1 = i1 < 0 || i1 >= _this3.len ? null : _this3.data[(_this3.pos + i1) % _this3.data.length];
				this.points.push((_gthis.get_y() + _gthis.get_height() * (1 - haxepunk_math_MathUtil.clamp(v1 / max,0,1))) * fsy);
			}
			var _this4 = haxepunk_debug_Metric.drawContext;
			_this4.color = this.color;
			_this4.alpha = 0.75;
			haxepunk_debug_Metric.drawContext.polyline(this.points,false);
		}
		haxepunk_Entity.prototype.render.call(this,camera);
	}
	,points: null
	,__class__: haxepunk_debug_Metric
});
var haxepunk_ds__$Maybe_Maybe_$Impl_$ = {};
$hxClasses["haxepunk.ds._Maybe.Maybe_Impl_"] = haxepunk_ds__$Maybe_Maybe_$Impl_$;
haxepunk_ds__$Maybe_Maybe_$Impl_$.__name__ = ["haxepunk","ds","_Maybe","Maybe_Impl_"];
haxepunk_ds__$Maybe_Maybe_$Impl_$.exists = function(this1) {
	return this1 != null;
};
haxepunk_ds__$Maybe_Maybe_$Impl_$.ensure = function(this1) {
	if(this1 != null) {
		return this1;
	} else {
		throw new js__$Boot_HaxeError("No value");
	}
};
haxepunk_ds__$Maybe_Maybe_$Impl_$.or = function(this1,defaultValue) {
	if(this1 != null) {
		return this1;
	} else {
		return defaultValue;
	}
};
haxepunk_ds__$Maybe_Maybe_$Impl_$.may = function(this1,fn) {
	if(this1 != null) {
		fn(this1);
	}
};
haxepunk_ds__$Maybe_Maybe_$Impl_$.map = function(this1,fn,defaultValue) {
	if(this1 != null) {
		return fn(this1);
	} else {
		return defaultValue;
	}
};
haxepunk_ds__$Maybe_Maybe_$Impl_$.mapMaybe = function(this1,fn) {
	if(this1 != null) {
		return fn(this1);
	} else {
		return null;
	}
};
var haxepunk_ds__$OneOf_OneOf_$Impl_$ = {};
$hxClasses["haxepunk.ds._OneOf.OneOf_Impl_"] = haxepunk_ds__$OneOf_OneOf_$Impl_$;
haxepunk_ds__$OneOf_OneOf_$Impl_$.__name__ = ["haxepunk","ds","_OneOf","OneOf_Impl_"];
haxepunk_ds__$OneOf_OneOf_$Impl_$.fromL = function(val) {
	return haxe_ds_Either.Left(val);
};
haxepunk_ds__$OneOf_OneOf_$Impl_$.fromR = function(val) {
	return haxe_ds_Either.Right(val);
};
haxepunk_ds__$OneOf_OneOf_$Impl_$.toL = function(this1) {
	if(this1[1] == 0) {
		var val = this1[2];
		return val;
	} else {
		return null;
	}
};
haxepunk_ds__$OneOf_OneOf_$Impl_$.toR = function(this1) {
	if(this1[1] == 1) {
		var val = this1[2];
		return val;
	} else {
		return null;
	}
};
var haxepunk_graphics_Graphiclist = function(graphic) {
	this.count = 0;
	this._graphics = [];
	this._temp = [];
	this._camera = new haxepunk_Camera();
	haxepunk_Graphic.call(this);
	if(graphic != null) {
		var _g = 0;
		while(_g < graphic.length) {
			var g = graphic[_g];
			++_g;
			this.add(g);
		}
	}
};
$hxClasses["haxepunk.graphics.Graphiclist"] = haxepunk_graphics_Graphiclist;
haxepunk_graphics_Graphiclist.__name__ = ["haxepunk","graphics","Graphiclist"];
haxepunk_graphics_Graphiclist.__super__ = haxepunk_Graphic;
haxepunk_graphics_Graphiclist.prototype = $extend(haxepunk_Graphic.prototype,{
	set_alpha: function(v) {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var graphic = _g1[_g];
			++_g;
			graphic.set_alpha(v);
		}
		return haxepunk_Graphic.prototype.set_alpha.call(this,v);
	}
	,set_color: function(v) {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var graphic = _g1[_g];
			++_g;
			graphic.set_color(v);
		}
		return haxepunk_Graphic.prototype.set_color.call(this,v);
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.active) {
				g.update();
			}
		}
	}
	,get: function(i) {
		if(i >= this._graphics.length || i < 0) {
			throw new js__$Boot_HaxeError("Index out of bounds.");
		} else {
			return this._graphics[i];
		}
	}
	,render: function(point,camera) {
		var cx = camera.x;
		var cy = camera.y;
		camera.x = cx * this.scrollX;
		camera.y = cy * this.scrollY;
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g._visible) {
				if(g.relative) {
					var x = point.x;
					var x1 = this.x;
					this._point.x = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x) + (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x1 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x1);
					var y = point.y;
					var y1 = this.y;
					this._point.y = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y) + (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y1 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y1);
				} else {
					this._point.x = this._point.y = 0;
				}
				g.doRender(this._point,camera);
			}
		}
		camera.x = cx;
		camera.y = cy;
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			g.destroy();
		}
	}
	,add: function(graphic) {
		if(graphic == null) {
			return graphic;
		}
		this._graphics[this.count++] = graphic;
		if(!this.active) {
			this.active = graphic.active;
		}
		return graphic;
	}
	,remove: function(graphic) {
		if(this._graphics.indexOf(graphic) < 0) {
			return graphic;
		}
		this._temp.length = 0;
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g == graphic) {
				this.count--;
			} else {
				this._temp[this._temp.length] = g;
			}
		}
		var temp = this._graphics;
		this._graphics = this._temp;
		this._temp = temp;
		this.updateCheck();
		return graphic;
	}
	,removeAt: function(index) {
		if(index == null) {
			index = 0;
		}
		if(this._graphics.length == 0) {
			return;
		}
		index %= this._graphics.length;
		this.remove(this._graphics[index % this._graphics.length]);
		this.updateCheck();
	}
	,removeAll: function() {
		this._graphics.length = 0;
		this._temp.length = 0;
		this.count = 0;
		this.active = false;
	}
	,children: null
	,get_children: function() {
		return this._graphics;
	}
	,count: null
	,updateCheck: function() {
		this.active = false;
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.active) {
				this.active = true;
				return;
			}
		}
	}
	,_graphics: null
	,_temp: null
	,_camera: null
	,__class__: haxepunk_graphics_Graphiclist
	,__properties__: $extend(haxepunk_Graphic.prototype.__properties__,{get_children:"get_children"})
});
var haxepunk_graphics_Image = function(source,clipRect) {
	haxepunk_Graphic.call(this);
	this.angle = 0;
	this.scale = this.scaleX = this.scaleY = 1;
	this.originX = this.originY = 0;
	this.set_alpha(1);
	this.set_color(16777215);
	this._sourceRect = new haxepunk_math_Rectangle(0,0,1,1);
	if(source != null) {
		this._region = source;
		this._sourceRect.width = this._region.get_width();
		this._sourceRect.height = this._region.get_height();
	}
	if(clipRect != null) {
		if(clipRect.width == 0) {
			clipRect.width = this._sourceRect.width;
		}
		if(clipRect.height == 0) {
			clipRect.height = this._sourceRect.height;
		}
		this._region = this._region.clip(clipRect);
		this._sourceRect = clipRect;
	}
};
$hxClasses["haxepunk.graphics.Image"] = haxepunk_graphics_Image;
haxepunk_graphics_Image.__name__ = ["haxepunk","graphics","Image"];
haxepunk_graphics_Image.createRect = function(width,height,color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16777215;
	}
	if(width == 0 || height == 0) {
		throw new js__$Boot_HaxeError("Illegal rect, sizes cannot be 0.");
	}
	var source = new openfl_display_BitmapData(width,height,true,-1);
	var this1 = new haxepunk_graphics_atlas_AtlasData(source);
	var image = new haxepunk_graphics_Image(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1));
	image.set_color(color);
	image.set_alpha(alpha);
	return image;
};
haxepunk_graphics_Image.createCircle = function(radius,color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16777215;
	}
	if(radius == 0) {
		throw new js__$Boot_HaxeError("Illegal circle, radius cannot be 0.");
	}
	var texture = new openfl_display_BitmapData(radius * 2,radius * 2,true,0);
	haxepunk_backend_flash__$Texture_Texture_$Impl_$.drawCircle(texture,radius,radius,radius);
	var this1 = new haxepunk_graphics_atlas_AtlasData(texture);
	var image = new haxepunk_graphics_Image(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1));
	image.set_color(color);
	image.set_alpha(alpha);
	return image;
};
haxepunk_graphics_Image.__super__ = haxepunk_Graphic;
haxepunk_graphics_Image.prototype = $extend(haxepunk_Graphic.prototype,{
	angle: null
	,scale: null
	,scaleX: null
	,scaleY: null
	,originX: null
	,originY: null
	,init: function() {
		this.angle = 0;
		this.scale = this.scaleX = this.scaleY = 1;
		this.originX = this.originY = 0;
		this.set_alpha(1);
		this.set_color(16777215);
	}
	,render: function(point,camera) {
		var sx = this.scale * this.scaleX;
		var sy = this.scale * this.scaleY;
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY;
		var x = this.x;
		var x1 = this.pixelSnapping || camera.pixelSnapping ? Math.floor(x * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x;
		var y = this.y;
		var y1 = this.pixelSnapping || camera.pixelSnapping ? Math.floor(y * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y;
		if(this.angle == 0) {
			var x2 = point.x;
			var x3 = this.originX * sx;
			var x4 = camera.x * this.scrollX;
			this._point.x = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x2 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x2) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x3 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x3) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x4 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x4) + x1;
			var y2 = point.y;
			var y3 = this.originY * sy;
			var y4 = camera.y * this.scrollY;
			this._point.y = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y2 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y2) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y3 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y3) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y4 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y4) + y1;
			var x5 = this._point.x;
			var y5 = this._point.y;
			var clipRect;
			if(this.clipRect != null) {
				if(this._screenClipRect == null) {
					this._screenClipRect = new haxepunk_math_Rectangle();
				}
				this._screenClipRect.setTo((x5 + this.clipRect.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),(y5 + this.clipRect.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY),this.clipRect.width * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),this.clipRect.height * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY));
				clipRect = this._screenClipRect;
			} else {
				clipRect = null;
			}
			this._region.draw(this._point.x * fsx,this._point.y * fsy,sx * fsx,sy * fsy,this.angle,this.color,this.alpha,this.shader,this.smooth,this.blend,clipRect,this.flexibleLayer);
		} else {
			var x6 = point.x;
			var x7 = this.originX;
			var x8 = camera.x * this.scrollX;
			this._point.x = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x6 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x6) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x7 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x7) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x8 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x8) + x1;
			var y6 = point.y;
			var y7 = this.originY;
			var y8 = camera.y * this.scrollY;
			this._point.y = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y6 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y6) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y7 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y7) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y8 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y8) + y1;
			var angle = this.angle * (Math.PI / -180);
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);
			var a = sx * cos * fsx;
			var b = sx * sin * fsy;
			var c = -sy * sin * fsx;
			var d = sy * cos * fsy;
			var tx = -this.originX * sx * cos + this.originY * sy * sin + this.originX + this._point.x;
			var ty = -this.originX * sx * sin - this.originY * sy * cos + this.originY + this._point.y;
			var clipRect1;
			if(this.clipRect != null) {
				if(this._screenClipRect == null) {
					this._screenClipRect = new haxepunk_math_Rectangle();
				}
				this._screenClipRect.setTo((tx + this.clipRect.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),(ty + this.clipRect.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY),this.clipRect.width * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),this.clipRect.height * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY));
				clipRect1 = this._screenClipRect;
			} else {
				clipRect1 = null;
			}
			this._region.drawMatrix(tx * fsx,ty * fsy,a,b,c,d,this.color,this.alpha,this.shader,this.smooth,this.blend,clipRect1,this.flexibleLayer);
		}
	}
	,centerOrigin: function() {
		this.originX = this.get_width() / 2 | 0;
		this.originY = this.get_height() / 2 | 0;
	}
	,centerOO: function() {
		var _g = this;
		_g.x += this.originX;
		var _g1 = this;
		_g1.y += this.originY;
		this.centerOrigin();
		var _g2 = this;
		_g2.x -= this.originX;
		var _g3 = this;
		_g3.y -= this.originY;
	}
	,get_width: function() {
		return this._region.get_width();
	}
	,get_height: function() {
		return this._region.get_height();
	}
	,get_scaledWidth: function() {
		return this.get_width() * this.scaleX * this.scale;
	}
	,set_scaledWidth: function(w) {
		return this.scaleX = w / this.scale / this.get_width();
	}
	,get_scaledHeight: function() {
		return this.get_height() * this.scaleY * this.scale;
	}
	,set_scaledHeight: function(h) {
		return this.scaleY = h / this.scale / this.get_height();
	}
	,toString: function() {
		return "[" + this._class + " " + this.get_width() + " x " + this.get_height() + "]";
	}
	,_sourceRect: null
	,_region: null
	,__class__: haxepunk_graphics_Image
	,__properties__: $extend(haxepunk_Graphic.prototype.__properties__,{set_scaledHeight:"set_scaledHeight",get_scaledHeight:"get_scaledHeight",set_scaledWidth:"set_scaledWidth",get_scaledWidth:"get_scaledWidth",get_height:"get_height",get_width:"get_width"})
});
var haxepunk_graphics_NineSlice = function(source,leftWidth,rightWidth,topHeight,bottomHeight) {
	if(bottomHeight == null) {
		bottomHeight = 0;
	}
	if(topHeight == null) {
		topHeight = 0;
	}
	if(rightWidth == null) {
		rightWidth = 0;
	}
	if(leftWidth == null) {
		leftWidth = 0;
	}
	this._clipRect = new haxepunk_math_Rectangle();
	this._sliceRect = new haxepunk_math_Rectangle();
	this.drawCenter = true;
	this.scaleBorder = false;
	this.source = source;
	var w = source.get_width();
	var h = source.get_height();
	var segment = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(0,0,leftWidth,topHeight));
	segment.originX = segment.originY = 0;
	this.topL = segment;
	var segment1 = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(leftWidth,0,w - leftWidth - rightWidth,topHeight));
	segment1.originX = segment1.originY = 0;
	this.topC = segment1;
	var segment2 = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(w - rightWidth,0,rightWidth,topHeight));
	segment2.originX = segment2.originY = 0;
	this.topR = segment2;
	var segment3 = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(0,topHeight,leftWidth,h - topHeight - bottomHeight));
	segment3.originX = segment3.originY = 0;
	this.medL = segment3;
	var segment4 = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(leftWidth,topHeight,w - leftWidth - rightWidth,h - topHeight - bottomHeight));
	segment4.originX = segment4.originY = 0;
	this.medC = segment4;
	var segment5 = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(w - rightWidth,topHeight,rightWidth,h - topHeight - bottomHeight));
	segment5.originX = segment5.originY = 0;
	this.medR = segment5;
	var segment6 = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(0,h - bottomHeight,leftWidth,bottomHeight));
	segment6.originX = segment6.originY = 0;
	this.botL = segment6;
	var segment7 = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(leftWidth,h - bottomHeight,w - leftWidth - rightWidth,bottomHeight));
	segment7.originX = segment7.originY = 0;
	this.botC = segment7;
	var segment8 = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(w - rightWidth,h - bottomHeight,rightWidth,bottomHeight));
	segment8.originX = segment8.originY = 0;
	this.botR = segment8;
	this._sliceRect.setTo(leftWidth,topHeight,w - rightWidth,h - bottomHeight);
	haxepunk_Graphic.call(this);
	this.width = w;
	this.height = h;
	this.pixelSnapping = false;
};
$hxClasses["haxepunk.graphics.NineSlice"] = haxepunk_graphics_NineSlice;
haxepunk_graphics_NineSlice.__name__ = ["haxepunk","graphics","NineSlice"];
haxepunk_graphics_NineSlice.__super__ = haxepunk_Graphic;
haxepunk_graphics_NineSlice.prototype = $extend(haxepunk_Graphic.prototype,{
	width: null
	,height: null
	,scaleBorder: null
	,drawCenter: null
	,set_color: function(v) {
		return this.topL.set_color(this.topC.set_color(this.topR.set_color(this.medL.set_color(this.medC.set_color(this.medR.set_color(this.botL.set_color(this.botC.set_color(this.botR.set_color(this.color = v)))))))));
	}
	,set_alpha: function(v) {
		return this.topL.set_alpha(this.topC.set_alpha(this.topR.set_alpha(this.medL.set_alpha(this.medC.set_alpha(this.medR.set_alpha(this.botL.set_alpha(this.botC.set_alpha(this.botR.set_alpha(this.alpha = v)))))))));
	}
	,source: null
	,getSegment: function(source,x,y,width,height) {
		var segment = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(x,y,width,height));
		segment.originX = segment.originY = 0;
		return segment;
	}
	,render: function(point,camera) {
		var _gthis = this;
		var leftWidth;
		var rightWidth;
		var topHeight;
		var bottomHeight;
		if(this.scaleBorder) {
			var x = this._sliceRect.x;
			if(this.pixelSnapping || camera.pixelSnapping) {
				leftWidth = Math.floor(x * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX);
			} else {
				leftWidth = x;
			}
			var x1 = this.source.get_width() - this._sliceRect.width;
			if(this.pixelSnapping || camera.pixelSnapping) {
				rightWidth = Math.floor(x1 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX);
			} else {
				rightWidth = x1;
			}
			var y = this._sliceRect.y;
			if(this.pixelSnapping || camera.pixelSnapping) {
				topHeight = Math.floor(y * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY);
			} else {
				topHeight = y;
			}
			var y1 = this.source.get_height() - this._sliceRect.height;
			if(this.pixelSnapping || camera.pixelSnapping) {
				bottomHeight = Math.floor(y1 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY);
			} else {
				bottomHeight = y1;
			}
		} else {
			var x2 = this._sliceRect.x;
			leftWidth = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x2 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x2) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX);
			var x3 = this.source.get_width() - this._sliceRect.width;
			rightWidth = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x3 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x3) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX);
			var y2 = this._sliceRect.y;
			topHeight = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y2 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y2) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY);
			var y3 = this.source.get_height() - this._sliceRect.height;
			bottomHeight = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y3 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y3) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY);
		}
		var x4 = this.width;
		var centerWidth = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x4 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x4) - leftWidth - rightWidth;
		var y4 = this.height;
		var centerHeight = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y4 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y4) - topHeight - bottomHeight;
		var leftX = 0;
		var centerX = leftWidth;
		var rightX = leftWidth + centerWidth;
		var topY = 0;
		var centerY = topHeight;
		var bottomY = topHeight + centerHeight;
		var segment = this.topL;
		if(segment != null && segment._visible) {
			var x5 = _gthis.x;
			segment.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x5 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x5) + leftX;
			var y5 = _gthis.y;
			segment.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y5 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y5) + topY;
			var x6 = leftX + leftWidth;
			segment.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x6 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x6) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(leftX * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : leftX)) / segment.get_width();
			var y6 = topY + topHeight;
			segment.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y6 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y6) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(topY * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : topY)) / segment.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - leftX,_gthis.clipRect.y - topY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment.clipRect = _gthis._clipRect;
			} else {
				segment.clipRect = null;
			}
			segment.shader = _gthis.shader;
			segment.smooth = _gthis.smooth;
			segment.render(point,camera);
		}
		var segment1 = this.topC;
		if(segment1 != null && segment1._visible) {
			var x7 = _gthis.x;
			segment1.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x7 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x7) + centerX;
			var y7 = _gthis.y;
			segment1.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y7 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y7) + topY;
			var x8 = centerX + centerWidth;
			segment1.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x8 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x8) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(centerX * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : centerX)) / segment1.get_width();
			var y8 = topY + topHeight;
			segment1.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y8 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y8) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(topY * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : topY)) / segment1.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - centerX,_gthis.clipRect.y - topY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment1.clipRect = _gthis._clipRect;
			} else {
				segment1.clipRect = null;
			}
			segment1.shader = _gthis.shader;
			segment1.smooth = _gthis.smooth;
			segment1.render(point,camera);
		}
		var segment2 = this.topR;
		if(segment2 != null && segment2._visible) {
			var x9 = _gthis.x;
			segment2.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x9 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x9) + rightX;
			var y9 = _gthis.y;
			segment2.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y9 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y9) + topY;
			var x10 = rightX + rightWidth;
			segment2.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x10 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x10) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(rightX * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : rightX)) / segment2.get_width();
			var y10 = topY + topHeight;
			segment2.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y10 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y10) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(topY * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : topY)) / segment2.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - rightX,_gthis.clipRect.y - topY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment2.clipRect = _gthis._clipRect;
			} else {
				segment2.clipRect = null;
			}
			segment2.shader = _gthis.shader;
			segment2.smooth = _gthis.smooth;
			segment2.render(point,camera);
		}
		var segment3 = this.medL;
		if(segment3 != null && segment3._visible) {
			var x11 = _gthis.x;
			segment3.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x11 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x11) + leftX;
			var y11 = _gthis.y;
			segment3.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y11 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y11) + centerY;
			var x12 = leftX + leftWidth;
			segment3.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x12 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x12) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(leftX * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : leftX)) / segment3.get_width();
			var y12 = centerY + centerHeight;
			segment3.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y12 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y12) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(centerY * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : centerY)) / segment3.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - leftX,_gthis.clipRect.y - centerY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment3.clipRect = _gthis._clipRect;
			} else {
				segment3.clipRect = null;
			}
			segment3.shader = _gthis.shader;
			segment3.smooth = _gthis.smooth;
			segment3.render(point,camera);
		}
		if(this.drawCenter) {
			var segment4 = this.medC;
			if(segment4 != null && segment4._visible) {
				var x13 = _gthis.x;
				segment4.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x13 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x13) + centerX;
				var y13 = _gthis.y;
				segment4.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y13 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y13) + centerY;
				var x14 = centerX + centerWidth;
				segment4.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x14 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x14) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(centerX * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : centerX)) / segment4.get_width();
				var y14 = centerY + centerHeight;
				segment4.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y14 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y14) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(centerY * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : centerY)) / segment4.get_height();
				if(_gthis.clipRect != null) {
					_gthis._clipRect.setTo(_gthis.clipRect.x - centerX,_gthis.clipRect.y - centerY,_gthis.clipRect.width,_gthis.clipRect.height);
					segment4.clipRect = _gthis._clipRect;
				} else {
					segment4.clipRect = null;
				}
				segment4.shader = _gthis.shader;
				segment4.smooth = _gthis.smooth;
				segment4.render(point,camera);
			}
		}
		var segment5 = this.medR;
		if(segment5 != null && segment5._visible) {
			var x15 = _gthis.x;
			segment5.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x15 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x15) + rightX;
			var y15 = _gthis.y;
			segment5.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y15 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y15) + centerY;
			var x16 = rightX + rightWidth;
			segment5.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x16 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x16) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(rightX * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : rightX)) / segment5.get_width();
			var y16 = centerY + centerHeight;
			segment5.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y16 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y16) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(centerY * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : centerY)) / segment5.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - rightX,_gthis.clipRect.y - centerY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment5.clipRect = _gthis._clipRect;
			} else {
				segment5.clipRect = null;
			}
			segment5.shader = _gthis.shader;
			segment5.smooth = _gthis.smooth;
			segment5.render(point,camera);
		}
		var segment6 = this.botL;
		if(segment6 != null && segment6._visible) {
			var x17 = _gthis.x;
			segment6.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x17 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x17) + leftX;
			var y17 = _gthis.y;
			segment6.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y17 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y17) + bottomY;
			var x18 = leftX + leftWidth;
			segment6.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x18 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x18) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(leftX * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : leftX)) / segment6.get_width();
			var y18 = bottomY + bottomHeight;
			segment6.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y18 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y18) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(bottomY * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : bottomY)) / segment6.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - leftX,_gthis.clipRect.y - bottomY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment6.clipRect = _gthis._clipRect;
			} else {
				segment6.clipRect = null;
			}
			segment6.shader = _gthis.shader;
			segment6.smooth = _gthis.smooth;
			segment6.render(point,camera);
		}
		var segment7 = this.botC;
		if(segment7 != null && segment7._visible) {
			var x19 = _gthis.x;
			segment7.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x19 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x19) + centerX;
			var y19 = _gthis.y;
			segment7.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y19 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y19) + bottomY;
			var x20 = centerX + centerWidth;
			segment7.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x20 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x20) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(centerX * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : centerX)) / segment7.get_width();
			var y20 = bottomY + bottomHeight;
			segment7.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y20 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y20) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(bottomY * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : bottomY)) / segment7.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - centerX,_gthis.clipRect.y - bottomY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment7.clipRect = _gthis._clipRect;
			} else {
				segment7.clipRect = null;
			}
			segment7.shader = _gthis.shader;
			segment7.smooth = _gthis.smooth;
			segment7.render(point,camera);
		}
		var segment8 = this.botR;
		if(segment8 != null && segment8._visible) {
			var x21 = _gthis.x;
			segment8.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x21 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x21) + rightX;
			var y21 = _gthis.y;
			segment8.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y21 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y21) + bottomY;
			var x22 = rightX + rightWidth;
			segment8.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x22 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x22) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(rightX * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : rightX)) / segment8.get_width();
			var y22 = bottomY + bottomHeight;
			segment8.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y22 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y22) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(bottomY * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : bottomY)) / segment8.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - rightX,_gthis.clipRect.y - bottomY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment8.clipRect = _gthis._clipRect;
			} else {
				segment8.clipRect = null;
			}
			segment8.shader = _gthis.shader;
			segment8.smooth = _gthis.smooth;
			segment8.render(point,camera);
		}
	}
	,topL: null
	,topC: null
	,topR: null
	,medL: null
	,medC: null
	,medR: null
	,botL: null
	,botC: null
	,botR: null
	,_sliceRect: null
	,_clipRect: null
	,__class__: haxepunk_graphics_NineSlice
});
var haxepunk_graphics_atlas_Atlas = function(source) {
	this._data = source;
};
$hxClasses["haxepunk.graphics.atlas.Atlas"] = haxepunk_graphics_atlas_Atlas;
haxepunk_graphics_atlas_Atlas.__name__ = ["haxepunk","graphics","atlas","Atlas"];
haxepunk_graphics_atlas_Atlas.loadImageAsRegion = function(source) {
	var data = source;
	return new haxepunk_graphics_atlas_AtlasRegion(data,new haxepunk_math_Rectangle(0,0,data.width,data.height).clone());
};
haxepunk_graphics_atlas_Atlas.prototype = {
	get_width: function() {
		return this._data.width;
	}
	,get_height: function() {
		return this._data.height;
	}
	,destroy: function() {
		this._data.destroy();
	}
	,prepareTile: function(rect,x,y,scaleX,scaleY,angle,color,alpha,shader,smooth,blend,clipRect) {
		var a;
		var b;
		var c;
		var d;
		if(angle == 0) {
			a = scaleX;
			b = 0;
			c = 0;
			d = scaleY;
		} else {
			var cos = Math.cos(-angle * (Math.PI / -180));
			var sin = Math.sin(-angle * (Math.PI / -180));
			a = cos * scaleX;
			b = -sin * scaleY;
			c = sin * scaleX;
			d = cos * scaleY;
		}
		var texture = this._data.texture;
		var rx = rect.x;
		var ry = rect.y;
		var rw = rect.width;
		var rh = rect.height;
		if(alpha > 0) {
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			if(texture == null) {
				uvy1 = 0;
				uvx1 = uvy1;
				uvx2 = rw;
				uvy2 = rh;
			} else {
				uvx1 = rx / texture.width;
				uvy1 = ry / texture.height;
				uvx2 = (rx + rw) / texture.width;
				uvy2 = (ry + rh) / texture.height;
			}
			var xa = rw * a + x;
			var yb = rw * b + y;
			var xc = rh * c + x;
			var yd = rh * d + y;
			var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth,blend,clipRect,x,y,xa,yb,xc,yd,false);
			if(alpha > 0) {
				var onScreen;
				var onScreen1;
				var onScreen2;
				var _this = command.visibleArea;
				if((x > xa ? xa > xc ? xc : xa : x > xc ? xc : x) <= _this.x + _this.width) {
					onScreen2 = (x < xa ? xa < xc ? xc : xa : x < xc ? xc : x) >= command.visibleArea.x;
				} else {
					onScreen2 = false;
				}
				if(onScreen2) {
					var _this1 = command.visibleArea;
					onScreen1 = (y > yb ? yb > yd ? yd : yb : y > yd ? yd : y) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				if(onScreen1) {
					onScreen = (y < yb ? yb < yd ? yd : yb : y < yd ? yd : y) >= command.visibleArea.y;
				} else {
					onScreen = false;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = x;
					data1.ty1 = y;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = xc;
					data1.ty3 = yd;
					data1.uvx3 = uvx1;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a1 = data1.tx1;
					var b1 = data1.tx2;
					var c1 = data1.tx3;
					var x1 = a1 > b1 ? b1 > c1 ? c1 : b1 : a1 > c1 ? c1 : a1;
					var a2 = data1.tx1;
					var b2 = data1.tx2;
					var c2 = data1.tx3;
					var x2 = a2 < b2 ? b2 < c2 ? c2 : b2 : a2 < c2 ? c2 : a2;
					var a3 = data1.ty1;
					var b3 = data1.ty2;
					var c3 = data1.ty3;
					var y1 = a3 > b3 ? b3 > c3 ? c3 : b3 : a3 > c3 ? c3 : a3;
					var a4 = data1.ty1;
					var b4 = data1.ty2;
					var c4 = data1.ty3;
					var y2 = a4 < b4 ? b4 < c4 ? c4 : b4 : a4 < c4 ? c4 : a4;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this2 = command.bounds;
						if(x2 > _this2.x + _this2.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this3 = command.bounds;
						if(y2 > _this3.y + _this3.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
			var tx3 = xa + rh * c;
			var ty3 = yb + rh * d;
			if(alpha > 0) {
				var onScreen3;
				var onScreen4;
				var onScreen5;
				var _this4 = command.visibleArea;
				if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this4.x + _this4.width) {
					onScreen5 = (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x;
				} else {
					onScreen5 = false;
				}
				if(onScreen5) {
					var _this5 = command.visibleArea;
					onScreen4 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this5.y + _this5.height;
				} else {
					onScreen4 = false;
				}
				if(onScreen4) {
					onScreen3 = (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
				} else {
					onScreen3 = false;
				}
				if(onScreen3) {
					var data2;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data2._next = null;
					} else {
						data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data3 = data2;
					data3.tx1 = xc;
					data3.ty1 = yd;
					data3.uvx1 = uvx1;
					data3.uvy1 = uvy2;
					data3.tx2 = xa;
					data3.ty2 = yb;
					data3.uvx2 = uvx2;
					data3.uvy2 = uvy1;
					data3.tx3 = tx3;
					data3.ty3 = ty3;
					data3.uvx3 = uvx2;
					data3.uvy3 = uvy2;
					data3.color = color;
					data3.alpha = alpha;
					if(command.data == null) {
						command.data = data3;
					} else {
						command._lastData._next = data3;
					}
					command._lastData = data3;
					++command.triangleCount;
					var a5 = data3.tx1;
					var b5 = data3.tx2;
					var c5 = data3.tx3;
					var x11 = a5 > b5 ? b5 > c5 ? c5 : b5 : a5 > c5 ? c5 : a5;
					var a6 = data3.tx1;
					var b6 = data3.tx2;
					var c6 = data3.tx3;
					var x21 = a6 < b6 ? b6 < c6 ? c6 : b6 : a6 < c6 ? c6 : a6;
					var a7 = data3.ty1;
					var b7 = data3.ty2;
					var c7 = data3.ty3;
					var y11 = a7 > b7 ? b7 > c7 ? c7 : b7 : a7 > c7 ? c7 : a7;
					var a8 = data3.ty1;
					var b8 = data3.ty2;
					var c8 = data3.ty3;
					var y21 = a8 < b8 ? b8 < c8 ? c8 : b8 : a8 < c8 ? c8 : a8;
					if(command.bounds.width == 0) {
						command.bounds.x = x11;
						command.bounds.width = x21 - x11;
					} else {
						if(x11 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x11;
							command.bounds.x = x11;
						}
						var _this6 = command.bounds;
						if(x21 > _this6.x + _this6.width) {
							command.bounds.width = x21 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y11;
						command.bounds.height = y21 - y11;
					} else {
						if(y11 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y11;
							command.bounds.y = y11;
						}
						var _this7 = command.bounds;
						if(y21 > _this7.y + _this7.height) {
							command.bounds.height = y21 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,_data: null
	,__class__: haxepunk_graphics_atlas_Atlas
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var haxepunk_graphics_atlas_AtlasData = function(texture,name) {
	this.texture = texture;
	this._name = name;
	if(this._name != null) {
		var key = this._name;
		var _this = haxepunk_graphics_atlas_AtlasData._dataPool;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			throw new js__$Boot_HaxeError("Cannot cache duplicate AtlasData with the name \"" + this._name + "\"");
		} else {
			var key1 = this._name;
			var _this1 = haxepunk_graphics_atlas_AtlasData._dataPool;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,this);
			} else {
				_this1.h[key1] = this;
			}
		}
	}
	this.width = texture.width;
	this.height = texture.height;
};
$hxClasses["haxepunk.graphics.atlas.AtlasData"] = haxepunk_graphics_atlas_AtlasData;
haxepunk_graphics_atlas_AtlasData.__name__ = ["haxepunk","graphics","atlas","AtlasData"];
haxepunk_graphics_atlas_AtlasData.getAtlasDataByName = function(name,create) {
	if(create == null) {
		create = false;
	}
	var data = null;
	var _this = haxepunk_graphics_atlas_AtlasData._dataPool;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		var _this1 = haxepunk_graphics_atlas_AtlasData._dataPool;
		if(__map_reserved[name] != null) {
			data = _this1.getReserved(name);
		} else {
			data = _this1.h[name];
		}
	} else if(create) {
		var texture = haxepunk_assets_AssetCache.global.getTexture(name);
		if(texture != null) {
			data = new haxepunk_graphics_atlas_AtlasData(texture,name);
		}
	}
	return data;
};
haxepunk_graphics_atlas_AtlasData.startScene = function(batch) {
	haxepunk_graphics_atlas_AtlasData._batch = batch;
	batch.head.recycle();
	batch.last = null;
};
haxepunk_graphics_atlas_AtlasData.destroyAll = function() {
	var _this = haxepunk_graphics_atlas_AtlasData._dataPool;
	var atlas = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(atlas.hasNext()) {
		var atlas1 = atlas.next();
		atlas1.destroy();
	}
};
haxepunk_graphics_atlas_AtlasData.prototype = {
	width: null
	,height: null
	,texture: null
	,toString: function() {
		if(this._name == null) {
			return "AtlasData";
		} else {
			return this._name;
		}
	}
	,destroy: function() {
		if(this._name != null) {
			haxepunk_graphics_atlas_AtlasData._dataPool.remove(this._name);
		}
	}
	,createRegion: function(rect,center) {
		return new haxepunk_graphics_atlas_AtlasRegion(this,rect.clone());
	}
	,prepareTileMatrix: function(rect,tx,ty,a,b,c,d,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(smooth == null) {
			smooth = false;
		}
		var texture = this.texture;
		var rx = rect.x;
		var ry = rect.y;
		var rw = rect.width;
		var rh = rect.height;
		if(alpha > 0) {
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			if(texture == null) {
				uvy1 = 0;
				uvx1 = uvy1;
				uvx2 = rw;
				uvy2 = rh;
			} else {
				uvx1 = rx / texture.width;
				uvy1 = ry / texture.height;
				uvx2 = (rx + rw) / texture.width;
				uvy2 = (ry + rh) / texture.height;
			}
			var xa = rw * a + tx;
			var yb = rw * b + ty;
			var xc = rh * c + tx;
			var yd = rh * d + ty;
			var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth,blend,clipRect,tx,ty,xa,yb,xc,yd,flexibleLayer);
			if(alpha > 0) {
				var onScreen;
				var onScreen1;
				var onScreen2;
				var _this = command.visibleArea;
				if((tx > xa ? xa > xc ? xc : xa : tx > xc ? xc : tx) <= _this.x + _this.width) {
					onScreen2 = (tx < xa ? xa < xc ? xc : xa : tx < xc ? xc : tx) >= command.visibleArea.x;
				} else {
					onScreen2 = false;
				}
				if(onScreen2) {
					var _this1 = command.visibleArea;
					onScreen1 = (ty > yb ? yb > yd ? yd : yb : ty > yd ? yd : ty) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				if(onScreen1) {
					onScreen = (ty < yb ? yb < yd ? yd : yb : ty < yd ? yd : ty) >= command.visibleArea.y;
				} else {
					onScreen = false;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = tx;
					data1.ty1 = ty;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = xc;
					data1.ty3 = yd;
					data1.uvx3 = uvx1;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a1 = data1.tx1;
					var b1 = data1.tx2;
					var c1 = data1.tx3;
					var x1 = a1 > b1 ? b1 > c1 ? c1 : b1 : a1 > c1 ? c1 : a1;
					var a2 = data1.tx1;
					var b2 = data1.tx2;
					var c2 = data1.tx3;
					var x2 = a2 < b2 ? b2 < c2 ? c2 : b2 : a2 < c2 ? c2 : a2;
					var a3 = data1.ty1;
					var b3 = data1.ty2;
					var c3 = data1.ty3;
					var y1 = a3 > b3 ? b3 > c3 ? c3 : b3 : a3 > c3 ? c3 : a3;
					var a4 = data1.ty1;
					var b4 = data1.ty2;
					var c4 = data1.ty3;
					var y2 = a4 < b4 ? b4 < c4 ? c4 : b4 : a4 < c4 ? c4 : a4;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this2 = command.bounds;
						if(x2 > _this2.x + _this2.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this3 = command.bounds;
						if(y2 > _this3.y + _this3.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
			var tx3 = xa + rh * c;
			var ty3 = yb + rh * d;
			if(alpha > 0) {
				var onScreen3;
				var onScreen4;
				var onScreen5;
				var _this4 = command.visibleArea;
				if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this4.x + _this4.width) {
					onScreen5 = (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x;
				} else {
					onScreen5 = false;
				}
				if(onScreen5) {
					var _this5 = command.visibleArea;
					onScreen4 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this5.y + _this5.height;
				} else {
					onScreen4 = false;
				}
				if(onScreen4) {
					onScreen3 = (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
				} else {
					onScreen3 = false;
				}
				if(onScreen3) {
					var data2;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data2._next = null;
					} else {
						data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data3 = data2;
					data3.tx1 = xc;
					data3.ty1 = yd;
					data3.uvx1 = uvx1;
					data3.uvy1 = uvy2;
					data3.tx2 = xa;
					data3.ty2 = yb;
					data3.uvx2 = uvx2;
					data3.uvy2 = uvy1;
					data3.tx3 = tx3;
					data3.ty3 = ty3;
					data3.uvx3 = uvx2;
					data3.uvy3 = uvy2;
					data3.color = color;
					data3.alpha = alpha;
					if(command.data == null) {
						command.data = data3;
					} else {
						command._lastData._next = data3;
					}
					command._lastData = data3;
					++command.triangleCount;
					var a5 = data3.tx1;
					var b5 = data3.tx2;
					var c5 = data3.tx3;
					var x11 = a5 > b5 ? b5 > c5 ? c5 : b5 : a5 > c5 ? c5 : a5;
					var a6 = data3.tx1;
					var b6 = data3.tx2;
					var c6 = data3.tx3;
					var x21 = a6 < b6 ? b6 < c6 ? c6 : b6 : a6 < c6 ? c6 : a6;
					var a7 = data3.ty1;
					var b7 = data3.ty2;
					var c7 = data3.ty3;
					var y11 = a7 > b7 ? b7 > c7 ? c7 : b7 : a7 > c7 ? c7 : a7;
					var a8 = data3.ty1;
					var b8 = data3.ty2;
					var c8 = data3.ty3;
					var y21 = a8 < b8 ? b8 < c8 ? c8 : b8 : a8 < c8 ? c8 : a8;
					if(command.bounds.width == 0) {
						command.bounds.x = x11;
						command.bounds.width = x21 - x11;
					} else {
						if(x11 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x11;
							command.bounds.x = x11;
						}
						var _this6 = command.bounds;
						if(x21 > _this6.x + _this6.width) {
							command.bounds.width = x21 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y11;
						command.bounds.height = y21 - y11;
					} else {
						if(y11 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y11;
							command.bounds.y = y11;
						}
						var _this7 = command.bounds;
						if(y21 > _this7.y + _this7.height) {
							command.bounds.height = y21 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,prepareTile: function(rect,tx,ty,scaleX,scaleY,angle,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		var a;
		var b;
		var c;
		var d;
		if(angle == 0) {
			a = scaleX;
			b = 0;
			c = 0;
			d = scaleY;
		} else {
			var cos = Math.cos(-angle * (Math.PI / -180));
			var sin = Math.sin(-angle * (Math.PI / -180));
			a = cos * scaleX;
			b = -sin * scaleY;
			c = sin * scaleX;
			d = cos * scaleY;
		}
		var texture = this.texture;
		var rx = rect.x;
		var ry = rect.y;
		var rw = rect.width;
		var rh = rect.height;
		if(alpha > 0) {
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			if(texture == null) {
				uvy1 = 0;
				uvx1 = uvy1;
				uvx2 = rw;
				uvy2 = rh;
			} else {
				uvx1 = rx / texture.width;
				uvy1 = ry / texture.height;
				uvx2 = (rx + rw) / texture.width;
				uvy2 = (ry + rh) / texture.height;
			}
			var xa = rw * a + tx;
			var yb = rw * b + ty;
			var xc = rh * c + tx;
			var yd = rh * d + ty;
			var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth,blend,clipRect,tx,ty,xa,yb,xc,yd,flexibleLayer);
			if(alpha > 0) {
				var onScreen;
				var onScreen1;
				var onScreen2;
				var _this = command.visibleArea;
				if((tx > xa ? xa > xc ? xc : xa : tx > xc ? xc : tx) <= _this.x + _this.width) {
					onScreen2 = (tx < xa ? xa < xc ? xc : xa : tx < xc ? xc : tx) >= command.visibleArea.x;
				} else {
					onScreen2 = false;
				}
				if(onScreen2) {
					var _this1 = command.visibleArea;
					onScreen1 = (ty > yb ? yb > yd ? yd : yb : ty > yd ? yd : ty) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				if(onScreen1) {
					onScreen = (ty < yb ? yb < yd ? yd : yb : ty < yd ? yd : ty) >= command.visibleArea.y;
				} else {
					onScreen = false;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = tx;
					data1.ty1 = ty;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = xc;
					data1.ty3 = yd;
					data1.uvx3 = uvx1;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a1 = data1.tx1;
					var b1 = data1.tx2;
					var c1 = data1.tx3;
					var x1 = a1 > b1 ? b1 > c1 ? c1 : b1 : a1 > c1 ? c1 : a1;
					var a2 = data1.tx1;
					var b2 = data1.tx2;
					var c2 = data1.tx3;
					var x2 = a2 < b2 ? b2 < c2 ? c2 : b2 : a2 < c2 ? c2 : a2;
					var a3 = data1.ty1;
					var b3 = data1.ty2;
					var c3 = data1.ty3;
					var y1 = a3 > b3 ? b3 > c3 ? c3 : b3 : a3 > c3 ? c3 : a3;
					var a4 = data1.ty1;
					var b4 = data1.ty2;
					var c4 = data1.ty3;
					var y2 = a4 < b4 ? b4 < c4 ? c4 : b4 : a4 < c4 ? c4 : a4;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this2 = command.bounds;
						if(x2 > _this2.x + _this2.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this3 = command.bounds;
						if(y2 > _this3.y + _this3.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
			var tx3 = xa + rh * c;
			var ty3 = yb + rh * d;
			if(alpha > 0) {
				var onScreen3;
				var onScreen4;
				var onScreen5;
				var _this4 = command.visibleArea;
				if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this4.x + _this4.width) {
					onScreen5 = (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x;
				} else {
					onScreen5 = false;
				}
				if(onScreen5) {
					var _this5 = command.visibleArea;
					onScreen4 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this5.y + _this5.height;
				} else {
					onScreen4 = false;
				}
				if(onScreen4) {
					onScreen3 = (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
				} else {
					onScreen3 = false;
				}
				if(onScreen3) {
					var data2;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data2._next = null;
					} else {
						data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data3 = data2;
					data3.tx1 = xc;
					data3.ty1 = yd;
					data3.uvx1 = uvx1;
					data3.uvy1 = uvy2;
					data3.tx2 = xa;
					data3.ty2 = yb;
					data3.uvx2 = uvx2;
					data3.uvy2 = uvy1;
					data3.tx3 = tx3;
					data3.ty3 = ty3;
					data3.uvx3 = uvx2;
					data3.uvy3 = uvy2;
					data3.color = color;
					data3.alpha = alpha;
					if(command.data == null) {
						command.data = data3;
					} else {
						command._lastData._next = data3;
					}
					command._lastData = data3;
					++command.triangleCount;
					var a5 = data3.tx1;
					var b5 = data3.tx2;
					var c5 = data3.tx3;
					var x11 = a5 > b5 ? b5 > c5 ? c5 : b5 : a5 > c5 ? c5 : a5;
					var a6 = data3.tx1;
					var b6 = data3.tx2;
					var c6 = data3.tx3;
					var x21 = a6 < b6 ? b6 < c6 ? c6 : b6 : a6 < c6 ? c6 : a6;
					var a7 = data3.ty1;
					var b7 = data3.ty2;
					var c7 = data3.ty3;
					var y11 = a7 > b7 ? b7 > c7 ? c7 : b7 : a7 > c7 ? c7 : a7;
					var a8 = data3.ty1;
					var b8 = data3.ty2;
					var c8 = data3.ty3;
					var y21 = a8 < b8 ? b8 < c8 ? c8 : b8 : a8 < c8 ? c8 : a8;
					if(command.bounds.width == 0) {
						command.bounds.x = x11;
						command.bounds.width = x21 - x11;
					} else {
						if(x11 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x11;
							command.bounds.x = x11;
						}
						var _this6 = command.bounds;
						if(x21 > _this6.x + _this6.width) {
							command.bounds.width = x21 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y11;
						command.bounds.height = y21 - y11;
					} else {
						if(y11 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y11;
							command.bounds.y = y11;
						}
						var _this7 = command.bounds;
						if(y21 > _this7.y + _this7.height) {
							command.bounds.height = y21 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,prepareTriangle: function(tx1,ty1,uvx1,uvy1,tx2,ty2,uvx2,uvy2,tx3,ty3,uvx3,uvy3,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha > 0) {
			var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(this.texture,shader,smooth,blend,clipRect,tx1,ty1,tx2,ty2,tx3,ty3,flexibleLayer);
			if(alpha > 0) {
				var onScreen;
				var onScreen1;
				var onScreen2;
				var _this = command.visibleArea;
				if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this.x + _this.width) {
					onScreen2 = (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= command.visibleArea.x;
				} else {
					onScreen2 = false;
				}
				if(onScreen2) {
					var _this1 = command.visibleArea;
					onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				if(onScreen1) {
					onScreen = (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= command.visibleArea.y;
				} else {
					onScreen = false;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = tx1;
					data1.ty1 = ty1;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = tx2;
					data1.ty2 = ty2;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy2;
					data1.tx3 = tx3;
					data1.ty3 = ty3;
					data1.uvx3 = uvx3;
					data1.uvy3 = uvy3;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a1 = data1.tx1;
					var b1 = data1.tx2;
					var c1 = data1.tx3;
					var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
					var a2 = data1.ty1;
					var b2 = data1.ty2;
					var c2 = data1.ty3;
					var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
					var a3 = data1.ty1;
					var b3 = data1.ty2;
					var c3 = data1.ty3;
					var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this2 = command.bounds;
						if(x2 > _this2.x + _this2.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this3 = command.bounds;
						if(y2 > _this3.y + _this3.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,_name: null
	,__class__: haxepunk_graphics_atlas_AtlasData
};
var haxepunk_graphics_atlas__$AtlasDataType_AtlasDataType_$Impl_$ = {};
$hxClasses["haxepunk.graphics.atlas._AtlasDataType.AtlasDataType_Impl_"] = haxepunk_graphics_atlas__$AtlasDataType_AtlasDataType_$Impl_$;
haxepunk_graphics_atlas__$AtlasDataType_AtlasDataType_$Impl_$.__name__ = ["haxepunk","graphics","atlas","_AtlasDataType","AtlasDataType_Impl_"];
haxepunk_graphics_atlas__$AtlasDataType_AtlasDataType_$Impl_$._new = function(data) {
	var this1 = data;
	return this1;
};
haxepunk_graphics_atlas__$AtlasDataType_AtlasDataType_$Impl_$.toAtlasData = function(this1) {
	return this1;
};
haxepunk_graphics_atlas__$AtlasDataType_AtlasDataType_$Impl_$.fromString = function(s) {
	var data = null;
	if(haxepunk_graphics_atlas_AtlasData._dataPool.exists(s)) {
		data = haxepunk_graphics_atlas_AtlasData._dataPool.get(s);
	} else {
		var texture = haxepunk_assets_AssetCache.global.getTexture(s);
		if(texture != null) {
			data = new haxepunk_graphics_atlas_AtlasData(texture,s);
		}
	}
	var this1 = data;
	return this1;
};
haxepunk_graphics_atlas__$AtlasDataType_AtlasDataType_$Impl_$.fromTexture = function(texture) {
	var this1 = new haxepunk_graphics_atlas_AtlasData(texture);
	return this1;
};
haxepunk_graphics_atlas__$AtlasDataType_AtlasDataType_$Impl_$.fromAtlasData = function(data) {
	var this1 = data;
	return this1;
};
var haxepunk_graphics_atlas_IAtlasRegion = function() { };
$hxClasses["haxepunk.graphics.atlas.IAtlasRegion"] = haxepunk_graphics_atlas_IAtlasRegion;
haxepunk_graphics_atlas_IAtlasRegion.__name__ = ["haxepunk","graphics","atlas","IAtlasRegion"];
haxepunk_graphics_atlas_IAtlasRegion.prototype = {
	get_width: null
	,get_height: null
	,draw: null
	,drawMatrix: null
	,clip: null
	,destroy: null
	,__class__: haxepunk_graphics_atlas_IAtlasRegion
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var haxepunk_graphics_atlas_AtlasRegion = function(parent,rect) {
	this._parent = parent;
	this._rect = rect;
	this.rotated = false;
};
$hxClasses["haxepunk.graphics.atlas.AtlasRegion"] = haxepunk_graphics_atlas_AtlasRegion;
haxepunk_graphics_atlas_AtlasRegion.__name__ = ["haxepunk","graphics","atlas","AtlasRegion"];
haxepunk_graphics_atlas_AtlasRegion.__interfaces__ = [haxepunk_graphics_atlas_IAtlasRegion];
haxepunk_graphics_atlas_AtlasRegion.prototype = {
	rotated: null
	,clip: function(clipRect,center) {
		var clipRectCopy = clipRect.clone();
		if(clipRectCopy.x + clipRectCopy.width > this._rect.width) {
			clipRectCopy.width = this._rect.width - clipRectCopy.x;
		}
		if(clipRectCopy.y + clipRectCopy.height > this._rect.height) {
			clipRectCopy.height = this._rect.height - clipRectCopy.y;
		}
		if(clipRectCopy.width < 0) {
			clipRectCopy.width = 0;
		}
		if(clipRectCopy.height < 0) {
			clipRectCopy.height = 0;
		}
		clipRectCopy.x += this._rect.x;
		clipRectCopy.y += this._rect.y;
		return new haxepunk_graphics_atlas_AtlasRegion(this._parent,clipRectCopy.clone());
	}
	,draw: function(x,y,scaleX,scaleY,angle,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		if(angle == null) {
			angle = 0;
		}
		if(scaleY == null) {
			scaleY = 1;
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		if(this.rotated) {
			angle += 90;
		}
		var rect = this._rect;
		var a;
		var b;
		var c;
		var d;
		if(angle == 0) {
			a = scaleX;
			b = 0;
			c = 0;
			d = scaleY;
		} else {
			var cos = Math.cos(-angle * (Math.PI / -180));
			var sin = Math.sin(-angle * (Math.PI / -180));
			a = cos * scaleX;
			b = -sin * scaleY;
			c = sin * scaleX;
			d = cos * scaleY;
		}
		var texture = this._parent.texture;
		var rx = rect.x;
		var ry = rect.y;
		var rw = rect.width;
		var rh = rect.height;
		if(alpha > 0) {
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			if(texture == null) {
				uvy1 = 0;
				uvx1 = uvy1;
				uvx2 = rw;
				uvy2 = rh;
			} else {
				uvx1 = rx / texture.width;
				uvy1 = ry / texture.height;
				uvx2 = (rx + rw) / texture.width;
				uvy2 = (ry + rh) / texture.height;
			}
			var xa = rw * a + x;
			var yb = rw * b + y;
			var xc = rh * c + x;
			var yd = rh * d + y;
			var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth,blend,clipRect,x,y,xa,yb,xc,yd,flexibleLayer);
			if(alpha > 0) {
				var onScreen;
				var onScreen1;
				var onScreen2;
				var _this = command.visibleArea;
				if((x > xa ? xa > xc ? xc : xa : x > xc ? xc : x) <= _this.x + _this.width) {
					onScreen2 = (x < xa ? xa < xc ? xc : xa : x < xc ? xc : x) >= command.visibleArea.x;
				} else {
					onScreen2 = false;
				}
				if(onScreen2) {
					var _this1 = command.visibleArea;
					onScreen1 = (y > yb ? yb > yd ? yd : yb : y > yd ? yd : y) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				if(onScreen1) {
					onScreen = (y < yb ? yb < yd ? yd : yb : y < yd ? yd : y) >= command.visibleArea.y;
				} else {
					onScreen = false;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = x;
					data1.ty1 = y;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = xc;
					data1.ty3 = yd;
					data1.uvx3 = uvx1;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a1 = data1.tx1;
					var b1 = data1.tx2;
					var c1 = data1.tx3;
					var x1 = a1 > b1 ? b1 > c1 ? c1 : b1 : a1 > c1 ? c1 : a1;
					var a2 = data1.tx1;
					var b2 = data1.tx2;
					var c2 = data1.tx3;
					var x2 = a2 < b2 ? b2 < c2 ? c2 : b2 : a2 < c2 ? c2 : a2;
					var a3 = data1.ty1;
					var b3 = data1.ty2;
					var c3 = data1.ty3;
					var y1 = a3 > b3 ? b3 > c3 ? c3 : b3 : a3 > c3 ? c3 : a3;
					var a4 = data1.ty1;
					var b4 = data1.ty2;
					var c4 = data1.ty3;
					var y2 = a4 < b4 ? b4 < c4 ? c4 : b4 : a4 < c4 ? c4 : a4;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this2 = command.bounds;
						if(x2 > _this2.x + _this2.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this3 = command.bounds;
						if(y2 > _this3.y + _this3.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
			var tx3 = xa + rh * c;
			var ty3 = yb + rh * d;
			if(alpha > 0) {
				var onScreen3;
				var onScreen4;
				var onScreen5;
				var _this4 = command.visibleArea;
				if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this4.x + _this4.width) {
					onScreen5 = (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x;
				} else {
					onScreen5 = false;
				}
				if(onScreen5) {
					var _this5 = command.visibleArea;
					onScreen4 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this5.y + _this5.height;
				} else {
					onScreen4 = false;
				}
				if(onScreen4) {
					onScreen3 = (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
				} else {
					onScreen3 = false;
				}
				if(onScreen3) {
					var data2;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data2._next = null;
					} else {
						data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data3 = data2;
					data3.tx1 = xc;
					data3.ty1 = yd;
					data3.uvx1 = uvx1;
					data3.uvy1 = uvy2;
					data3.tx2 = xa;
					data3.ty2 = yb;
					data3.uvx2 = uvx2;
					data3.uvy2 = uvy1;
					data3.tx3 = tx3;
					data3.ty3 = ty3;
					data3.uvx3 = uvx2;
					data3.uvy3 = uvy2;
					data3.color = color;
					data3.alpha = alpha;
					if(command.data == null) {
						command.data = data3;
					} else {
						command._lastData._next = data3;
					}
					command._lastData = data3;
					++command.triangleCount;
					var a5 = data3.tx1;
					var b5 = data3.tx2;
					var c5 = data3.tx3;
					var x11 = a5 > b5 ? b5 > c5 ? c5 : b5 : a5 > c5 ? c5 : a5;
					var a6 = data3.tx1;
					var b6 = data3.tx2;
					var c6 = data3.tx3;
					var x21 = a6 < b6 ? b6 < c6 ? c6 : b6 : a6 < c6 ? c6 : a6;
					var a7 = data3.ty1;
					var b7 = data3.ty2;
					var c7 = data3.ty3;
					var y11 = a7 > b7 ? b7 > c7 ? c7 : b7 : a7 > c7 ? c7 : a7;
					var a8 = data3.ty1;
					var b8 = data3.ty2;
					var c8 = data3.ty3;
					var y21 = a8 < b8 ? b8 < c8 ? c8 : b8 : a8 < c8 ? c8 : a8;
					if(command.bounds.width == 0) {
						command.bounds.x = x11;
						command.bounds.width = x21 - x11;
					} else {
						if(x11 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x11;
							command.bounds.x = x11;
						}
						var _this6 = command.bounds;
						if(x21 > _this6.x + _this6.width) {
							command.bounds.width = x21 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y11;
						command.bounds.height = y21 - y11;
					} else {
						if(y11 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y11;
							command.bounds.y = y11;
						}
						var _this7 = command.bounds;
						if(y21 > _this7.y + _this7.height) {
							command.bounds.height = y21 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,drawMatrix: function(tx,ty,a,b,c,d,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		if(this.rotated) {
			var rect = this._rect;
			var tx1 = -ty;
			var c1 = -d;
			var texture = this._parent.texture;
			var rx = rect.x;
			var ry = rect.y;
			var rw = rect.width;
			var rh = rect.height;
			if(alpha > 0) {
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				if(texture == null) {
					uvy1 = 0;
					uvx1 = uvy1;
					uvx2 = rw;
					uvy2 = rh;
				} else {
					uvx1 = rx / texture.width;
					uvy1 = ry / texture.height;
					uvx2 = (rx + rw) / texture.width;
					uvy2 = (ry + rh) / texture.height;
				}
				var xa = rw * -b + tx1;
				var yb = rw * a + tx;
				var xc = rh * c1 + tx1;
				var yd = rh * c + tx;
				var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth,blend,clipRect,tx1,tx,xa,yb,xc,yd,flexibleLayer);
				if(alpha > 0) {
					var onScreen;
					var onScreen1;
					var onScreen2;
					var _this = command.visibleArea;
					if((tx1 > xa ? xa > xc ? xc : xa : tx1 > xc ? xc : tx1) <= _this.x + _this.width) {
						onScreen2 = (tx1 < xa ? xa < xc ? xc : xa : tx1 < xc ? xc : tx1) >= command.visibleArea.x;
					} else {
						onScreen2 = false;
					}
					if(onScreen2) {
						var _this1 = command.visibleArea;
						onScreen1 = (tx > yb ? yb > yd ? yd : yb : tx > yd ? yd : tx) <= _this1.y + _this1.height;
					} else {
						onScreen1 = false;
					}
					if(onScreen1) {
						onScreen = (tx < yb ? yb < yd ? yd : yb : tx < yd ? yd : tx) >= command.visibleArea.y;
					} else {
						onScreen = false;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx1;
						data1.ty1 = tx;
						data1.uvx1 = uvx1;
						data1.uvy1 = uvy1;
						data1.tx2 = xa;
						data1.ty2 = yb;
						data1.uvx2 = uvx2;
						data1.uvy2 = uvy1;
						data1.tx3 = xc;
						data1.ty3 = yd;
						data1.uvx3 = uvx1;
						data1.uvy3 = uvy2;
						data1.color = color;
						data1.alpha = alpha;
						if(command.data == null) {
							command.data = data1;
						} else {
							command._lastData._next = data1;
						}
						command._lastData = data1;
						++command.triangleCount;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c2 = data1.tx3;
						var x1 = a1 > b1 ? b1 > c2 ? c2 : b1 : a1 > c2 ? c2 : a1;
						var a2 = data1.tx1;
						var b2 = data1.tx2;
						var c3 = data1.tx3;
						var x2 = a2 < b2 ? b2 < c3 ? c3 : b2 : a2 < c3 ? c3 : a2;
						var a3 = data1.ty1;
						var b3 = data1.ty2;
						var c4 = data1.ty3;
						var y1 = a3 > b3 ? b3 > c4 ? c4 : b3 : a3 > c4 ? c4 : a3;
						var a4 = data1.ty1;
						var b4 = data1.ty2;
						var c5 = data1.ty3;
						var y2 = a4 < b4 ? b4 < c5 ? c5 : b4 : a4 < c5 ? c5 : a4;
						if(command.bounds.width == 0) {
							command.bounds.x = x1;
							command.bounds.width = x2 - x1;
						} else {
							if(x1 < command.bounds.x) {
								command.bounds.width += command.bounds.x - x1;
								command.bounds.x = x1;
							}
							var _this2 = command.bounds;
							if(x2 > _this2.x + _this2.width) {
								command.bounds.width = x2 - command.bounds.x;
							}
						}
						if(command.bounds.height == 0) {
							command.bounds.y = y1;
							command.bounds.height = y2 - y1;
						} else {
							if(y1 < command.bounds.y) {
								command.bounds.height += command.bounds.y - y1;
								command.bounds.y = y1;
							}
							var _this3 = command.bounds;
							if(y2 > _this3.y + _this3.height) {
								command.bounds.height = y2 - command.bounds.y;
							}
						}
					}
				}
				var tx3 = xa + rh * c1;
				var ty3 = yb + rh * c;
				if(alpha > 0) {
					var onScreen3;
					var onScreen4;
					var onScreen5;
					var _this4 = command.visibleArea;
					if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this4.x + _this4.width) {
						onScreen5 = (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x;
					} else {
						onScreen5 = false;
					}
					if(onScreen5) {
						var _this5 = command.visibleArea;
						onScreen4 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this5.y + _this5.height;
					} else {
						onScreen4 = false;
					}
					if(onScreen4) {
						onScreen3 = (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
					} else {
						onScreen3 = false;
					}
					if(onScreen3) {
						var data2;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data2._next = null;
						} else {
							data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data3 = data2;
						data3.tx1 = xc;
						data3.ty1 = yd;
						data3.uvx1 = uvx1;
						data3.uvy1 = uvy2;
						data3.tx2 = xa;
						data3.ty2 = yb;
						data3.uvx2 = uvx2;
						data3.uvy2 = uvy1;
						data3.tx3 = tx3;
						data3.ty3 = ty3;
						data3.uvx3 = uvx2;
						data3.uvy3 = uvy2;
						data3.color = color;
						data3.alpha = alpha;
						if(command.data == null) {
							command.data = data3;
						} else {
							command._lastData._next = data3;
						}
						command._lastData = data3;
						++command.triangleCount;
						var a5 = data3.tx1;
						var b5 = data3.tx2;
						var c6 = data3.tx3;
						var x11 = a5 > b5 ? b5 > c6 ? c6 : b5 : a5 > c6 ? c6 : a5;
						var a6 = data3.tx1;
						var b6 = data3.tx2;
						var c7 = data3.tx3;
						var x21 = a6 < b6 ? b6 < c7 ? c7 : b6 : a6 < c7 ? c7 : a6;
						var a7 = data3.ty1;
						var b7 = data3.ty2;
						var c8 = data3.ty3;
						var y11 = a7 > b7 ? b7 > c8 ? c8 : b7 : a7 > c8 ? c8 : a7;
						var a8 = data3.ty1;
						var b8 = data3.ty2;
						var c9 = data3.ty3;
						var y21 = a8 < b8 ? b8 < c9 ? c9 : b8 : a8 < c9 ? c9 : a8;
						if(command.bounds.width == 0) {
							command.bounds.x = x11;
							command.bounds.width = x21 - x11;
						} else {
							if(x11 < command.bounds.x) {
								command.bounds.width += command.bounds.x - x11;
								command.bounds.x = x11;
							}
							var _this6 = command.bounds;
							if(x21 > _this6.x + _this6.width) {
								command.bounds.width = x21 - command.bounds.x;
							}
						}
						if(command.bounds.height == 0) {
							command.bounds.y = y11;
							command.bounds.height = y21 - y11;
						} else {
							if(y11 < command.bounds.y) {
								command.bounds.height += command.bounds.y - y11;
								command.bounds.y = y11;
							}
							var _this7 = command.bounds;
							if(y21 > _this7.y + _this7.height) {
								command.bounds.height = y21 - command.bounds.y;
							}
						}
					}
				}
			}
		} else {
			var rect1 = this._rect;
			var texture1 = this._parent.texture;
			var rx1 = rect1.x;
			var ry1 = rect1.y;
			var rw1 = rect1.width;
			var rh1 = rect1.height;
			if(alpha > 0) {
				var uvx11;
				var uvy11;
				var uvx21;
				var uvy21;
				if(texture1 == null) {
					uvy11 = 0;
					uvx11 = uvy11;
					uvx21 = rw1;
					uvy21 = rh1;
				} else {
					uvx11 = rx1 / texture1.width;
					uvy11 = ry1 / texture1.height;
					uvx21 = (rx1 + rw1) / texture1.width;
					uvy21 = (ry1 + rh1) / texture1.height;
				}
				var xa1 = rw1 * a + tx;
				var yb1 = rw1 * b + ty;
				var xc1 = rh1 * c + tx;
				var yd1 = rh1 * d + ty;
				var command1 = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture1,shader,smooth,blend,clipRect,tx,ty,xa1,yb1,xc1,yd1,false);
				if(alpha > 0) {
					var onScreen6;
					var onScreen7;
					var onScreen8;
					var _this8 = command1.visibleArea;
					if((tx > xa1 ? xa1 > xc1 ? xc1 : xa1 : tx > xc1 ? xc1 : tx) <= _this8.x + _this8.width) {
						onScreen8 = (tx < xa1 ? xa1 < xc1 ? xc1 : xa1 : tx < xc1 ? xc1 : tx) >= command1.visibleArea.x;
					} else {
						onScreen8 = false;
					}
					if(onScreen8) {
						var _this9 = command1.visibleArea;
						onScreen7 = (ty > yb1 ? yb1 > yd1 ? yd1 : yb1 : ty > yd1 ? yd1 : ty) <= _this9.y + _this9.height;
					} else {
						onScreen7 = false;
					}
					if(onScreen7) {
						onScreen6 = (ty < yb1 ? yb1 < yd1 ? yd1 : yb1 : ty < yd1 ? yd1 : ty) >= command1.visibleArea.y;
					} else {
						onScreen6 = false;
					}
					if(onScreen6) {
						var data4;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data4 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data4._next = null;
						} else {
							data4 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data5 = data4;
						data5.tx1 = tx;
						data5.ty1 = ty;
						data5.uvx1 = uvx11;
						data5.uvy1 = uvy11;
						data5.tx2 = xa1;
						data5.ty2 = yb1;
						data5.uvx2 = uvx21;
						data5.uvy2 = uvy11;
						data5.tx3 = xc1;
						data5.ty3 = yd1;
						data5.uvx3 = uvx11;
						data5.uvy3 = uvy21;
						data5.color = color;
						data5.alpha = alpha;
						if(command1.data == null) {
							command1.data = data5;
						} else {
							command1._lastData._next = data5;
						}
						command1._lastData = data5;
						++command1.triangleCount;
						var a9 = data5.tx1;
						var b9 = data5.tx2;
						var c10 = data5.tx3;
						var x12 = a9 > b9 ? b9 > c10 ? c10 : b9 : a9 > c10 ? c10 : a9;
						var a10 = data5.tx1;
						var b10 = data5.tx2;
						var c11 = data5.tx3;
						var x22 = a10 < b10 ? b10 < c11 ? c11 : b10 : a10 < c11 ? c11 : a10;
						var a11 = data5.ty1;
						var b11 = data5.ty2;
						var c12 = data5.ty3;
						var y12 = a11 > b11 ? b11 > c12 ? c12 : b11 : a11 > c12 ? c12 : a11;
						var a12 = data5.ty1;
						var b12 = data5.ty2;
						var c13 = data5.ty3;
						var y22 = a12 < b12 ? b12 < c13 ? c13 : b12 : a12 < c13 ? c13 : a12;
						if(command1.bounds.width == 0) {
							command1.bounds.x = x12;
							command1.bounds.width = x22 - x12;
						} else {
							if(x12 < command1.bounds.x) {
								command1.bounds.width += command1.bounds.x - x12;
								command1.bounds.x = x12;
							}
							var _this10 = command1.bounds;
							if(x22 > _this10.x + _this10.width) {
								command1.bounds.width = x22 - command1.bounds.x;
							}
						}
						if(command1.bounds.height == 0) {
							command1.bounds.y = y12;
							command1.bounds.height = y22 - y12;
						} else {
							if(y12 < command1.bounds.y) {
								command1.bounds.height += command1.bounds.y - y12;
								command1.bounds.y = y12;
							}
							var _this11 = command1.bounds;
							if(y22 > _this11.y + _this11.height) {
								command1.bounds.height = y22 - command1.bounds.y;
							}
						}
					}
				}
				var tx31 = xa1 + rh1 * c;
				var ty31 = yb1 + rh1 * d;
				if(alpha > 0) {
					var onScreen9;
					var onScreen10;
					var onScreen11;
					var _this12 = command1.visibleArea;
					if((xc1 > xa1 ? xa1 > tx31 ? tx31 : xa1 : xc1 > tx31 ? tx31 : xc1) <= _this12.x + _this12.width) {
						onScreen11 = (xc1 < xa1 ? xa1 < tx31 ? tx31 : xa1 : xc1 < tx31 ? tx31 : xc1) >= command1.visibleArea.x;
					} else {
						onScreen11 = false;
					}
					if(onScreen11) {
						var _this13 = command1.visibleArea;
						onScreen10 = (yd1 > yb1 ? yb1 > ty31 ? ty31 : yb1 : yd1 > ty31 ? ty31 : yd1) <= _this13.y + _this13.height;
					} else {
						onScreen10 = false;
					}
					if(onScreen10) {
						onScreen9 = (yd1 < yb1 ? yb1 < ty31 ? ty31 : yb1 : yd1 < ty31 ? ty31 : yd1) >= command1.visibleArea.y;
					} else {
						onScreen9 = false;
					}
					if(onScreen9) {
						var data6;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data6 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data6._next = null;
						} else {
							data6 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data7 = data6;
						data7.tx1 = xc1;
						data7.ty1 = yd1;
						data7.uvx1 = uvx11;
						data7.uvy1 = uvy21;
						data7.tx2 = xa1;
						data7.ty2 = yb1;
						data7.uvx2 = uvx21;
						data7.uvy2 = uvy11;
						data7.tx3 = tx31;
						data7.ty3 = ty31;
						data7.uvx3 = uvx21;
						data7.uvy3 = uvy21;
						data7.color = color;
						data7.alpha = alpha;
						if(command1.data == null) {
							command1.data = data7;
						} else {
							command1._lastData._next = data7;
						}
						command1._lastData = data7;
						++command1.triangleCount;
						var a13 = data7.tx1;
						var b13 = data7.tx2;
						var c14 = data7.tx3;
						var x13 = a13 > b13 ? b13 > c14 ? c14 : b13 : a13 > c14 ? c14 : a13;
						var a14 = data7.tx1;
						var b14 = data7.tx2;
						var c15 = data7.tx3;
						var x23 = a14 < b14 ? b14 < c15 ? c15 : b14 : a14 < c15 ? c15 : a14;
						var a15 = data7.ty1;
						var b15 = data7.ty2;
						var c16 = data7.ty3;
						var y13 = a15 > b15 ? b15 > c16 ? c16 : b15 : a15 > c16 ? c16 : a15;
						var a16 = data7.ty1;
						var b16 = data7.ty2;
						var c17 = data7.ty3;
						var y23 = a16 < b16 ? b16 < c17 ? c17 : b16 : a16 < c17 ? c17 : a16;
						if(command1.bounds.width == 0) {
							command1.bounds.x = x13;
							command1.bounds.width = x23 - x13;
						} else {
							if(x13 < command1.bounds.x) {
								command1.bounds.width += command1.bounds.x - x13;
								command1.bounds.x = x13;
							}
							var _this14 = command1.bounds;
							if(x23 > _this14.x + _this14.width) {
								command1.bounds.width = x23 - command1.bounds.x;
							}
						}
						if(command1.bounds.height == 0) {
							command1.bounds.y = y13;
							command1.bounds.height = y23 - y13;
						} else {
							if(y13 < command1.bounds.y) {
								command1.bounds.height += command1.bounds.y - y13;
								command1.bounds.y = y13;
							}
							var _this15 = command1.bounds;
							if(y23 > _this15.y + _this15.height) {
								command1.bounds.height = y23 - command1.bounds.y;
							}
						}
					}
				}
			}
		}
	}
	,destroy: function() {
		if(this._parent != null) {
			this._parent.destroy();
			this._parent = null;
		}
	}
	,toString: function() {
		return "[AtlasRegion " + Std.string(this._rect) + "]";
	}
	,get_x: function() {
		return this._rect.x;
	}
	,get_y: function() {
		return this._rect.y;
	}
	,get_width: function() {
		return this._rect.width | 0;
	}
	,get_height: function() {
		return this._rect.height | 0;
	}
	,_rect: null
	,_parent: null
	,__class__: haxepunk_graphics_atlas_AtlasRegion
	,__properties__: {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
};
var haxepunk_graphics_atlas_AtlasResolutions = function(regions) {
	this.regions = [];
	if(regions == null || regions.length == 0) {
		throw new js__$Boot_HaxeError("Can't create an AtlasResolutions set with no AtlasRegions");
	}
	var _g = 0;
	while(_g < regions.length) {
		var region = regions[_g];
		++_g;
		this.addResolution(region);
	}
};
$hxClasses["haxepunk.graphics.atlas.AtlasResolutions"] = haxepunk_graphics_atlas_AtlasResolutions;
haxepunk_graphics_atlas_AtlasResolutions.__name__ = ["haxepunk","graphics","atlas","AtlasResolutions"];
haxepunk_graphics_atlas_AtlasResolutions.__interfaces__ = [haxepunk_graphics_atlas_IAtlasRegion];
haxepunk_graphics_atlas_AtlasResolutions.prototype = {
	get_width: function() {
		return this.base._rect.width | 0;
	}
	,get_height: function() {
		return this.base._rect.height | 0;
	}
	,base: null
	,regions: null
	,addResolution: function(region) {
		if(this.regions.length == 0) {
			this.base = region;
			this.regions.push(region);
		} else {
			if(Math.abs((region._rect.width | 0) / (region._rect.height | 0) - (this.base._rect.width | 0) / (this.base._rect.height | 0)) > 0.001) {
				throw new js__$Boot_HaxeError("All AtlasRegions in an AtlasResolutions set must have the same aspect ratio: " + Std.string(this.base) + " " + Std.string(region));
			}
			var _g1 = 0;
			var _g = this.regions.length + 1;
			while(_g1 < _g) {
				var i = _g1++;
				if(i == this.regions.length || (this.regions[i]._rect.width | 0) > (region._rect.width | 0)) {
					this.regions.splice(i,0,region);
					break;
				}
			}
		}
	}
	,draw: function(x,y,scaleX,scaleY,angle,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		if(angle == null) {
			angle = 0;
		}
		if(scaleY == null) {
			scaleY = 1;
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		var currentScale = Math.max(Math.abs(scaleX),Math.abs(scaleY));
		var best = this.base;
		var _g = 0;
		var _g1 = this.regions;
		while(_g < _g1.length) {
			var region = _g1[_g];
			++_g;
			best = region;
			var scale = (region._rect.width | 0) / (this.base._rect.width | 0);
			if(scale > currentScale) {
				break;
			}
		}
		var region1 = best;
		var scale1 = (this.base._rect.width | 0) / (region1._rect.width | 0);
		var scaleX1 = scaleX * scale1;
		var scaleY1 = scaleY * scale1;
		var angle1 = angle;
		if(region1.rotated) {
			angle1 += 90;
		}
		var rect = region1._rect;
		var a;
		var b;
		var c;
		var d;
		if(angle1 == 0) {
			a = scaleX1;
			b = 0;
			c = 0;
			d = scaleY1;
		} else {
			var cos = Math.cos(-angle1 * (Math.PI / -180));
			var sin = Math.sin(-angle1 * (Math.PI / -180));
			a = cos * scaleX1;
			b = -sin * scaleY1;
			c = sin * scaleX1;
			d = cos * scaleY1;
		}
		var texture = region1._parent.texture;
		var rx = rect.x;
		var ry = rect.y;
		var rw = rect.width;
		var rh = rect.height;
		if(alpha > 0) {
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			if(texture == null) {
				uvy1 = 0;
				uvx1 = uvy1;
				uvx2 = rw;
				uvy2 = rh;
			} else {
				uvx1 = rx / texture.width;
				uvy1 = ry / texture.height;
				uvx2 = (rx + rw) / texture.width;
				uvy2 = (ry + rh) / texture.height;
			}
			var xa = rw * a + x;
			var yb = rw * b + y;
			var xc = rh * c + x;
			var yd = rh * d + y;
			var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth,blend,clipRect,x,y,xa,yb,xc,yd,flexibleLayer);
			if(alpha > 0) {
				var onScreen;
				var onScreen1;
				var onScreen2;
				var _this = command.visibleArea;
				if((x > xa ? xa > xc ? xc : xa : x > xc ? xc : x) <= _this.x + _this.width) {
					onScreen2 = (x < xa ? xa < xc ? xc : xa : x < xc ? xc : x) >= command.visibleArea.x;
				} else {
					onScreen2 = false;
				}
				if(onScreen2) {
					var _this1 = command.visibleArea;
					onScreen1 = (y > yb ? yb > yd ? yd : yb : y > yd ? yd : y) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				if(onScreen1) {
					onScreen = (y < yb ? yb < yd ? yd : yb : y < yd ? yd : y) >= command.visibleArea.y;
				} else {
					onScreen = false;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = x;
					data1.ty1 = y;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = xc;
					data1.ty3 = yd;
					data1.uvx3 = uvx1;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a1 = data1.tx1;
					var b1 = data1.tx2;
					var c1 = data1.tx3;
					var x1 = a1 > b1 ? b1 > c1 ? c1 : b1 : a1 > c1 ? c1 : a1;
					var a2 = data1.tx1;
					var b2 = data1.tx2;
					var c2 = data1.tx3;
					var x2 = a2 < b2 ? b2 < c2 ? c2 : b2 : a2 < c2 ? c2 : a2;
					var a3 = data1.ty1;
					var b3 = data1.ty2;
					var c3 = data1.ty3;
					var y1 = a3 > b3 ? b3 > c3 ? c3 : b3 : a3 > c3 ? c3 : a3;
					var a4 = data1.ty1;
					var b4 = data1.ty2;
					var c4 = data1.ty3;
					var y2 = a4 < b4 ? b4 < c4 ? c4 : b4 : a4 < c4 ? c4 : a4;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this2 = command.bounds;
						if(x2 > _this2.x + _this2.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this3 = command.bounds;
						if(y2 > _this3.y + _this3.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
			var tx3 = xa + rh * c;
			var ty3 = yb + rh * d;
			if(alpha > 0) {
				var onScreen3;
				var onScreen4;
				var onScreen5;
				var _this4 = command.visibleArea;
				if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this4.x + _this4.width) {
					onScreen5 = (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x;
				} else {
					onScreen5 = false;
				}
				if(onScreen5) {
					var _this5 = command.visibleArea;
					onScreen4 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this5.y + _this5.height;
				} else {
					onScreen4 = false;
				}
				if(onScreen4) {
					onScreen3 = (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
				} else {
					onScreen3 = false;
				}
				if(onScreen3) {
					var data2;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data2._next = null;
					} else {
						data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data3 = data2;
					data3.tx1 = xc;
					data3.ty1 = yd;
					data3.uvx1 = uvx1;
					data3.uvy1 = uvy2;
					data3.tx2 = xa;
					data3.ty2 = yb;
					data3.uvx2 = uvx2;
					data3.uvy2 = uvy1;
					data3.tx3 = tx3;
					data3.ty3 = ty3;
					data3.uvx3 = uvx2;
					data3.uvy3 = uvy2;
					data3.color = color;
					data3.alpha = alpha;
					if(command.data == null) {
						command.data = data3;
					} else {
						command._lastData._next = data3;
					}
					command._lastData = data3;
					++command.triangleCount;
					var a5 = data3.tx1;
					var b5 = data3.tx2;
					var c5 = data3.tx3;
					var x11 = a5 > b5 ? b5 > c5 ? c5 : b5 : a5 > c5 ? c5 : a5;
					var a6 = data3.tx1;
					var b6 = data3.tx2;
					var c6 = data3.tx3;
					var x21 = a6 < b6 ? b6 < c6 ? c6 : b6 : a6 < c6 ? c6 : a6;
					var a7 = data3.ty1;
					var b7 = data3.ty2;
					var c7 = data3.ty3;
					var y11 = a7 > b7 ? b7 > c7 ? c7 : b7 : a7 > c7 ? c7 : a7;
					var a8 = data3.ty1;
					var b8 = data3.ty2;
					var c8 = data3.ty3;
					var y21 = a8 < b8 ? b8 < c8 ? c8 : b8 : a8 < c8 ? c8 : a8;
					if(command.bounds.width == 0) {
						command.bounds.x = x11;
						command.bounds.width = x21 - x11;
					} else {
						if(x11 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x11;
							command.bounds.x = x11;
						}
						var _this6 = command.bounds;
						if(x21 > _this6.x + _this6.width) {
							command.bounds.width = x21 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y11;
						command.bounds.height = y21 - y11;
					} else {
						if(y11 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y11;
							command.bounds.y = y11;
						}
						var _this7 = command.bounds;
						if(y21 > _this7.y + _this7.height) {
							command.bounds.height = y21 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,drawMatrix: function(tx,ty,a,b,c,d,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		var currentScale = Math.max(Math.abs(a * c),Math.abs(b * d));
		var best = this.base;
		var _g = 0;
		var _g1 = this.regions;
		while(_g < _g1.length) {
			var region = _g1[_g];
			++_g;
			best = region;
			var scale = (region._rect.width | 0) / (this.base._rect.width | 0);
			if(scale > currentScale) {
				break;
			}
		}
		var region1 = best;
		var scale1 = (this.base._rect.width | 0) / (region1._rect.width | 0);
		var tx1 = tx * scale1;
		var ty1 = ty * scale1;
		var a1 = a * scale1;
		var b1 = b * scale1;
		var c1 = c * scale1;
		var d1 = d * scale1;
		if(region1.rotated) {
			var rect = region1._rect;
			var tx2 = -ty1;
			var c2 = -d1;
			var texture = region1._parent.texture;
			var rx = rect.x;
			var ry = rect.y;
			var rw = rect.width;
			var rh = rect.height;
			if(alpha > 0) {
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				if(texture == null) {
					uvy1 = 0;
					uvx1 = uvy1;
					uvx2 = rw;
					uvy2 = rh;
				} else {
					uvx1 = rx / texture.width;
					uvy1 = ry / texture.height;
					uvx2 = (rx + rw) / texture.width;
					uvy2 = (ry + rh) / texture.height;
				}
				var xa = rw * -b1 + tx2;
				var yb = rw * a1 + tx1;
				var xc = rh * c2 + tx2;
				var yd = rh * c1 + tx1;
				var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth,blend,clipRect,tx2,tx1,xa,yb,xc,yd,flexibleLayer);
				if(alpha > 0) {
					var onScreen;
					var onScreen1;
					var onScreen2;
					var _this = command.visibleArea;
					if((tx2 > xa ? xa > xc ? xc : xa : tx2 > xc ? xc : tx2) <= _this.x + _this.width) {
						onScreen2 = (tx2 < xa ? xa < xc ? xc : xa : tx2 < xc ? xc : tx2) >= command.visibleArea.x;
					} else {
						onScreen2 = false;
					}
					if(onScreen2) {
						var _this1 = command.visibleArea;
						onScreen1 = (tx1 > yb ? yb > yd ? yd : yb : tx1 > yd ? yd : tx1) <= _this1.y + _this1.height;
					} else {
						onScreen1 = false;
					}
					if(onScreen1) {
						onScreen = (tx1 < yb ? yb < yd ? yd : yb : tx1 < yd ? yd : tx1) >= command.visibleArea.y;
					} else {
						onScreen = false;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx2;
						data1.ty1 = tx1;
						data1.uvx1 = uvx1;
						data1.uvy1 = uvy1;
						data1.tx2 = xa;
						data1.ty2 = yb;
						data1.uvx2 = uvx2;
						data1.uvy2 = uvy1;
						data1.tx3 = xc;
						data1.ty3 = yd;
						data1.uvx3 = uvx1;
						data1.uvy3 = uvy2;
						data1.color = color;
						data1.alpha = alpha;
						if(command.data == null) {
							command.data = data1;
						} else {
							command._lastData._next = data1;
						}
						command._lastData = data1;
						++command.triangleCount;
						var a2 = data1.tx1;
						var b2 = data1.tx2;
						var c3 = data1.tx3;
						var x1 = a2 > b2 ? b2 > c3 ? c3 : b2 : a2 > c3 ? c3 : a2;
						var a3 = data1.tx1;
						var b3 = data1.tx2;
						var c4 = data1.tx3;
						var x2 = a3 < b3 ? b3 < c4 ? c4 : b3 : a3 < c4 ? c4 : a3;
						var a4 = data1.ty1;
						var b4 = data1.ty2;
						var c5 = data1.ty3;
						var y1 = a4 > b4 ? b4 > c5 ? c5 : b4 : a4 > c5 ? c5 : a4;
						var a5 = data1.ty1;
						var b5 = data1.ty2;
						var c6 = data1.ty3;
						var y2 = a5 < b5 ? b5 < c6 ? c6 : b5 : a5 < c6 ? c6 : a5;
						if(command.bounds.width == 0) {
							command.bounds.x = x1;
							command.bounds.width = x2 - x1;
						} else {
							if(x1 < command.bounds.x) {
								command.bounds.width += command.bounds.x - x1;
								command.bounds.x = x1;
							}
							var _this2 = command.bounds;
							if(x2 > _this2.x + _this2.width) {
								command.bounds.width = x2 - command.bounds.x;
							}
						}
						if(command.bounds.height == 0) {
							command.bounds.y = y1;
							command.bounds.height = y2 - y1;
						} else {
							if(y1 < command.bounds.y) {
								command.bounds.height += command.bounds.y - y1;
								command.bounds.y = y1;
							}
							var _this3 = command.bounds;
							if(y2 > _this3.y + _this3.height) {
								command.bounds.height = y2 - command.bounds.y;
							}
						}
					}
				}
				var tx3 = xa + rh * c2;
				var ty3 = yb + rh * c1;
				if(alpha > 0) {
					var onScreen3;
					var onScreen4;
					var onScreen5;
					var _this4 = command.visibleArea;
					if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this4.x + _this4.width) {
						onScreen5 = (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x;
					} else {
						onScreen5 = false;
					}
					if(onScreen5) {
						var _this5 = command.visibleArea;
						onScreen4 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this5.y + _this5.height;
					} else {
						onScreen4 = false;
					}
					if(onScreen4) {
						onScreen3 = (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
					} else {
						onScreen3 = false;
					}
					if(onScreen3) {
						var data2;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data2._next = null;
						} else {
							data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data3 = data2;
						data3.tx1 = xc;
						data3.ty1 = yd;
						data3.uvx1 = uvx1;
						data3.uvy1 = uvy2;
						data3.tx2 = xa;
						data3.ty2 = yb;
						data3.uvx2 = uvx2;
						data3.uvy2 = uvy1;
						data3.tx3 = tx3;
						data3.ty3 = ty3;
						data3.uvx3 = uvx2;
						data3.uvy3 = uvy2;
						data3.color = color;
						data3.alpha = alpha;
						if(command.data == null) {
							command.data = data3;
						} else {
							command._lastData._next = data3;
						}
						command._lastData = data3;
						++command.triangleCount;
						var a6 = data3.tx1;
						var b6 = data3.tx2;
						var c7 = data3.tx3;
						var x11 = a6 > b6 ? b6 > c7 ? c7 : b6 : a6 > c7 ? c7 : a6;
						var a7 = data3.tx1;
						var b7 = data3.tx2;
						var c8 = data3.tx3;
						var x21 = a7 < b7 ? b7 < c8 ? c8 : b7 : a7 < c8 ? c8 : a7;
						var a8 = data3.ty1;
						var b8 = data3.ty2;
						var c9 = data3.ty3;
						var y11 = a8 > b8 ? b8 > c9 ? c9 : b8 : a8 > c9 ? c9 : a8;
						var a9 = data3.ty1;
						var b9 = data3.ty2;
						var c10 = data3.ty3;
						var y21 = a9 < b9 ? b9 < c10 ? c10 : b9 : a9 < c10 ? c10 : a9;
						if(command.bounds.width == 0) {
							command.bounds.x = x11;
							command.bounds.width = x21 - x11;
						} else {
							if(x11 < command.bounds.x) {
								command.bounds.width += command.bounds.x - x11;
								command.bounds.x = x11;
							}
							var _this6 = command.bounds;
							if(x21 > _this6.x + _this6.width) {
								command.bounds.width = x21 - command.bounds.x;
							}
						}
						if(command.bounds.height == 0) {
							command.bounds.y = y11;
							command.bounds.height = y21 - y11;
						} else {
							if(y11 < command.bounds.y) {
								command.bounds.height += command.bounds.y - y11;
								command.bounds.y = y11;
							}
							var _this7 = command.bounds;
							if(y21 > _this7.y + _this7.height) {
								command.bounds.height = y21 - command.bounds.y;
							}
						}
					}
				}
			}
		} else {
			var rect1 = region1._rect;
			var texture1 = region1._parent.texture;
			var rx1 = rect1.x;
			var ry1 = rect1.y;
			var rw1 = rect1.width;
			var rh1 = rect1.height;
			if(alpha > 0) {
				var uvx11;
				var uvy11;
				var uvx21;
				var uvy21;
				if(texture1 == null) {
					uvy11 = 0;
					uvx11 = uvy11;
					uvx21 = rw1;
					uvy21 = rh1;
				} else {
					uvx11 = rx1 / texture1.width;
					uvy11 = ry1 / texture1.height;
					uvx21 = (rx1 + rw1) / texture1.width;
					uvy21 = (ry1 + rh1) / texture1.height;
				}
				var xa1 = rw1 * a1 + tx1;
				var yb1 = rw1 * b1 + ty1;
				var xc1 = rh1 * c1 + tx1;
				var yd1 = rh1 * d1 + ty1;
				var command1 = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture1,shader,smooth,blend,clipRect,tx1,ty1,xa1,yb1,xc1,yd1,false);
				if(alpha > 0) {
					var onScreen6;
					var onScreen7;
					var onScreen8;
					var _this8 = command1.visibleArea;
					if((tx1 > xa1 ? xa1 > xc1 ? xc1 : xa1 : tx1 > xc1 ? xc1 : tx1) <= _this8.x + _this8.width) {
						onScreen8 = (tx1 < xa1 ? xa1 < xc1 ? xc1 : xa1 : tx1 < xc1 ? xc1 : tx1) >= command1.visibleArea.x;
					} else {
						onScreen8 = false;
					}
					if(onScreen8) {
						var _this9 = command1.visibleArea;
						onScreen7 = (ty1 > yb1 ? yb1 > yd1 ? yd1 : yb1 : ty1 > yd1 ? yd1 : ty1) <= _this9.y + _this9.height;
					} else {
						onScreen7 = false;
					}
					if(onScreen7) {
						onScreen6 = (ty1 < yb1 ? yb1 < yd1 ? yd1 : yb1 : ty1 < yd1 ? yd1 : ty1) >= command1.visibleArea.y;
					} else {
						onScreen6 = false;
					}
					if(onScreen6) {
						var data4;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data4 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data4._next = null;
						} else {
							data4 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data5 = data4;
						data5.tx1 = tx1;
						data5.ty1 = ty1;
						data5.uvx1 = uvx11;
						data5.uvy1 = uvy11;
						data5.tx2 = xa1;
						data5.ty2 = yb1;
						data5.uvx2 = uvx21;
						data5.uvy2 = uvy11;
						data5.tx3 = xc1;
						data5.ty3 = yd1;
						data5.uvx3 = uvx11;
						data5.uvy3 = uvy21;
						data5.color = color;
						data5.alpha = alpha;
						if(command1.data == null) {
							command1.data = data5;
						} else {
							command1._lastData._next = data5;
						}
						command1._lastData = data5;
						++command1.triangleCount;
						var a10 = data5.tx1;
						var b10 = data5.tx2;
						var c11 = data5.tx3;
						var x12 = a10 > b10 ? b10 > c11 ? c11 : b10 : a10 > c11 ? c11 : a10;
						var a11 = data5.tx1;
						var b11 = data5.tx2;
						var c12 = data5.tx3;
						var x22 = a11 < b11 ? b11 < c12 ? c12 : b11 : a11 < c12 ? c12 : a11;
						var a12 = data5.ty1;
						var b12 = data5.ty2;
						var c13 = data5.ty3;
						var y12 = a12 > b12 ? b12 > c13 ? c13 : b12 : a12 > c13 ? c13 : a12;
						var a13 = data5.ty1;
						var b13 = data5.ty2;
						var c14 = data5.ty3;
						var y22 = a13 < b13 ? b13 < c14 ? c14 : b13 : a13 < c14 ? c14 : a13;
						if(command1.bounds.width == 0) {
							command1.bounds.x = x12;
							command1.bounds.width = x22 - x12;
						} else {
							if(x12 < command1.bounds.x) {
								command1.bounds.width += command1.bounds.x - x12;
								command1.bounds.x = x12;
							}
							var _this10 = command1.bounds;
							if(x22 > _this10.x + _this10.width) {
								command1.bounds.width = x22 - command1.bounds.x;
							}
						}
						if(command1.bounds.height == 0) {
							command1.bounds.y = y12;
							command1.bounds.height = y22 - y12;
						} else {
							if(y12 < command1.bounds.y) {
								command1.bounds.height += command1.bounds.y - y12;
								command1.bounds.y = y12;
							}
							var _this11 = command1.bounds;
							if(y22 > _this11.y + _this11.height) {
								command1.bounds.height = y22 - command1.bounds.y;
							}
						}
					}
				}
				var tx31 = xa1 + rh1 * c1;
				var ty31 = yb1 + rh1 * d1;
				if(alpha > 0) {
					var onScreen9;
					var onScreen10;
					var onScreen11;
					var _this12 = command1.visibleArea;
					if((xc1 > xa1 ? xa1 > tx31 ? tx31 : xa1 : xc1 > tx31 ? tx31 : xc1) <= _this12.x + _this12.width) {
						onScreen11 = (xc1 < xa1 ? xa1 < tx31 ? tx31 : xa1 : xc1 < tx31 ? tx31 : xc1) >= command1.visibleArea.x;
					} else {
						onScreen11 = false;
					}
					if(onScreen11) {
						var _this13 = command1.visibleArea;
						onScreen10 = (yd1 > yb1 ? yb1 > ty31 ? ty31 : yb1 : yd1 > ty31 ? ty31 : yd1) <= _this13.y + _this13.height;
					} else {
						onScreen10 = false;
					}
					if(onScreen10) {
						onScreen9 = (yd1 < yb1 ? yb1 < ty31 ? ty31 : yb1 : yd1 < ty31 ? ty31 : yd1) >= command1.visibleArea.y;
					} else {
						onScreen9 = false;
					}
					if(onScreen9) {
						var data6;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data6 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data6._next = null;
						} else {
							data6 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data7 = data6;
						data7.tx1 = xc1;
						data7.ty1 = yd1;
						data7.uvx1 = uvx11;
						data7.uvy1 = uvy21;
						data7.tx2 = xa1;
						data7.ty2 = yb1;
						data7.uvx2 = uvx21;
						data7.uvy2 = uvy11;
						data7.tx3 = tx31;
						data7.ty3 = ty31;
						data7.uvx3 = uvx21;
						data7.uvy3 = uvy21;
						data7.color = color;
						data7.alpha = alpha;
						if(command1.data == null) {
							command1.data = data7;
						} else {
							command1._lastData._next = data7;
						}
						command1._lastData = data7;
						++command1.triangleCount;
						var a14 = data7.tx1;
						var b14 = data7.tx2;
						var c15 = data7.tx3;
						var x13 = a14 > b14 ? b14 > c15 ? c15 : b14 : a14 > c15 ? c15 : a14;
						var a15 = data7.tx1;
						var b15 = data7.tx2;
						var c16 = data7.tx3;
						var x23 = a15 < b15 ? b15 < c16 ? c16 : b15 : a15 < c16 ? c16 : a15;
						var a16 = data7.ty1;
						var b16 = data7.ty2;
						var c17 = data7.ty3;
						var y13 = a16 > b16 ? b16 > c17 ? c17 : b16 : a16 > c17 ? c17 : a16;
						var a17 = data7.ty1;
						var b17 = data7.ty2;
						var c18 = data7.ty3;
						var y23 = a17 < b17 ? b17 < c18 ? c18 : b17 : a17 < c18 ? c18 : a17;
						if(command1.bounds.width == 0) {
							command1.bounds.x = x13;
							command1.bounds.width = x23 - x13;
						} else {
							if(x13 < command1.bounds.x) {
								command1.bounds.width += command1.bounds.x - x13;
								command1.bounds.x = x13;
							}
							var _this14 = command1.bounds;
							if(x23 > _this14.x + _this14.width) {
								command1.bounds.width = x23 - command1.bounds.x;
							}
						}
						if(command1.bounds.height == 0) {
							command1.bounds.y = y13;
							command1.bounds.height = y23 - y13;
						} else {
							if(y13 < command1.bounds.y) {
								command1.bounds.height += command1.bounds.y - y13;
								command1.bounds.y = y13;
							}
							var _this15 = command1.bounds;
							if(y23 > _this15.y + _this15.height) {
								command1.bounds.height = y23 - command1.bounds.y;
							}
						}
					}
				}
			}
		}
	}
	,clip: function(clipRect,center) {
		var clippedRegions = [];
		clippedRegions.push(this.base.clip(clipRect,center));
		var _g = 0;
		var _g1 = this.regions;
		while(_g < _g1.length) {
			var region = _g1[_g];
			++_g;
			if(region == this.base) {
				continue;
			}
			var scale = (region._rect.width | 0) / (this.base._rect.width | 0);
			haxepunk_graphics_atlas_AtlasResolutions._rect.setTo(clipRect.x * scale,clipRect.y * scale,clipRect.width * scale,clipRect.height * scale);
			if(center != null) {
				var _this = haxepunk_graphics_atlas_AtlasResolutions._point;
				_this.x = center.x * scale;
				_this.y = center.y * scale;
			}
			clippedRegions.push(region.clip(haxepunk_graphics_atlas_AtlasResolutions._rect,center == null ? null : haxepunk_graphics_atlas_AtlasResolutions._point));
		}
		return new haxepunk_graphics_atlas_AtlasResolutions(clippedRegions);
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.regions;
		while(_g < _g1.length) {
			var region = _g1[_g];
			++_g;
			region.destroy();
		}
	}
	,toString: function() {
		return "[AtlasResolutions for " + ("[AtlasRegion " + Std.string(this.base._rect) + "]") + " x " + this.regions.length + " resolutions]";
	}
	,regionForScale: function(currentScale) {
		var best = this.base;
		var _g = 0;
		var _g1 = this.regions;
		while(_g < _g1.length) {
			var region = _g1[_g];
			++_g;
			best = region;
			var scale = (region._rect.width | 0) / (this.base._rect.width | 0);
			if(scale > currentScale) {
				break;
			}
		}
		return best;
	}
	,__class__: haxepunk_graphics_atlas_AtlasResolutions
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var haxepunk_graphics_atlas_TextureAtlas = function(source) {
	this._regions = new haxe_ds_StringMap();
	haxepunk_graphics_atlas_Atlas.call(this,source);
	if(source == null) {
		this._pages = new haxe_ds_StringMap();
	}
};
$hxClasses["haxepunk.graphics.atlas.TextureAtlas"] = haxepunk_graphics_atlas_TextureAtlas;
haxepunk_graphics_atlas_TextureAtlas.__name__ = ["haxepunk","graphics","atlas","TextureAtlas"];
haxepunk_graphics_atlas_TextureAtlas.loadTexturePacker = function(file) {
	var xml = Xml.parse(haxepunk_backend_flash_AssetLoader.getText(file));
	var root = xml.firstElement();
	var s = root.get("imagePath");
	var data = null;
	if(haxepunk_graphics_atlas_AtlasData._dataPool.exists(s)) {
		data = haxepunk_graphics_atlas_AtlasData._dataPool.get(s);
	} else {
		var texture = haxepunk_assets_AssetCache.global.getTexture(s);
		if(texture != null) {
			data = new haxepunk_graphics_atlas_AtlasData(texture,s);
		}
	}
	var this1 = data;
	var atlas = new haxepunk_graphics_atlas_TextureAtlas(this1);
	var sprite = root.elements();
	while(sprite.hasNext()) {
		var sprite1 = sprite.next();
		var tmp = sprite1.get("x");
		haxepunk_HXP.rect.x = Std.parseInt(tmp);
		var tmp1 = sprite1.get("y");
		haxepunk_HXP.rect.y = Std.parseInt(tmp1);
		if(sprite1.exists("w")) {
			var tmp2 = sprite1.get("w");
			haxepunk_HXP.rect.width = Std.parseInt(tmp2);
		} else if(sprite1.exists("width")) {
			var tmp3 = sprite1.get("width");
			haxepunk_HXP.rect.width = Std.parseInt(tmp3);
		}
		if(sprite1.exists("h")) {
			var tmp4 = sprite1.get("h");
			haxepunk_HXP.rect.height = Std.parseInt(tmp4);
		} else if(sprite1.exists("height")) {
			var tmp5 = sprite1.get("height");
			haxepunk_HXP.rect.height = Std.parseInt(tmp5);
		}
		var name;
		if(sprite1.exists("n")) {
			name = sprite1.get("n");
		} else if(sprite1.exists("name")) {
			name = sprite1.get("name");
		} else {
			throw new js__$Boot_HaxeError("Unable to find the region's name.");
		}
		var region = atlas.defineRegion(name,haxepunk_HXP.rect);
		if(sprite1.exists("r") && sprite1.get("r") == "y") {
			region.rotated = true;
		}
	}
	return atlas;
};
haxepunk_graphics_atlas_TextureAtlas.loadGdxTexturePacker = function(file) {
	return haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker.load(file);
};
haxepunk_graphics_atlas_TextureAtlas.__super__ = haxepunk_graphics_atlas_Atlas;
haxepunk_graphics_atlas_TextureAtlas.prototype = $extend(haxepunk_graphics_atlas_Atlas.prototype,{
	getRegion: function(name) {
		var _this = this._regions;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._regions;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		}
		throw new js__$Boot_HaxeError("Region has not been defined yet \"" + name + "\".");
	}
	,defineRegion: function(name,rect,center,page) {
		var data;
		if(this._pages == null) {
			data = this._data;
		} else {
			var _this = this._pages;
			if(__map_reserved[page] != null) {
				data = _this.getReserved(page);
			} else {
				data = _this.h[page];
			}
		}
		var region = new haxepunk_graphics_atlas_AtlasRegion(data,rect.clone());
		var _this1 = this._regions;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,region);
		} else {
			_this1.h[name] = region;
		}
		return region;
	}
	,_regions: null
	,_pages: null
	,__class__: haxepunk_graphics_atlas_TextureAtlas
});
var haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker = function() { };
$hxClasses["haxepunk.graphics.atlas._TextureAtlas.GdxTexturePacker"] = haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker;
haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker.__name__ = ["haxepunk","graphics","atlas","_TextureAtlas","GdxTexturePacker"];
haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker.load = function(file) {
	var data = haxepunk_backend_flash_AssetLoader.getText(file);
	var inputDir = haxe_io_Path.directory(file);
	var atlas = new haxepunk_graphics_atlas_TextureAtlas();
	var reader = new haxe_io_StringInput(data);
	var page;
	var pageName;
	var extension;
	while(true) {
		var line = null;
		try {
			line = reader.readLine();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,haxe_io_Eof) ) {
				break;
			} else throw(e);
		}
		if(line == null) {
			break;
		}
		line = StringTools.trim(line);
		if(line.length == 0) {
			continue;
		}
		pageName = line;
		extension = haxe_io_Path.extension(pageName);
		var name = haxe_io_Path.join([inputDir,pageName]);
		var data1 = null;
		if(haxepunk_graphics_atlas_AtlasData._dataPool.exists(name)) {
			data1 = haxepunk_graphics_atlas_AtlasData._dataPool.get(name);
		} else {
			var texture = haxepunk_assets_AssetCache.global.getTexture(name);
			if(texture != null) {
				data1 = new haxepunk_graphics_atlas_AtlasData(texture,name);
			}
		}
		page = data1;
		var _this = atlas._pages;
		if(__map_reserved[pageName] != null) {
			_this.setReserved(pageName,page);
		} else {
			_this.h[pageName] = page;
		}
		var line1 = "";
		while(true) {
			try {
				line1 = reader.readLine();
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
				if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
				if( js_Boot.__instanceof(e1,haxe_io_Eof) ) {
					break;
				} else throw(e1);
			}
			if(line1.indexOf(":") == -1) {
				break;
			}
			var value_name;
			var parts = line1.split(":");
			value_name = StringTools.trim(parts[0]);
			var value_value = StringTools.trim(parts[1]);
			var _g = value_name;
			switch(_g) {
			case "filter":
				break;
			case "format":
				break;
			case "repeat":
				break;
			case "size":
				break;
			}
		}
		while(line1 != "") {
			var regionName = line1;
			try {
				line1 = reader.readLine();
			} catch( e2 ) {
				haxe_CallStack.lastException = e2;
				if (e2 instanceof js__$Boot_HaxeError) e2 = e2.val;
				if( js_Boot.__instanceof(e2,haxe_io_Eof) ) {
					break;
				} else throw(e2);
			}
			var values = new haxe_ds_StringMap();
			while(line1.indexOf(":") > -1) {
				var value_value1;
				var value_name1;
				var parts1 = line1.split(":");
				value_name1 = StringTools.trim(parts1[0]);
				value_value1 = StringTools.trim(parts1[1]);
				var k = value_name1;
				var v = value_value1;
				if(__map_reserved[k] != null) {
					values.setReserved(k,v);
				} else {
					values.h[k] = v;
				}
				try {
					line1 = reader.readLine();
				} catch( e3 ) {
					haxe_CallStack.lastException = e3;
					if (e3 instanceof js__$Boot_HaxeError) e3 = e3.val;
					if( js_Boot.__instanceof(e3,haxe_io_Eof) ) {
						break;
					} else throw(e3);
				}
			}
			var _g1 = [];
			var _g11 = 0;
			var _g2 = [];
			var _g12 = 0;
			var _g21 = (__map_reserved["xy"] != null ? values.getReserved("xy") : values.h["xy"]).split(",");
			while(_g12 < _g21.length) {
				var v1 = _g21[_g12];
				++_g12;
				_g2.push(StringTools.trim(v1));
			}
			var values1 = _g2;
			var _g22 = values1;
			while(_g11 < _g22.length) {
				var x = _g22[_g11];
				++_g11;
				_g1.push(Std.parseInt(x));
			}
			var xy = _g1;
			var _g13 = [];
			var _g23 = 0;
			var _g3 = [];
			var _g14 = 0;
			var _g24 = (__map_reserved["size"] != null ? values.getReserved("size") : values.h["size"]).split(",");
			while(_g14 < _g24.length) {
				var v2 = _g24[_g14];
				++_g14;
				_g3.push(StringTools.trim(v2));
			}
			var values2 = _g3;
			var _g31 = values2;
			while(_g23 < _g31.length) {
				var x1 = _g31[_g23];
				++_g23;
				_g13.push(Std.parseInt(x1));
			}
			var size = _g13;
			var rotate = (__map_reserved["rotate"] != null ? values.getReserved("rotate") : values.h["rotate"]) == "true" ? -90 : 0;
			var r = rotate != 0 ? new haxepunk_math_Rectangle(xy[0],xy[1],size[1],size[0]) : new haxepunk_math_Rectangle(xy[0],xy[1],size[0],size[1]);
			var path = haxe_io_Path.join([inputDir,regionName + "." + extension]);
			atlas.defineRegion(path,r,null,pageName);
		}
	}
	return atlas;
};
haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker.getValue = function(line) {
	var parts = line.split(":");
	return { name : StringTools.trim(parts[0]), value : StringTools.trim(parts[1])};
};
haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker.getTuple = function(value) {
	var _g = [];
	var _g1 = 0;
	var _g2 = value.split(",");
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		_g.push(StringTools.trim(v));
	}
	var values = _g;
	return values;
};
var haxepunk_graphics_atlas_TileAtlas = function(source,tileWidth,tileHeight,tileMarginWidth,tileMarginHeight) {
	if(tileMarginHeight == null) {
		tileMarginHeight = 0;
	}
	if(tileMarginWidth == null) {
		tileMarginWidth = 0;
	}
	this._tileMarginHeight = 0;
	this._tileMarginWidth = 0;
	this._tileHeight = 0;
	this._tileWidth = 0;
	haxepunk_graphics_atlas_Atlas.call(this,source);
	this._regions = [];
	if(tileWidth != null && tileHeight != null) {
		this.prepare(tileWidth,tileHeight,tileMarginWidth,tileMarginHeight);
	}
};
$hxClasses["haxepunk.graphics.atlas.TileAtlas"] = haxepunk_graphics_atlas_TileAtlas;
haxepunk_graphics_atlas_TileAtlas.__name__ = ["haxepunk","graphics","atlas","TileAtlas"];
haxepunk_graphics_atlas_TileAtlas.loadFromTextureAtlas = function(textureAtlas,regions) {
	var this1 = textureAtlas._data;
	var atlas = new haxepunk_graphics_atlas_TileAtlas(this1);
	var _g = 0;
	while(_g < regions.length) {
		var spriteName = regions[_g];
		++_g;
		var region;
		if(textureAtlas._regions.exists(spriteName)) {
			region = textureAtlas._regions.get(spriteName);
		} else {
			throw new js__$Boot_HaxeError("Region has not been defined yet \"" + spriteName + "\".");
		}
		atlas._regions.push(region);
	}
	var region1 = atlas._regions[0];
	atlas._tileWidth = region1._rect.width | 0;
	atlas._tileHeight = region1._rect.height | 0;
	return atlas;
};
haxepunk_graphics_atlas_TileAtlas.loadFromAtlasRegion = function(region,tileWidth,tileHeight,tileMarginWidth,tileMarginHeight) {
	if(tileMarginHeight == null) {
		tileMarginHeight = 0;
	}
	if(tileMarginWidth == null) {
		tileMarginWidth = 0;
	}
	var this1 = region._parent;
	var atlas = new haxepunk_graphics_atlas_TileAtlas(this1);
	atlas._tileWidth = tileWidth;
	atlas._tileHeight = tileHeight;
	atlas._tileMarginWidth = tileMarginWidth;
	atlas._tileMarginHeight = tileMarginHeight;
	var cols = Math.floor((region._rect.width | 0) / tileWidth);
	var rows = Math.floor((region._rect.height | 0) / tileHeight);
	haxepunk_HXP.rect.width = tileWidth;
	haxepunk_HXP.rect.height = tileHeight;
	haxepunk_HXP.point.x = haxepunk_HXP.point.y = 0;
	var _g1 = 0;
	var _g = rows;
	while(_g1 < _g) {
		var y = _g1++;
		haxepunk_HXP.rect.y = y * (tileHeight + tileMarginHeight);
		var _g3 = 0;
		var _g2 = cols;
		while(_g3 < _g2) {
			var x = _g3++;
			haxepunk_HXP.rect.x = x * (tileWidth + tileMarginWidth);
			var r = region.clip(haxepunk_HXP.rect,haxepunk_HXP.point);
			atlas._regions.push(r);
		}
	}
	return atlas;
};
haxepunk_graphics_atlas_TileAtlas.__super__ = haxepunk_graphics_atlas_Atlas;
haxepunk_graphics_atlas_TileAtlas.prototype = $extend(haxepunk_graphics_atlas_Atlas.prototype,{
	get_tileCount: function() {
		return this._regions.length;
	}
	,get_tileWidth: function() {
		return this._tileWidth;
	}
	,get_tileHeight: function() {
		return this._tileHeight;
	}
	,get_tileMarginWidth: function() {
		return this._tileMarginWidth;
	}
	,get_tileMarginHeight: function() {
		return this._tileMarginHeight;
	}
	,getRegion: function(index) {
		if(index >= this._regions.length) {
			throw new js__$Boot_HaxeError("Atlas doesn't have a region number \"" + index + "\"");
		}
		return this._regions[index];
	}
	,prepare: function(tileWidth,tileHeight,tileMarginWidth,tileMarginHeight) {
		if(tileMarginHeight == null) {
			tileMarginHeight = 0;
		}
		if(tileMarginWidth == null) {
			tileMarginWidth = 0;
		}
		if(this._regions.length > 0) {
			return;
		}
		this._tileWidth = tileWidth;
		this._tileHeight = tileHeight;
		this._tileMarginWidth = tileMarginWidth;
		this._tileMarginHeight = tileMarginHeight;
		var cols = Math.floor(this._data.width / tileWidth);
		var rows = Math.floor(this._data.height / tileHeight);
		haxepunk_HXP.rect.width = tileWidth;
		haxepunk_HXP.rect.height = tileHeight;
		haxepunk_HXP.point.x = haxepunk_HXP.point.y = 0;
		var _g1 = 0;
		var _g = rows;
		while(_g1 < _g) {
			var y = _g1++;
			haxepunk_HXP.rect.y = y * (tileHeight + tileMarginHeight);
			var _g3 = 0;
			var _g2 = cols;
			while(_g3 < _g2) {
				var x = _g3++;
				haxepunk_HXP.rect.x = x * (tileWidth + tileMarginWidth);
				var center = haxepunk_HXP.point;
				this._regions.push(new haxepunk_graphics_atlas_AtlasRegion(this._data,haxepunk_HXP.rect.clone()));
			}
		}
	}
	,_regions: null
	,_tileWidth: null
	,_tileHeight: null
	,_tileMarginWidth: null
	,_tileMarginHeight: null
	,__class__: haxepunk_graphics_atlas_TileAtlas
	,__properties__: $extend(haxepunk_graphics_atlas_Atlas.prototype.__properties__,{get_tileMarginHeight:"get_tileMarginHeight",get_tileMarginWidth:"get_tileMarginWidth",get_tileHeight:"get_tileHeight",get_tileWidth:"get_tileWidth",get_tileCount:"get_tileCount"})
});
var haxepunk_graphics_hardware__$DrawCommand_DrawTriangle = function() {
	this.alpha = 0;
	this.color = 0;
	this.uvy3 = 0;
	this.uvx3 = 0;
	this.ty3 = 0;
	this.tx3 = 0;
	this.uvy2 = 0;
	this.uvx2 = 0;
	this.ty2 = 0;
	this.tx2 = 0;
	this.uvy1 = 0;
	this.uvx1 = 0;
	this.ty1 = 0;
	this.tx1 = 0;
};
$hxClasses["haxepunk.graphics.hardware._DrawCommand.DrawTriangle"] = haxepunk_graphics_hardware__$DrawCommand_DrawTriangle;
haxepunk_graphics_hardware__$DrawCommand_DrawTriangle.__name__ = ["haxepunk","graphics","hardware","_DrawCommand","DrawTriangle"];
haxepunk_graphics_hardware__$DrawCommand_DrawTriangle.linesIntersect = function(x11,y11,x12,y12,x21,y21,x22,y22) {
	var d = (y22 - y21) * (x12 - x11) - (x22 - x21) * (y12 - y11);
	if(d != 0) {
		var ua = ((x22 - x21) * (y11 - y21) - (y22 - y21) * (x11 - x21)) / d;
		var ub = ((x12 - x11) * (y11 - y21) - (y12 - y11) * (x11 - x21)) / d;
		if(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
			d = 0;
		}
	}
	return d == 0;
};
haxepunk_graphics_hardware__$DrawCommand_DrawTriangle.triangleContains = function(x1,y1,x2,y2,x3,y3,px,py) {
	var v0x = x3 - x1;
	var v0y = y3 - y1;
	var v1x = x2 - x1;
	var v1y = y2 - y1;
	var v2x = px - x1;
	var v2y = py - y1;
	var u = v2x * v0y - v2y * v0x;
	var v = v1x * v2y - v1y * v2x;
	var d = v1x * v0y - v1y * v0x;
	if(d < 0) {
		u = -u;
		v = -v;
		d = -d;
	}
	if(u >= 0 && v >= 0) {
		return u + v <= d;
	} else {
		return false;
	}
};
haxepunk_graphics_hardware__$DrawCommand_DrawTriangle.cross = function(ux,uy,vx,vy) {
	return ux * vy - uy * vx;
};
haxepunk_graphics_hardware__$DrawCommand_DrawTriangle.prototype = {
	tx1: null
	,ty1: null
	,uvx1: null
	,uvy1: null
	,tx2: null
	,ty2: null
	,uvx2: null
	,uvy2: null
	,tx3: null
	,ty3: null
	,uvx3: null
	,uvy3: null
	,color: null
	,alpha: null
	,get_x1: function() {
		var a = this.tx1;
		var b = this.tx2;
		var c = this.tx3;
		if(a > b) {
			if(b > c) {
				return c;
			} else {
				return b;
			}
		} else if(a > c) {
			return c;
		} else {
			return a;
		}
	}
	,get_x2: function() {
		var a = this.tx1;
		var b = this.tx2;
		var c = this.tx3;
		if(a < b) {
			if(b < c) {
				return c;
			} else {
				return b;
			}
		} else if(a < c) {
			return c;
		} else {
			return a;
		}
	}
	,get_y1: function() {
		var a = this.ty1;
		var b = this.ty2;
		var c = this.ty3;
		if(a > b) {
			if(b > c) {
				return c;
			} else {
				return b;
			}
		} else if(a > c) {
			return c;
		} else {
			return a;
		}
	}
	,get_y2: function() {
		var a = this.ty1;
		var b = this.ty2;
		var c = this.ty3;
		if(a < b) {
			if(b < c) {
				return c;
			} else {
				return b;
			}
		} else if(a < c) {
			return c;
		} else {
			return a;
		}
	}
	,intersectsTriangle: function(x1,y1,x2,y2,x3,y3) {
		var tmp;
		var tmp1;
		var tmp2;
		var tmp3;
		var tmp4;
		var tmp5;
		var tmp6;
		var tmp7;
		var tmp8;
		var tmp9;
		var tmp10;
		var tmp11;
		var tmp12;
		var x21 = this.tx1;
		var y21 = this.ty1;
		var x22 = this.tx2;
		var y22 = this.ty2;
		var d = (y22 - y21) * (x2 - x1) - (x22 - x21) * (y2 - y1);
		if(d != 0) {
			var ua = ((x22 - x21) * (y1 - y21) - (y22 - y21) * (x1 - x21)) / d;
			var ub = ((x2 - x1) * (y1 - y21) - (y2 - y1) * (x1 - x21)) / d;
			if(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
				d = 0;
			}
		}
		if(d != 0) {
			var x211 = this.tx1;
			var y211 = this.ty1;
			var x221 = this.tx2;
			var y221 = this.ty2;
			var d1 = (y221 - y211) * (x3 - x2) - (x221 - x211) * (y3 - y2);
			if(d1 != 0) {
				var ua1 = ((x221 - x211) * (y2 - y211) - (y221 - y211) * (x2 - x211)) / d1;
				var ub1 = ((x3 - x2) * (y2 - y211) - (y3 - y2) * (x2 - x211)) / d1;
				if(ua1 >= 0 && ua1 <= 1 && ub1 >= 0 && ub1 <= 1) {
					d1 = 0;
				}
			}
			tmp12 = d1 == 0;
		} else {
			tmp12 = true;
		}
		if(!tmp12) {
			var x212 = this.tx1;
			var y212 = this.ty1;
			var x222 = this.tx2;
			var y222 = this.ty2;
			var d2 = (y222 - y212) * (x3 - x1) - (x222 - x212) * (y3 - y1);
			if(d2 != 0) {
				var ua2 = ((x222 - x212) * (y1 - y212) - (y222 - y212) * (x1 - x212)) / d2;
				var ub2 = ((x3 - x1) * (y1 - y212) - (y3 - y1) * (x1 - x212)) / d2;
				if(ua2 >= 0 && ua2 <= 1 && ub2 >= 0 && ub2 <= 1) {
					d2 = 0;
				}
			}
			tmp11 = d2 == 0;
		} else {
			tmp11 = true;
		}
		if(!tmp11) {
			var x213 = this.tx2;
			var y213 = this.ty2;
			var x223 = this.tx3;
			var y223 = this.ty3;
			var d3 = (y223 - y213) * (x2 - x1) - (x223 - x213) * (y2 - y1);
			if(d3 != 0) {
				var ua3 = ((x223 - x213) * (y1 - y213) - (y223 - y213) * (x1 - x213)) / d3;
				var ub3 = ((x2 - x1) * (y1 - y213) - (y2 - y1) * (x1 - x213)) / d3;
				if(ua3 >= 0 && ua3 <= 1 && ub3 >= 0 && ub3 <= 1) {
					d3 = 0;
				}
			}
			tmp10 = d3 == 0;
		} else {
			tmp10 = true;
		}
		if(!tmp10) {
			var x214 = this.tx2;
			var y214 = this.ty2;
			var x224 = this.tx3;
			var y224 = this.ty3;
			var d4 = (y224 - y214) * (x3 - x2) - (x224 - x214) * (y3 - y2);
			if(d4 != 0) {
				var ua4 = ((x224 - x214) * (y2 - y214) - (y224 - y214) * (x2 - x214)) / d4;
				var ub4 = ((x3 - x2) * (y2 - y214) - (y3 - y2) * (x2 - x214)) / d4;
				if(ua4 >= 0 && ua4 <= 1 && ub4 >= 0 && ub4 <= 1) {
					d4 = 0;
				}
			}
			tmp9 = d4 == 0;
		} else {
			tmp9 = true;
		}
		if(!tmp9) {
			var x215 = this.tx2;
			var y215 = this.ty2;
			var x225 = this.tx3;
			var y225 = this.ty3;
			var d5 = (y225 - y215) * (x3 - x1) - (x225 - x215) * (y3 - y1);
			if(d5 != 0) {
				var ua5 = ((x225 - x215) * (y1 - y215) - (y225 - y215) * (x1 - x215)) / d5;
				var ub5 = ((x3 - x1) * (y1 - y215) - (y3 - y1) * (x1 - x215)) / d5;
				if(ua5 >= 0 && ua5 <= 1 && ub5 >= 0 && ub5 <= 1) {
					d5 = 0;
				}
			}
			tmp8 = d5 == 0;
		} else {
			tmp8 = true;
		}
		if(!tmp8) {
			var x216 = this.tx1;
			var y216 = this.ty1;
			var x226 = this.tx3;
			var y226 = this.ty3;
			var d6 = (y226 - y216) * (x2 - x1) - (x226 - x216) * (y2 - y1);
			if(d6 != 0) {
				var ua6 = ((x226 - x216) * (y1 - y216) - (y226 - y216) * (x1 - x216)) / d6;
				var ub6 = ((x2 - x1) * (y1 - y216) - (y2 - y1) * (x1 - x216)) / d6;
				if(ua6 >= 0 && ua6 <= 1 && ub6 >= 0 && ub6 <= 1) {
					d6 = 0;
				}
			}
			tmp7 = d6 == 0;
		} else {
			tmp7 = true;
		}
		if(!tmp7) {
			var x217 = this.tx1;
			var y217 = this.ty1;
			var x227 = this.tx3;
			var y227 = this.ty3;
			var d7 = (y227 - y217) * (x3 - x2) - (x227 - x217) * (y3 - y2);
			if(d7 != 0) {
				var ua7 = ((x227 - x217) * (y2 - y217) - (y227 - y217) * (x2 - x217)) / d7;
				var ub7 = ((x3 - x2) * (y2 - y217) - (y3 - y2) * (x2 - x217)) / d7;
				if(ua7 >= 0 && ua7 <= 1 && ub7 >= 0 && ub7 <= 1) {
					d7 = 0;
				}
			}
			tmp6 = d7 == 0;
		} else {
			tmp6 = true;
		}
		if(!tmp6) {
			var x218 = this.tx1;
			var y218 = this.ty1;
			var x228 = this.tx3;
			var y228 = this.ty3;
			var d8 = (y228 - y218) * (x3 - x1) - (x228 - x218) * (y3 - y1);
			if(d8 != 0) {
				var ua8 = ((x228 - x218) * (y1 - y218) - (y228 - y218) * (x1 - x218)) / d8;
				var ub8 = ((x3 - x1) * (y1 - y218) - (y3 - y1) * (x1 - x218)) / d8;
				if(ua8 >= 0 && ua8 <= 1 && ub8 >= 0 && ub8 <= 1) {
					d8 = 0;
				}
			}
			tmp5 = d8 == 0;
		} else {
			tmp5 = true;
		}
		if(!tmp5) {
			var v0x = x3 - x1;
			var v0y = y3 - y1;
			var v1x = x2 - x1;
			var v1y = y2 - y1;
			var v2x = this.tx1 - x1;
			var v2y = this.ty1 - y1;
			var u = v2x * v0y - v2y * v0x;
			var v = v1x * v2y - v1y * v2x;
			var d9 = v1x * v0y - v1y * v0x;
			if(d9 < 0) {
				u = -u;
				v = -v;
				d9 = -d9;
			}
			if(u >= 0 && v >= 0) {
				tmp4 = u + v <= d9;
			} else {
				tmp4 = false;
			}
		} else {
			tmp4 = true;
		}
		if(!tmp4) {
			var v0x1 = x3 - x1;
			var v0y1 = y3 - y1;
			var v1x1 = x2 - x1;
			var v1y1 = y2 - y1;
			var v2x1 = this.tx2 - x1;
			var v2y1 = this.ty2 - y1;
			var u1 = v2x1 * v0y1 - v2y1 * v0x1;
			var v1 = v1x1 * v2y1 - v1y1 * v2x1;
			var d10 = v1x1 * v0y1 - v1y1 * v0x1;
			if(d10 < 0) {
				u1 = -u1;
				v1 = -v1;
				d10 = -d10;
			}
			if(u1 >= 0 && v1 >= 0) {
				tmp3 = u1 + v1 <= d10;
			} else {
				tmp3 = false;
			}
		} else {
			tmp3 = true;
		}
		if(!tmp3) {
			var v0x2 = x3 - x1;
			var v0y2 = y3 - y1;
			var v1x2 = x2 - x1;
			var v1y2 = y2 - y1;
			var v2x2 = this.tx3 - x1;
			var v2y2 = this.ty3 - y1;
			var u2 = v2x2 * v0y2 - v2y2 * v0x2;
			var v2 = v1x2 * v2y2 - v1y2 * v2x2;
			var d11 = v1x2 * v0y2 - v1y2 * v0x2;
			if(d11 < 0) {
				u2 = -u2;
				v2 = -v2;
				d11 = -d11;
			}
			if(u2 >= 0 && v2 >= 0) {
				tmp2 = u2 + v2 <= d11;
			} else {
				tmp2 = false;
			}
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			var x11 = this.tx1;
			var y11 = this.ty1;
			var v0x3 = this.tx3 - x11;
			var v0y3 = this.ty3 - y11;
			var v1x3 = this.tx2 - x11;
			var v1y3 = this.ty2 - y11;
			var v2x3 = x1 - x11;
			var v2y3 = y1 - y11;
			var u3 = v2x3 * v0y3 - v2y3 * v0x3;
			var v3 = v1x3 * v2y3 - v1y3 * v2x3;
			var d12 = v1x3 * v0y3 - v1y3 * v0x3;
			if(d12 < 0) {
				u3 = -u3;
				v3 = -v3;
				d12 = -d12;
			}
			if(u3 >= 0 && v3 >= 0) {
				tmp1 = u3 + v3 <= d12;
			} else {
				tmp1 = false;
			}
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			var x12 = this.tx1;
			var y12 = this.ty1;
			var v0x4 = this.tx3 - x12;
			var v0y4 = this.ty3 - y12;
			var v1x4 = this.tx2 - x12;
			var v1y4 = this.ty2 - y12;
			var v2x4 = x2 - x12;
			var v2y4 = y2 - y12;
			var u4 = v2x4 * v0y4 - v2y4 * v0x4;
			var v4 = v1x4 * v2y4 - v1y4 * v2x4;
			var d13 = v1x4 * v0y4 - v1y4 * v0x4;
			if(d13 < 0) {
				u4 = -u4;
				v4 = -v4;
				d13 = -d13;
			}
			if(u4 >= 0 && v4 >= 0) {
				tmp = u4 + v4 <= d13;
			} else {
				tmp = false;
			}
		} else {
			tmp = true;
		}
		if(!tmp) {
			var x13 = this.tx1;
			var y13 = this.ty1;
			var v0x5 = this.tx3 - x13;
			var v0y5 = this.ty3 - y13;
			var v1x5 = this.tx2 - x13;
			var v1y5 = this.ty2 - y13;
			var v2x5 = x3 - x13;
			var v2y5 = y3 - y13;
			var u5 = v2x5 * v0y5 - v2y5 * v0x5;
			var v5 = v1x5 * v2y5 - v1y5 * v2x5;
			var d14 = v1x5 * v0y5 - v1y5 * v0x5;
			if(d14 < 0) {
				u5 = -u5;
				v5 = -v5;
				d14 = -d14;
			}
			if(u5 >= 0 && v5 >= 0) {
				return u5 + v5 <= d14;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,_next: null
	,__class__: haxepunk_graphics_hardware__$DrawCommand_DrawTriangle
	,__properties__: {get_y2:"get_y2",get_y1:"get_y1",get_x2:"get_x2",get_x1:"get_x1"}
};
var haxepunk_graphics_hardware_TriangleIterator = function() {
	this.triangle = null;
};
$hxClasses["haxepunk.graphics.hardware.TriangleIterator"] = haxepunk_graphics_hardware_TriangleIterator;
haxepunk_graphics_hardware_TriangleIterator.__name__ = ["haxepunk","graphics","hardware","TriangleIterator"];
haxepunk_graphics_hardware_TriangleIterator.prototype = {
	triangle: null
	,reset: function(triangle) {
		this.triangle = triangle;
	}
	,hasNext: function() {
		return this.triangle != null;
	}
	,next: function() {
		var current = this.triangle;
		this.triangle = this.triangle._next;
		return current;
	}
	,__class__: haxepunk_graphics_hardware_TriangleIterator
};
var haxepunk_graphics_hardware_DrawCommand = function() {
	this._iterator = new haxepunk_graphics_hardware_TriangleIterator();
	this.triangleCount = 0;
	this.bounds = new haxepunk_math_Rectangle();
	this.clipRect = null;
	this.blend = 1;
	this.smooth = false;
};
$hxClasses["haxepunk.graphics.hardware.DrawCommand"] = haxepunk_graphics_hardware_DrawCommand;
haxepunk_graphics_hardware_DrawCommand.__name__ = ["haxepunk","graphics","hardware","DrawCommand"];
haxepunk_graphics_hardware_DrawCommand.create = function(texture,shader,smooth,blend,clipRect) {
	var command;
	if(haxepunk_graphics_hardware_DrawCommand._pool != null) {
		command = haxepunk_graphics_hardware_DrawCommand._pool;
		haxepunk_graphics_hardware_DrawCommand._pool = haxepunk_graphics_hardware_DrawCommand._pool._next;
		command._prev = command._next = null;
	} else {
		command = new haxepunk_graphics_hardware_DrawCommand();
	}
	command.shader = shader;
	command.texture = texture;
	command.smooth = smooth;
	command.blend = blend;
	command.clipRect = clipRect;
	return command;
};
haxepunk_graphics_hardware_DrawCommand._prePopulatePool = function(n,m) {
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		var cmd = new haxepunk_graphics_hardware_DrawCommand();
		var _g3 = 0;
		var _g2 = m;
		while(_g3 < _g2) {
			var i1 = _g3++;
			var data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
			if(cmd.data == null) {
				cmd.data = data;
			} else {
				cmd._lastData._next = data;
			}
			cmd._lastData = data;
			++cmd.triangleCount;
			var a = data.tx1;
			var b = data.tx2;
			var c = data.tx3;
			var x1 = a > b ? b > c ? c : b : a > c ? c : a;
			var a1 = data.tx1;
			var b1 = data.tx2;
			var c1 = data.tx3;
			var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
			var a2 = data.ty1;
			var b2 = data.ty2;
			var c2 = data.ty3;
			var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
			var a3 = data.ty1;
			var b3 = data.ty2;
			var c3 = data.ty3;
			var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
			if(cmd.bounds.width == 0) {
				cmd.bounds.x = x1;
				cmd.bounds.width = x2 - x1;
			} else {
				if(x1 < cmd.bounds.x) {
					cmd.bounds.width += cmd.bounds.x - x1;
					cmd.bounds.x = x1;
				}
				var _this = cmd.bounds;
				if(x2 > _this.x + _this.width) {
					cmd.bounds.width = x2 - cmd.bounds.x;
				}
			}
			if(cmd.bounds.height == 0) {
				cmd.bounds.y = y1;
				cmd.bounds.height = y2 - y1;
			} else {
				if(y1 < cmd.bounds.y) {
					cmd.bounds.height += cmd.bounds.y - y1;
					cmd.bounds.y = y1;
				}
				var _this1 = cmd.bounds;
				if(y2 > _this1.y + _this1.height) {
					cmd.bounds.height = y2 - cmd.bounds.y;
				}
			}
		}
		cmd.recycle();
	}
	return haxepunk_graphics_hardware_DrawCommand._pool;
};
haxepunk_graphics_hardware_DrawCommand.prototype = {
	shader: null
	,texture: null
	,smooth: null
	,blend: null
	,clipRect: null
	,bounds: null
	,triangleCount: null
	,visibleArea: null
	,match: function(texture,shader,smooth,blend,clipRect) {
		if(this.smooth != smooth) {
			return false;
		} else if(this.texture != texture) {
			return false;
		} else if(this.shader.id != shader.id) {
			return false;
		} else if(this.blend != blend) {
			return false;
		} else {
			var aRectIsNull = this.clipRect == null;
			var bRectIsNull = clipRect == null;
			if(aRectIsNull != bRectIsNull) {
				return false;
			}
			if(aRectIsNull) {
				return true;
			} else if((this.clipRect.x | 0) == (clipRect.x | 0) && (this.clipRect.y | 0) == (clipRect.y | 0) && (this.clipRect.width | 0) == (clipRect.width | 0)) {
				return (this.clipRect.height | 0) == (clipRect.height | 0);
			} else {
				return false;
			}
		}
	}
	,addTriangle: function(tx1,ty1,uvx1,uvy1,tx2,ty2,uvx2,uvy2,tx3,ty3,uvx3,uvy3,color,alpha) {
		if(alpha > 0) {
			var onScreen;
			var onScreen1;
			var onScreen2;
			var _this = this.visibleArea;
			if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this.x + _this.width) {
				onScreen2 = (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= this.visibleArea.x;
			} else {
				onScreen2 = false;
			}
			if(onScreen2) {
				var _this1 = this.visibleArea;
				onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this1.y + _this1.height;
			} else {
				onScreen1 = false;
			}
			if(onScreen1) {
				onScreen = (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= this.visibleArea.y;
			} else {
				onScreen = false;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = tx1;
				data1.ty1 = ty1;
				data1.uvx1 = uvx1;
				data1.uvy1 = uvy1;
				data1.tx2 = tx2;
				data1.ty2 = ty2;
				data1.uvx2 = uvx2;
				data1.uvy2 = uvy2;
				data1.tx3 = tx3;
				data1.ty3 = ty3;
				data1.uvx3 = uvx3;
				data1.uvy3 = uvy3;
				data1.color = color;
				data1.alpha = alpha;
				if(this.data == null) {
					this.data = data1;
				} else {
					this._lastData._next = data1;
				}
				this._lastData = data1;
				++this.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a1 = data1.tx1;
				var b1 = data1.tx2;
				var c1 = data1.tx3;
				var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
				var a2 = data1.ty1;
				var b2 = data1.ty2;
				var c2 = data1.ty3;
				var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
				var a3 = data1.ty1;
				var b3 = data1.ty2;
				var c3 = data1.ty3;
				var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
				if(this.bounds.width == 0) {
					this.bounds.x = x1;
					this.bounds.width = x2 - x1;
				} else {
					if(x1 < this.bounds.x) {
						this.bounds.width += this.bounds.x - x1;
						this.bounds.x = x1;
					}
					var _this2 = this.bounds;
					if(x2 > _this2.x + _this2.width) {
						this.bounds.width = x2 - this.bounds.x;
					}
				}
				if(this.bounds.height == 0) {
					this.bounds.y = y1;
					this.bounds.height = y2 - y1;
				} else {
					if(y1 < this.bounds.y) {
						this.bounds.height += this.bounds.y - y1;
						this.bounds.y = y1;
					}
					var _this3 = this.bounds;
					if(y2 > _this3.y + _this3.height) {
						this.bounds.height = y2 - this.bounds.y;
					}
				}
			}
		}
	}
	,recycle: function() {
		this.triangleCount = 0;
		this.texture = null;
		if(this.data != null) {
			this._lastData._next = haxepunk_graphics_hardware_DrawCommand._dataPool;
			haxepunk_graphics_hardware_DrawCommand._dataPool = this.data;
		}
		this.data = this._lastData = null;
		this.bounds.setTo(0,0,0,0);
		var command = this;
		while(command._next != null) {
			command = command._next;
			command.triangleCount = 0;
			command.texture = null;
			if(command.data != null) {
				command._lastData._next = haxepunk_graphics_hardware_DrawCommand._dataPool;
				haxepunk_graphics_hardware_DrawCommand._dataPool = command.data;
			}
			command.data = command._lastData = null;
			command.bounds.setTo(0,0,0,0);
		}
		command._next = haxepunk_graphics_hardware_DrawCommand._pool;
		haxepunk_graphics_hardware_DrawCommand._pool = this;
	}
	,get_triangles: function() {
		this._iterator.triangle = this.data;
		return this._iterator;
	}
	,getData: function() {
		var data;
		if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
			data = haxepunk_graphics_hardware_DrawCommand._dataPool;
			haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
			data._next = null;
		} else {
			data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
		}
		return data;
	}
	,addData: function(data) {
		if(this.data == null) {
			this.data = data;
		} else {
			this._lastData._next = data;
		}
		this._lastData = data;
		++this.triangleCount;
		var a = data.tx1;
		var b = data.tx2;
		var c = data.tx3;
		var x1 = a > b ? b > c ? c : b : a > c ? c : a;
		var a1 = data.tx1;
		var b1 = data.tx2;
		var c1 = data.tx3;
		var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
		var a2 = data.ty1;
		var b2 = data.ty2;
		var c2 = data.ty3;
		var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
		var a3 = data.ty1;
		var b3 = data.ty2;
		var c3 = data.ty3;
		var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
		if(this.bounds.width == 0) {
			this.bounds.x = x1;
			this.bounds.width = x2 - x1;
		} else {
			if(x1 < this.bounds.x) {
				this.bounds.width += this.bounds.x - x1;
				this.bounds.x = x1;
			}
			var _this = this.bounds;
			if(x2 > _this.x + _this.width) {
				this.bounds.width = x2 - this.bounds.x;
			}
		}
		if(this.bounds.height == 0) {
			this.bounds.y = y1;
			this.bounds.height = y2 - y1;
		} else {
			if(y1 < this.bounds.y) {
				this.bounds.height += this.bounds.y - y1;
				this.bounds.y = y1;
			}
			var _this1 = this.bounds;
			if(y2 > _this1.y + _this1.height) {
				this.bounds.height = y2 - this.bounds.y;
			}
		}
	}
	,recycleData: function() {
		this.triangleCount = 0;
		this.texture = null;
		if(this.data != null) {
			this._lastData._next = haxepunk_graphics_hardware_DrawCommand._dataPool;
			haxepunk_graphics_hardware_DrawCommand._dataPool = this.data;
		}
		this.data = this._lastData = null;
		this.bounds.setTo(0,0,0,0);
	}
	,_iterator: null
	,data: null
	,_lastData: null
	,_prev: null
	,_next: null
	,__class__: haxepunk_graphics_hardware_DrawCommand
	,__properties__: {get_triangles:"get_triangles"}
};
var haxepunk_graphics_hardware_DrawCommandIterator = function() {
	this.current = null;
	this.command = null;
};
$hxClasses["haxepunk.graphics.hardware.DrawCommandIterator"] = haxepunk_graphics_hardware_DrawCommandIterator;
haxepunk_graphics_hardware_DrawCommandIterator.__name__ = ["haxepunk","graphics","hardware","DrawCommandIterator"];
haxepunk_graphics_hardware_DrawCommandIterator.prototype = {
	command: null
	,current: null
	,reset: function() {
		this.current = this.command;
	}
	,hasNext: function() {
		return this.current != null;
	}
	,next: function() {
		var result = this.current;
		this.current = this.current._next;
		return result;
	}
	,recycle: function() {
		if(this.command != null) {
			this.command.recycle();
		}
		this.command = this.current = null;
	}
	,__class__: haxepunk_graphics_hardware_DrawCommandIterator
};
var haxepunk_graphics_hardware_DrawCommandBatch = function() {
	this.head = new haxepunk_graphics_hardware_DrawCommandIterator();
	this.visibleArea = new haxepunk_math_Rectangle();
};
$hxClasses["haxepunk.graphics.hardware.DrawCommandBatch"] = haxepunk_graphics_hardware_DrawCommandBatch;
haxepunk_graphics_hardware_DrawCommandBatch.__name__ = ["haxepunk","graphics","hardware","DrawCommandBatch"];
haxepunk_graphics_hardware_DrawCommandBatch.prototype = {
	visibleArea: null
	,head: null
	,last: null
	,recycle: function() {
		this.head.recycle();
		this.last = null;
	}
	,iterator: function() {
		this.head.reset();
		return this.head;
	}
	,getDrawCommand: function(texture,shader,smooth,blend,clipRect,x1,y1,x2,y2,x3,y3,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(y3 == null) {
			y3 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var tmp;
		if(this.last != null) {
			var _this = this.last;
			if(_this.smooth != smooth) {
				tmp = false;
			} else if(_this.texture != texture) {
				tmp = false;
			} else if(_this.shader.id != shader.id) {
				tmp = false;
			} else if(_this.blend != blend) {
				tmp = false;
			} else {
				var aRectIsNull = _this.clipRect == null;
				var bRectIsNull = clipRect == null;
				if(aRectIsNull != bRectIsNull) {
					tmp = false;
				} else if(aRectIsNull) {
					tmp = true;
				} else if((_this.clipRect.x | 0) == (clipRect.x | 0) && (_this.clipRect.y | 0) == (clipRect.y | 0) && (_this.clipRect.width | 0) == (clipRect.width | 0)) {
					tmp = (_this.clipRect.height | 0) == (clipRect.height | 0);
				} else {
					tmp = false;
				}
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			return this.last;
		} else if((x1 != 0 || x2 != 0 || x3 != 0) && (y1 != 0 || y2 != 0 || y3 != 0)) {
			var t = 0;
			var current = this.last;
			var found = false;
			while(current != null && t < haxepunk_graphics_hardware_DrawCommandBatch.maxTriangleChecks) {
				var tmp1;
				if(current.smooth != smooth) {
					tmp1 = false;
				} else if(current.texture != texture) {
					tmp1 = false;
				} else if(current.shader.id != shader.id) {
					tmp1 = false;
				} else if(current.blend != blend) {
					tmp1 = false;
				} else {
					var aRectIsNull1 = current.clipRect == null;
					var bRectIsNull1 = clipRect == null;
					if(aRectIsNull1 != bRectIsNull1) {
						tmp1 = false;
					} else if(aRectIsNull1) {
						tmp1 = true;
					} else if((current.clipRect.x | 0) == (clipRect.x | 0) && (current.clipRect.y | 0) == (clipRect.y | 0) && (current.clipRect.width | 0) == (clipRect.width | 0)) {
						tmp1 = (current.clipRect.height | 0) == (clipRect.height | 0);
					} else {
						tmp1 = false;
					}
				}
				if(tmp1) {
					found = true;
					if(flexibleLayer) {
						return current;
					}
					break;
				}
				t += current.triangleCount;
				current = current._prev;
			}
			if(found) {
				var rx1 = x1 > x2 ? x2 > x3 ? x3 : x2 : x1 > x3 ? x3 : x1;
				var rx2 = x1 < x2 ? x2 < x3 ? x3 : x2 : x1 < x3 ? x3 : x1;
				var ry1 = y1 > y2 ? y2 > y3 ? y3 : y2 : y1 > y3 ? y3 : y1;
				var ry2 = y1 < y2 ? y2 < y3 ? y3 : y2 : y1 < y3 ? y3 : y1;
				haxepunk_graphics_hardware_DrawCommandBatch._bounds.setTo(rx1,ry1,rx2 - rx1,ry2 - ry1);
				t = 0;
				current = this.last;
				while(current != null) {
					var tmp2;
					if(current.smooth != smooth) {
						tmp2 = false;
					} else if(current.texture != texture) {
						tmp2 = false;
					} else if(current.shader.id != shader.id) {
						tmp2 = false;
					} else if(current.blend != blend) {
						tmp2 = false;
					} else {
						var aRectIsNull2 = current.clipRect == null;
						var bRectIsNull2 = clipRect == null;
						if(aRectIsNull2 != bRectIsNull2) {
							tmp2 = false;
						} else if(aRectIsNull2) {
							tmp2 = true;
						} else if((current.clipRect.x | 0) == (clipRect.x | 0) && (current.clipRect.y | 0) == (clipRect.y | 0) && (current.clipRect.width | 0) == (clipRect.width | 0)) {
							tmp2 = (current.clipRect.height | 0) == (clipRect.height | 0);
						} else {
							tmp2 = false;
						}
					}
					if(tmp2) {
						return current;
					} else if(current.bounds.intersects(haxepunk_graphics_hardware_DrawCommandBatch._bounds)) {
						var collision = false;
						current._iterator.triangle = current.data;
						var _g = current._iterator;
						while(_g.triangle != null) {
							var current1 = _g.triangle;
							_g.triangle = _g.triangle._next;
							var triangle = current1;
							if(t++ >= haxepunk_graphics_hardware_DrawCommandBatch.maxTriangleChecks) {
								break;
							}
							var tmp3;
							var tmp4;
							var tmp5;
							var tmp6;
							var tmp7;
							var tmp8;
							var tmp9;
							var tmp10;
							var tmp11;
							var tmp12;
							var tmp13;
							var tmp14;
							var tmp15;
							var tmp16;
							var x21 = triangle.tx1;
							var y21 = triangle.ty1;
							var x22 = triangle.tx2;
							var y22 = triangle.ty2;
							var d = (y22 - y21) * (x2 - x1) - (x22 - x21) * (y2 - y1);
							if(d != 0) {
								var ua = ((x22 - x21) * (y1 - y21) - (y22 - y21) * (x1 - x21)) / d;
								var ub = ((x2 - x1) * (y1 - y21) - (y2 - y1) * (x1 - x21)) / d;
								if(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
									d = 0;
								}
							}
							if(d != 0) {
								var x211 = triangle.tx1;
								var y211 = triangle.ty1;
								var x221 = triangle.tx2;
								var y221 = triangle.ty2;
								var d1 = (y221 - y211) * (x3 - x2) - (x221 - x211) * (y3 - y2);
								if(d1 != 0) {
									var ua1 = ((x221 - x211) * (y2 - y211) - (y221 - y211) * (x2 - x211)) / d1;
									var ub1 = ((x3 - x2) * (y2 - y211) - (y3 - y2) * (x2 - x211)) / d1;
									if(ua1 >= 0 && ua1 <= 1 && ub1 >= 0 && ub1 <= 1) {
										d1 = 0;
									}
								}
								tmp16 = d1 == 0;
							} else {
								tmp16 = true;
							}
							if(!tmp16) {
								var x212 = triangle.tx1;
								var y212 = triangle.ty1;
								var x222 = triangle.tx2;
								var y222 = triangle.ty2;
								var d2 = (y222 - y212) * (x3 - x1) - (x222 - x212) * (y3 - y1);
								if(d2 != 0) {
									var ua2 = ((x222 - x212) * (y1 - y212) - (y222 - y212) * (x1 - x212)) / d2;
									var ub2 = ((x3 - x1) * (y1 - y212) - (y3 - y1) * (x1 - x212)) / d2;
									if(ua2 >= 0 && ua2 <= 1 && ub2 >= 0 && ub2 <= 1) {
										d2 = 0;
									}
								}
								tmp15 = d2 == 0;
							} else {
								tmp15 = true;
							}
							if(!tmp15) {
								var x213 = triangle.tx2;
								var y213 = triangle.ty2;
								var x223 = triangle.tx3;
								var y223 = triangle.ty3;
								var d3 = (y223 - y213) * (x2 - x1) - (x223 - x213) * (y2 - y1);
								if(d3 != 0) {
									var ua3 = ((x223 - x213) * (y1 - y213) - (y223 - y213) * (x1 - x213)) / d3;
									var ub3 = ((x2 - x1) * (y1 - y213) - (y2 - y1) * (x1 - x213)) / d3;
									if(ua3 >= 0 && ua3 <= 1 && ub3 >= 0 && ub3 <= 1) {
										d3 = 0;
									}
								}
								tmp14 = d3 == 0;
							} else {
								tmp14 = true;
							}
							if(!tmp14) {
								var x214 = triangle.tx2;
								var y214 = triangle.ty2;
								var x224 = triangle.tx3;
								var y224 = triangle.ty3;
								var d4 = (y224 - y214) * (x3 - x2) - (x224 - x214) * (y3 - y2);
								if(d4 != 0) {
									var ua4 = ((x224 - x214) * (y2 - y214) - (y224 - y214) * (x2 - x214)) / d4;
									var ub4 = ((x3 - x2) * (y2 - y214) - (y3 - y2) * (x2 - x214)) / d4;
									if(ua4 >= 0 && ua4 <= 1 && ub4 >= 0 && ub4 <= 1) {
										d4 = 0;
									}
								}
								tmp13 = d4 == 0;
							} else {
								tmp13 = true;
							}
							if(!tmp13) {
								var x215 = triangle.tx2;
								var y215 = triangle.ty2;
								var x225 = triangle.tx3;
								var y225 = triangle.ty3;
								var d5 = (y225 - y215) * (x3 - x1) - (x225 - x215) * (y3 - y1);
								if(d5 != 0) {
									var ua5 = ((x225 - x215) * (y1 - y215) - (y225 - y215) * (x1 - x215)) / d5;
									var ub5 = ((x3 - x1) * (y1 - y215) - (y3 - y1) * (x1 - x215)) / d5;
									if(ua5 >= 0 && ua5 <= 1 && ub5 >= 0 && ub5 <= 1) {
										d5 = 0;
									}
								}
								tmp12 = d5 == 0;
							} else {
								tmp12 = true;
							}
							if(!tmp12) {
								var x216 = triangle.tx1;
								var y216 = triangle.ty1;
								var x226 = triangle.tx3;
								var y226 = triangle.ty3;
								var d6 = (y226 - y216) * (x2 - x1) - (x226 - x216) * (y2 - y1);
								if(d6 != 0) {
									var ua6 = ((x226 - x216) * (y1 - y216) - (y226 - y216) * (x1 - x216)) / d6;
									var ub6 = ((x2 - x1) * (y1 - y216) - (y2 - y1) * (x1 - x216)) / d6;
									if(ua6 >= 0 && ua6 <= 1 && ub6 >= 0 && ub6 <= 1) {
										d6 = 0;
									}
								}
								tmp11 = d6 == 0;
							} else {
								tmp11 = true;
							}
							if(!tmp11) {
								var x217 = triangle.tx1;
								var y217 = triangle.ty1;
								var x227 = triangle.tx3;
								var y227 = triangle.ty3;
								var d7 = (y227 - y217) * (x3 - x2) - (x227 - x217) * (y3 - y2);
								if(d7 != 0) {
									var ua7 = ((x227 - x217) * (y2 - y217) - (y227 - y217) * (x2 - x217)) / d7;
									var ub7 = ((x3 - x2) * (y2 - y217) - (y3 - y2) * (x2 - x217)) / d7;
									if(ua7 >= 0 && ua7 <= 1 && ub7 >= 0 && ub7 <= 1) {
										d7 = 0;
									}
								}
								tmp10 = d7 == 0;
							} else {
								tmp10 = true;
							}
							if(!tmp10) {
								var x218 = triangle.tx1;
								var y218 = triangle.ty1;
								var x228 = triangle.tx3;
								var y228 = triangle.ty3;
								var d8 = (y228 - y218) * (x3 - x1) - (x228 - x218) * (y3 - y1);
								if(d8 != 0) {
									var ua8 = ((x228 - x218) * (y1 - y218) - (y228 - y218) * (x1 - x218)) / d8;
									var ub8 = ((x3 - x1) * (y1 - y218) - (y3 - y1) * (x1 - x218)) / d8;
									if(ua8 >= 0 && ua8 <= 1 && ub8 >= 0 && ub8 <= 1) {
										d8 = 0;
									}
								}
								tmp9 = d8 == 0;
							} else {
								tmp9 = true;
							}
							if(!tmp9) {
								var v0x = x3 - x1;
								var v0y = y3 - y1;
								var v1x = x2 - x1;
								var v1y = y2 - y1;
								var v2x = triangle.tx1 - x1;
								var v2y = triangle.ty1 - y1;
								var u = v2x * v0y - v2y * v0x;
								var v = v1x * v2y - v1y * v2x;
								var d9 = v1x * v0y - v1y * v0x;
								if(d9 < 0) {
									u = -u;
									v = -v;
									d9 = -d9;
								}
								if(u >= 0 && v >= 0) {
									tmp8 = u + v <= d9;
								} else {
									tmp8 = false;
								}
							} else {
								tmp8 = true;
							}
							if(!tmp8) {
								var v0x1 = x3 - x1;
								var v0y1 = y3 - y1;
								var v1x1 = x2 - x1;
								var v1y1 = y2 - y1;
								var v2x1 = triangle.tx2 - x1;
								var v2y1 = triangle.ty2 - y1;
								var u1 = v2x1 * v0y1 - v2y1 * v0x1;
								var v1 = v1x1 * v2y1 - v1y1 * v2x1;
								var d10 = v1x1 * v0y1 - v1y1 * v0x1;
								if(d10 < 0) {
									u1 = -u1;
									v1 = -v1;
									d10 = -d10;
								}
								if(u1 >= 0 && v1 >= 0) {
									tmp7 = u1 + v1 <= d10;
								} else {
									tmp7 = false;
								}
							} else {
								tmp7 = true;
							}
							if(!tmp7) {
								var v0x2 = x3 - x1;
								var v0y2 = y3 - y1;
								var v1x2 = x2 - x1;
								var v1y2 = y2 - y1;
								var v2x2 = triangle.tx3 - x1;
								var v2y2 = triangle.ty3 - y1;
								var u2 = v2x2 * v0y2 - v2y2 * v0x2;
								var v2 = v1x2 * v2y2 - v1y2 * v2x2;
								var d11 = v1x2 * v0y2 - v1y2 * v0x2;
								if(d11 < 0) {
									u2 = -u2;
									v2 = -v2;
									d11 = -d11;
								}
								if(u2 >= 0 && v2 >= 0) {
									tmp6 = u2 + v2 <= d11;
								} else {
									tmp6 = false;
								}
							} else {
								tmp6 = true;
							}
							if(!tmp6) {
								var x11 = triangle.tx1;
								var y11 = triangle.ty1;
								var v0x3 = triangle.tx3 - x11;
								var v0y3 = triangle.ty3 - y11;
								var v1x3 = triangle.tx2 - x11;
								var v1y3 = triangle.ty2 - y11;
								var v2x3 = x1 - x11;
								var v2y3 = y1 - y11;
								var u3 = v2x3 * v0y3 - v2y3 * v0x3;
								var v3 = v1x3 * v2y3 - v1y3 * v2x3;
								var d12 = v1x3 * v0y3 - v1y3 * v0x3;
								if(d12 < 0) {
									u3 = -u3;
									v3 = -v3;
									d12 = -d12;
								}
								if(u3 >= 0 && v3 >= 0) {
									tmp5 = u3 + v3 <= d12;
								} else {
									tmp5 = false;
								}
							} else {
								tmp5 = true;
							}
							if(!tmp5) {
								var x12 = triangle.tx1;
								var y12 = triangle.ty1;
								var v0x4 = triangle.tx3 - x12;
								var v0y4 = triangle.ty3 - y12;
								var v1x4 = triangle.tx2 - x12;
								var v1y4 = triangle.ty2 - y12;
								var v2x4 = x2 - x12;
								var v2y4 = y2 - y12;
								var u4 = v2x4 * v0y4 - v2y4 * v0x4;
								var v4 = v1x4 * v2y4 - v1y4 * v2x4;
								var d13 = v1x4 * v0y4 - v1y4 * v0x4;
								if(d13 < 0) {
									u4 = -u4;
									v4 = -v4;
									d13 = -d13;
								}
								if(u4 >= 0 && v4 >= 0) {
									tmp4 = u4 + v4 <= d13;
								} else {
									tmp4 = false;
								}
							} else {
								tmp4 = true;
							}
							if(!tmp4) {
								var x13 = triangle.tx1;
								var y13 = triangle.ty1;
								var v0x5 = triangle.tx3 - x13;
								var v0y5 = triangle.ty3 - y13;
								var v1x5 = triangle.tx2 - x13;
								var v1y5 = triangle.ty2 - y13;
								var v2x5 = x3 - x13;
								var v2y5 = y3 - y13;
								var u5 = v2x5 * v0y5 - v2y5 * v0x5;
								var v5 = v1x5 * v2y5 - v1y5 * v2x5;
								var d14 = v1x5 * v0y5 - v1y5 * v0x5;
								if(d14 < 0) {
									u5 = -u5;
									v5 = -v5;
									d14 = -d14;
								}
								if(u5 >= 0 && v5 >= 0) {
									tmp3 = u5 + v5 <= d14;
								} else {
									tmp3 = false;
								}
							} else {
								tmp3 = true;
							}
							if(tmp3) {
								collision = true;
								break;
							}
						}
						if(collision) {
							break;
						}
					}
					current = current._prev;
				}
			}
		}
		while(this.last != null && this.last.data == null) {
			var l = this.last;
			this.last = this.last._prev;
			if(this.last != null) {
				this.last._next = null;
			}
			l.recycle();
		}
		var command = haxepunk_graphics_hardware_DrawCommand.create(texture,shader,smooth,blend,clipRect);
		command.visibleArea = this.visibleArea;
		if(this.last == null) {
			this.head.command = this.last = command;
			command._prev = null;
		} else {
			this.last._next = command;
			command._prev = this.last;
			this.last = command;
		}
		return command;
	}
	,addRect: function(texture,shader,smooth,blend,clipRect,rx,ry,rw,rh,a,b,c,d,tx,ty,color,alpha,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha > 0) {
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			if(texture == null) {
				uvy1 = 0;
				uvx1 = uvy1;
				uvx2 = rw;
				uvy2 = rh;
			} else {
				uvx1 = rx / texture.width;
				uvy1 = ry / texture.height;
				uvx2 = (rx + rw) / texture.width;
				uvy2 = (ry + rh) / texture.height;
			}
			var xa = rw * a + tx;
			var yb = rw * b + ty;
			var xc = rh * c + tx;
			var yd = rh * d + ty;
			var command = this.getDrawCommand(texture,shader,smooth,blend,clipRect,tx,ty,xa,yb,xc,yd,flexibleLayer);
			if(alpha > 0) {
				var onScreen;
				var onScreen1;
				var onScreen2;
				var _this = command.visibleArea;
				if((tx > xa ? xa > xc ? xc : xa : tx > xc ? xc : tx) <= _this.x + _this.width) {
					onScreen2 = (tx < xa ? xa < xc ? xc : xa : tx < xc ? xc : tx) >= command.visibleArea.x;
				} else {
					onScreen2 = false;
				}
				if(onScreen2) {
					var _this1 = command.visibleArea;
					onScreen1 = (ty > yb ? yb > yd ? yd : yb : ty > yd ? yd : ty) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				if(onScreen1) {
					onScreen = (ty < yb ? yb < yd ? yd : yb : ty < yd ? yd : ty) >= command.visibleArea.y;
				} else {
					onScreen = false;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = tx;
					data1.ty1 = ty;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = xc;
					data1.ty3 = yd;
					data1.uvx3 = uvx1;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a1 = data1.tx1;
					var b1 = data1.tx2;
					var c1 = data1.tx3;
					var x1 = a1 > b1 ? b1 > c1 ? c1 : b1 : a1 > c1 ? c1 : a1;
					var a2 = data1.tx1;
					var b2 = data1.tx2;
					var c2 = data1.tx3;
					var x2 = a2 < b2 ? b2 < c2 ? c2 : b2 : a2 < c2 ? c2 : a2;
					var a3 = data1.ty1;
					var b3 = data1.ty2;
					var c3 = data1.ty3;
					var y1 = a3 > b3 ? b3 > c3 ? c3 : b3 : a3 > c3 ? c3 : a3;
					var a4 = data1.ty1;
					var b4 = data1.ty2;
					var c4 = data1.ty3;
					var y2 = a4 < b4 ? b4 < c4 ? c4 : b4 : a4 < c4 ? c4 : a4;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this2 = command.bounds;
						if(x2 > _this2.x + _this2.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this3 = command.bounds;
						if(y2 > _this3.y + _this3.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
			var tx3 = xa + rh * c;
			var ty3 = yb + rh * d;
			if(alpha > 0) {
				var onScreen3;
				var onScreen4;
				var onScreen5;
				var _this4 = command.visibleArea;
				if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this4.x + _this4.width) {
					onScreen5 = (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x;
				} else {
					onScreen5 = false;
				}
				if(onScreen5) {
					var _this5 = command.visibleArea;
					onScreen4 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this5.y + _this5.height;
				} else {
					onScreen4 = false;
				}
				if(onScreen4) {
					onScreen3 = (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
				} else {
					onScreen3 = false;
				}
				if(onScreen3) {
					var data2;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data2._next = null;
					} else {
						data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data3 = data2;
					data3.tx1 = xc;
					data3.ty1 = yd;
					data3.uvx1 = uvx1;
					data3.uvy1 = uvy2;
					data3.tx2 = xa;
					data3.ty2 = yb;
					data3.uvx2 = uvx2;
					data3.uvy2 = uvy1;
					data3.tx3 = tx3;
					data3.ty3 = ty3;
					data3.uvx3 = uvx2;
					data3.uvy3 = uvy2;
					data3.color = color;
					data3.alpha = alpha;
					if(command.data == null) {
						command.data = data3;
					} else {
						command._lastData._next = data3;
					}
					command._lastData = data3;
					++command.triangleCount;
					var a5 = data3.tx1;
					var b5 = data3.tx2;
					var c5 = data3.tx3;
					var x11 = a5 > b5 ? b5 > c5 ? c5 : b5 : a5 > c5 ? c5 : a5;
					var a6 = data3.tx1;
					var b6 = data3.tx2;
					var c6 = data3.tx3;
					var x21 = a6 < b6 ? b6 < c6 ? c6 : b6 : a6 < c6 ? c6 : a6;
					var a7 = data3.ty1;
					var b7 = data3.ty2;
					var c7 = data3.ty3;
					var y11 = a7 > b7 ? b7 > c7 ? c7 : b7 : a7 > c7 ? c7 : a7;
					var a8 = data3.ty1;
					var b8 = data3.ty2;
					var c8 = data3.ty3;
					var y21 = a8 < b8 ? b8 < c8 ? c8 : b8 : a8 < c8 ? c8 : a8;
					if(command.bounds.width == 0) {
						command.bounds.x = x11;
						command.bounds.width = x21 - x11;
					} else {
						if(x11 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x11;
							command.bounds.x = x11;
						}
						var _this6 = command.bounds;
						if(x21 > _this6.x + _this6.width) {
							command.bounds.width = x21 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y11;
						command.bounds.height = y21 - y11;
					} else {
						if(y11 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y11;
							command.bounds.y = y11;
						}
						var _this7 = command.bounds;
						if(y21 > _this7.y + _this7.height) {
							command.bounds.height = y21 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,addTriangle: function(texture,shader,smooth,blend,clipRect,tx1,ty1,uvx1,uvy1,tx2,ty2,uvx2,uvy2,tx3,ty3,uvx3,uvy3,color,alpha,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha > 0) {
			var command = this.getDrawCommand(texture,shader,smooth,blend,clipRect,tx1,ty1,tx2,ty2,tx3,ty3,flexibleLayer);
			if(alpha > 0) {
				var onScreen;
				var onScreen1;
				var onScreen2;
				var _this = command.visibleArea;
				if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this.x + _this.width) {
					onScreen2 = (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= command.visibleArea.x;
				} else {
					onScreen2 = false;
				}
				if(onScreen2) {
					var _this1 = command.visibleArea;
					onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				if(onScreen1) {
					onScreen = (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= command.visibleArea.y;
				} else {
					onScreen = false;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = tx1;
					data1.ty1 = ty1;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = tx2;
					data1.ty2 = ty2;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy2;
					data1.tx3 = tx3;
					data1.ty3 = ty3;
					data1.uvx3 = uvx3;
					data1.uvy3 = uvy3;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a1 = data1.tx1;
					var b1 = data1.tx2;
					var c1 = data1.tx3;
					var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
					var a2 = data1.ty1;
					var b2 = data1.ty2;
					var c2 = data1.ty3;
					var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
					var a3 = data1.ty1;
					var b3 = data1.ty2;
					var c3 = data1.ty3;
					var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this2 = command.bounds;
						if(x2 > _this2.x + _this2.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this3 = command.bounds;
						if(y2 > _this3.y + _this3.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,__class__: haxepunk_graphics_hardware_DrawCommandBatch
};
var haxepunk_graphics_hardware_FrameBuffer = function() {
	this._height = 0;
	this._width = 0;
};
$hxClasses["haxepunk.graphics.hardware.FrameBuffer"] = haxepunk_graphics_hardware_FrameBuffer;
haxepunk_graphics_hardware_FrameBuffer.__name__ = ["haxepunk","graphics","hardware","FrameBuffer"];
haxepunk_graphics_hardware_FrameBuffer.prototype = {
	texture: null
	,framebuffer: null
	,_width: null
	,_height: null
	,build: function() {
		this.framebuffer = lime_graphics_opengl_GL.context.__context.createFramebuffer();
		this.resize();
	}
	,destroy: function() {
		this.texture = null;
	}
	,resize: function() {
		lime_graphics_opengl_GL.context.__context.bindFramebuffer(36160,this.framebuffer);
		if(this.texture != null) {
			lime_graphics_opengl_GL.context.__context.deleteTexture(this.texture);
		}
		this._width = haxepunk_HXP.screen.width;
		this._height = haxepunk_HXP.screen.height;
		var width = this._width;
		var height = this._height;
		this.texture = lime_graphics_opengl_GL.context.__context.createTexture();
		lime_graphics_opengl_GL.context.__context.bindTexture(3553,this.texture);
		lime_graphics_opengl_GL.context.__context.texImage2D(3553,0,6408,width,height,0,6408,5121,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(null));
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10242,33071);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10243,33071);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10241,9729);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10240,9729);
		lime_graphics_opengl_GL.context.__context.framebufferTexture2D(36160,36064,3553,this.texture,0);
		lime_graphics_opengl_GL.context.__context.bindFramebuffer(36160,null);
	}
	,createTexture: function(width,height) {
		this.texture = lime_graphics_opengl_GL.context.__context.createTexture();
		lime_graphics_opengl_GL.context.__context.bindTexture(3553,this.texture);
		lime_graphics_opengl_GL.context.__context.texImage2D(3553,0,6408,width,height,0,6408,5121,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(null));
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10242,33071);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10243,33071);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10241,9729);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10240,9729);
		lime_graphics_opengl_GL.context.__context.framebufferTexture2D(36160,36064,3553,this.texture,0);
	}
	,bindFrameBuffer: function() {
		if(this.texture == null || this.framebuffer == null) {
			this.destroy();
			this.build();
		} else if(haxepunk_HXP.screen.width != this._width || haxepunk_HXP.screen.height != this._height) {
			this.resize();
		}
		lime_graphics_opengl_GL.context.__context.bindFramebuffer(36160,this.framebuffer);
		lime_graphics_opengl_GL.context.__context.clearColor(0,0,0,0);
		lime_graphics_opengl_GL.context.__context.clear(16640);
	}
	,__class__: haxepunk_graphics_hardware_FrameBuffer
};
var haxepunk_graphics_hardware_HardwareRenderer = function() {
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	this.defaultFramebuffer = null;
	if(haxepunk_graphics_hardware_HardwareRenderer._ortho == null) {
		var this1 = new Float32Array(16);
		haxepunk_graphics_hardware_HardwareRenderer._ortho = this1;
		var _g = 0;
		while(_g < 15) {
			var i = _g++;
			haxepunk_graphics_hardware_HardwareRenderer._ortho[i] = 0;
		}
		haxepunk_graphics_hardware_HardwareRenderer._ortho[15] = 1;
	}
};
$hxClasses["haxepunk.graphics.hardware.HardwareRenderer"] = haxepunk_graphics_hardware_HardwareRenderer;
haxepunk_graphics_hardware_HardwareRenderer.__name__ = ["haxepunk","graphics","hardware","HardwareRenderer"];
haxepunk_graphics_hardware_HardwareRenderer.ortho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	haxepunk_graphics_hardware_HardwareRenderer._ortho[0] = 2.0 * sx;
	haxepunk_graphics_hardware_HardwareRenderer._ortho[5] = 2.0 * sy;
	haxepunk_graphics_hardware_HardwareRenderer._ortho[10] = -2.0 * sz;
	haxepunk_graphics_hardware_HardwareRenderer._ortho[12] = -(x0 + x1) * sx;
	haxepunk_graphics_hardware_HardwareRenderer._ortho[13] = -(y0 + y1) * sy;
	haxepunk_graphics_hardware_HardwareRenderer._ortho[14] = -(zNear + zFar) * sz;
};
haxepunk_graphics_hardware_HardwareRenderer.setBlendMode = function(blend) {
	switch(blend) {
	case 0:
		lime_graphics_opengl_GL.context.__context.blendEquation(32774);
		lime_graphics_opengl_GL.context.__context.blendFuncSeparate(1,1,0,1);
		break;
	case 1:
		lime_graphics_opengl_GL.context.__context.blendEquation(32774);
		lime_graphics_opengl_GL.context.__context.blendFunc(1,771);
		break;
	case 9:
		lime_graphics_opengl_GL.context.__context.blendEquation(32774);
		lime_graphics_opengl_GL.context.__context.blendFuncSeparate(774,771,0,1);
		break;
	case 12:
		lime_graphics_opengl_GL.context.__context.blendEquation(32774);
		lime_graphics_opengl_GL.context.__context.blendFuncSeparate(1,769,0,1);
		break;
	case 14:
		lime_graphics_opengl_GL.context.__context.blendEquationSeparate(32779,32774);
		lime_graphics_opengl_GL.context.__context.blendFuncSeparate(1,1,0,1);
		break;
	}
};
haxepunk_graphics_hardware_HardwareRenderer.prototype = {
	fb: null
	,backFb: null
	,buffer: null
	,defaultFramebuffer: null
	,render: function(drawCommand) {
		var pos_lineNumber;
		var pos_fileName = "HardwareRenderer.hx";
		pos_lineNumber = 90;
		var pos_className = "haxepunk.graphics.hardware.HardwareRenderer";
		var pos_methodName = "render";
		var error = lime_graphics_opengl_GL.context.__context.getError();
		if(error != 0) {
			haxe_Log.trace("GL Error found at " + pos_fileName + ":" + pos_lineNumber + ": " + error,{ fileName : "GLUtils.hx", lineNumber : 35, className : "haxepunk.graphics.hardware.opengl.GLUtils", methodName : "checkForErrors"});
		}
		var x = this.x;
		var y = this.y;
		var width = this.width;
		var height = this.height;
		if(drawCommand != null && drawCommand.triangleCount > 0) {
			if(haxepunk_graphics_hardware_HardwareRenderer._tracking) {
				haxepunk_graphics_hardware_HardwareRenderer.triangleCount += drawCommand.triangleCount;
				++haxepunk_graphics_hardware_HardwareRenderer.drawCallCount;
				if(haxepunk_graphics_hardware_HardwareRenderer.drawCallLimit > -1 && haxepunk_graphics_hardware_HardwareRenderer.drawCallCount > haxepunk_graphics_hardware_HardwareRenderer.drawCallLimit) {
					return;
				}
			}
			var clipRect = drawCommand.clipRect;
			if(clipRect != null) {
				width -= clipRect.x | 0;
				height -= clipRect.y | 0;
				width = Math.min(width,clipRect.width) | 0;
				height = Math.min(height,clipRect.height) | 0;
			}
			if(width > 0 && height > 0) {
				var shader = drawCommand.shader;
				shader.bind();
				var triangles = drawCommand.triangleCount;
				var floatsPerTriangle = shader.get_floatsPerVertex() * 3;
				this.buffer.ensureSize(triangles,floatsPerTriangle);
				var x0 = -x;
				var x1 = -x + haxepunk_HXP.windowWidth;
				var y0 = -y + haxepunk_HXP.windowHeight;
				var y1 = -y;
				var sx = 1.0 / (x1 - x0);
				var sy = 1.0 / (y1 - y0);
				var sz = -0.0005;
				haxepunk_graphics_hardware_HardwareRenderer._ortho[0] = 2.0 * sx;
				haxepunk_graphics_hardware_HardwareRenderer._ortho[5] = 2.0 * sy;
				haxepunk_graphics_hardware_HardwareRenderer._ortho[10] = -2.0 * sz;
				haxepunk_graphics_hardware_HardwareRenderer._ortho[12] = -(x0 + x1) * sx;
				haxepunk_graphics_hardware_HardwareRenderer._ortho[13] = -(y0 + y1) * sy;
				haxepunk_graphics_hardware_HardwareRenderer._ortho[14] = 0 * sz;
				if(!shader.uniformIndices.exists("uMatrix")) {
					var this1 = shader.uniformIndices;
					var v = lime_graphics_opengl_GL.context.__context.getUniformLocation(shader.glProgram,"uMatrix");
					this1.set("uMatrix",v);
				}
				var location = shader.uniformIndices.get("uMatrix");
				var v1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(haxepunk_graphics_hardware_HardwareRenderer._ortho);
				lime_graphics_opengl_GL.context.__context.uniformMatrix4fv(location,false,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v1,64));
				var pos_lineNumber1;
				var pos_fileName1 = "HardwareRenderer.hx";
				pos_lineNumber1 = 132;
				var pos_className1 = "haxepunk.graphics.hardware.HardwareRenderer";
				var pos_methodName1 = "render";
				var error1 = lime_graphics_opengl_GL.context.__context.getError();
				if(error1 != 0) {
					haxe_Log.trace("GL Error found at " + pos_fileName1 + ":" + pos_lineNumber1 + ": " + error1,{ fileName : "GLUtils.hx", lineNumber : 35, className : "haxepunk.graphics.hardware.opengl.GLUtils", methodName : "checkForErrors"});
				}
				var texture = drawCommand.texture;
				if(texture != null) {
					haxepunk_graphics_hardware_opengl_GLUtils.bindTexture(texture,drawCommand.smooth);
				}
				var pos_lineNumber2;
				var pos_fileName2 = "HardwareRenderer.hx";
				pos_lineNumber2 = 136;
				var pos_className2 = "haxepunk.graphics.hardware.HardwareRenderer";
				var pos_methodName2 = "render";
				var error2 = lime_graphics_opengl_GL.context.__context.getError();
				if(error2 != 0) {
					haxe_Log.trace("GL Error found at " + pos_fileName2 + ":" + pos_lineNumber2 + ": " + error2,{ fileName : "GLUtils.hx", lineNumber : 35, className : "haxepunk.graphics.hardware.opengl.GLUtils", methodName : "checkForErrors"});
				}
				shader.prepare(drawCommand,this.buffer);
				var pos_lineNumber3;
				var pos_fileName3 = "HardwareRenderer.hx";
				pos_lineNumber3 = 140;
				var pos_className3 = "haxepunk.graphics.hardware.HardwareRenderer";
				var pos_methodName3 = "render";
				var error3 = lime_graphics_opengl_GL.context.__context.getError();
				if(error3 != 0) {
					haxe_Log.trace("GL Error found at " + pos_fileName3 + ":" + pos_lineNumber3 + ": " + error3,{ fileName : "GLUtils.hx", lineNumber : 35, className : "haxepunk.graphics.hardware.opengl.GLUtils", methodName : "checkForErrors"});
				}
				switch(drawCommand.blend) {
				case 0:
					lime_graphics_opengl_GL.context.__context.blendEquation(32774);
					lime_graphics_opengl_GL.context.__context.blendFuncSeparate(1,1,0,1);
					break;
				case 1:
					lime_graphics_opengl_GL.context.__context.blendEquation(32774);
					lime_graphics_opengl_GL.context.__context.blendFunc(1,771);
					break;
				case 9:
					lime_graphics_opengl_GL.context.__context.blendEquation(32774);
					lime_graphics_opengl_GL.context.__context.blendFuncSeparate(774,771,0,1);
					break;
				case 12:
					lime_graphics_opengl_GL.context.__context.blendEquation(32774);
					lime_graphics_opengl_GL.context.__context.blendFuncSeparate(1,769,0,1);
					break;
				case 14:
					lime_graphics_opengl_GL.context.__context.blendEquationSeparate(32779,32774);
					lime_graphics_opengl_GL.context.__context.blendFuncSeparate(1,1,0,1);
					break;
				}
				if(clipRect != null) {
					x += Math.max(clipRect.x,0) | 0;
					y += Math.max(clipRect.y,0) | 0;
				}
				lime_graphics_opengl_GL.context.__context.scissor(x,haxepunk_HXP.windowHeight - y - height,width,height);
				lime_graphics_opengl_GL.context.__context.enable(3089);
				lime_graphics_opengl_GL.context.__context.drawArrays(4,0,triangles * 3);
				var pos_lineNumber4;
				var pos_fileName4 = "HardwareRenderer.hx";
				pos_lineNumber4 = 155;
				var pos_className4 = "haxepunk.graphics.hardware.HardwareRenderer";
				var pos_methodName4 = "render";
				var error4 = lime_graphics_opengl_GL.context.__context.getError();
				if(error4 != 0) {
					haxe_Log.trace("GL Error found at " + pos_fileName4 + ":" + pos_lineNumber4 + ": " + error4,{ fileName : "GLUtils.hx", lineNumber : 35, className : "haxepunk.graphics.hardware.opengl.GLUtils", methodName : "checkForErrors"});
				}
				lime_graphics_opengl_GL.context.__context.disable(3089);
				lime_graphics_opengl_GL.context.__context.bindBuffer(34962,null);
				shader.unbind();
				var pos_lineNumber5;
				var pos_fileName5 = "HardwareRenderer.hx";
				pos_lineNumber5 = 162;
				var pos_className5 = "haxepunk.graphics.hardware.HardwareRenderer";
				var pos_methodName5 = "render";
				var error5 = lime_graphics_opengl_GL.context.__context.getError();
				if(error5 != 0) {
					haxe_Log.trace("GL Error found at " + pos_fileName5 + ":" + pos_lineNumber5 + ": " + error5,{ fileName : "GLUtils.hx", lineNumber : 35, className : "haxepunk.graphics.hardware.opengl.GLUtils", methodName : "checkForErrors"});
				}
			}
		}
	}
	,startScene: function(scene) {
		haxepunk_graphics_hardware_HardwareRenderer._tracking = scene.trackDrawCalls;
		if(this.buffer == null || this.buffer.glBuffer == null) {
			if(this.buffer == null) {
				this.buffer = new haxepunk_graphics_hardware_RenderBuffer();
			}
			if(this.fb == null) {
				this.fb = new haxepunk_graphics_hardware_FrameBuffer();
				this.backFb = new haxepunk_graphics_hardware_FrameBuffer();
			}
		}
		var postProcess = scene.shaders;
		if(postProcess != null && postProcess.length > 0) {
			this.fb.bindFrameBuffer();
		} else {
			lime_graphics_opengl_GL.context.__context.bindFramebuffer(36160,this.defaultFramebuffer);
		}
		this.x = haxepunk_HXP.screen.x + Math.max(scene.x,0) | 0;
		this.y = haxepunk_HXP.screen.y + Math.max(scene.y,0) | 0;
		this.width = (scene._width == null ? haxepunk_HXP.screen.width - scene.x : scene._width) | 0;
		this.height = (scene._height == null ? haxepunk_HXP.screen.height - scene.y : scene._height) | 0;
	}
	,flushScene: function(scene) {
		var postProcess = scene.shaders;
		if(postProcess != null) {
			var _g1 = 0;
			var _g = postProcess.length;
			while(_g1 < _g) {
				var i = _g1++;
				var last = i == postProcess.length - 1;
				var shader = postProcess[i];
				var renderTexture = this.fb.texture;
				if(last) {
					lime_graphics_opengl_GL.context.__context.bindFramebuffer(36160,this.defaultFramebuffer);
				} else {
					var oldFb = this.fb;
					this.fb = this.backFb;
					this.backFb = oldFb;
					this.fb.bindFrameBuffer();
				}
				shader.bind();
				lime_graphics_opengl_GL.context.__context.activeTexture(33984);
				lime_graphics_opengl_GL.context.__context.bindTexture(3553,renderTexture);
				lime_graphics_opengl_GL.context.__context.blendEquation(32774);
				lime_graphics_opengl_GL.context.__context.blendFunc(1,771);
				lime_graphics_opengl_GL.context.__context.drawArrays(4,0,6);
				lime_graphics_opengl_GL.context.__context.bindBuffer(34962,null);
				lime_graphics_opengl_GL.context.__context.bindTexture(3553,null);
				shader.unbind();
				lime_graphics_opengl_GL.context.__context.bindFramebuffer(36160,null);
			}
		}
	}
	,startFrame: function() {
		haxepunk_graphics_hardware_HardwareRenderer.triangleCount = 0;
		haxepunk_graphics_hardware_HardwareRenderer.drawCallCount = 0;
		lime_graphics_opengl_GL.context.__context.bindFramebuffer(36160,this.defaultFramebuffer);
	}
	,endFrame: function() {
	}
	,init: function() {
		if(this.buffer == null) {
			this.buffer = new haxepunk_graphics_hardware_RenderBuffer();
		}
		if(this.fb == null) {
			this.fb = new haxepunk_graphics_hardware_FrameBuffer();
			this.backFb = new haxepunk_graphics_hardware_FrameBuffer();
		}
	}
	,bindDefaultFramebuffer: function() {
		lime_graphics_opengl_GL.context.__context.bindFramebuffer(36160,this.defaultFramebuffer);
	}
	,destroy: function() {
	}
	,x: null
	,y: null
	,width: null
	,height: null
	,__class__: haxepunk_graphics_hardware_HardwareRenderer
};
var haxepunk_graphics_hardware_RenderBuffer = function() {
	this.init();
};
$hxClasses["haxepunk.graphics.hardware.RenderBuffer"] = haxepunk_graphics_hardware_RenderBuffer;
haxepunk_graphics_hardware_RenderBuffer.__name__ = ["haxepunk","graphics","hardware","RenderBuffer"];
haxepunk_graphics_hardware_RenderBuffer.resize = function(length,minChunks,chunkSize) {
	return Math.max(length * 2 / chunkSize | 0,minChunks) * chunkSize | 0;
};
haxepunk_graphics_hardware_RenderBuffer.prototype = {
	buffer: null
	,glBuffer: null
	,get_length: function() {
		return this.buffer.length;
	}
	,intArray: null
	,byteOffset: null
	,init: function() {
		this.glBuffer = lime_graphics_opengl_GL.context.__context.createBuffer();
	}
	,ensureSize: function(triangles,floatsPerTriangle) {
		if(this.glBuffer == null) {
			this.buffer = null;
			this.init();
		}
		var bufferLength = this.buffer == null ? 0 : this.buffer.length;
		if(bufferLength < triangles * floatsPerTriangle) {
			var elements = Math.max(bufferLength * 2 / floatsPerTriangle | 0,triangles) * floatsPerTriangle | 0;
			var this1;
			if(elements != null) {
				this1 = new Float32Array(elements);
			} else {
				this1 = null;
			}
			this.buffer = this1;
			this.intArray = new Int32Array(this.buffer.buffer);
			this["use"]();
			var size = this.buffer.length * 4;
			var srcData = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.buffer);
			lime_graphics_opengl_GL.context.__context.bufferData(34962,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(srcData,size),35048);
		}
	}
	,'use': function() {
		lime_graphics_opengl_GL.context.__context.bindBuffer(34962,this.glBuffer);
		this.byteOffset = 0;
	}
	,addFloat: function(v) {
		this.buffer[this.byteOffset] = v;
		this.byteOffset += 1;
	}
	,addVec: function(x,y) {
		this.buffer[this.byteOffset] = x;
		this.buffer[this.byteOffset + 1] = y;
		this.byteOffset += 2;
	}
	,addInt: function(value) {
		this.intArray[this.byteOffset] = value;
		this.byteOffset += 1;
	}
	,addVertexAttribData: function(attribs,nbVertices) {
		var _g = 0;
		while(_g < attribs.length) {
			var attrib = attribs[_g];
			++_g;
			var attribData = attrib.data;
			var _g2 = 0;
			var _g1 = nbVertices * attrib.valuesPerElement;
			while(_g2 < _g1) {
				var k = _g2++;
				var _g3 = attrib;
				var v = attribData[_g3.set_dataPos(_g3.dataPos + 1)];
				this.buffer[this.byteOffset] = v;
				this.byteOffset += 1;
			}
		}
	}
	,updateGraphicsCard: function() {
		var size = this.buffer.length * 4;
		var srcData = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.buffer);
		lime_graphics_opengl_GL.context.__context.bufferSubData(34962,0,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(srcData,size));
	}
	,prepareVertexOnly: function(drawCommand) {
		drawCommand._iterator.triangle = drawCommand.data;
		var _g = drawCommand._iterator;
		while(_g.triangle != null) {
			var current = _g.triangle;
			_g.triangle = _g.triangle._next;
			var tri = current;
			this.buffer[this.byteOffset] = tri.tx1;
			this.buffer[this.byteOffset + 1] = tri.ty1;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.tx2;
			this.buffer[this.byteOffset + 1] = tri.ty2;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.tx3;
			this.buffer[this.byteOffset + 1] = tri.ty3;
			this.byteOffset += 2;
		}
	}
	,prepareVertexAndColor: function(drawCommand) {
		var triangleColor = 0;
		drawCommand._iterator.triangle = drawCommand.data;
		var _g = drawCommand._iterator;
		while(_g.triangle != null) {
			var current = _g.triangle;
			_g.triangle = _g.triangle._next;
			var tri = current;
			var a = tri.alpha;
			var alpha = a <= 0 ? 0 : a >= 1 ? -16777216 : (255 * a | 0) << 24;
			triangleColor = tri.color & 16777215 | alpha;
			this.buffer[this.byteOffset] = tri.tx1;
			this.buffer[this.byteOffset + 1] = tri.ty1;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
			this.buffer[this.byteOffset] = tri.tx2;
			this.buffer[this.byteOffset + 1] = tri.ty2;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
			this.buffer[this.byteOffset] = tri.tx3;
			this.buffer[this.byteOffset + 1] = tri.ty3;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
		}
	}
	,prepareVertexAndUV: function(drawCommand) {
		drawCommand._iterator.triangle = drawCommand.data;
		var _g = drawCommand._iterator;
		while(_g.triangle != null) {
			var current = _g.triangle;
			_g.triangle = _g.triangle._next;
			var tri = current;
			this.buffer[this.byteOffset] = tri.tx1;
			this.buffer[this.byteOffset + 1] = tri.ty1;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.uvx1;
			this.buffer[this.byteOffset + 1] = tri.uvy1;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.tx2;
			this.buffer[this.byteOffset + 1] = tri.ty2;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.uvx2;
			this.buffer[this.byteOffset + 1] = tri.uvy2;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.tx3;
			this.buffer[this.byteOffset + 1] = tri.ty3;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.uvx3;
			this.buffer[this.byteOffset + 1] = tri.uvy3;
			this.byteOffset += 2;
		}
	}
	,prepareVertexUVandColor: function(drawCommand) {
		var triangleColor = 0;
		drawCommand._iterator.triangle = drawCommand.data;
		var _g = drawCommand._iterator;
		while(_g.triangle != null) {
			var current = _g.triangle;
			_g.triangle = _g.triangle._next;
			var tri = current;
			var a = tri.alpha;
			var alpha = a <= 0 ? 0 : a >= 1 ? -16777216 : (255 * a | 0) << 24;
			triangleColor = tri.color & 16777215 | alpha;
			this.buffer[this.byteOffset] = tri.tx1;
			this.buffer[this.byteOffset + 1] = tri.ty1;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.uvx1;
			this.buffer[this.byteOffset + 1] = tri.uvy1;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
			this.buffer[this.byteOffset] = tri.tx2;
			this.buffer[this.byteOffset + 1] = tri.ty2;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.uvx2;
			this.buffer[this.byteOffset + 1] = tri.uvy2;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
			this.buffer[this.byteOffset] = tri.tx3;
			this.buffer[this.byteOffset + 1] = tri.ty3;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.uvx3;
			this.buffer[this.byteOffset + 1] = tri.uvy3;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
		}
	}
	,__class__: haxepunk_graphics_hardware_RenderBuffer
	,__properties__: {get_length:"get_length"}
};
var haxepunk_graphics_hardware_opengl_GLUtils = function() { };
$hxClasses["haxepunk.graphics.hardware.opengl.GLUtils"] = haxepunk_graphics_hardware_opengl_GLUtils;
haxepunk_graphics_hardware_opengl_GLUtils.__name__ = ["haxepunk","graphics","hardware","opengl","GLUtils"];
haxepunk_graphics_hardware_opengl_GLUtils.bindTexture = function(texture,smooth,index) {
	if(index == null) {
		index = 33984;
	}
	lime_graphics_opengl_GL.context.__context.activeTexture(index);
	haxepunk_backend_lime_GLInternal.bindTexture(texture);
	if(smooth) {
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10241,9729);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10240,9729);
	} else {
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10241,9729);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10240,9728);
	}
	lime_graphics_opengl_GL.context.__context.texParameteri(3553,10242,33071);
	lime_graphics_opengl_GL.context.__context.texParameteri(3553,10243,33071);
};
haxepunk_graphics_hardware_opengl_GLUtils.checkForErrors = function(pos) {
	var error = lime_graphics_opengl_GL.context.__context.getError();
	if(error != 0) {
		haxe_Log.trace("GL Error found at " + pos.fileName + ":" + pos.lineNumber + ": " + error,{ fileName : "GLUtils.hx", lineNumber : 35, className : "haxepunk.graphics.hardware.opengl.GLUtils", methodName : "checkForErrors"});
	}
};
haxepunk_graphics_hardware_opengl_GLUtils.invalid = function(obj) {
	return obj == null;
};
var haxepunk_graphics_shader_Shader = function(vertexSource,fragmentSource) {
	this.uniformValues = new haxe_ds_StringMap();
	this.uniformNames = [];
	this.uniformIndices = new haxe_ds_StringMap();
	this.attributes = new haxe_ds_StringMap();
	this.attributeNames = [];
	this.position = new haxepunk_graphics_shader_Attribute(this);
	this.texCoord = new haxepunk_graphics_shader_Attribute(this);
	this.color = new haxepunk_graphics_shader_Attribute(this);
	this.vertexSource = vertexSource;
	this.fragmentSource = fragmentSource;
	this.build();
	this.id = haxepunk_graphics_shader_Shader.idSeq++;
};
$hxClasses["haxepunk.graphics.shader.Shader"] = haxepunk_graphics_shader_Shader;
haxepunk_graphics_shader_Shader.__name__ = ["haxepunk","graphics","shader","Shader"];
haxepunk_graphics_shader_Shader.prototype = {
	glProgram: null
	,get_floatsPerVertex: function() {
		var a = 2 + (this.texCoord.get_isEnabled() ? 2 : 0) + (this.color.get_isEnabled() ? 1 : 0);
		var _this = this.attributes;
		var v = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.get_isEnabled()) {
				a += v1.valuesPerElement;
			}
		}
		return a;
	}
	,vertexSource: null
	,fragmentSource: null
	,id: null
	,position: null
	,texCoord: null
	,color: null
	,attributeNames: null
	,attributes: null
	,uniformIndices: null
	,uniformNames: null
	,uniformValues: null
	,build: function() {
		var vertexShader = this.compile(35633,this.vertexSource);
		var fragmentShader = this.compile(35632,this.fragmentSource);
		this.glProgram = lime_graphics_opengl_GL.context.__context.createProgram();
		lime_graphics_opengl_GL.context.__context.attachShader(this.glProgram,fragmentShader);
		lime_graphics_opengl_GL.context.__context.attachShader(this.glProgram,vertexShader);
		lime_graphics_opengl_GL.context.__context.linkProgram(this.glProgram);
		this.position.rebind();
		this.texCoord.rebind();
		this.color.rebind();
		var _this = this.attributes;
		var v = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(v.hasNext()) {
			var v1 = v.next();
			v1.rebind();
		}
	}
	,compile: function(type,source) {
		var shader = lime_graphics_opengl_GL.context.__context.createShader(type);
		lime_graphics_opengl_GL.context.__context.shaderSource(shader,source);
		lime_graphics_opengl_GL.context.__context.compileShader(shader);
		return shader;
	}
	,destroy: function() {
		var key = this.uniformIndices.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			this.uniformIndices.remove(key1);
		}
		var key2 = this.attributes.keys();
		while(key2.hasNext()) {
			var key3 = key2.next();
			this.attributes.remove(key3);
		}
	}
	,prepare: function(drawCommand,buffer) {
		var _gthis = this;
		if(!this.position.get_isEnabled()) {
			return;
		}
		var attribs = this.attributeNames.map(function(n) {
			var _this = _gthis.attributes;
			if(__map_reserved[n] != null) {
				return _this.getReserved(n);
			} else {
				return _this.h[n];
			}
		}).filter(function(a) {
			return a.get_isEnabled();
		});
		buffer["use"]();
		if(this.texCoord.get_isEnabled()) {
			if(this.color.get_isEnabled()) {
				buffer.prepareVertexUVandColor(drawCommand);
			} else {
				buffer.prepareVertexAndUV(drawCommand);
			}
		} else if(this.color.get_isEnabled()) {
			buffer.prepareVertexAndColor(drawCommand);
		} else {
			buffer.prepareVertexOnly(drawCommand);
		}
		var nbVertices = drawCommand.triangleCount * 3;
		var _g = 0;
		while(_g < attribs.length) {
			var attrib = attribs[_g];
			++_g;
			var attribData = attrib.data;
			var _g2 = 0;
			var _g1 = nbVertices * attrib.valuesPerElement;
			while(_g2 < _g1) {
				var k = _g2++;
				var _g3 = attrib;
				var v = attribData[_g3.set_dataPos(_g3.dataPos + 1)];
				buffer.buffer[buffer.byteOffset] = v;
				buffer.byteOffset += 1;
			}
		}
		var size = buffer.buffer.length * 4;
		var srcData = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(buffer.buffer);
		lime_graphics_opengl_GL.context.__context.bufferSubData(34962,0,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(srcData,size));
		this.setAttributePointers(drawCommand.triangleCount);
	}
	,setAttributePointers: function(nbTriangles) {
		var offset = 0;
		var stride = (2 + (this.texCoord.get_isEnabled() ? 2 : 0) + (this.color.get_isEnabled() ? 1 : 0)) * 4;
		var index = this.position.index;
		var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(offset);
		lime_graphics_opengl_GL.context.__context.vertexAttribPointer(index,2,5126,false,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
		offset += 8;
		if(this.texCoord.get_isEnabled()) {
			var index1 = this.texCoord.index;
			var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(offset);
			lime_graphics_opengl_GL.context.__context.vertexAttribPointer(index1,2,5126,false,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset2));
			offset += 8;
		}
		if(this.color.get_isEnabled()) {
			var index2 = this.color.index;
			var offset3 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(offset);
			lime_graphics_opengl_GL.context.__context.vertexAttribPointer(index2,4,5121,true,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset3));
			offset += 4;
		}
		offset *= nbTriangles * 3;
		var _g = 0;
		var _g1 = this.attributeNames;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			var _this = this.attributes;
			var attrib = __map_reserved[n] != null ? _this.getReserved(n) : _this.h[n];
			if(attrib.get_isEnabled()) {
				var index3 = attrib.index;
				var size = attrib.valuesPerElement;
				var offset4 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(offset);
				lime_graphics_opengl_GL.context.__context.vertexAttribPointer(index3,size,5126,false,0,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset4));
				offset += nbTriangles * 3 * attrib.valuesPerElement * 4;
			}
		}
	}
	,bind: function() {
		if(this.glProgram == null) {
			this.destroy();
			this.build();
		}
		var program = this.glProgram;
		lime_graphics_opengl_GL.__currentProgram = program;
		lime_graphics_opengl_GL.context.__context.useProgram(program);
		var _g = 0;
		var _g1 = this.uniformNames;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			if(!this.uniformIndices.exists(name)) {
				var this1 = this.uniformIndices;
				var v = lime_graphics_opengl_GL.context.__context.getUniformLocation(this.glProgram,name);
				this1.set(name,v);
			}
			var location = this.uniformIndices.get(name);
			var _this = this.uniformValues;
			var v0 = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
			lime_graphics_opengl_GL.context.__context.uniform1f(location,v0);
		}
		lime_graphics_opengl_GL.context.__context.enableVertexAttribArray(this.position.index);
		if(this.texCoord.get_isEnabled()) {
			lime_graphics_opengl_GL.context.__context.enableVertexAttribArray(this.texCoord.index);
		}
		if(this.color.get_isEnabled()) {
			lime_graphics_opengl_GL.context.__context.enableVertexAttribArray(this.color.index);
		}
		var _g2 = 0;
		var _g11 = this.attributeNames;
		while(_g2 < _g11.length) {
			var n = _g11[_g2];
			++_g2;
			var _this1 = this.attributes;
			if((__map_reserved[n] != null ? _this1.getReserved(n) : _this1.h[n]).get_isEnabled()) {
				var _this2 = this.attributes;
				var index = __map_reserved[n] != null ? _this2.getReserved(n) : _this2.h[n];
				lime_graphics_opengl_GL.context.__context.enableVertexAttribArray(index.index);
			}
		}
		var pos_lineNumber;
		var pos_fileName = "Shader.hx";
		pos_lineNumber = 230;
		var pos_className = "haxepunk.graphics.shader.Shader";
		var pos_methodName = "bind";
		var error = lime_graphics_opengl_GL.context.__context.getError();
		if(error != 0) {
			haxe_Log.trace("GL Error found at " + pos_fileName + ":" + pos_lineNumber + ": " + error,{ fileName : "GLUtils.hx", lineNumber : 35, className : "haxepunk.graphics.hardware.opengl.GLUtils", methodName : "checkForErrors"});
		}
	}
	,unbind: function() {
		lime_graphics_opengl_GL.__currentProgram = null;
		lime_graphics_opengl_GL.context.__context.useProgram(null);
		lime_graphics_opengl_GL.context.__context.disableVertexAttribArray(this.position.index);
		if(this.texCoord.get_isEnabled()) {
			lime_graphics_opengl_GL.context.__context.disableVertexAttribArray(this.texCoord.index);
		}
		if(this.color.get_isEnabled()) {
			lime_graphics_opengl_GL.context.__context.disableVertexAttribArray(this.color.index);
		}
		var _g = 0;
		var _g1 = this.attributeNames;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			var _this = this.attributes;
			if((__map_reserved[n] != null ? _this.getReserved(n) : _this.h[n]).get_isEnabled()) {
				var _this1 = this.attributes;
				var index = __map_reserved[n] != null ? _this1.getReserved(n) : _this1.h[n];
				lime_graphics_opengl_GL.context.__context.disableVertexAttribArray(index.index);
			}
		}
	}
	,attributeIndex: function(name) {
		return lime_graphics_opengl_GL.context.__context.getAttribLocation(this.glProgram,name);
	}
	,uniformIndex: function(name) {
		var _this = this.uniformIndices;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			var this1 = this.uniformIndices;
			var v = lime_graphics_opengl_GL.context.__context.getUniformLocation(this.glProgram,name);
			var _this1 = this1;
			if(__map_reserved[name] != null) {
				_this1.setReserved(name,v);
			} else {
				_this1.h[name] = v;
			}
		}
		var _this2 = this.uniformIndices;
		if(__map_reserved[name] != null) {
			return _this2.getReserved(name);
		} else {
			return _this2.h[name];
		}
	}
	,setUniform: function(name,value) {
		var _this = this.uniformValues;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			this.uniformNames.push(name);
		}
		var _this1 = this.uniformValues;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,value);
		} else {
			_this1.h[name] = value;
		}
	}
	,setVertexAttribData: function(name,values,valuesPerElement) {
		var attrib;
		var _this = this.attributes;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			attrib = new haxepunk_graphics_shader_Attribute(this);
			attrib.name = name;
			attrib.rebind();
			if(attrib.index == -1) {
				haxe_Log.trace("Warning : attribute '" + attrib.name + "' is not declared or not used in shader source.",{ fileName : "Shader.hx", lineNumber : 36, className : "haxepunk.graphics.shader.Attribute", methodName : "set_name"});
			}
			var _this1 = this.attributes;
			if(__map_reserved[name] != null) {
				_this1.setReserved(name,attrib);
			} else {
				_this1.h[name] = attrib;
			}
			this.attributeNames.push(name);
		} else {
			var _this2 = this.attributes;
			if(__map_reserved[name] != null) {
				attrib = _this2.getReserved(name);
			} else {
				attrib = _this2.h[name];
			}
		}
		attrib.set_data(values);
		attrib.valuesPerElement = valuesPerElement;
	}
	,appendVertexAttribData: function(name,values) {
		var attrib;
		var _this = this.attributes;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			throw new js__$Boot_HaxeError("appendVertexAttribData : attribute '" + name + "' was not declared");
		} else {
			var _this1 = this.attributes;
			if(__map_reserved[name] != null) {
				attrib = _this1.getReserved(name);
			} else {
				attrib = _this1.h[name];
			}
		}
		if(values.length % attrib.valuesPerElement != 0) {
			throw new js__$Boot_HaxeError("appendVertexAttribData : values per element do not match");
		}
		attrib.set_data(attrib.data.concat(values));
	}
	,__class__: haxepunk_graphics_shader_Shader
	,__properties__: {get_floatsPerVertex:"get_floatsPerVertex"}
};
var haxepunk_graphics_shader_ColorShader = function(fragment) {
	haxepunk_graphics_shader_Shader.call(this,haxepunk_graphics_shader_ColorShader.VERTEX_SHADER,fragment == null ? haxepunk_graphics_shader_ColorShader.FRAGMENT_SHADER : fragment);
	var _this = this.position;
	_this.name = "aPosition";
	_this.rebind();
	if(_this.index == -1) {
		haxe_Log.trace("Warning : attribute '" + _this.name + "' is not declared or not used in shader source.",{ fileName : "Shader.hx", lineNumber : 36, className : "haxepunk.graphics.shader.Attribute", methodName : "set_name"});
	}
	var _this1 = this.color;
	_this1.name = "aColor";
	_this1.rebind();
	if(_this1.index == -1) {
		haxe_Log.trace("Warning : attribute '" + _this1.name + "' is not declared or not used in shader source.",{ fileName : "Shader.hx", lineNumber : 36, className : "haxepunk.graphics.shader.Attribute", methodName : "set_name"});
	}
};
$hxClasses["haxepunk.graphics.shader.ColorShader"] = haxepunk_graphics_shader_ColorShader;
haxepunk_graphics_shader_ColorShader.__name__ = ["haxepunk","graphics","shader","ColorShader"];
haxepunk_graphics_shader_ColorShader.__properties__ = {get_defaultShader:"get_defaultShader"};
haxepunk_graphics_shader_ColorShader.get_defaultShader = function() {
	if(haxepunk_graphics_shader_ColorShader.defaultShader == null) {
		haxepunk_graphics_shader_ColorShader.defaultShader = new haxepunk_graphics_shader_ColorShader();
	}
	return haxepunk_graphics_shader_ColorShader.defaultShader;
};
haxepunk_graphics_shader_ColorShader.__super__ = haxepunk_graphics_shader_Shader;
haxepunk_graphics_shader_ColorShader.prototype = $extend(haxepunk_graphics_shader_Shader.prototype,{
	__class__: haxepunk_graphics_shader_ColorShader
});
var haxepunk_graphics_shader_SceneShader = function(fragment) {
	haxepunk_graphics_shader_Shader.call(this,"\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec4 aPosition;\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\n\nvoid main() {\n\tvTexCoord = aTexCoord;\n\tgl_Position = aPosition;\n}",fragment);
	var _this = this.position;
	_this.name = "aPosition";
	_this.rebind();
	if(_this.index == -1) {
		haxe_Log.trace("Warning : attribute '" + _this.name + "' is not declared or not used in shader source.",{ fileName : "Shader.hx", lineNumber : 36, className : "haxepunk.graphics.shader.Attribute", methodName : "set_name"});
	}
	var _this1 = this.texCoord;
	_this1.name = "aTexCoord";
	_this1.rebind();
	if(_this1.index == -1) {
		haxe_Log.trace("Warning : attribute '" + _this1.name + "' is not declared or not used in shader source.",{ fileName : "Shader.hx", lineNumber : 36, className : "haxepunk.graphics.shader.Attribute", methodName : "set_name"});
	}
};
$hxClasses["haxepunk.graphics.shader.SceneShader"] = haxepunk_graphics_shader_SceneShader;
haxepunk_graphics_shader_SceneShader.__name__ = ["haxepunk","graphics","shader","SceneShader"];
haxepunk_graphics_shader_SceneShader.fromAsset = function(name) {
	return new haxepunk_graphics_shader_SceneShader(haxepunk_backend_flash_AssetLoader.getText(name));
};
haxepunk_graphics_shader_SceneShader.__super__ = haxepunk_graphics_shader_Shader;
haxepunk_graphics_shader_SceneShader.prototype = $extend(haxepunk_graphics_shader_Shader.prototype,{
	createBuffer: function() {
		haxepunk_graphics_shader_SceneShader.buffer = lime_graphics_opengl_GL.context.__context.createBuffer();
		lime_graphics_opengl_GL.context.__context.bindBuffer(34962,haxepunk_graphics_shader_SceneShader.buffer);
		var array = haxepunk_graphics_shader_SceneShader._vertices;
		var this1;
		if(array != null) {
			this1 = new Float32Array(array);
		} else {
			this1 = null;
		}
		var v = this1;
		var size = v.length * 4;
		var srcData = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(v);
		lime_graphics_opengl_GL.context.__context.bufferData(34962,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(srcData,size),35044);
		lime_graphics_opengl_GL.context.__context.bindBuffer(34962,null);
	}
	,build: function() {
		haxepunk_graphics_shader_Shader.prototype.build.call(this);
		if(!this.uniformIndices.exists("uImage0")) {
			var this1 = this.uniformIndices;
			var v = lime_graphics_opengl_GL.context.__context.getUniformLocation(this.glProgram,"uImage0");
			this1.set("uImage0",v);
		}
		this.image = this.uniformIndices.get("uImage0");
		if(!this.uniformIndices.exists("uResolution")) {
			var this2 = this.uniformIndices;
			var v1 = lime_graphics_opengl_GL.context.__context.getUniformLocation(this.glProgram,"uResolution");
			this2.set("uResolution",v1);
		}
		this.resolution = this.uniformIndices.get("uResolution");
	}
	,bind: function() {
		haxepunk_graphics_shader_Shader.prototype.bind.call(this);
		if(haxepunk_graphics_shader_SceneShader.buffer == null) {
			this.createBuffer();
		}
		lime_graphics_opengl_GL.context.__context.bindBuffer(34962,haxepunk_graphics_shader_SceneShader.buffer);
		var index = this.position.index;
		var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
		lime_graphics_opengl_GL.context.__context.vertexAttribPointer(index,2,5126,false,16,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
		var index1 = this.texCoord.index;
		var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(8);
		lime_graphics_opengl_GL.context.__context.vertexAttribPointer(index1,2,5126,false,16,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
		lime_graphics_opengl_GL.context.__context.uniform1i(this.image,0);
		lime_graphics_opengl_GL.context.__context.uniform2f(this.resolution,haxepunk_HXP.screen.width,haxepunk_HXP.screen.height);
	}
	,image: null
	,resolution: null
	,__class__: haxepunk_graphics_shader_SceneShader
});
var haxepunk_graphics_shader_Attribute = function(parent) {
	this.dataPos = -1;
	this.index = -1;
	this.parent = parent;
};
$hxClasses["haxepunk.graphics.shader.Attribute"] = haxepunk_graphics_shader_Attribute;
haxepunk_graphics_shader_Attribute.__name__ = ["haxepunk","graphics","shader","Attribute"];
haxepunk_graphics_shader_Attribute.prototype = {
	index: null
	,data: null
	,set_data: function(v) {
		this.set_dataPos(-1);
		return this.data = v;
	}
	,valuesPerElement: null
	,dataPos: null
	,set_dataPos: function(v) {
		return this.dataPos = v > -1 && this.data != null ? v % this.data.length : v;
	}
	,name: null
	,set_name: function(value) {
		this.name = value;
		this.rebind();
		if(this.index == -1) {
			haxe_Log.trace("Warning : attribute '" + this.name + "' is not declared or not used in shader source.",{ fileName : "Shader.hx", lineNumber : 36, className : "haxepunk.graphics.shader.Attribute", methodName : "set_name"});
		}
		return this.name;
	}
	,isEnabled: null
	,get_isEnabled: function() {
		if(this.name != null) {
			return this.index != -1;
		} else {
			return false;
		}
	}
	,parent: null
	,rebind: function() {
		if(this.name != null) {
			this.index = lime_graphics_opengl_GL.context.__context.getAttribLocation(this.parent.glProgram,this.name);
		}
		this.set_dataPos(-1);
	}
	,__class__: haxepunk_graphics_shader_Attribute
	,__properties__: {get_isEnabled:"get_isEnabled",set_name:"set_name",set_dataPos:"set_dataPos",set_data:"set_data"}
};
var haxepunk_graphics_shader_TextureShader = function(vertex,fragment) {
	haxepunk_graphics_shader_Shader.call(this,vertex == null ? haxepunk_graphics_shader_TextureShader.VERTEX_SHADER : vertex,fragment == null ? haxepunk_graphics_shader_TextureShader.FRAGMENT_SHADER : fragment);
	var _this = this.position;
	_this.name = "aPosition";
	_this.rebind();
	if(_this.index == -1) {
		haxe_Log.trace("Warning : attribute '" + _this.name + "' is not declared or not used in shader source.",{ fileName : "Shader.hx", lineNumber : 36, className : "haxepunk.graphics.shader.Attribute", methodName : "set_name"});
	}
	var _this1 = this.texCoord;
	_this1.name = "aTexCoord";
	_this1.rebind();
	if(_this1.index == -1) {
		haxe_Log.trace("Warning : attribute '" + _this1.name + "' is not declared or not used in shader source.",{ fileName : "Shader.hx", lineNumber : 36, className : "haxepunk.graphics.shader.Attribute", methodName : "set_name"});
	}
	var _this2 = this.color;
	_this2.name = "aColor";
	_this2.rebind();
	if(_this2.index == -1) {
		haxe_Log.trace("Warning : attribute '" + _this2.name + "' is not declared or not used in shader source.",{ fileName : "Shader.hx", lineNumber : 36, className : "haxepunk.graphics.shader.Attribute", methodName : "set_name"});
	}
};
$hxClasses["haxepunk.graphics.shader.TextureShader"] = haxepunk_graphics_shader_TextureShader;
haxepunk_graphics_shader_TextureShader.__name__ = ["haxepunk","graphics","shader","TextureShader"];
haxepunk_graphics_shader_TextureShader.__properties__ = {get_defaultShader:"get_defaultShader"};
haxepunk_graphics_shader_TextureShader.fromAsset = function(name) {
	return new haxepunk_graphics_shader_TextureShader(null,haxepunk_backend_flash_AssetLoader.getText(name));
};
haxepunk_graphics_shader_TextureShader.get_defaultShader = function() {
	if(haxepunk_graphics_shader_TextureShader.defaultShader == null) {
		haxepunk_graphics_shader_TextureShader.defaultShader = new haxepunk_graphics_shader_TextureShader();
	}
	return haxepunk_graphics_shader_TextureShader.defaultShader;
};
haxepunk_graphics_shader_TextureShader.__super__ = haxepunk_graphics_shader_Shader;
haxepunk_graphics_shader_TextureShader.prototype = $extend(haxepunk_graphics_shader_Shader.prototype,{
	__class__: haxepunk_graphics_shader_TextureShader
});
var haxepunk_graphics_text_IBitmapFont = function() { };
$hxClasses["haxepunk.graphics.text.IBitmapFont"] = haxepunk_graphics_text_IBitmapFont;
haxepunk_graphics_text_IBitmapFont.__name__ = ["haxepunk","graphics","text","IBitmapFont"];
haxepunk_graphics_text_IBitmapFont.prototype = {
	getChar: null
	,getLineHeight: null
	,__class__: haxepunk_graphics_text_IBitmapFont
};
var haxepunk_graphics_text_BitmapFont = function(fontName) {
	this.atlases = [];
	this.fontName = fontName;
};
$hxClasses["haxepunk.graphics.text.BitmapFont"] = haxepunk_graphics_text_BitmapFont;
haxepunk_graphics_text_BitmapFont.__name__ = ["haxepunk","graphics","text","BitmapFont"];
haxepunk_graphics_text_BitmapFont.__interfaces__ = [haxepunk_graphics_text_IBitmapFont];
haxepunk_graphics_text_BitmapFont.prototype = {
	fontName: null
	,atlases: null
	,addSize: function(atlas) {
		var _g1 = 0;
		var _g = this.atlases.length + 1;
		while(_g1 < _g) {
			var i = _g1++;
			if(i == this.atlases.length || this.atlases[i].fontSize > atlas.fontSize) {
				this.atlases.splice(i,0,atlas);
			}
		}
	}
	,getChar: function(string,size) {
		var best = null;
		var _g = 0;
		var _g1 = this.atlases;
		while(_g < _g1.length) {
			var atlas = _g1[_g];
			++_g;
			best = atlas;
			if(atlas.fontSize > size) {
				break;
			}
		}
		var atlas1 = best;
		var glyph = atlas1.glyphData.exists(string) ? atlas1.glyphData.get(string) : atlas1.glyphData.get(" ");
		glyph.scale = size / atlas1.fontSize;
		var glyph1 = glyph;
		return glyph1;
	}
	,getLineHeight: function(size) {
		var best = null;
		var _g = 0;
		var _g1 = this.atlases;
		while(_g < _g1.length) {
			var atlas = _g1[_g];
			++_g;
			best = atlas;
			if(atlas.fontSize > size) {
				break;
			}
		}
		var atlas1 = best;
		return atlas1.getLineHeight(size);
	}
	,atlasForScale: function(size) {
		var best = null;
		var _g = 0;
		var _g1 = this.atlases;
		while(_g < _g1.length) {
			var atlas = _g1[_g];
			++_g;
			best = atlas;
			if(atlas.fontSize > size) {
				break;
			}
		}
		return best;
	}
	,__class__: haxepunk_graphics_text_BitmapFont
};
var haxepunk_graphics_text_BitmapFontAtlas = function(source) {
	this.fontSize = 0;
	this.lineHeight = 0;
	haxepunk_graphics_atlas_TextureAtlas.call(this,source);
	this.glyphData = new haxe_ds_StringMap();
};
$hxClasses["haxepunk.graphics.text.BitmapFontAtlas"] = haxepunk_graphics_text_BitmapFontAtlas;
haxepunk_graphics_text_BitmapFontAtlas.__name__ = ["haxepunk","graphics","text","BitmapFontAtlas"];
haxepunk_graphics_text_BitmapFontAtlas.__interfaces__ = [haxepunk_graphics_text_IBitmapFont];
haxepunk_graphics_text_BitmapFontAtlas.getFont = function(fontName,format,extraParams) {
	if(haxepunk_graphics_text_BitmapFontAtlas._fonts == null) {
		haxepunk_graphics_text_BitmapFontAtlas._fonts = new haxe_ds_StringMap();
	}
	if(format == null) {
		format = 1;
	}
	var _this = haxepunk_graphics_text_BitmapFontAtlas._fonts;
	if(!(__map_reserved[fontName] != null ? _this.existsReserved(fontName) : _this.h.hasOwnProperty(fontName))) {
		var this1 = haxepunk_graphics_text_BitmapFontAtlas._fonts;
		var v;
		switch(format) {
		case 1:
			v = haxepunk_graphics_text_BitmapFontAtlas.loadXMLFont(fontName);
			break;
		case 2:
			v = haxepunk_graphics_text_BitmapFontAtlas.loadXNAFont(fontName,extraParams);
			break;
		}
		var _this1 = this1;
		if(__map_reserved[fontName] != null) {
			_this1.setReserved(fontName,v);
		} else {
			_this1.h[fontName] = v;
		}
	}
	var _this2 = haxepunk_graphics_text_BitmapFontAtlas._fonts;
	if(__map_reserved[fontName] != null) {
		return _this2.getReserved(fontName);
	} else {
		return _this2.h[fontName];
	}
};
haxepunk_graphics_text_BitmapFontAtlas.loadXMLFont = function(file) {
	var xmlText = haxepunk_backend_flash_AssetLoader.getText(file);
	if(xmlText == null) {
		throw new js__$Boot_HaxeError("BitmapFontAtlas: \"" + file + "\" not found!");
	}
	var xml = Xml.parse(xmlText);
	var firstElement = xml.firstElement();
	if(firstElement == null) {
		throw new js__$Boot_HaxeError("BitmapFontAtlas: \"" + file + "\" contains invalid XML!");
	}
	var fast = new haxe_xml_Fast(firstElement);
	var imageFile = new haxe_io_Path(file).dir + "/" + fast.node.resolve("pages").node.resolve("page").att.resolve("file");
	var data = null;
	if(haxepunk_graphics_atlas_AtlasData._dataPool.exists(imageFile)) {
		data = haxepunk_graphics_atlas_AtlasData._dataPool.get(imageFile);
	} else {
		var texture = haxepunk_assets_AssetCache.global.getTexture(imageFile);
		if(texture != null) {
			data = new haxepunk_graphics_atlas_AtlasData(texture,imageFile);
		}
	}
	var this1 = data;
	var atlas = new haxepunk_graphics_text_BitmapFontAtlas(this1);
	atlas.lineHeight = Std.parseInt(fast.node.resolve("common").att.resolve("lineHeight"));
	atlas.fontSize = Std.parseInt(fast.node.resolve("info").att.resolve("size"));
	var chars = fast.node.resolve("chars");
	var _g_head = chars.nodes.resolve("char").h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var $char = val;
		var tmp = $char.att.resolve("x");
		haxepunk_HXP.rect.x = Std.parseInt(tmp);
		var tmp1 = $char.att.resolve("y");
		haxepunk_HXP.rect.y = Std.parseInt(tmp1);
		var tmp2 = $char.att.resolve("width");
		haxepunk_HXP.rect.width = Std.parseInt(tmp2);
		var tmp3 = $char.att.resolve("height");
		haxepunk_HXP.rect.height = Std.parseInt(tmp3);
		var glyph = null;
		if($char.has.resolve("letter")) {
			glyph = $char.att.resolve("letter");
		} else if($char.has.resolve("id")) {
			glyph = String.fromCharCode(Std.parseInt($char.att.resolve("id")));
		}
		if(glyph == null) {
			throw new js__$Boot_HaxeError("\"" + file + "\" is not a valid .fnt file!");
		}
		switch(glyph) {
		case "&amp;":
			glyph = "&";
			break;
		case "&gt;":
			glyph = ">";
			break;
		case "&lt;":
			glyph = "<";
			break;
		case "&quot;":
			glyph = "\"";
			break;
		case "space":
			glyph = " ";
			break;
		default:
			glyph = glyph;
		}
		var region = atlas.defineRegion(glyph,haxepunk_HXP.rect);
		var gd = { glyph : glyph, rect : haxepunk_HXP.rect.clone(), xOffset : $char.has.resolve("xoffset") ? Std.parseInt($char.att.resolve("xoffset")) : 0, yOffset : $char.has.resolve("yoffset") ? Std.parseInt($char.att.resolve("yoffset")) : 0, xAdvance : $char.has.resolve("xadvance") ? Std.parseInt($char.att.resolve("xadvance")) : 0, scale : 1, region : region};
		var _this = atlas.glyphData;
		if(__map_reserved[glyph] != null) {
			_this.setReserved(glyph,gd);
		} else {
			_this.h[glyph] = gd;
		}
	}
	return atlas;
};
haxepunk_graphics_text_BitmapFontAtlas.loadXNAFont = function(asset,options) {
	var data = null;
	if(haxepunk_graphics_atlas_AtlasData._dataPool.exists(asset)) {
		data = haxepunk_graphics_atlas_AtlasData._dataPool.get(asset);
	} else {
		var texture = haxepunk_assets_AssetCache.global.getTexture(asset);
		if(texture != null) {
			data = new haxepunk_graphics_atlas_AtlasData(texture,asset);
		}
	}
	var this1 = data;
	var atlas = new haxepunk_graphics_text_BitmapFontAtlas(this1);
	var texture1 = null;
	try {
		texture1 = atlas._data.texture;
	} catch( _ ) {
		haxe_CallStack.lastException = _;
	}
	if(texture1 == null) {
		throw new js__$Boot_HaxeError("Invalid XNA font asset \"" + asset + "\": no Texture found.");
	}
	if(options == null) {
		options = { };
	}
	if(!Object.prototype.hasOwnProperty.call(options,"letters")) {
		options.letters = haxepunk_graphics_text_BitmapFontAtlas._DEFAULT_GLYPHS;
	}
	if(!Object.prototype.hasOwnProperty.call(options,"glyphBGColor")) {
		options.glyphBGColor = -14671840;
	}
	var glyphString = options.letters;
	var globalBGColor = texture1.getPixel(0,0);
	var cy = 0;
	var cx;
	var letterIdx = 0;
	var glyph;
	var alphabetLength = glyphString.length;
	while(cy < texture1.height && letterIdx < alphabetLength) {
		var rowHeight = 0;
		cx = 0;
		while(cx < texture1.width && letterIdx < alphabetLength) {
			if((texture1.getPixel(cx,cy) | 0) != globalBGColor) {
				var gx = cx;
				var gy = cy;
				while((texture1.getPixel(gx,cy) | 0) != globalBGColor) ++gx;
				while((texture1.getPixel(cx,gy) | 0) != globalBGColor) ++gy;
				var gw = gx - cx;
				var gh = gy - cy;
				glyph = glyphString.charAt(letterIdx);
				haxepunk_HXP.rect.setTo(cx,cy,gw,gh);
				var region = atlas.defineRegion(glyph,haxepunk_HXP.rect);
				var gd = { glyph : glyph, rect : haxepunk_HXP.rect.clone(), xOffset : 0, yOffset : 0, xAdvance : gw, scale : 1, region : region};
				var _this = atlas.glyphData;
				if(__map_reserved[glyph] != null) {
					_this.setReserved(glyph,gd);
				} else {
					_this.h[glyph] = gd;
				}
				if(gh > rowHeight) {
					rowHeight = gh;
				}
				if(gh > atlas.fontSize) {
					atlas.fontSize = gh;
				}
				cx += gw;
				++letterIdx;
			}
			++cx;
		}
		cy += rowHeight + 1;
	}
	atlas.lineHeight = atlas.fontSize;
	var bgColor32 = texture1.getPixel(0,0);
	texture1.threshold(texture1,texture1.rect,haxepunk_backend_flash__$Texture_Texture_$Impl_$._zero,"==",bgColor32,0,-1,true);
	if(options.glyphBGColor != null) {
		texture1.threshold(texture1,texture1.rect,haxepunk_backend_flash__$Texture_Texture_$Impl_$._zero,"==",options.glyphBGColor,0,-1,true);
	}
	return atlas;
};
haxepunk_graphics_text_BitmapFontAtlas.__super__ = haxepunk_graphics_atlas_TextureAtlas;
haxepunk_graphics_text_BitmapFontAtlas.prototype = $extend(haxepunk_graphics_atlas_TextureAtlas.prototype,{
	lineHeight: null
	,fontSize: null
	,glyphData: null
	,getChar: function(name,size) {
		var glyph;
		var _this = this.glyphData;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this.glyphData;
			if(__map_reserved[name] != null) {
				glyph = _this1.getReserved(name);
			} else {
				glyph = _this1.h[name];
			}
		} else {
			var _this2 = this.glyphData;
			if(__map_reserved[" "] != null) {
				glyph = _this2.getReserved(" ");
			} else {
				glyph = _this2.h[" "];
			}
		}
		glyph.scale = size / this.fontSize;
		return glyph;
	}
	,getLineHeight: function(size) {
		return this.lineHeight * size / this.fontSize;
	}
	,__class__: haxepunk_graphics_text_BitmapFontAtlas
});
var haxepunk_graphics_text__$BitmapText_AlignType_$Impl_$ = {};
$hxClasses["haxepunk.graphics.text._BitmapText.AlignType_Impl_"] = haxepunk_graphics_text__$BitmapText_AlignType_$Impl_$;
haxepunk_graphics_text__$BitmapText_AlignType_$Impl_$.__name__ = ["haxepunk","graphics","text","_BitmapText","AlignType_Impl_"];
haxepunk_graphics_text__$BitmapText_AlignType_$Impl_$.__properties__ = {get_floatValue:"get_floatValue"};
haxepunk_graphics_text__$BitmapText_AlignType_$Impl_$.get_floatValue = function(this1) {
	switch(this1) {
	case 1:
		return 0.5;
	case 2:
		return 1;
	default:
		return 0;
	}
};
var haxepunk_graphics_text_RenderData = function() {
	this.scale = 1;
	this.alpha = 1;
	this.color = 16777215;
	this.y = 0;
	this.x = 0;
};
$hxClasses["haxepunk.graphics.text.RenderData"] = haxepunk_graphics_text_RenderData;
haxepunk_graphics_text_RenderData.__name__ = ["haxepunk","graphics","text","RenderData"];
haxepunk_graphics_text_RenderData.prototype = {
	'char': null
	,img: null
	,x: null
	,y: null
	,color: null
	,alpha: null
	,scale: null
	,__class__: haxepunk_graphics_text_RenderData
};
var haxepunk_graphics_text_TextOpcode = $hxClasses["haxepunk.graphics.text.TextOpcode"] = { __ename__ : ["haxepunk","graphics","text","TextOpcode"], __constructs__ : ["SetColor","SetAlpha","SetScale","SetSize","TextBlock","NewLine","Image","Align","Custom","PopColor","PopAlpha","PopScale","PopSize","PopCustom"] };
haxepunk_graphics_text_TextOpcode.SetColor = function(color) { var $x = ["SetColor",0,color]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.SetAlpha = function(alpha) { var $x = ["SetAlpha",1,alpha]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.SetScale = function(scale) { var $x = ["SetScale",2,scale]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.SetSize = function(size) { var $x = ["SetSize",3,size]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.TextBlock = function(text) { var $x = ["TextBlock",4,text]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.NewLine = function(width,height,align) { var $x = ["NewLine",5,width,height,align]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.Image = function(image,padding) { var $x = ["Image",6,image,padding]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.Align = function(alignType) { var $x = ["Align",7,alignType]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.Custom = function(f) { var $x = ["Custom",8,f]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.PopColor = ["PopColor",9];
haxepunk_graphics_text_TextOpcode.PopColor.toString = $estr;
haxepunk_graphics_text_TextOpcode.PopColor.__enum__ = haxepunk_graphics_text_TextOpcode;
haxepunk_graphics_text_TextOpcode.PopAlpha = ["PopAlpha",10];
haxepunk_graphics_text_TextOpcode.PopAlpha.toString = $estr;
haxepunk_graphics_text_TextOpcode.PopAlpha.__enum__ = haxepunk_graphics_text_TextOpcode;
haxepunk_graphics_text_TextOpcode.PopScale = ["PopScale",11];
haxepunk_graphics_text_TextOpcode.PopScale.toString = $estr;
haxepunk_graphics_text_TextOpcode.PopScale.__enum__ = haxepunk_graphics_text_TextOpcode;
haxepunk_graphics_text_TextOpcode.PopSize = ["PopSize",12];
haxepunk_graphics_text_TextOpcode.PopSize.toString = $estr;
haxepunk_graphics_text_TextOpcode.PopSize.__enum__ = haxepunk_graphics_text_TextOpcode;
haxepunk_graphics_text_TextOpcode.PopCustom = ["PopCustom",13];
haxepunk_graphics_text_TextOpcode.PopCustom.toString = $estr;
haxepunk_graphics_text_TextOpcode.PopCustom.__enum__ = haxepunk_graphics_text_TextOpcode;
var haxepunk_graphics_text_BitmapText = function(text,x,y,width,height,options) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this._dirty = false;
	this.autoHeight = false;
	this.autoWidth = false;
	this.opCodes = [];
	this.charCount = 0;
	this.displayCharCount = -1;
	this.charSpacing = 0;
	this.lineSpacing = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.scale = 1;
	this.wrap = false;
	this.size = 0;
	this.height = 0;
	this.width = 0;
	this.textHeight = 0;
	this.textWidth = 0;
	haxepunk_Graphic.call(this);
	if(options == null) {
		options = { };
	}
	if(!Object.prototype.hasOwnProperty.call(options,"font")) {
		options.font = haxepunk_HXP.defaultFont + ".fnt";
	}
	if(!Object.prototype.hasOwnProperty.call(options,"size")) {
		options.size = 16;
	}
	if(!Object.prototype.hasOwnProperty.call(options,"color")) {
		options.color = 16777215;
	}
	if(!Object.prototype.hasOwnProperty.call(options,"wordWrap")) {
		options.wordWrap = false;
	}
	var font = haxepunk_assets_AssetCache.getBitmapFont(options.font);
	if(font == null) {
		font = haxepunk_graphics_text_BitmapFontAtlas.getFont(options.font,options.format,options.extraParams);
	}
	this._font = font;
	if(this._font == null) {
		throw new js__$Boot_HaxeError("Invalid font glyphs provided.");
	}
	this.x = x;
	this.y = y;
	if(width != this.width) {
		this._dirty = true;
	}
	this.width = width;
	if(height != this.height) {
		this._dirty = true;
	}
	this.height = height;
	var v = options.wordWrap;
	if(v != this.wrap) {
		this._dirty = true;
	}
	this.wrap = v;
	var v1 = options.size;
	if(v1 != this.size) {
		this._dirty = true;
	}
	this.size = v1;
	this.autoWidth = width == 0;
	this.autoHeight = height == 0;
	this.set_color(options.color);
	this.set_text(text != null ? text : "");
};
$hxClasses["haxepunk.graphics.text.BitmapText"] = haxepunk_graphics_text_BitmapText;
haxepunk_graphics_text_BitmapText.__name__ = ["haxepunk","graphics","text","BitmapText"];
haxepunk_graphics_text_BitmapText.defineFormatTag = function(tag,options) {
	var _this = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[tag] != null ? _this.existsReserved(tag) : _this.h.hasOwnProperty(tag)) {
		throw new js__$Boot_HaxeError("Duplicate format tag: <" + tag + "> already exists");
	}
	var tagOps = [];
	var closeTagOps = [];
	if(Object.prototype.hasOwnProperty.call(options,"color")) {
		tagOps.push(haxepunk_graphics_text_TextOpcode.SetColor(options.color));
		closeTagOps.push(haxepunk_graphics_text_TextOpcode.PopColor);
	}
	if(Object.prototype.hasOwnProperty.call(options,"alpha")) {
		tagOps.push(haxepunk_graphics_text_TextOpcode.SetAlpha(options.alpha));
		closeTagOps.push(haxepunk_graphics_text_TextOpcode.PopAlpha);
	}
	if(Object.prototype.hasOwnProperty.call(options,"scale")) {
		tagOps.push(haxepunk_graphics_text_TextOpcode.SetScale(options.scale));
		closeTagOps.push(haxepunk_graphics_text_TextOpcode.PopScale);
	}
	if(Object.prototype.hasOwnProperty.call(options,"size")) {
		tagOps.push(haxepunk_graphics_text_TextOpcode.SetSize(options.size));
		closeTagOps.push(haxepunk_graphics_text_TextOpcode.PopSize);
	}
	var closeTag = "/" + tag;
	var _this1 = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[tag] != null) {
		_this1.setReserved(tag,tagOps);
	} else {
		_this1.h[tag] = tagOps;
	}
	var _this2 = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[closeTag] != null) {
		_this2.setReserved(closeTag,closeTagOps);
	} else {
		_this2.h[closeTag] = closeTagOps;
	}
};
haxepunk_graphics_text_BitmapText.defineImageTag = function(tag,image,padding) {
	if(padding == null) {
		padding = 0;
	}
	var _this = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[tag] != null ? _this.existsReserved(tag) : _this.h.hasOwnProperty(tag)) {
		throw new js__$Boot_HaxeError("Duplicate format tag: <" + tag + "> already exists");
	}
	var v = [haxepunk_graphics_text_TextOpcode.Image(image,padding)];
	var _this1 = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[tag] != null) {
		_this1.setReserved(tag,v);
	} else {
		_this1.h[tag] = v;
	}
};
haxepunk_graphics_text_BitmapText.defineCustomTag = function(tag,func) {
	var _this = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[tag] != null ? _this.existsReserved(tag) : _this.h.hasOwnProperty(tag)) {
		throw new js__$Boot_HaxeError("Duplicate format tag: <" + tag + "> already exists");
	}
	var closeTag = "/" + tag;
	var v = [haxepunk_graphics_text_TextOpcode.Custom(func)];
	var _this1 = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[tag] != null) {
		_this1.setReserved(tag,v);
	} else {
		_this1.h[tag] = v;
	}
	var v1 = [haxepunk_graphics_text_TextOpcode.PopCustom];
	var _this2 = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[closeTag] != null) {
		_this2.setReserved(closeTag,v1);
	} else {
		_this2.h[closeTag] = v1;
	}
};
haxepunk_graphics_text_BitmapText.removeTag = function(tag) {
	var _this = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[tag] != null ? _this.existsReserved(tag) : _this.h.hasOwnProperty(tag)) {
		haxepunk_graphics_text_BitmapText.formatTags.remove(tag);
	}
	var closeTag = "/" + tag;
	var _this1 = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[closeTag] != null ? _this1.existsReserved(closeTag) : _this1.h.hasOwnProperty(closeTag)) {
		haxepunk_graphics_text_BitmapText.formatTags.remove(closeTag);
	}
};
haxepunk_graphics_text_BitmapText.dynamicImage = function(src) {
	haxepunk_graphics_text_BitmapText._imgArray.length = 0;
	var region = haxepunk_assets_AssetCache.getRegion(src);
	var img;
	if(region == null) {
		var data = null;
		if(haxepunk_graphics_atlas_AtlasData._dataPool.exists(src)) {
			data = haxepunk_graphics_atlas_AtlasData._dataPool.get(src);
		} else {
			var texture = haxepunk_assets_AssetCache.global.getTexture(src);
			if(texture != null) {
				data = new haxepunk_graphics_atlas_AtlasData(texture,src);
			}
		}
		var this1 = data;
		img = haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1);
	} else {
		img = region;
	}
	var img1 = new haxepunk_graphics_Image(img);
	haxepunk_graphics_text_BitmapText._imgArray.push(haxepunk_graphics_text_TextOpcode.Image(img1,0));
	return haxepunk_graphics_text_BitmapText._imgArray;
};
haxepunk_graphics_text_BitmapText.__super__ = haxepunk_Graphic;
haxepunk_graphics_text_BitmapText.prototype = $extend(haxepunk_Graphic.prototype,{
	textWidth: null
	,get_textWidth: function() {
		if(this._dirty) {
			this.parseText();
		}
		return this.textWidth;
	}
	,set_textWidth: function(v) {
		return this.textWidth = v;
	}
	,textHeight: null
	,get_textHeight: function() {
		if(this._dirty) {
			this.parseText();
		}
		return this.textHeight;
	}
	,set_textHeight: function(v) {
		return this.textHeight = v;
	}
	,width: null
	,set_width: function(v) {
		if(v != this.width) {
			this._dirty = true;
		}
		return this.width = v;
	}
	,height: null
	,set_height: function(v) {
		if(v != this.height) {
			this._dirty = true;
		}
		return this.height = v;
	}
	,size: null
	,set_size: function(v) {
		if(v != this.size) {
			this._dirty = true;
		}
		return this.size = v;
	}
	,wrap: null
	,set_wrap: function(v) {
		if(v != this.wrap) {
			this._dirty = true;
		}
		return this.wrap = v;
	}
	,scale: null
	,set_scale: function(v) {
		if(v != this.scale) {
			this._dirty = true;
		}
		return this.scale = v;
	}
	,scaleX: null
	,set_scaleX: function(v) {
		if(v != this.scaleX) {
			this._dirty = true;
		}
		return this.scaleX = v;
	}
	,scaleY: null
	,set_scaleY: function(v) {
		if(v != this.scaleY) {
			this._dirty = true;
		}
		return this.scaleY = v;
	}
	,lineSpacing: null
	,set_lineSpacing: function(v) {
		if(v != this.lineSpacing) {
			this._dirty = true;
		}
		return this.lineSpacing = v;
	}
	,charSpacing: null
	,set_charSpacing: function(v) {
		if(v != this.charSpacing) {
			this._dirty = true;
		}
		return this.charSpacing = v;
	}
	,displayCharCount: null
	,charCount: null
	,opCodes: null
	,text: null
	,set_text: function(text) {
		if(this.text != text) {
			this.text = text;
			this._dirty = true;
		}
		return text;
	}
	,parseText: function() {
		var _gthis = this;
		this.opCodes.length = 0;
		haxepunk_graphics_text_BitmapText._sizeStack.length = 0;
		haxepunk_graphics_text_BitmapText._scaleStack.length = 0;
		haxepunk_graphics_text_BitmapText._colorStack.length = 0;
		haxepunk_graphics_text_BitmapText._alphaStack.length = 0;
		haxepunk_graphics_text_BitmapText._word.length = 0;
		haxepunk_graphics_text_BitmapText._sizeStack.push(this.size);
		haxepunk_graphics_text_BitmapText._scaleStack.push(1);
		haxepunk_graphics_text_BitmapText._colorStack.push(this.color);
		haxepunk_graphics_text_BitmapText._alphaStack.push(this.alpha);
		var fsx = haxepunk_HXP.screen.fullScaleX;
		var fsy = haxepunk_HXP.screen.fullScaleY;
		var sx = this.size * this.scale * this.scaleX;
		var sy = this.size * this.scale * this.scaleY;
		var lineHeight = this._font.getLineHeight(sy * fsy) / fsy;
		var lineSpacing = this.lineSpacing * this.scale * this.scaleY;
		var thisLineHeight = 0;
		var remaining = this.text;
		var cursorX = 0;
		var cursorY = 0;
		var trailingWhitespace = 0;
		var block = "";
		var currentWord = "";
		var wordLength = 0;
		var wordTrailingWhitespace = 0;
		var wordHeight = 0;
		var currentScale = 1;
		var currentSizeRatio = 1;
		var currentAlign = 0;
		var wrapping = false;
		var currentWordTrailingWhitespace = 0;
		var textWidth = 0;
		this.charCount = 0;
		this.opCodes.push(null);
		var newLineIndex = 0;
		while(true) {
			var matched = haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.match(remaining);
			var line = matched ? haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matchedLeft() : remaining;
			if(line.length > 0) {
				var i = 0;
				while(i < line.length) {
					var u = new haxe_Utf8(4);
					var c = HxOverrides.cca(line,i);
					u.__b += String.fromCharCode(c);
					var $char = u.__b;
					wordHeight = Math.max(wordHeight,lineHeight * currentScale * currentSizeRatio);
					switch($char) {
					case "\n":
						if(currentWord != "") {
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
							currentWord = "";
							wordTrailingWhitespace = currentWordTrailingWhitespace;
							currentWordTrailingWhitespace = 0;
						}
						if(haxepunk_graphics_text_BitmapText._word.length != 0) {
							if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
								_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
								trailingWhitespace = 0;
								cursorX = trailingWhitespace;
								cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
								thisLineHeight = lineHeight * currentScale * currentSizeRatio;
								_gthis.opCodes.push(null);
								newLineIndex = _gthis.opCodes.length - 1;
								++_gthis.charCount;
								cursorX = wordLength;
							} else {
								cursorX += wordLength;
							}
							if(cursorX > textWidth) {
								textWidth = cursorX | 0;
							}
							var _g = 0;
							var _g1 = haxepunk_graphics_text_BitmapText._word;
							while(_g < _g1.length) {
								var opCode = _g1[_g];
								++_g;
								if(opCode == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
									_gthis.opCodes.push(opCode);
								} else if(opCode[1] == 4) {
									var txt2 = opCode[2];
									var _g2 = _gthis.opCodes[_gthis.opCodes.length - 1];
									if(_g2[1] == 4) {
										var txt1 = _g2[2];
										_gthis.opCodes[_gthis.opCodes.length - 1] = haxepunk_graphics_text_TextOpcode.TextBlock(txt1 + txt2);
									} else {
										_gthis.opCodes.push(opCode);
									}
								} else {
									_gthis.opCodes.push(opCode);
								}
							}
							thisLineHeight = Math.max(wordHeight,thisLineHeight);
							haxepunk_graphics_text_BitmapText._word.length = 0;
							wordLength = 0;
							wordHeight = 0;
							trailingWhitespace = wordTrailingWhitespace;
							wordTrailingWhitespace = 0;
						}
						_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
						trailingWhitespace = 0;
						cursorX = trailingWhitespace;
						cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
						thisLineHeight = lineHeight * currentScale * currentSizeRatio;
						_gthis.opCodes.push(null);
						newLineIndex = _gthis.opCodes.length - 1;
						++_gthis.charCount;
						break;
					case " ":
						var maxFullScale = sx * fsx;
						var gd = _gthis._font.getChar($char,maxFullScale * currentScale * currentSizeRatio);
						var charWidth = gd.xAdvance * gd.scale / fsx;
						currentWord = haxepunk_utils__$Utf8String_Utf8String_$Impl_$.concat(currentWord,$char);
						var charLength = charWidth + _gthis.charSpacing * currentScale * currentSizeRatio;
						currentWordTrailingWhitespace += charLength;
						wordLength += charLength;
						++_gthis.charCount;
						if(currentWord != "") {
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
							currentWord = "";
							wordTrailingWhitespace = currentWordTrailingWhitespace;
							currentWordTrailingWhitespace = 0;
						}
						if(haxepunk_graphics_text_BitmapText._word.length != 0) {
							if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
								_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
								trailingWhitespace = 0;
								cursorX = trailingWhitespace;
								cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
								thisLineHeight = lineHeight * currentScale * currentSizeRatio;
								_gthis.opCodes.push(null);
								newLineIndex = _gthis.opCodes.length - 1;
								++_gthis.charCount;
								cursorX = wordLength;
							} else {
								cursorX += wordLength;
							}
							if(cursorX > textWidth) {
								textWidth = cursorX | 0;
							}
							var _g3 = 0;
							var _g11 = haxepunk_graphics_text_BitmapText._word;
							while(_g3 < _g11.length) {
								var opCode1 = _g11[_g3];
								++_g3;
								if(opCode1 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
									_gthis.opCodes.push(opCode1);
								} else if(opCode1[1] == 4) {
									var txt21 = opCode1[2];
									var _g4 = _gthis.opCodes[_gthis.opCodes.length - 1];
									if(_g4[1] == 4) {
										var txt11 = _g4[2];
										_gthis.opCodes[_gthis.opCodes.length - 1] = haxepunk_graphics_text_TextOpcode.TextBlock(txt11 + txt21);
									} else {
										_gthis.opCodes.push(opCode1);
									}
								} else {
									_gthis.opCodes.push(opCode1);
								}
							}
							thisLineHeight = Math.max(wordHeight,thisLineHeight);
							haxepunk_graphics_text_BitmapText._word.length = 0;
							wordLength = 0;
							wordHeight = 0;
							trailingWhitespace = wordTrailingWhitespace;
							wordTrailingWhitespace = 0;
						}
						break;
					case "-":
						var hyphen = currentWord != "";
						if(hyphen && i < line.length - 1) {
							var u1 = new haxe_Utf8(4);
							var c1 = HxOverrides.cca(line,i + 1);
							u1.__b += String.fromCharCode(c1);
							var nextChar = u1.__b;
							if(nextChar == " " || nextChar == "-") {
								hyphen = false;
							}
						}
						var maxFullScale1 = sx * fsx;
						var gd1 = _gthis._font.getChar($char,maxFullScale1 * currentScale * currentSizeRatio);
						var charWidth1 = gd1.xAdvance * gd1.scale / fsx;
						currentWord = haxepunk_utils__$Utf8String_Utf8String_$Impl_$.concat(currentWord,$char);
						var charLength1 = charWidth1 + _gthis.charSpacing * currentScale * currentSizeRatio;
						currentWordTrailingWhitespace = 0;
						wordLength += charLength1;
						++_gthis.charCount;
						if(hyphen) {
							if(currentWord != "") {
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
								currentWord = "";
								wordTrailingWhitespace = currentWordTrailingWhitespace;
								currentWordTrailingWhitespace = 0;
							}
							if(haxepunk_graphics_text_BitmapText._word.length != 0) {
								if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
									_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
									trailingWhitespace = 0;
									cursorX = trailingWhitespace;
									cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
									thisLineHeight = lineHeight * currentScale * currentSizeRatio;
									_gthis.opCodes.push(null);
									newLineIndex = _gthis.opCodes.length - 1;
									++_gthis.charCount;
									cursorX = wordLength;
								} else {
									cursorX += wordLength;
								}
								if(cursorX > textWidth) {
									textWidth = cursorX | 0;
								}
								var _g5 = 0;
								var _g12 = haxepunk_graphics_text_BitmapText._word;
								while(_g5 < _g12.length) {
									var opCode2 = _g12[_g5];
									++_g5;
									if(opCode2 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
										_gthis.opCodes.push(opCode2);
									} else if(opCode2[1] == 4) {
										var txt22 = opCode2[2];
										var _g6 = _gthis.opCodes[_gthis.opCodes.length - 1];
										if(_g6[1] == 4) {
											var txt12 = _g6[2];
											_gthis.opCodes[_gthis.opCodes.length - 1] = haxepunk_graphics_text_TextOpcode.TextBlock(txt12 + txt22);
										} else {
											_gthis.opCodes.push(opCode2);
										}
									} else {
										_gthis.opCodes.push(opCode2);
									}
								}
								thisLineHeight = Math.max(wordHeight,thisLineHeight);
								haxepunk_graphics_text_BitmapText._word.length = 0;
								wordLength = 0;
								wordHeight = 0;
								trailingWhitespace = wordTrailingWhitespace;
								wordTrailingWhitespace = 0;
							}
						}
						break;
					default:
						if($char == "\t") {
							$char = " ";
						}
						var maxFullScale2 = sx * fsx;
						var gd2 = _gthis._font.getChar($char,maxFullScale2 * currentScale * currentSizeRatio);
						var charWidth2 = gd2.xAdvance * gd2.scale / fsx;
						currentWord = haxepunk_utils__$Utf8String_Utf8String_$Impl_$.concat(currentWord,$char);
						var charLength2 = charWidth2 + _gthis.charSpacing * currentScale * currentSizeRatio;
						currentWordTrailingWhitespace = 0;
						wordLength += charLength2;
						++_gthis.charCount;
					}
					++i;
				}
			}
			if(matched) {
				var tag = haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(2);
				if(tag == null) {
					tag = haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(1);
				}
				var tmp;
				if(tag != null && haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(4) != null) {
					var _this = haxepunk_graphics_text_BitmapText.dynamicTags;
					if(__map_reserved[tag] != null) {
						tmp = _this.existsReserved(tag);
					} else {
						tmp = _this.h.hasOwnProperty(tag);
					}
				} else {
					tmp = false;
				}
				if(tmp) {
					haxe_Log.trace(haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(4),{ fileName : "BitmapText.hx", lineNumber : 592, className : "haxepunk.graphics.text.BitmapText", methodName : "parseText"});
					var _g7 = 0;
					var _this1 = haxepunk_graphics_text_BitmapText.dynamicTags;
					var _g13 = (__map_reserved[tag] != null ? _this1.getReserved(tag) : _this1.h[tag])(haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(5));
					while(_g7 < _g13.length) {
						var tag1 = _g13[_g7];
						++_g7;
						switch(tag1[1]) {
						case 0:
							var color = tag1[2];
							haxepunk_graphics_text_BitmapText._colorStack.push(color);
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							break;
						case 1:
							var alpha = tag1[2];
							haxepunk_graphics_text_BitmapText._alphaStack.push(alpha);
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							break;
						case 2:
							var scale = tag1[2];
							currentScale = scale;
							haxepunk_graphics_text_BitmapText._scaleStack.push(currentScale);
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							break;
						case 3:
							var size = tag1[2];
							haxepunk_graphics_text_BitmapText._sizeStack.push(size);
							currentSizeRatio = size / _gthis.size;
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							break;
						case 5:
							if(currentWord != "") {
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
								currentWord = "";
								wordTrailingWhitespace = currentWordTrailingWhitespace;
								currentWordTrailingWhitespace = 0;
							}
							if(haxepunk_graphics_text_BitmapText._word.length != 0) {
								if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
									_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
									trailingWhitespace = 0;
									cursorX = trailingWhitespace;
									cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
									thisLineHeight = lineHeight * currentScale * currentSizeRatio;
									_gthis.opCodes.push(null);
									newLineIndex = _gthis.opCodes.length - 1;
									++_gthis.charCount;
									cursorX = wordLength;
								} else {
									cursorX += wordLength;
								}
								if(cursorX > textWidth) {
									textWidth = cursorX | 0;
								}
								var _g8 = 0;
								var _g14 = haxepunk_graphics_text_BitmapText._word;
								while(_g8 < _g14.length) {
									var opCode3 = _g14[_g8];
									++_g8;
									if(opCode3 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
										_gthis.opCodes.push(opCode3);
									} else if(opCode3[1] == 4) {
										var txt23 = opCode3[2];
										var _g9 = _gthis.opCodes[_gthis.opCodes.length - 1];
										if(_g9[1] == 4) {
											var txt13 = _g9[2];
											_gthis.opCodes[_gthis.opCodes.length - 1] = haxepunk_graphics_text_TextOpcode.TextBlock(txt13 + txt23);
										} else {
											_gthis.opCodes.push(opCode3);
										}
									} else {
										_gthis.opCodes.push(opCode3);
									}
								}
								thisLineHeight = Math.max(wordHeight,thisLineHeight);
								haxepunk_graphics_text_BitmapText._word.length = 0;
								wordLength = 0;
								wordHeight = 0;
								trailingWhitespace = wordTrailingWhitespace;
								wordTrailingWhitespace = 0;
							}
							_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
							trailingWhitespace = 0;
							cursorX = trailingWhitespace;
							cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
							thisLineHeight = lineHeight * currentScale * currentSizeRatio;
							_gthis.opCodes.push(null);
							newLineIndex = _gthis.opCodes.length - 1;
							++_gthis.charCount;
							break;
						case 6:
							var padding = tag1[3];
							var image = tag1[2];
							var imageWidth = (image.get_width() * image.scale * image.scaleX * _gthis.scale * _gthis.scaleX + _gthis.charSpacing) * currentScale;
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							currentWordTrailingWhitespace = 0;
							wordLength += imageWidth + padding * 2;
							wordHeight = Math.max(wordHeight,image.get_height() * currentScale * image.scale * image.scaleY * _gthis.scale * _gthis.scaleY);
							if(cursorX > textWidth) {
								textWidth = cursorX | 0;
							}
							++_gthis.charCount;
							break;
						case 7:
							var alignType = tag1[2];
							if(currentWord != "") {
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
								currentWord = "";
								wordTrailingWhitespace = currentWordTrailingWhitespace;
								currentWordTrailingWhitespace = 0;
							}
							if(haxepunk_graphics_text_BitmapText._word.length != 0) {
								if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
									_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
									trailingWhitespace = 0;
									cursorX = trailingWhitespace;
									cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
									thisLineHeight = lineHeight * currentScale * currentSizeRatio;
									_gthis.opCodes.push(null);
									newLineIndex = _gthis.opCodes.length - 1;
									++_gthis.charCount;
									cursorX = wordLength;
								} else {
									cursorX += wordLength;
								}
								if(cursorX > textWidth) {
									textWidth = cursorX | 0;
								}
								var _g10 = 0;
								var _g15 = haxepunk_graphics_text_BitmapText._word;
								while(_g10 < _g15.length) {
									var opCode4 = _g15[_g10];
									++_g10;
									if(opCode4 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
										_gthis.opCodes.push(opCode4);
									} else if(opCode4[1] == 4) {
										var txt24 = opCode4[2];
										var _g16 = _gthis.opCodes[_gthis.opCodes.length - 1];
										if(_g16[1] == 4) {
											var txt14 = _g16[2];
											_gthis.opCodes[_gthis.opCodes.length - 1] = haxepunk_graphics_text_TextOpcode.TextBlock(txt14 + txt24);
										} else {
											_gthis.opCodes.push(opCode4);
										}
									} else {
										_gthis.opCodes.push(opCode4);
									}
								}
								thisLineHeight = Math.max(wordHeight,thisLineHeight);
								haxepunk_graphics_text_BitmapText._word.length = 0;
								wordLength = 0;
								wordHeight = 0;
								trailingWhitespace = wordTrailingWhitespace;
								wordTrailingWhitespace = 0;
							}
							if(cursorX > 0) {
								_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
								trailingWhitespace = 0;
								cursorX = trailingWhitespace;
								cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
								thisLineHeight = lineHeight * currentScale * currentSizeRatio;
								_gthis.opCodes.push(null);
								newLineIndex = _gthis.opCodes.length - 1;
								++_gthis.charCount;
							}
							if(alignType != 0 && !_gthis.autoWidth) {
								textWidth = _gthis.width | 0;
							}
							currentAlign = alignType;
							break;
						case 9:
							if(haxepunk_graphics_text_BitmapText._colorStack.length > 1) {
								haxepunk_graphics_text_BitmapText._colorStack.pop();
							}
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetColor(haxepunk_graphics_text_BitmapText._colorStack[haxepunk_graphics_text_BitmapText._colorStack.length - 1]));
							break;
						case 10:
							if(haxepunk_graphics_text_BitmapText._alphaStack.length > 1) {
								haxepunk_graphics_text_BitmapText._alphaStack.pop();
							}
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetAlpha(haxepunk_graphics_text_BitmapText._alphaStack[haxepunk_graphics_text_BitmapText._alphaStack.length - 1]));
							break;
						case 11:
							if(haxepunk_graphics_text_BitmapText._scaleStack.length > 1) {
								haxepunk_graphics_text_BitmapText._scaleStack.pop();
							}
							currentScale = haxepunk_graphics_text_BitmapText._scaleStack[haxepunk_graphics_text_BitmapText._scaleStack.length - 1];
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetScale(currentScale));
							break;
						case 12:
							if(haxepunk_graphics_text_BitmapText._sizeStack.length > 1) {
								haxepunk_graphics_text_BitmapText._sizeStack.pop();
							}
							currentSizeRatio = haxepunk_graphics_text_BitmapText._sizeStack[haxepunk_graphics_text_BitmapText._sizeStack.length - 1] / _gthis.size;
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetSize(haxepunk_graphics_text_BitmapText._sizeStack[haxepunk_graphics_text_BitmapText._sizeStack.length - 1]));
							break;
						default:
							haxepunk_graphics_text_BitmapText._word.push(tag1);
						}
					}
				} else {
					var tmp1;
					if(tag != null && haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(4) == null) {
						var _this2 = haxepunk_graphics_text_BitmapText.formatTags;
						if(__map_reserved[tag] != null) {
							tmp1 = _this2.existsReserved(tag);
						} else {
							tmp1 = _this2.h.hasOwnProperty(tag);
						}
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						if(currentWord != "") {
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
							currentWord = "";
							wordTrailingWhitespace = currentWordTrailingWhitespace;
							currentWordTrailingWhitespace = 0;
						}
						var _g17 = 0;
						var _this3 = haxepunk_graphics_text_BitmapText.formatTags;
						var _g18 = __map_reserved[tag] != null ? _this3.getReserved(tag) : _this3.h[tag];
						while(_g17 < _g18.length) {
							var tag2 = _g18[_g17];
							++_g17;
							switch(tag2[1]) {
							case 0:
								var color1 = tag2[2];
								haxepunk_graphics_text_BitmapText._colorStack.push(color1);
								haxepunk_graphics_text_BitmapText._word.push(tag2);
								break;
							case 1:
								var alpha1 = tag2[2];
								haxepunk_graphics_text_BitmapText._alphaStack.push(alpha1);
								haxepunk_graphics_text_BitmapText._word.push(tag2);
								break;
							case 2:
								var scale1 = tag2[2];
								currentScale = scale1;
								haxepunk_graphics_text_BitmapText._scaleStack.push(currentScale);
								haxepunk_graphics_text_BitmapText._word.push(tag2);
								break;
							case 3:
								var size1 = tag2[2];
								haxepunk_graphics_text_BitmapText._sizeStack.push(size1);
								currentSizeRatio = size1 / _gthis.size;
								haxepunk_graphics_text_BitmapText._word.push(tag2);
								break;
							case 5:
								if(currentWord != "") {
									haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
									currentWord = "";
									wordTrailingWhitespace = currentWordTrailingWhitespace;
									currentWordTrailingWhitespace = 0;
								}
								if(haxepunk_graphics_text_BitmapText._word.length != 0) {
									if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
										_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
										trailingWhitespace = 0;
										cursorX = trailingWhitespace;
										cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
										thisLineHeight = lineHeight * currentScale * currentSizeRatio;
										_gthis.opCodes.push(null);
										newLineIndex = _gthis.opCodes.length - 1;
										++_gthis.charCount;
										cursorX = wordLength;
									} else {
										cursorX += wordLength;
									}
									if(cursorX > textWidth) {
										textWidth = cursorX | 0;
									}
									var _g19 = 0;
									var _g110 = haxepunk_graphics_text_BitmapText._word;
									while(_g19 < _g110.length) {
										var opCode5 = _g110[_g19];
										++_g19;
										if(opCode5 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
											_gthis.opCodes.push(opCode5);
										} else if(opCode5[1] == 4) {
											var txt25 = opCode5[2];
											var _g20 = _gthis.opCodes[_gthis.opCodes.length - 1];
											if(_g20[1] == 4) {
												var txt15 = _g20[2];
												_gthis.opCodes[_gthis.opCodes.length - 1] = haxepunk_graphics_text_TextOpcode.TextBlock(txt15 + txt25);
											} else {
												_gthis.opCodes.push(opCode5);
											}
										} else {
											_gthis.opCodes.push(opCode5);
										}
									}
									thisLineHeight = Math.max(wordHeight,thisLineHeight);
									haxepunk_graphics_text_BitmapText._word.length = 0;
									wordLength = 0;
									wordHeight = 0;
									trailingWhitespace = wordTrailingWhitespace;
									wordTrailingWhitespace = 0;
								}
								_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
								trailingWhitespace = 0;
								cursorX = trailingWhitespace;
								cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
								thisLineHeight = lineHeight * currentScale * currentSizeRatio;
								_gthis.opCodes.push(null);
								newLineIndex = _gthis.opCodes.length - 1;
								++_gthis.charCount;
								break;
							case 6:
								var padding1 = tag2[3];
								var image1 = tag2[2];
								var imageWidth1 = (image1.get_width() * image1.scale * image1.scaleX * _gthis.scale * _gthis.scaleX + _gthis.charSpacing) * currentScale;
								haxepunk_graphics_text_BitmapText._word.push(tag2);
								currentWordTrailingWhitespace = 0;
								wordLength += imageWidth1 + padding1 * 2;
								wordHeight = Math.max(wordHeight,image1.get_height() * currentScale * image1.scale * image1.scaleY * _gthis.scale * _gthis.scaleY);
								if(cursorX > textWidth) {
									textWidth = cursorX | 0;
								}
								++_gthis.charCount;
								break;
							case 7:
								var alignType1 = tag2[2];
								if(currentWord != "") {
									haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
									currentWord = "";
									wordTrailingWhitespace = currentWordTrailingWhitespace;
									currentWordTrailingWhitespace = 0;
								}
								if(haxepunk_graphics_text_BitmapText._word.length != 0) {
									if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
										_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
										trailingWhitespace = 0;
										cursorX = trailingWhitespace;
										cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
										thisLineHeight = lineHeight * currentScale * currentSizeRatio;
										_gthis.opCodes.push(null);
										newLineIndex = _gthis.opCodes.length - 1;
										++_gthis.charCount;
										cursorX = wordLength;
									} else {
										cursorX += wordLength;
									}
									if(cursorX > textWidth) {
										textWidth = cursorX | 0;
									}
									var _g21 = 0;
									var _g111 = haxepunk_graphics_text_BitmapText._word;
									while(_g21 < _g111.length) {
										var opCode6 = _g111[_g21];
										++_g21;
										if(opCode6 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
											_gthis.opCodes.push(opCode6);
										} else if(opCode6[1] == 4) {
											var txt26 = opCode6[2];
											var _g22 = _gthis.opCodes[_gthis.opCodes.length - 1];
											if(_g22[1] == 4) {
												var txt16 = _g22[2];
												_gthis.opCodes[_gthis.opCodes.length - 1] = haxepunk_graphics_text_TextOpcode.TextBlock(txt16 + txt26);
											} else {
												_gthis.opCodes.push(opCode6);
											}
										} else {
											_gthis.opCodes.push(opCode6);
										}
									}
									thisLineHeight = Math.max(wordHeight,thisLineHeight);
									haxepunk_graphics_text_BitmapText._word.length = 0;
									wordLength = 0;
									wordHeight = 0;
									trailingWhitespace = wordTrailingWhitespace;
									wordTrailingWhitespace = 0;
								}
								if(cursorX > 0) {
									_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
									trailingWhitespace = 0;
									cursorX = trailingWhitespace;
									cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
									thisLineHeight = lineHeight * currentScale * currentSizeRatio;
									_gthis.opCodes.push(null);
									newLineIndex = _gthis.opCodes.length - 1;
									++_gthis.charCount;
								}
								if(alignType1 != 0 && !_gthis.autoWidth) {
									textWidth = _gthis.width | 0;
								}
								currentAlign = alignType1;
								break;
							case 9:
								if(haxepunk_graphics_text_BitmapText._colorStack.length > 1) {
									haxepunk_graphics_text_BitmapText._colorStack.pop();
								}
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetColor(haxepunk_graphics_text_BitmapText._colorStack[haxepunk_graphics_text_BitmapText._colorStack.length - 1]));
								break;
							case 10:
								if(haxepunk_graphics_text_BitmapText._alphaStack.length > 1) {
									haxepunk_graphics_text_BitmapText._alphaStack.pop();
								}
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetAlpha(haxepunk_graphics_text_BitmapText._alphaStack[haxepunk_graphics_text_BitmapText._alphaStack.length - 1]));
								break;
							case 11:
								if(haxepunk_graphics_text_BitmapText._scaleStack.length > 1) {
									haxepunk_graphics_text_BitmapText._scaleStack.pop();
								}
								currentScale = haxepunk_graphics_text_BitmapText._scaleStack[haxepunk_graphics_text_BitmapText._scaleStack.length - 1];
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetScale(currentScale));
								break;
							case 12:
								if(haxepunk_graphics_text_BitmapText._sizeStack.length > 1) {
									haxepunk_graphics_text_BitmapText._sizeStack.pop();
								}
								currentSizeRatio = haxepunk_graphics_text_BitmapText._sizeStack[haxepunk_graphics_text_BitmapText._sizeStack.length - 1] / _gthis.size;
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetSize(haxepunk_graphics_text_BitmapText._sizeStack[haxepunk_graphics_text_BitmapText._sizeStack.length - 1]));
								break;
							default:
								haxepunk_graphics_text_BitmapText._word.push(tag2);
							}
						}
					} else {
						haxe_Log.trace(this.text,{ fileName : "BitmapText.hx", lineNumber : 608, className : "haxepunk.graphics.text.BitmapText", methodName : "parseText"});
						throw new js__$Boot_HaxeError("Unrecognized " + (haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(4) == null ? "format" : "dynamic") + " tag: <" + tag + ">");
					}
				}
				remaining = haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matchedRight();
			} else {
				break;
			}
		}
		if(currentWord != "") {
			haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
			currentWord = "";
			wordTrailingWhitespace = currentWordTrailingWhitespace;
			currentWordTrailingWhitespace = 0;
		}
		if(haxepunk_graphics_text_BitmapText._word.length != 0) {
			if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
				_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
				trailingWhitespace = 0;
				cursorX = trailingWhitespace;
				cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
				thisLineHeight = lineHeight * currentScale * currentSizeRatio;
				_gthis.opCodes.push(null);
				newLineIndex = _gthis.opCodes.length - 1;
				++_gthis.charCount;
				cursorX = wordLength;
			} else {
				cursorX += wordLength;
			}
			if(cursorX > textWidth) {
				textWidth = cursorX | 0;
			}
			var _g23 = 0;
			var _g112 = haxepunk_graphics_text_BitmapText._word;
			while(_g23 < _g112.length) {
				var opCode7 = _g112[_g23];
				++_g23;
				if(opCode7 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
					_gthis.opCodes.push(opCode7);
				} else if(opCode7[1] == 4) {
					var txt27 = opCode7[2];
					var _g24 = _gthis.opCodes[_gthis.opCodes.length - 1];
					if(_g24[1] == 4) {
						var txt17 = _g24[2];
						_gthis.opCodes[_gthis.opCodes.length - 1] = haxepunk_graphics_text_TextOpcode.TextBlock(txt17 + txt27);
					} else {
						_gthis.opCodes.push(opCode7);
					}
				} else {
					_gthis.opCodes.push(opCode7);
				}
			}
			thisLineHeight = Math.max(wordHeight,thisLineHeight);
			haxepunk_graphics_text_BitmapText._word.length = 0;
			wordLength = 0;
			wordHeight = 0;
			trailingWhitespace = wordTrailingWhitespace;
			wordTrailingWhitespace = 0;
		}
		if(this.opCodes[newLineIndex] == null) {
			this.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX,thisLineHeight,currentAlign);
		}
		this.textWidth = textWidth;
		if(this.autoWidth) {
			if(textWidth != this.width) {
				this._dirty = true;
			}
			this.width = textWidth;
		}
		this.textHeight = cursorY + (cursorX > 0 ? thisLineHeight : 0) | 0;
		this._dirty = false;
	}
	,render: function(point,camera) {
		var _gthis = this;
		if(this._dirty) {
			this.parseText();
		}
		haxepunk_graphics_text_BitmapText._customStack.length = 0;
		var pixelPerfect = this.pixelSnapping || camera.pixelSnapping;
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY;
		var x = this.x;
		var x1 = camera.x * this.scrollX;
		this._point.x = point.x + (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x1 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x1);
		var y = this.y;
		var y1 = camera.y * this.scrollY;
		this._point.y = point.y + (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y1 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y1);
		var sx = this.scale * this.scaleX * this.size;
		var sy = this.scale * this.scaleY * this.size;
		var lineHeight = this._font.getLineHeight(sy * fsy) / fsy;
		var lineSpacing = this.lineSpacing * this.scale * this.scaleY;
		var thisLineHeight = 0;
		var lineOffsetX = 0;
		var currentColor = this.color;
		var currentAlpha = this.alpha;
		var currentScale = 1;
		var currentSizeRatio = 1;
		var cursorX = 0;
		var cursorY = 0;
		var charCount = 0;
		var _g = 0;
		var _g1 = this.opCodes;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			if(this.displayCharCount > -1 && charCount >= this.displayCharCount) {
				break;
			}
			switch(op[1]) {
			case 0:
				var color = op[2];
				currentColor = color;
				break;
			case 1:
				var alpha = op[2];
				currentAlpha = alpha;
				break;
			case 2:
				var scale = op[2];
				currentScale = scale;
				break;
			case 3:
				var size = op[2];
				currentSizeRatio = size / this.size;
				break;
			case 4:
				var text = op[2];
				var _g3 = 0;
				var _g2 = text.length;
				while(_g3 < _g2) {
					var i = _g3++;
					if(this.displayCharCount > -1 && charCount >= this.displayCharCount) {
						break;
					}
					++charCount;
					var $char = text.charAt(i);
					var maxFullScale = sx * fsx;
					var gd = this._font.getChar($char,maxFullScale * currentScale * currentSizeRatio);
					if($char == " ") {
						cursorX += gd.xAdvance * gd.scale / fsx + this.charSpacing * currentScale * currentSizeRatio;
					} else {
						haxepunk_graphics_text_BitmapText._renderData["char"] = $char;
						haxepunk_graphics_text_BitmapText._renderData.img = null;
						haxepunk_graphics_text_BitmapText._renderData.x = cursorX;
						haxepunk_graphics_text_BitmapText._renderData.y = cursorY;
						haxepunk_graphics_text_BitmapText._renderData.color = currentColor;
						haxepunk_graphics_text_BitmapText._renderData.alpha = currentAlpha;
						haxepunk_graphics_text_BitmapText._renderData.scale = currentScale;
						var data = haxepunk_graphics_text_BitmapText._renderData;
						var _g4 = 0;
						var _g11 = haxepunk_graphics_text_BitmapText._customStack;
						while(_g4 < _g11.length) {
							var func = _g11[_g4];
							++_g4;
							func(_gthis,data);
						}
						var x2 = haxepunk_graphics_text_BitmapText._renderData.x + lineOffsetX + gd.xOffset * gd.scale / fsx;
						var y2 = haxepunk_graphics_text_BitmapText._renderData.y + gd.yOffset * gd.scale * sy / maxFullScale + thisLineHeight - lineHeight * currentScale * currentSizeRatio;
						var _this = gd.region;
						var x3 = (this._point.x + (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x2 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x2)) * fsx;
						var y3 = (this._point.y + (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y2 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y2)) * fsy;
						var scaleX = gd.scale;
						var scaleY = gd.scale * sy * fsy / maxFullScale;
						var angle = 0;
						var color1 = haxepunk_graphics_text_BitmapText._renderData.color;
						var alpha1 = haxepunk_graphics_text_BitmapText._renderData.alpha;
						if(_this.rotated) {
							angle += 90;
						}
						var rect = _this._rect;
						var a;
						var b;
						var c;
						var d;
						if(angle == 0) {
							a = scaleX;
							b = 0;
							c = 0;
							d = scaleY;
						} else {
							var cos = Math.cos(-angle * (Math.PI / -180));
							var sin = Math.sin(-angle * (Math.PI / -180));
							a = cos * scaleX;
							b = -sin * scaleY;
							c = sin * scaleX;
							d = cos * scaleY;
						}
						var texture = _this._parent.texture;
						var rx = rect.x;
						var ry = rect.y;
						var rw = rect.width;
						var rh = rect.height;
						if(alpha1 > 0) {
							var uvx1;
							var uvy1;
							var uvx2;
							var uvy2;
							if(texture == null) {
								uvy1 = 0;
								uvx1 = uvy1;
								uvx2 = rw;
								uvy2 = rh;
							} else {
								uvx1 = rx / texture.width;
								uvy1 = ry / texture.height;
								uvx2 = (rx + rw) / texture.width;
								uvy2 = (ry + rh) / texture.height;
							}
							var xa = rw * a + x3;
							var yb = rw * b + y3;
							var xc = rh * c + x3;
							var yd = rh * d + y3;
							var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,this.shader,this.smooth,this.blend,this.clipRect,x3,y3,xa,yb,xc,yd,this.flexibleLayer);
							if(alpha1 > 0) {
								var onScreen;
								var onScreen1;
								var onScreen2;
								var _this1 = command.visibleArea;
								if((x3 > xa ? xa > xc ? xc : xa : x3 > xc ? xc : x3) <= _this1.x + _this1.width) {
									onScreen2 = (x3 < xa ? xa < xc ? xc : xa : x3 < xc ? xc : x3) >= command.visibleArea.x;
								} else {
									onScreen2 = false;
								}
								if(onScreen2) {
									var _this2 = command.visibleArea;
									onScreen1 = (y3 > yb ? yb > yd ? yd : yb : y3 > yd ? yd : y3) <= _this2.y + _this2.height;
								} else {
									onScreen1 = false;
								}
								if(onScreen1) {
									onScreen = (y3 < yb ? yb < yd ? yd : yb : y3 < yd ? yd : y3) >= command.visibleArea.y;
								} else {
									onScreen = false;
								}
								if(onScreen) {
									var data1;
									if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
										data1 = haxepunk_graphics_hardware_DrawCommand._dataPool;
										haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
										data1._next = null;
									} else {
										data1 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
									}
									var data2 = data1;
									data2.tx1 = x3;
									data2.ty1 = y3;
									data2.uvx1 = uvx1;
									data2.uvy1 = uvy1;
									data2.tx2 = xa;
									data2.ty2 = yb;
									data2.uvx2 = uvx2;
									data2.uvy2 = uvy1;
									data2.tx3 = xc;
									data2.ty3 = yd;
									data2.uvx3 = uvx1;
									data2.uvy3 = uvy2;
									data2.color = color1;
									data2.alpha = alpha1;
									if(command.data == null) {
										command.data = data2;
									} else {
										command._lastData._next = data2;
									}
									command._lastData = data2;
									++command.triangleCount;
									var a1 = data2.tx1;
									var b1 = data2.tx2;
									var c1 = data2.tx3;
									var x11 = a1 > b1 ? b1 > c1 ? c1 : b1 : a1 > c1 ? c1 : a1;
									var a2 = data2.tx1;
									var b2 = data2.tx2;
									var c2 = data2.tx3;
									var x21 = a2 < b2 ? b2 < c2 ? c2 : b2 : a2 < c2 ? c2 : a2;
									var a3 = data2.ty1;
									var b3 = data2.ty2;
									var c3 = data2.ty3;
									var y11 = a3 > b3 ? b3 > c3 ? c3 : b3 : a3 > c3 ? c3 : a3;
									var a4 = data2.ty1;
									var b4 = data2.ty2;
									var c4 = data2.ty3;
									var y21 = a4 < b4 ? b4 < c4 ? c4 : b4 : a4 < c4 ? c4 : a4;
									if(command.bounds.width == 0) {
										command.bounds.x = x11;
										command.bounds.width = x21 - x11;
									} else {
										if(x11 < command.bounds.x) {
											command.bounds.width += command.bounds.x - x11;
											command.bounds.x = x11;
										}
										var _this3 = command.bounds;
										if(x21 > _this3.x + _this3.width) {
											command.bounds.width = x21 - command.bounds.x;
										}
									}
									if(command.bounds.height == 0) {
										command.bounds.y = y11;
										command.bounds.height = y21 - y11;
									} else {
										if(y11 < command.bounds.y) {
											command.bounds.height += command.bounds.y - y11;
											command.bounds.y = y11;
										}
										var _this4 = command.bounds;
										if(y21 > _this4.y + _this4.height) {
											command.bounds.height = y21 - command.bounds.y;
										}
									}
								}
							}
							var tx3 = xa + rh * c;
							var ty3 = yb + rh * d;
							if(alpha1 > 0) {
								var onScreen3;
								var onScreen4;
								var onScreen5;
								var _this5 = command.visibleArea;
								if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this5.x + _this5.width) {
									onScreen5 = (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x;
								} else {
									onScreen5 = false;
								}
								if(onScreen5) {
									var _this6 = command.visibleArea;
									onScreen4 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this6.y + _this6.height;
								} else {
									onScreen4 = false;
								}
								if(onScreen4) {
									onScreen3 = (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
								} else {
									onScreen3 = false;
								}
								if(onScreen3) {
									var data3;
									if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
										data3 = haxepunk_graphics_hardware_DrawCommand._dataPool;
										haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
										data3._next = null;
									} else {
										data3 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
									}
									var data4 = data3;
									data4.tx1 = xc;
									data4.ty1 = yd;
									data4.uvx1 = uvx1;
									data4.uvy1 = uvy2;
									data4.tx2 = xa;
									data4.ty2 = yb;
									data4.uvx2 = uvx2;
									data4.uvy2 = uvy1;
									data4.tx3 = tx3;
									data4.ty3 = ty3;
									data4.uvx3 = uvx2;
									data4.uvy3 = uvy2;
									data4.color = color1;
									data4.alpha = alpha1;
									if(command.data == null) {
										command.data = data4;
									} else {
										command._lastData._next = data4;
									}
									command._lastData = data4;
									++command.triangleCount;
									var a5 = data4.tx1;
									var b5 = data4.tx2;
									var c5 = data4.tx3;
									var x12 = a5 > b5 ? b5 > c5 ? c5 : b5 : a5 > c5 ? c5 : a5;
									var a6 = data4.tx1;
									var b6 = data4.tx2;
									var c6 = data4.tx3;
									var x22 = a6 < b6 ? b6 < c6 ? c6 : b6 : a6 < c6 ? c6 : a6;
									var a7 = data4.ty1;
									var b7 = data4.ty2;
									var c7 = data4.ty3;
									var y12 = a7 > b7 ? b7 > c7 ? c7 : b7 : a7 > c7 ? c7 : a7;
									var a8 = data4.ty1;
									var b8 = data4.ty2;
									var c8 = data4.ty3;
									var y22 = a8 < b8 ? b8 < c8 ? c8 : b8 : a8 < c8 ? c8 : a8;
									if(command.bounds.width == 0) {
										command.bounds.x = x12;
										command.bounds.width = x22 - x12;
									} else {
										if(x12 < command.bounds.x) {
											command.bounds.width += command.bounds.x - x12;
											command.bounds.x = x12;
										}
										var _this7 = command.bounds;
										if(x22 > _this7.x + _this7.width) {
											command.bounds.width = x22 - command.bounds.x;
										}
									}
									if(command.bounds.height == 0) {
										command.bounds.y = y12;
										command.bounds.height = y22 - y12;
									} else {
										if(y12 < command.bounds.y) {
											command.bounds.height += command.bounds.y - y12;
											command.bounds.y = y12;
										}
										var _this8 = command.bounds;
										if(y22 > _this8.y + _this8.height) {
											command.bounds.height = y22 - command.bounds.y;
										}
									}
								}
							}
						}
						cursorX += gd.xAdvance * gd.scale / fsx + this.charSpacing * currentScale * currentSizeRatio;
					}
				}
				break;
			case 5:
				var alignType = op[4];
				var lineHeight1 = op[3];
				var lineWidth = op[2];
				cursorX = 0;
				cursorY += thisLineHeight + (cursorY > 0 && thisLineHeight > 0 ? lineSpacing : 0);
				var lineOffsetX1 = this.width - lineWidth;
				var lineOffsetX2;
				switch(alignType) {
				case 1:
					lineOffsetX2 = 0.5;
					break;
				case 2:
					lineOffsetX2 = 1;
					break;
				default:
					lineOffsetX2 = 0;
				}
				lineOffsetX = lineOffsetX1 * lineOffsetX2;
				thisLineHeight = lineHeight1;
				if(cursorY != 0) {
					++charCount;
				}
				break;
			case 6:
				var padding = op[3];
				var image = op[2];
				var originalX = image.x;
				var originalY = image.y;
				var originalScaleX = image.scaleX;
				var originalScaleY = image.scaleY;
				image.originX = image.originY = 0;
				haxepunk_graphics_text_BitmapText._renderData["char"] = null;
				haxepunk_graphics_text_BitmapText._renderData.img = image;
				haxepunk_graphics_text_BitmapText._renderData.x = cursorX;
				haxepunk_graphics_text_BitmapText._renderData.y = cursorY;
				haxepunk_graphics_text_BitmapText._renderData.color = currentColor;
				haxepunk_graphics_text_BitmapText._renderData.alpha = currentAlpha;
				haxepunk_graphics_text_BitmapText._renderData.scale = currentScale;
				var data5 = haxepunk_graphics_text_BitmapText._renderData;
				var _g5 = 0;
				var _g12 = haxepunk_graphics_text_BitmapText._customStack;
				while(_g5 < _g12.length) {
					var func1 = _g12[_g5];
					++_g5;
					func1(_gthis,data5);
				}
				image.x = this._point.x + haxepunk_graphics_text_BitmapText._renderData.x + lineOffsetX + originalX + padding;
				image.y = this._point.y + haxepunk_graphics_text_BitmapText._renderData.y + thisLineHeight + originalY - image.get_height() * image.scale * image.scaleY * haxepunk_graphics_text_BitmapText._renderData.scale * this.scale * this.scaleY;
				image.set_color(haxepunk_graphics_text_BitmapText._renderData.color);
				image.set_alpha(haxepunk_graphics_text_BitmapText._renderData.alpha);
				image.scaleX *= this.scale * this.scaleX * haxepunk_graphics_text_BitmapText._renderData.scale;
				image.scaleY *= this.scale * this.scaleY * haxepunk_graphics_text_BitmapText._renderData.scale;
				image.pixelSnapping = pixelPerfect;
				var _this9 = haxepunk_HXP.point;
				_this9.x = 0;
				_this9.y = 0;
				image.render(haxepunk_HXP.point,haxepunk_HXP.zeroCamera);
				image.x = originalX;
				image.y = originalY;
				image.scaleX = originalScaleX;
				image.scaleY = originalScaleY;
				image.flexibleLayer = this.flexibleLayer;
				cursorX += (image.get_width() * image.scale * image.scaleX * this.scale * this.scaleX + this.charSpacing + padding * 2) * haxepunk_graphics_text_BitmapText._renderData.scale;
				++charCount;
				break;
			case 7:
				break;
			case 8:
				var func2 = op[2];
				haxepunk_graphics_text_BitmapText._customStack.push(func2);
				break;
			case 9:case 10:case 11:case 12:
				break;
			case 13:
				haxepunk_graphics_text_BitmapText._customStack.pop();
				break;
			}
		}
	}
	,autoWidth: null
	,autoHeight: null
	,_dirty: null
	,_font: null
	,__class__: haxepunk_graphics_text_BitmapText
	,__properties__: $extend(haxepunk_Graphic.prototype.__properties__,{set_text:"set_text",set_charSpacing:"set_charSpacing",set_lineSpacing:"set_lineSpacing",set_scaleY:"set_scaleY",set_scaleX:"set_scaleX",set_scale:"set_scale",set_wrap:"set_wrap",set_size:"set_size",set_height:"set_height",set_width:"set_width",set_textHeight:"set_textHeight",get_textHeight:"get_textHeight",set_textWidth:"set_textWidth",get_textWidth:"get_textWidth"})
});
var haxepunk_graphics_tile_Tilemap = function(tileset,width,height,tileWidth,tileHeight,tileMarginWidth,tileMarginHeight) {
	if(tileMarginHeight == null) {
		tileMarginHeight = 0;
	}
	if(tileMarginWidth == null) {
		tileMarginWidth = 0;
	}
	this._maxHeight = 4000;
	this._maxWidth = 4000;
	this.scaleY = 1;
	this.scaleX = 1;
	this.scale = 1;
	this.angle = 0;
	haxepunk_Graphic.call(this);
	this._atlas = tileset;
	if(this._atlas == null) {
		throw new js__$Boot_HaxeError("Invalid tileset graphic provided.");
	}
	if(this._atlas._tileWidth == 0 || this._atlas._tileHeight == 0) {
		if(tileWidth == null || tileHeight == null) {
			throw new js__$Boot_HaxeError("Invalid tileset graphic provided.\nThe tileset must be prepared or valid tile dimensions must be passed to the Tilemap constructor.");
		} else {
			this._atlas.prepare(tileWidth,tileHeight,tileMarginWidth,tileMarginHeight);
		}
	}
	this.width = width - width % tileWidth;
	this.height = height - height % tileHeight;
	this._columns = this.width / tileWidth | 0;
	this._rows = this.height / tileHeight | 0;
	if(this._columns == 0 || this._rows == 0) {
		throw new js__$Boot_HaxeError("Cannot create a texture of width/height = 0");
	}
	this._maxWidth -= this._maxWidth % tileWidth;
	this._maxHeight -= this._maxHeight % tileHeight;
	this._map = [];
	var _g1 = 0;
	var _g = this._rows;
	while(_g1 < _g) {
		var y = _g1++;
		this._map[y] = [];
		var _g3 = 0;
		var _g2 = this._columns;
		while(_g3 < _g2) {
			var x = _g3++;
			this._map[y][x] = -1;
		}
	}
	this.pixelSnapping = true;
};
$hxClasses["haxepunk.graphics.tile.Tilemap"] = haxepunk_graphics_tile_Tilemap;
haxepunk_graphics_tile_Tilemap.__name__ = ["haxepunk","graphics","tile","Tilemap"];
haxepunk_graphics_tile_Tilemap.__super__ = haxepunk_Graphic;
haxepunk_graphics_tile_Tilemap.prototype = $extend(haxepunk_Graphic.prototype,{
	usePositions: null
	,angle: null
	,scale: null
	,scaleX: null
	,scaleY: null
	,width: null
	,height: null
	,setTile: function(column,row,index) {
		if(index == null) {
			index = 0;
		}
		if(this.usePositions) {
			column = column / this._atlas._tileWidth | 0;
			row = row / this._atlas._tileHeight | 0;
		}
		if(index > -1) {
			index %= this._atlas._regions.length;
		}
		column %= this._columns;
		row %= this._rows;
		this._map[row][column] = index;
	}
	,clearTile: function(column,row) {
		this.setTile(column,row,-1);
	}
	,getTile: function(column,row) {
		if(this.usePositions) {
			column = column / this._atlas._tileWidth | 0;
			row = row / this._atlas._tileHeight | 0;
		}
		return this._map[row % this._rows][column % this._columns];
	}
	,setRect: function(column,row,width,height,index) {
		if(index == null) {
			index = 0;
		}
		if(height == null) {
			height = 1;
		}
		if(width == null) {
			width = 1;
		}
		if(this.usePositions) {
			column = column / this._atlas._tileWidth | 0;
			row = row / this._atlas._tileHeight | 0;
			width = width / this._atlas._tileWidth | 0;
			height = height / this._atlas._tileHeight | 0;
		}
		column %= this._columns;
		row %= this._rows;
		var c = column;
		var r = column + width;
		var b = row + height;
		var u = this.usePositions;
		this.usePositions = false;
		while(row < b) {
			while(column < r) {
				this.setTile(column,row,index);
				++column;
			}
			column = c;
			++row;
		}
		this.usePositions = u;
	}
	,clearRect: function(column,row,width,height) {
		if(height == null) {
			height = 1;
		}
		if(width == null) {
			width = 1;
		}
		if(this.usePositions) {
			column = column / this._atlas._tileWidth | 0;
			row = row / this._atlas._tileHeight | 0;
			width = width / this._atlas._tileWidth | 0;
			height = height / this._atlas._tileHeight | 0;
		}
		column %= this._columns;
		row %= this._rows;
		var c = column;
		var r = column + width;
		var b = row + height;
		var u = this.usePositions;
		this.usePositions = false;
		while(row < b) {
			while(column < r) {
				this.clearTile(column,row);
				++column;
			}
			column = c;
			++row;
		}
		this.usePositions = u;
	}
	,loadFrom2DArray: function(array) {
		var _g1 = 0;
		var _g = array.length;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = array[y].length;
			while(_g3 < _g2) {
				var x = _g3++;
				this.setTile(x,y,array[y][x]);
			}
		}
	}
	,loadFromString: function(str,columnSep,rowSep) {
		if(rowSep == null) {
			rowSep = "\n";
		}
		if(columnSep == null) {
			columnSep = ",";
		}
		var row = str.split(rowSep);
		var rows = row.length;
		var col;
		var cols;
		var x;
		var y;
		var _g1 = 0;
		var _g = rows;
		while(_g1 < _g) {
			var y1 = _g1++;
			if(row[y1] == "") {
				continue;
			}
			col = row[y1].split(columnSep);
			cols = col.length;
			var _g3 = 0;
			var _g2 = cols;
			while(_g3 < _g2) {
				var x1 = _g3++;
				if(col[x1] != "") {
					this.setTile(x1,y1,Std.parseInt(col[x1]));
				}
			}
		}
	}
	,saveToString: function(columnSep,rowSep) {
		if(rowSep == null) {
			rowSep = "\n";
		}
		if(columnSep == null) {
			columnSep = ",";
		}
		var s = "";
		var x;
		var y;
		var _g1 = 0;
		var _g = this._rows;
		while(_g1 < _g) {
			var y1 = _g1++;
			var _g3 = 0;
			var _g2 = this._columns;
			while(_g3 < _g2) {
				var x1 = _g3++;
				s += Std.string(this.getTile(x1,y1));
				if(x1 != this._columns - 1) {
					s += columnSep;
				}
			}
			if(y1 != this._rows - 1) {
				s += rowSep;
			}
		}
		return s;
	}
	,shiftTiles: function(columns,rows,wrap) {
		if(wrap == null) {
			wrap = false;
		}
		if(this.usePositions) {
			columns = columns / this._atlas._tileWidth | 0;
			rows = rows / this._atlas._tileHeight | 0;
		}
		if(columns != 0) {
			var _g1 = 0;
			var _g = this._rows;
			while(_g1 < _g) {
				var y = _g1++;
				var row = this._map[y];
				if(columns > 0) {
					var _g3 = 0;
					var _g2 = columns;
					while(_g3 < _g2) {
						var x = _g3++;
						var tile = row.pop();
						if(wrap) {
							row.unshift(tile);
						}
					}
				} else {
					var _g31 = 0;
					var _g21 = Math.abs(columns) | 0;
					while(_g31 < _g21) {
						var x1 = _g31++;
						var tile1 = row.shift();
						if(wrap) {
							row.push(tile1);
						}
					}
				}
			}
			this._columns = this._map[this.y | 0].length;
		}
		if(rows != 0) {
			if(rows > 0) {
				var _g11 = 0;
				var _g4 = rows;
				while(_g11 < _g4) {
					var y1 = _g11++;
					var row1 = this._map.pop();
					if(wrap) {
						this._map.unshift(row1);
					}
				}
			} else {
				var _g12 = 0;
				var _g5 = Math.abs(rows) | 0;
				while(_g12 < _g5) {
					var y2 = _g12++;
					var row2 = this._map.shift();
					if(wrap) {
						this._map.push(row2);
					}
				}
			}
			this._rows = this._map.length;
		}
	}
	,render: function(point,camera) {
		var fullScaleX = camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX;
		var fullScaleY = camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY;
		this._point.x = point.x + this.x - camera.x * this.scrollX;
		this._point.y = point.y + this.y - camera.y * this.scrollY;
		var scx = this.scale * this.scaleX;
		var scy = this.scale * this.scaleY;
		var tw = this._atlas._tileWidth * scx;
		var th = this._atlas._tileHeight * scy;
		var startx = Math.floor(-this._point.x / tw);
		var starty = Math.floor(-this._point.y / th);
		var destx = startx + 1 + Math.ceil(haxepunk_HXP.width / camera.scale / camera.scaleX / tw);
		var desty = starty + 1 + Math.ceil(haxepunk_HXP.height / camera.scale / camera.scaleY / th);
		if(startx > this._columns || starty > this._rows || destx < 0 || desty < 0) {
			return;
		}
		if(startx < 0) {
			startx = 0;
		}
		if(destx > this._columns) {
			destx = this._columns;
		}
		if(starty < 0) {
			starty = 0;
		}
		if(desty > this._rows) {
			desty = this._rows;
		}
		var wx;
		var wy;
		var nx;
		var ny;
		var tile = 0;
		this._point.x *= fullScaleX;
		this._point.y *= fullScaleY;
		var _g1 = starty;
		var _g = desty;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = startx;
			var _g2 = destx;
			while(_g3 < _g2) {
				var x = _g3++;
				tile = this._map[y % this._rows][x % this._columns];
				if(tile >= 0) {
					this.drawTile(tile,x,y,this._point.x + x * tw * fullScaleX,this._point.y + y * th * fullScaleY,scx * fullScaleX,scy * fullScaleY);
				}
			}
		}
	}
	,pixelPerfectRender: function(point,camera) {
		var fullScaleX = camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX;
		var fullScaleY = camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY;
		var x = this.x;
		var x1 = camera.x * this.scrollX;
		this._point.x = point.x + (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x1 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x1);
		var y = this.y;
		var y1 = camera.y * this.scrollY;
		this._point.y = point.y + (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y1 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y1);
		var scx = this.scale * this.scaleX;
		var scy = this.scale * this.scaleY;
		var tw = this._atlas._tileWidth * scx;
		var th = this._atlas._tileHeight * scy;
		var startx = Math.floor(-this._point.x / tw);
		var starty = Math.floor(-this._point.y / th);
		var destx = startx + 1 + Math.ceil(haxepunk_HXP.width / camera.scale / camera.scaleX / tw);
		var desty = starty + 1 + Math.ceil(haxepunk_HXP.height / camera.scale / camera.scaleY / th);
		if(startx > this._columns || starty > this._rows || destx < 0 || desty < 0) {
			return;
		}
		if(startx < 0) {
			startx = 0;
		}
		if(destx > this._columns) {
			destx = this._columns;
		}
		if(starty < 0) {
			starty = 0;
		}
		if(desty > this._rows) {
			desty = this._rows;
		}
		var wx;
		var wy;
		var nx;
		var ny;
		var tile = 0;
		this._point.x *= fullScaleX;
		this._point.y *= fullScaleY;
		var y2 = starty * th;
		wy = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y2 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y2) * fullScaleY;
		var _g1 = starty;
		var _g = desty;
		while(_g1 < _g) {
			var y3 = _g1++;
			var y4 = (y3 + 1) * th;
			ny = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y4 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY) : y4) * fullScaleY;
			scy = (ny - wy) / this._atlas._tileHeight;
			var x2 = startx * tw;
			wx = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x2 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x2) * fullScaleX;
			var _g3 = startx;
			var _g2 = destx;
			while(_g3 < _g2) {
				var x3 = _g3++;
				var x4 = (x3 + 1) * tw;
				nx = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x4 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX) : x4) * fullScaleX;
				tile = this._map[y3 % this._rows][x3 % this._columns];
				if(tile >= 0) {
					scx = (nx - wx) / this._atlas._tileWidth;
					this.drawTile(tile,x3,y3,this._point.x + wx,this._point.y + wy,scx,scy);
				}
				wx = nx;
			}
			wy = ny;
		}
	}
	,drawTile: function(tile,tx,ty,x,y,scx,scy) {
		var region = this._atlas.getRegion(tile);
		var angle = 0;
		var color = this.color;
		var alpha = this.alpha;
		if(region.rotated) {
			angle += 90;
		}
		var rect = region._rect;
		var a;
		var b;
		var c;
		var d;
		if(angle == 0) {
			a = scx;
			b = 0;
			c = 0;
			d = scy;
		} else {
			var cos = Math.cos(-angle * (Math.PI / -180));
			var sin = Math.sin(-angle * (Math.PI / -180));
			a = cos * scx;
			b = -sin * scy;
			c = sin * scx;
			d = cos * scy;
		}
		var texture = region._parent.texture;
		var rx = rect.x;
		var ry = rect.y;
		var rw = rect.width;
		var rh = rect.height;
		if(alpha > 0) {
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			if(texture == null) {
				uvy1 = 0;
				uvx1 = uvy1;
				uvx2 = rw;
				uvy2 = rh;
			} else {
				uvx1 = rx / texture.width;
				uvy1 = ry / texture.height;
				uvx2 = (rx + rw) / texture.width;
				uvy2 = (ry + rh) / texture.height;
			}
			var xa = rw * a + x;
			var yb = rw * b + y;
			var xc = rh * c + x;
			var yd = rh * d + y;
			var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,this.shader,this.smooth,this.blend,null,x,y,xa,yb,xc,yd,false);
			if(alpha > 0) {
				var onScreen;
				var onScreen1;
				var onScreen2;
				var _this = command.visibleArea;
				if((x > xa ? xa > xc ? xc : xa : x > xc ? xc : x) <= _this.x + _this.width) {
					onScreen2 = (x < xa ? xa < xc ? xc : xa : x < xc ? xc : x) >= command.visibleArea.x;
				} else {
					onScreen2 = false;
				}
				if(onScreen2) {
					var _this1 = command.visibleArea;
					onScreen1 = (y > yb ? yb > yd ? yd : yb : y > yd ? yd : y) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				if(onScreen1) {
					onScreen = (y < yb ? yb < yd ? yd : yb : y < yd ? yd : y) >= command.visibleArea.y;
				} else {
					onScreen = false;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = x;
					data1.ty1 = y;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = xc;
					data1.ty3 = yd;
					data1.uvx3 = uvx1;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a1 = data1.tx1;
					var b1 = data1.tx2;
					var c1 = data1.tx3;
					var x1 = a1 > b1 ? b1 > c1 ? c1 : b1 : a1 > c1 ? c1 : a1;
					var a2 = data1.tx1;
					var b2 = data1.tx2;
					var c2 = data1.tx3;
					var x2 = a2 < b2 ? b2 < c2 ? c2 : b2 : a2 < c2 ? c2 : a2;
					var a3 = data1.ty1;
					var b3 = data1.ty2;
					var c3 = data1.ty3;
					var y1 = a3 > b3 ? b3 > c3 ? c3 : b3 : a3 > c3 ? c3 : a3;
					var a4 = data1.ty1;
					var b4 = data1.ty2;
					var c4 = data1.ty3;
					var y2 = a4 < b4 ? b4 < c4 ? c4 : b4 : a4 < c4 ? c4 : a4;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this2 = command.bounds;
						if(x2 > _this2.x + _this2.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this3 = command.bounds;
						if(y2 > _this3.y + _this3.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
			var tx3 = xa + rh * c;
			var ty3 = yb + rh * d;
			if(alpha > 0) {
				var onScreen3;
				var onScreen4;
				var onScreen5;
				var _this4 = command.visibleArea;
				if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this4.x + _this4.width) {
					onScreen5 = (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x;
				} else {
					onScreen5 = false;
				}
				if(onScreen5) {
					var _this5 = command.visibleArea;
					onScreen4 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this5.y + _this5.height;
				} else {
					onScreen4 = false;
				}
				if(onScreen4) {
					onScreen3 = (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
				} else {
					onScreen3 = false;
				}
				if(onScreen3) {
					var data2;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data2._next = null;
					} else {
						data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data3 = data2;
					data3.tx1 = xc;
					data3.ty1 = yd;
					data3.uvx1 = uvx1;
					data3.uvy1 = uvy2;
					data3.tx2 = xa;
					data3.ty2 = yb;
					data3.uvx2 = uvx2;
					data3.uvy2 = uvy1;
					data3.tx3 = tx3;
					data3.ty3 = ty3;
					data3.uvx3 = uvx2;
					data3.uvy3 = uvy2;
					data3.color = color;
					data3.alpha = alpha;
					if(command.data == null) {
						command.data = data3;
					} else {
						command._lastData._next = data3;
					}
					command._lastData = data3;
					++command.triangleCount;
					var a5 = data3.tx1;
					var b5 = data3.tx2;
					var c5 = data3.tx3;
					var x11 = a5 > b5 ? b5 > c5 ? c5 : b5 : a5 > c5 ? c5 : a5;
					var a6 = data3.tx1;
					var b6 = data3.tx2;
					var c6 = data3.tx3;
					var x21 = a6 < b6 ? b6 < c6 ? c6 : b6 : a6 < c6 ? c6 : a6;
					var a7 = data3.ty1;
					var b7 = data3.ty2;
					var c7 = data3.ty3;
					var y11 = a7 > b7 ? b7 > c7 ? c7 : b7 : a7 > c7 ? c7 : a7;
					var a8 = data3.ty1;
					var b8 = data3.ty2;
					var c8 = data3.ty3;
					var y21 = a8 < b8 ? b8 < c8 ? c8 : b8 : a8 < c8 ? c8 : a8;
					if(command.bounds.width == 0) {
						command.bounds.x = x11;
						command.bounds.width = x21 - x11;
					} else {
						if(x11 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x11;
							command.bounds.x = x11;
						}
						var _this6 = command.bounds;
						if(x21 > _this6.x + _this6.width) {
							command.bounds.width = x21 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y11;
						command.bounds.height = y21 - y11;
					} else {
						if(y11 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y11;
							command.bounds.y = y11;
						}
						var _this7 = command.bounds;
						if(y21 > _this7.y + _this7.height) {
							command.bounds.height = y21 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,createGrid: function(solidTiles,grid) {
		if(grid == null) {
			grid = new haxepunk_masks_Grid(this.width,this.height,this._atlas._tileWidth | 0,this._atlas._tileHeight | 0);
		}
		var _g1 = 0;
		var _g = this._rows;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this._columns;
			while(_g3 < _g2) {
				var x = _g3++;
				if(solidTiles.indexOf(this.getTile(x,y)) != -1) {
					grid.setTile(x,y,true);
				}
			}
		}
		return grid;
	}
	,updateTile: function(column,row) {
		this.setTile(column,row,this._map[row % this._rows][column % this._columns]);
	}
	,get_tileWidth: function() {
		return this._atlas._tileWidth;
	}
	,get_tileHeight: function() {
		return this._atlas._tileHeight;
	}
	,get_tileMarginWidth: function() {
		return this._atlas._tileMarginWidth;
	}
	,tileMarginHeight: null
	,get_tileMarginHeight: function() {
		return this._atlas._tileMarginHeight;
	}
	,get_tileCount: function() {
		return this._atlas._regions.length;
	}
	,columns: null
	,get_columns: function() {
		return this._columns;
	}
	,rows: null
	,get_rows: function() {
		return this._rows;
	}
	,_map: null
	,_columns: null
	,_rows: null
	,_maxWidth: null
	,_maxHeight: null
	,_atlas: null
	,__class__: haxepunk_graphics_tile_Tilemap
	,__properties__: $extend(haxepunk_Graphic.prototype.__properties__,{get_rows:"get_rows",get_columns:"get_columns",get_tileCount:"get_tileCount",get_tileMarginWidth:"get_tileMarginWidth",get_tileHeight:"get_tileHeight",get_tileWidth:"get_tileWidth"})
});
var haxepunk_input_Gamepad = function(id) {
	this._allAxes = [];
	this._axisMap = new haxe_ds_IntMap();
	this._axisControl = new haxe_ds_StringMap();
	this._allButtons = [];
	this._buttonMap = new haxe_ds_IntMap();
	this._control = new haxe_ds_StringMap();
	this.hat = new haxepunk_math_Vector2();
	this.lastAxis = new haxe_ds_IntMap();
	this.axis = new haxe_ds_IntMap();
	this.buttons = new haxe_ds_IntMap();
	this.connected = true;
	this.id = 0;
	this.id = id;
};
$hxClasses["haxepunk.input.Gamepad"] = haxepunk_input_Gamepad;
haxepunk_input_Gamepad.__name__ = ["haxepunk","input","Gamepad"];
haxepunk_input_Gamepad.gamepad = function(id) {
	return haxepunk_input_Gamepad.gamepads.h[id];
};
haxepunk_input_Gamepad.prototype = {
	id: null
	,connected: null
	,buttons: null
	,axis: null
	,lastAxis: null
	,hat: null
	,update: function() {
	}
	,postUpdate: function() {
		var _g = 0;
		var _g1 = this._allButtons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			var _g2 = this.buttons.get(button);
			if(_g2 != null) {
				switch(_g2) {
				case -1:
					this.buttons.set(button,0);
					break;
				case 2:
					this.buttons.set(button,1);
					break;
				default:
				}
			}
		}
		var _g3 = 0;
		var _g11 = this._allAxes;
		while(_g3 < _g11.length) {
			var axis = _g11[_g3];
			++_g3;
			var v = this.axis.h[axis];
			this.lastAxis.h[axis] = v;
		}
	}
	,defineButton: function(input,buttons) {
		var _this = this._control;
		if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
			var _g = 0;
			var _this1 = this._control;
			var _g1 = __map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input];
			while(_g < _g1.length) {
				var button = _g1[_g];
				++_g;
				HxOverrides.remove(this._buttonMap.h[button],input);
			}
		}
		var _this2 = this._control;
		if(__map_reserved[input] != null) {
			_this2.setReserved(input,buttons);
		} else {
			_this2.h[input] = buttons;
		}
		var _g2 = 0;
		while(_g2 < buttons.length) {
			var button1 = buttons[_g2];
			++_g2;
			if(!this._buttonMap.h.hasOwnProperty(button1)) {
				var this1 = this._buttonMap;
				var v = [];
				this1.h[button1] = v;
			}
			if(this._buttonMap.h[button1].indexOf(input) < 0) {
				this._buttonMap.h[button1].push(input);
			}
		}
	}
	,defineAxis: function(input,axis,minValue,maxValue) {
		if(maxValue == null) {
			maxValue = 1;
		}
		if(minValue == null) {
			minValue = 0;
		}
		if(minValue > maxValue) {
			var swap = maxValue;
			maxValue = minValue;
			minValue = swap;
		}
		var _this = this._axisControl;
		if(!(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input))) {
			var this1 = this._axisControl;
			var v = [];
			var _this1 = this1;
			if(__map_reserved[input] != null) {
				_this1.setReserved(input,v);
			} else {
				_this1.h[input] = v;
			}
		}
		var def = { axis : axis, minValue : minValue, maxValue : maxValue, input : input};
		var _this2 = this._axisControl;
		(__map_reserved[input] != null ? _this2.getReserved(input) : _this2.h[input]).push(def);
		if(!this._axisMap.h.hasOwnProperty(axis)) {
			var this2 = this._axisMap;
			var v1 = [];
			this2.h[axis] = v1;
		}
		if(this._axisMap.h[axis].indexOf(def) < 0) {
			this._axisMap.h[axis].push(def);
		}
	}
	,checkInput: function(input) {
		var _this = this._control;
		if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
			var _g = 0;
			var _this1 = this._control;
			var _g1 = __map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input];
			while(_g < _g1.length) {
				var button = _g1[_g];
				++_g;
				if(this.check(button)) {
					return true;
				}
			}
			var _g2 = 0;
			var _this2 = this._axisControl;
			var _g11 = __map_reserved[input] != null ? _this2.getReserved(input) : _this2.h[input];
			while(_g2 < _g11.length) {
				var axisDef = _g11[_g2];
				++_g2;
				if(this.axis.exists(axisDef.axis) && this.axis.get(axisDef.axis) >= axisDef.minValue && this.axis.get(axisDef.axis) <= axisDef.maxValue) {
					return true;
				}
			}
		}
		return false;
	}
	,pressedInput: function(input) {
		var _this = this._control;
		if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
			var _g = 0;
			var _this1 = this._control;
			var _g1 = __map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input];
			while(_g < _g1.length) {
				var button = _g1[_g];
				++_g;
				if(this.pressed(button)) {
					return true;
				}
			}
		}
		var _this2 = this._axisControl;
		if(__map_reserved[input] != null ? _this2.existsReserved(input) : _this2.h.hasOwnProperty(input)) {
			var _g2 = 0;
			var _this3 = this._axisControl;
			var _g11 = __map_reserved[input] != null ? _this3.getReserved(input) : _this3.h[input];
			while(_g2 < _g11.length) {
				var axisDef = _g11[_g2];
				++_g2;
				if(this.pressedAxis(axisDef)) {
					return true;
				}
			}
		}
		return false;
	}
	,releasedInput: function(input) {
		var _this = this._control;
		if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
			var _g = 0;
			var _this1 = this._control;
			var _g1 = __map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input];
			while(_g < _g1.length) {
				var button = _g1[_g];
				++_g;
				if(this.released(button)) {
					return true;
				}
			}
			var _g2 = 0;
			var _this2 = this._axisControl;
			var _g11 = __map_reserved[input] != null ? _this2.getReserved(input) : _this2.h[input];
			while(_g2 < _g11.length) {
				var axisDef = _g11[_g2];
				++_g2;
				if(this.releasedAxis(axisDef)) {
					return true;
				}
			}
		}
		return false;
	}
	,pressed: function(button) {
		if(this.buttons.h.hasOwnProperty(button)) {
			return this.buttons.h[button] == 2;
		} else {
			return false;
		}
	}
	,released: function(button) {
		if(this.buttons.h.hasOwnProperty(button)) {
			return this.buttons.h[button] == -1;
		} else {
			return false;
		}
	}
	,check: function(button) {
		if(this.buttons.h.hasOwnProperty(button) && this.buttons.h[button] != 0) {
			return this.buttons.h[button] != -1;
		} else {
			return false;
		}
	}
	,pressedAxis: function(axisDef) {
		if(this.axis.exists(axisDef.axis) && this.axis.get(axisDef.axis) >= axisDef.minValue && this.axis.get(axisDef.axis) <= axisDef.maxValue) {
			return !(this.lastAxis.exists(axisDef.axis) && this.lastAxis.get(axisDef.axis) >= axisDef.minValue && this.lastAxis.get(axisDef.axis) <= axisDef.maxValue);
		} else {
			return false;
		}
	}
	,releasedAxis: function(axisDef) {
		if(this.lastAxis.exists(axisDef.axis) && this.lastAxis.get(axisDef.axis) >= axisDef.minValue && this.lastAxis.get(axisDef.axis) <= axisDef.maxValue) {
			return !(this.axis.exists(axisDef.axis) && this.axis.get(axisDef.axis) >= axisDef.minValue && this.axis.get(axisDef.axis) <= axisDef.maxValue);
		} else {
			return false;
		}
	}
	,checkAxis: function(axisDef) {
		if(this.axis.h.hasOwnProperty(axisDef.axis) && this.axis.h[axisDef.axis] >= axisDef.minValue) {
			return this.axis.h[axisDef.axis] <= axisDef.maxValue;
		} else {
			return false;
		}
	}
	,checkLastAxis: function(axisDef) {
		if(this.lastAxis.h.hasOwnProperty(axisDef.axis) && this.lastAxis.h[axisDef.axis] >= axisDef.minValue) {
			return this.lastAxis.h[axisDef.axis] <= axisDef.maxValue;
		} else {
			return false;
		}
	}
	,getAxis: function(a) {
		if(!this.axis.h.hasOwnProperty(a)) {
			return 0;
		} else if(Math.abs(this.axis.h[a]) < haxepunk_input_Gamepad.deadZone) {
			return 0;
		} else {
			return this.axis.h[a];
		}
	}
	,onButtonUp: function(id) {
		this.buttons.h[id] = -1;
		if(this._buttonMap.h.hasOwnProperty(id)) {
			var _g = 0;
			var _g1 = this._buttonMap.h[id];
			while(_g < _g1.length) {
				var inputType = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerRelease(inputType);
			}
		}
	}
	,onButtonDown: function(id) {
		if(!this.buttons.h.hasOwnProperty(id)) {
			this._allButtons.push(id);
		}
		this.buttons.h[id] = 2;
		if(this._buttonMap.h.hasOwnProperty(id)) {
			var _g = 0;
			var _g1 = this._buttonMap.h[id];
			while(_g < _g1.length) {
				var inputType = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerPress(inputType);
			}
		}
	}
	,onAxisMove: function(axis,v) {
		if(Math.abs(v) < haxepunk_input_Gamepad.deadZone) {
			v = 0;
		}
		if(!this.axis.h.hasOwnProperty(axis)) {
			this._allAxes.push(axis);
		}
		this.axis.h[axis] = v;
		if(this._axisMap.h.hasOwnProperty(axis)) {
			var _g = 0;
			var _g1 = this._axisMap.h[axis];
			while(_g < _g1.length) {
				var axisDef = _g1[_g];
				++_g;
				if(v >= axisDef.minValue && v <= axisDef.maxValue) {
					haxepunk_input_Input.triggerPress(axisDef.input);
				} else if(this.lastAxis.h[axis] >= axisDef.minValue && this.lastAxis.h[axis] <= axisDef.maxValue) {
					haxepunk_input_Input.triggerRelease(axisDef.input);
				}
			}
		}
	}
	,_control: null
	,_buttonMap: null
	,_allButtons: null
	,_axisControl: null
	,_axisMap: null
	,_allAxes: null
	,__class__: haxepunk_input_Gamepad
};
var haxepunk_input_GestureType = function() {
	this.released = false;
	this.pressed = false;
	this.active = false;
	this.time = 0;
	this.magnitude = 0;
	this.y2 = 0;
	this.x2 = 0;
	this.y = 0;
	this.x = 0;
	this.reset();
};
$hxClasses["haxepunk.input.GestureType"] = haxepunk_input_GestureType;
haxepunk_input_GestureType.__name__ = ["haxepunk","input","GestureType"];
haxepunk_input_GestureType.prototype = {
	x: null
	,y: null
	,x2: null
	,y2: null
	,magnitude: null
	,time: null
	,active: null
	,pressed: null
	,released: null
	,reset: function() {
		this.x = this.y = this.x2 = this.y2 = this.time = 0;
		this.active = this.pressed = this.released = false;
	}
	,start: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.active = this.pressed = true;
		this.x = x;
		this.y = y;
		this.x2 = this.y2 = this.magnitude = 0;
		this.time = 0;
	}
	,get_distance: function() {
		var x1 = this.x;
		var y1 = this.y;
		var x2 = this.x2;
		var y2 = this.y2;
		return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	}
	,get_velocity: function() {
		if(this.time == 0) {
			return 0;
		} else {
			return this.get_distance() / this.time;
		}
	}
	,get_angle: function() {
		return 0;
	}
	,release: function() {
		this.released = true;
	}
	,update: function() {
		if(this.pressed) {
			this.pressed = false;
		} else if(this.released) {
			this.reset();
		} else if(this.active) {
			this.time += haxepunk_HXP.elapsed;
		}
	}
	,__class__: haxepunk_input_GestureType
	,__properties__: {get_angle:"get_angle",get_velocity:"get_velocity",get_distance:"get_distance"}
};
var haxepunk_input__$Gesture_Gesture_$Impl_$ = {};
$hxClasses["haxepunk.input._Gesture.Gesture_Impl_"] = haxepunk_input__$Gesture_Gesture_$Impl_$;
haxepunk_input__$Gesture_Gesture_$Impl_$.__name__ = ["haxepunk","input","_Gesture","Gesture_Impl_"];
haxepunk_input__$Gesture_Gesture_$Impl_$.enable = function() {
	haxepunk_input__$Gesture_Gesture_$Impl_$.enabled = true;
	haxepunk_input__$Gesture_Gesture_$Impl_$.mode = 0;
};
haxepunk_input__$Gesture_Gesture_$Impl_$.disable = function() {
	haxepunk_input__$Gesture_Gesture_$Impl_$.enabled = false;
};
haxepunk_input__$Gesture_Gesture_$Impl_$.getTouch = function(touches,touchOrder,n) {
	if(n >= touchOrder.length) {
		return null;
	}
	return touches.h[touchOrder[n]];
};
haxepunk_input__$Gesture_Gesture_$Impl_$.check = function(gestureType) {
	if(!haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h.hasOwnProperty(gestureType)) {
		return false;
	}
	return haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h[gestureType].active;
};
haxepunk_input__$Gesture_Gesture_$Impl_$.pressed = function(gestureType) {
	if(!haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h.hasOwnProperty(gestureType)) {
		return false;
	}
	return haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h[gestureType].pressed;
};
haxepunk_input__$Gesture_Gesture_$Impl_$.released = function(gestureType) {
	if(!haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h.hasOwnProperty(gestureType)) {
		return false;
	}
	return haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h[gestureType].released;
};
haxepunk_input__$Gesture_Gesture_$Impl_$.get = function(gestureType) {
	if(!haxepunk_input__$Gesture_Gesture_$Impl_$.check(gestureType)) {
		return null;
	}
	return haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h[gestureType];
};
haxepunk_input__$Gesture_Gesture_$Impl_$.start = function(gestureType,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(!haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h.hasOwnProperty(gestureType)) {
		var this1 = haxepunk_input__$Gesture_Gesture_$Impl_$.gestures;
		var v = new haxepunk_input_GestureType();
		this1.h[gestureType] = v;
	}
	if(!haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h[gestureType].active) {
		haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h[gestureType].start(x,y);
	}
};
haxepunk_input__$Gesture_Gesture_$Impl_$.finish = function(gestureType) {
	if(!haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h.hasOwnProperty(gestureType)) {
		var this1 = haxepunk_input__$Gesture_Gesture_$Impl_$.gestures;
		var v = new haxepunk_input_GestureType();
		this1.h[gestureType] = v;
	}
	haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h[gestureType].release();
};
haxepunk_input__$Gesture_Gesture_$Impl_$.finishAll = function() {
	var gesture = haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.iterator();
	while(gesture.hasNext()) {
		var gesture1 = gesture.next();
		if(gesture1.active) {
			gesture1.release();
		}
	}
};
haxepunk_input__$Gesture_Gesture_$Impl_$.update = function() {
	var gesture = haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.iterator();
	while(gesture.hasNext()) {
		var gesture1 = gesture.next();
		gesture1.update();
	}
	var touches = haxepunk_input_Touch._touches;
	var touchOrder = haxepunk_input_Touch._touchOrder;
	var touchCount = 0;
	var _g = 0;
	while(_g < touchOrder.length) {
		var touch = touchOrder[_g];
		++_g;
		if(touches.h.hasOwnProperty(touch)) {
			if(touches.h[touch].time == 0 || !touches.h[touch].released) {
				++touchCount;
			}
		} else {
			HxOverrides.remove(touchOrder,touch);
		}
	}
	if(haxepunk_input__$Gesture_Gesture_$Impl_$._lastTap > 0) {
		haxepunk_input__$Gesture_Gesture_$Impl_$._lastTap = Math.max(0,haxepunk_input__$Gesture_Gesture_$Impl_$._lastTap - haxepunk_HXP.elapsed / haxepunk_input__$Gesture_Gesture_$Impl_$.doubleTapTime);
	}
	var _g1 = haxepunk_input__$Gesture_Gesture_$Impl_$.mode;
	switch(_g1) {
	case 0:
		if(touchCount > 0) {
			haxepunk_input__$Gesture_Gesture_$Impl_$.mode = touchCount == 1 ? 1 : 3;
		}
		break;
	case 1:
		if(touchCount == 0) {
			haxepunk_input__$Gesture_Gesture_$Impl_$.mode = 0;
			var touch1 = 0 >= touchOrder.length ? null : touches.h[touchOrder[0]];
			var t = touch1.time < haxepunk_input__$Gesture_Gesture_$Impl_$.longPressTime ? 1 : 3;
			if(t == 1 && haxepunk_input__$Gesture_Gesture_$Impl_$._lastTap > 0) {
				t = 2;
			}
			if(!haxepunk_input__$Gesture_Gesture_$Impl_$.check(t)) {
				haxepunk_input__$Gesture_Gesture_$Impl_$.start(t,touch1.x,touch1.y);
				if(t == 1) {
					haxepunk_input__$Gesture_Gesture_$Impl_$._lastTap = 1;
				}
			}
		} else if(touchCount == 1) {
			var touch2 = 0 >= touchOrder.length ? null : touches.h[touchOrder[0]];
			var x1 = touch2.startX;
			var y1 = touch2.startY;
			var x2 = touch2.x;
			var y2 = touch2.y;
			var dist = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
			if(dist > haxepunk_input__$Gesture_Gesture_$Impl_$.deadZone) {
				haxepunk_input__$Gesture_Gesture_$Impl_$.mode = 2;
			} else if(touch2.time >= haxepunk_input__$Gesture_Gesture_$Impl_$.longPressTime && !haxepunk_input__$Gesture_Gesture_$Impl_$.check(3)) {
				haxepunk_input__$Gesture_Gesture_$Impl_$.start(3,touch2.x,touch2.y);
			}
		} else if(touchCount > 1) {
			haxepunk_input__$Gesture_Gesture_$Impl_$.mode = 3;
		}
		break;
	case 2:
		if(touchCount == 0) {
			haxepunk_input__$Gesture_Gesture_$Impl_$.mode = 0;
		} else {
			var touch3 = 0 >= touchOrder.length ? null : touches.h[touchOrder[0]];
			var x11 = touch3.startX;
			var y11 = touch3.startY;
			var x21 = touch3.x;
			var y21 = touch3.y;
			var dist1 = Math.sqrt((x21 - x11) * (x21 - x11) + (y21 - y11) * (y21 - y11));
			if(!haxepunk_input__$Gesture_Gesture_$Impl_$.check(4)) {
				haxepunk_input__$Gesture_Gesture_$Impl_$.start(4,touch3.startX,touch3.startY);
			}
			var g = haxepunk_input__$Gesture_Gesture_$Impl_$.get(4);
			g.x2 = touch3.x;
			g.y2 = touch3.y;
			g.magnitude = dist1;
		}
		if(touchCount > 1) {
			var touch4 = 1 >= touchOrder.length ? null : touches.h[touchOrder[1]];
			haxepunk_input__$Gesture_Gesture_$Impl_$.start(6,touch4.x,touch4.y);
		} else if(haxepunk_input__$Gesture_Gesture_$Impl_$.check(6)) {
			haxepunk_input__$Gesture_Gesture_$Impl_$.finish(6);
		}
		break;
	case 3:
		if(touchCount < 2) {
			haxepunk_input__$Gesture_Gesture_$Impl_$.mode = touchCount == 0 ? 0 : 5;
			if(!haxepunk_input__$Gesture_Gesture_$Impl_$.check(5)) {
				var t1 = 0 >= touchOrder.length ? null : touches.h[touchOrder[0]];
				var t2 = 1 >= touchOrder.length ? null : touches.h[touchOrder[1]];
				if(t2 != null) {
					var mx = (t1.startX - t2.startX) / 2;
					var my = (t1.startY - t2.startY) / 2;
					haxepunk_input__$Gesture_Gesture_$Impl_$.start(6,mx,my);
				}
			}
			haxepunk_input__$Gesture_Gesture_$Impl_$.finishAll();
		} else {
			var t11 = 0 >= touchOrder.length ? null : touches.h[touchOrder[0]];
			var t21 = 1 >= touchOrder.length ? null : touches.h[touchOrder[1]];
			if(t11 != null && t21 != null) {
				var x12 = t11.startX;
				var y12 = t11.startY;
				var x22 = t11.x;
				var y22 = t11.y;
				var d1 = Math.sqrt((x22 - x12) * (x22 - x12) + (y22 - y12) * (y22 - y12));
				var x13 = t21.startX;
				var y13 = t21.startY;
				var x23 = t21.x;
				var y23 = t21.y;
				var d2 = Math.sqrt((x23 - x13) * (x23 - x13) + (y23 - y13) * (y23 - y13));
				if(d1 > haxepunk_input__$Gesture_Gesture_$Impl_$.deadZone && d2 > haxepunk_input__$Gesture_Gesture_$Impl_$.deadZone) {
					if(!haxepunk_input__$Gesture_Gesture_$Impl_$.check(5)) {
						var mx1 = (t11.startX - t21.startX) / 2;
						var my1 = (t11.startY - t21.startY) / 2;
						haxepunk_input__$Gesture_Gesture_$Impl_$.start(5,mx1,my1);
					}
					var x14 = t11.startX;
					var y14 = t11.startY;
					var x24 = t21.startX;
					var y24 = t21.startY;
					var inner = Math.sqrt((x24 - x14) * (x24 - x14) + (y24 - y14) * (y24 - y14));
					var x15 = t11.x;
					var y15 = t11.y;
					var x25 = t21.x;
					var y25 = t21.y;
					var outer = Math.sqrt((x25 - x15) * (x25 - x15) + (y25 - y15) * (y25 - y15));
					haxepunk_input__$Gesture_Gesture_$Impl_$.get(5).magnitude = inner / outer;
				}
			}
		}
		break;
	default:
		if(touchCount == 0) {
			haxepunk_input__$Gesture_Gesture_$Impl_$.mode = 0;
		}
	}
	if(touchCount == 0) {
		haxepunk_input__$Gesture_Gesture_$Impl_$.finishAll();
	}
};
var haxepunk_input__$Key_Key_$Impl_$ = {};
$hxClasses["haxepunk.input._Key.Key_Impl_"] = haxepunk_input__$Key_Key_$Impl_$;
haxepunk_input__$Key_Key_$Impl_$.__name__ = ["haxepunk","input","_Key","Key_Impl_"];
haxepunk_input__$Key_Key_$Impl_$.nameOfKey = function($char) {
	if($char == -1) {
		return "";
	} else if($char >= 65 && $char <= 90) {
		return String.fromCharCode($char);
	} else if($char >= 112 && $char <= 126) {
		return "F" + Std.string(($char | 0) - 111);
	} else if($char >= 96 && $char <= 105) {
		return "NUMPAD " + Std.string(($char | 0) - 96);
	} else {
		switch($char) {
		case 8:
			return "BACKSPACE";
		case 9:
			return "TAB";
		case 13:
			return "ENTER";
		case 16:
			return "SHIFT";
		case 17:
			return "CONTROL";
		case 20:
			return "CAPS LOCK";
		case 27:
			return "ESCAPE";
		case 32:
			return "SPACE";
		case 33:
			return "PAGE UP";
		case 34:
			return "PAGE DOWN";
		case 35:
			return "END";
		case 36:
			return "HOME";
		case 37:
			return "LEFT";
		case 38:
			return "UP";
		case 39:
			return "RIGHT";
		case 40:
			return "DOWN";
		case 45:
			return "INSERT";
		case 46:
			return "DELETE";
		case 106:
			return "NUMPAD MULTIPLY";
		case 107:
			return "NUMPAD ADD";
		case 108:
			return "NUMPAD ENTER";
		case 109:
			return "NUMPAD SUBTRACT";
		case 110:
			return "NUMPAD DECIMAL";
		case 111:
			return "NUMPAD DIVIDE";
		case 192:
			return "~";
		case 219:
			return "{";
		case 221:
			return "}";
		default:
			return String.fromCharCode($char);
		}
	}
};
haxepunk_input__$Key_Key_$Impl_$.define = function(input,keys) {
	var _this = haxepunk_input__$Key_Key_$Impl_$._control;
	if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
		var _g = 0;
		var _this1 = haxepunk_input__$Key_Key_$Impl_$._control;
		var _g1 = __map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input];
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			HxOverrides.remove(haxepunk_input__$Key_Key_$Impl_$._keyMap.h[key],input);
		}
	}
	var _this2 = haxepunk_input__$Key_Key_$Impl_$._control;
	if(__map_reserved[input] != null) {
		_this2.setReserved(input,keys);
	} else {
		_this2.h[input] = keys;
	}
	var _g2 = 0;
	while(_g2 < keys.length) {
		var key1 = keys[_g2];
		++_g2;
		if(!haxepunk_input__$Key_Key_$Impl_$._keyMap.h.hasOwnProperty(key1)) {
			var this1 = haxepunk_input__$Key_Key_$Impl_$._keyMap;
			var v = [];
			this1.h[key1] = v;
		}
		if(haxepunk_input__$Key_Key_$Impl_$._keyMap.h[key1].indexOf(input) < 0) {
			haxepunk_input__$Key_Key_$Impl_$._keyMap.h[key1].push(input);
		}
	}
};
haxepunk_input__$Key_Key_$Impl_$.checkInput = function(input) {
	var _this = haxepunk_input__$Key_Key_$Impl_$._control;
	if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
		var _g = 0;
		var _this1 = haxepunk_input__$Key_Key_$Impl_$._control;
		var _g1 = __map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input];
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key < 0 && haxepunk_input__$Key_Key_$Impl_$._keyNum > 0 || haxepunk_input__$Key_Key_$Impl_$._key.get(key)) {
				return true;
			}
		}
	}
	return false;
};
haxepunk_input__$Key_Key_$Impl_$.pressedInput = function(input) {
	var _this = haxepunk_input__$Key_Key_$Impl_$._control;
	if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
		var _g = 0;
		var _this1 = haxepunk_input__$Key_Key_$Impl_$._control;
		var _g1 = __map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input];
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key < 0 ? haxepunk_input__$Key_Key_$Impl_$._pressNum != 0 : haxepunk_input__$Key_Key_$Impl_$._press.indexOf(key) >= 0) {
				return true;
			}
		}
	}
	return false;
};
haxepunk_input__$Key_Key_$Impl_$.releasedInput = function(input) {
	var _this = haxepunk_input__$Key_Key_$Impl_$._control;
	if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
		var _g = 0;
		var _this1 = haxepunk_input__$Key_Key_$Impl_$._control;
		var _g1 = __map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input];
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key < 0 ? haxepunk_input__$Key_Key_$Impl_$._releaseNum != 0 : haxepunk_input__$Key_Key_$Impl_$._release.indexOf(key) >= 0) {
				return true;
			}
		}
	}
	return false;
};
haxepunk_input__$Key_Key_$Impl_$.check = function(key) {
	if(!(key < 0 && haxepunk_input__$Key_Key_$Impl_$._keyNum > 0)) {
		return haxepunk_input__$Key_Key_$Impl_$._key.h[key];
	} else {
		return true;
	}
};
haxepunk_input__$Key_Key_$Impl_$.pressed = function(key) {
	if(key < 0) {
		return haxepunk_input__$Key_Key_$Impl_$._pressNum != 0;
	} else {
		return haxepunk_input__$Key_Key_$Impl_$._press.indexOf(key) >= 0;
	}
};
haxepunk_input__$Key_Key_$Impl_$.released = function(key) {
	if(key < 0) {
		return haxepunk_input__$Key_Key_$Impl_$._releaseNum != 0;
	} else {
		return haxepunk_input__$Key_Key_$Impl_$._release.indexOf(key) >= 0;
	}
};
haxepunk_input__$Key_Key_$Impl_$.update = function() {
};
haxepunk_input__$Key_Key_$Impl_$.postUpdate = function() {
	while(haxepunk_input__$Key_Key_$Impl_$._pressNum > 0) haxepunk_input__$Key_Key_$Impl_$._press[--haxepunk_input__$Key_Key_$Impl_$._pressNum] = -1;
	while(haxepunk_input__$Key_Key_$Impl_$._releaseNum > 0) haxepunk_input__$Key_Key_$Impl_$._release[--haxepunk_input__$Key_Key_$Impl_$._releaseNum] = -1;
};
haxepunk_input__$Key_Key_$Impl_$.onKeyDown = function(code,shift) {
	haxepunk_input__$Key_Key_$Impl_$.lastKey = code;
	if(code == 8) {
		haxepunk_input__$Key_Key_$Impl_$.keyString = HxOverrides.substr(haxepunk_input__$Key_Key_$Impl_$.keyString,0,haxepunk_input__$Key_Key_$Impl_$.keyString.length - 1);
	} else if(code > 47 && code < 58 || code > 64 && code < 91 || code == 32) {
		if(haxepunk_input__$Key_Key_$Impl_$.keyString.length > 100) {
			haxepunk_input__$Key_Key_$Impl_$.keyString = HxOverrides.substr(haxepunk_input__$Key_Key_$Impl_$.keyString,1,null);
		}
		var $char = String.fromCharCode(code);
		var key = 20;
		if(shift != (key < 0 && haxepunk_input__$Key_Key_$Impl_$._keyNum > 0 || haxepunk_input__$Key_Key_$Impl_$._key.get(key))) {
			$char = $char.toUpperCase();
		} else {
			$char = $char.toLowerCase();
		}
		haxepunk_input__$Key_Key_$Impl_$.keyString += $char;
	}
	if(!haxepunk_input__$Key_Key_$Impl_$._key.h[code]) {
		haxepunk_input__$Key_Key_$Impl_$._key.h[code] = true;
		haxepunk_input__$Key_Key_$Impl_$._keyNum++;
		haxepunk_input__$Key_Key_$Impl_$._press[haxepunk_input__$Key_Key_$Impl_$._pressNum++] = code;
		if(haxepunk_input__$Key_Key_$Impl_$._keyMap.h.hasOwnProperty(code)) {
			var _g = 0;
			var _g1 = haxepunk_input__$Key_Key_$Impl_$._keyMap.h[code];
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerPress(input);
			}
		}
	}
};
haxepunk_input__$Key_Key_$Impl_$.onKeyUp = function(code) {
	if(haxepunk_input__$Key_Key_$Impl_$._key.h[code]) {
		haxepunk_input__$Key_Key_$Impl_$._key.h[code] = false;
		haxepunk_input__$Key_Key_$Impl_$._keyNum--;
		haxepunk_input__$Key_Key_$Impl_$._release[haxepunk_input__$Key_Key_$Impl_$._releaseNum++] = code;
		if(haxepunk_input__$Key_Key_$Impl_$._keyMap.h.hasOwnProperty(code)) {
			var _g = 0;
			var _g1 = haxepunk_input__$Key_Key_$Impl_$._keyMap.h[code];
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerRelease(input);
			}
		}
	}
};
var haxepunk_input_Mouse = function() { };
$hxClasses["haxepunk.input.Mouse"] = haxepunk_input_Mouse;
haxepunk_input_Mouse.__name__ = ["haxepunk","input","Mouse"];
haxepunk_input_Mouse.__properties__ = {get_mouseWheelDelta:"get_mouseWheelDelta",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX"};
haxepunk_input_Mouse.get_mouseX = function() {
	var _this = haxepunk_HXP.screen;
	return (haxepunk_HXP.app.getMouseX() - _this.x) / _this.fullScaleX | 0;
};
haxepunk_input_Mouse.get_mouseY = function() {
	var _this = haxepunk_HXP.screen;
	return (haxepunk_HXP.app.getMouseY() - _this.y) / _this.fullScaleY | 0;
};
haxepunk_input_Mouse.get_mouseWheelDelta = function() {
	if(haxepunk_input_Mouse.mouseWheel) {
		haxepunk_input_Mouse.mouseWheel = false;
		return haxepunk_input_Mouse._mouseWheelDelta;
	}
	return 0;
};
haxepunk_input_Mouse.showCursor = function() {
	openfl_ui_Mouse.show();
};
haxepunk_input_Mouse.hideCursor = function() {
	openfl_ui_Mouse.hide();
};
haxepunk_input_Mouse.define = function(input,button) {
	var _this = haxepunk_input_Mouse._control;
	if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
		HxOverrides.remove(haxepunk_input_Mouse._buttonMap.h[button],input);
	}
	var _this1 = haxepunk_input_Mouse._control;
	if(__map_reserved[input] != null) {
		_this1.setReserved(input,button);
	} else {
		_this1.h[input] = button;
	}
	if(!haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(button)) {
		var this1 = haxepunk_input_Mouse._buttonMap;
		var v = [];
		this1.h[button] = v;
	}
	if(haxepunk_input_Mouse._buttonMap.h[button].indexOf(input) < 0) {
		haxepunk_input_Mouse._buttonMap.h[button].push(input);
	}
};
haxepunk_input_Mouse.checkInput = function(input) {
	var _this = haxepunk_input_Mouse._control;
	if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
		var _this1 = haxepunk_input_Mouse._control;
		var tmp;
		switch(__map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input]) {
		case 1:
			tmp = haxepunk_input_Mouse.mouseDown;
			break;
		case 2:
			tmp = haxepunk_input_Mouse.rightMouseDown;
			break;
		case 3:
			tmp = haxepunk_input_Mouse.middleMouseDown;
			break;
		}
		if(tmp) {
			return true;
		}
	}
	return false;
};
haxepunk_input_Mouse.pressedInput = function(input) {
	var _this = haxepunk_input_Mouse._control;
	if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
		var _this1 = haxepunk_input_Mouse._control;
		var tmp;
		switch(__map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input]) {
		case 1:
			tmp = haxepunk_input_Mouse.mousePressed;
			break;
		case 2:
			tmp = haxepunk_input_Mouse.rightMousePressed;
			break;
		case 3:
			tmp = haxepunk_input_Mouse.middleMousePressed;
			break;
		}
		if(tmp) {
			return true;
		}
	}
	return false;
};
haxepunk_input_Mouse.releasedInput = function(input) {
	var _this = haxepunk_input_Mouse._control;
	if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
		var _this1 = haxepunk_input_Mouse._control;
		var tmp;
		switch(__map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input]) {
		case 1:
			tmp = haxepunk_input_Mouse.mouseReleased;
			break;
		case 2:
			tmp = haxepunk_input_Mouse.rightMouseReleased;
			break;
		case 3:
			tmp = haxepunk_input_Mouse.middleMouseReleased;
			break;
		}
		if(tmp) {
			return true;
		}
	}
	return false;
};
haxepunk_input_Mouse.check = function(btn) {
	switch(btn) {
	case 1:
		return haxepunk_input_Mouse.mouseDown;
	case 2:
		return haxepunk_input_Mouse.rightMouseDown;
	case 3:
		return haxepunk_input_Mouse.middleMouseDown;
	}
};
haxepunk_input_Mouse.pressed = function(btn) {
	switch(btn) {
	case 1:
		return haxepunk_input_Mouse.mousePressed;
	case 2:
		return haxepunk_input_Mouse.rightMousePressed;
	case 3:
		return haxepunk_input_Mouse.middleMousePressed;
	}
};
haxepunk_input_Mouse.released = function(btn) {
	switch(btn) {
	case 1:
		return haxepunk_input_Mouse.mouseReleased;
	case 2:
		return haxepunk_input_Mouse.rightMouseReleased;
	case 3:
		return haxepunk_input_Mouse.middleMouseReleased;
	}
};
haxepunk_input_Mouse.update = function() {
};
haxepunk_input_Mouse.postUpdate = function() {
	haxepunk_input_Mouse.mousePressed = haxepunk_input_Mouse.mouseReleased = haxepunk_input_Mouse.middleMousePressed = haxepunk_input_Mouse.middleMouseReleased = haxepunk_input_Mouse.rightMousePressed = haxepunk_input_Mouse.rightMouseReleased = false;
};
haxepunk_input_Mouse.onMouseDown = function(_) {
	if(!haxepunk_input_Mouse.mouseDown) {
		haxepunk_input_Mouse.mouseDown = true;
		haxepunk_input_Mouse.mouseUp = false;
		haxepunk_input_Mouse.mousePressed = true;
		if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(1)) {
			var _g = 0;
			var _g1 = haxepunk_input_Mouse._buttonMap.h[1];
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerPress(input);
			}
		}
	}
};
haxepunk_input_Mouse.onMouseUp = function(_) {
	haxepunk_input_Mouse.mouseDown = false;
	haxepunk_input_Mouse.mouseUp = true;
	haxepunk_input_Mouse.mouseReleased = true;
	if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(1)) {
		var _g = 0;
		var _g1 = haxepunk_input_Mouse._buttonMap.h[1];
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			haxepunk_input_Input.triggerRelease(input);
		}
	}
};
haxepunk_input_Mouse.onMouseWheel = function(delta) {
	haxepunk_input_Mouse.mouseWheel = true;
	haxepunk_input_Mouse._mouseWheelDelta = delta;
};
haxepunk_input_Mouse.onMiddleMouseDown = function(_) {
	if(!haxepunk_input_Mouse.middleMouseDown) {
		haxepunk_input_Mouse.middleMouseDown = true;
		haxepunk_input_Mouse.middleMouseUp = false;
		haxepunk_input_Mouse.middleMousePressed = true;
		if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(3)) {
			var _g = 0;
			var _g1 = haxepunk_input_Mouse._buttonMap.h[3];
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerPress(input);
			}
		}
	}
};
haxepunk_input_Mouse.onMiddleMouseUp = function(_) {
	haxepunk_input_Mouse.middleMouseDown = false;
	haxepunk_input_Mouse.middleMouseUp = true;
	haxepunk_input_Mouse.middleMouseReleased = true;
	if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(3)) {
		var _g = 0;
		var _g1 = haxepunk_input_Mouse._buttonMap.h[3];
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			haxepunk_input_Input.triggerRelease(input);
		}
	}
};
haxepunk_input_Mouse.onRightMouseDown = function(_) {
	if(!haxepunk_input_Mouse.rightMouseDown) {
		haxepunk_input_Mouse.rightMouseDown = true;
		haxepunk_input_Mouse.rightMouseUp = false;
		haxepunk_input_Mouse.rightMousePressed = true;
		if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(2)) {
			var _g = 0;
			var _g1 = haxepunk_input_Mouse._buttonMap.h[2];
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerPress(input);
			}
		}
	}
};
haxepunk_input_Mouse.onRightMouseUp = function(_) {
	haxepunk_input_Mouse.rightMouseDown = false;
	haxepunk_input_Mouse.rightMouseUp = true;
	haxepunk_input_Mouse.rightMouseReleased = true;
	if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(2)) {
		var _g = 0;
		var _g1 = haxepunk_input_Mouse._buttonMap.h[2];
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			haxepunk_input_Input.triggerRelease(input);
		}
	}
};
var haxepunk_input_Input = function() { };
$hxClasses["haxepunk.input.Input"] = haxepunk_input_Input;
haxepunk_input_Input.__name__ = ["haxepunk","input","Input"];
haxepunk_input_Input.pushSignal = function(s) {
	haxepunk_input_Input._signals.push(s);
};
haxepunk_input_Input.triggerPress = function(type) {
	haxepunk_input_Input._signals.push("press");
	haxepunk_input_Input._signals.push(type);
};
haxepunk_input_Input.triggerRelease = function(type) {
	haxepunk_input_Input._signals.push("release");
	haxepunk_input_Input._signals.push(type);
};
haxepunk_input_Input.define = function(input,keys) {
	if(haxepunk_input__$Key_Key_$Impl_$._control.exists(input)) {
		var _g = 0;
		var _g1 = haxepunk_input__$Key_Key_$Impl_$._control.get(input);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			HxOverrides.remove(haxepunk_input__$Key_Key_$Impl_$._keyMap.get(key),input);
		}
	}
	haxepunk_input__$Key_Key_$Impl_$._control.set(input,keys);
	var _g2 = 0;
	while(_g2 < keys.length) {
		var key1 = keys[_g2];
		++_g2;
		if(!haxepunk_input__$Key_Key_$Impl_$._keyMap.exists(key1)) {
			var this1 = haxepunk_input__$Key_Key_$Impl_$._keyMap;
			var v = [];
			this1.set(key1,v);
		}
		if(haxepunk_input__$Key_Key_$Impl_$._keyMap.get(key1).indexOf(input) < 0) {
			haxepunk_input__$Key_Key_$Impl_$._keyMap.get(key1).push(input);
		}
	}
};
haxepunk_input_Input.check = function(input) {
	var _g = 0;
	var _g1 = haxepunk_input_Input.handlers;
	while(_g < _g1.length) {
		var handler = _g1[_g];
		++_g;
		if(handler.checkInput(input)) {
			return true;
		}
	}
	return false;
};
haxepunk_input_Input.pressed = function(input) {
	var _g = 0;
	var _g1 = haxepunk_input_Input.handlers;
	while(_g < _g1.length) {
		var handler = _g1[_g];
		++_g;
		if(handler.pressedInput(input)) {
			return true;
		}
	}
	return false;
};
haxepunk_input_Input.released = function(input) {
	var _g = 0;
	var _g1 = haxepunk_input_Input.handlers;
	while(_g < _g1.length) {
		var handler = _g1[_g];
		++_g;
		if(handler.releasedInput(input)) {
			return true;
		}
	}
	return false;
};
haxepunk_input_Input.update = function() {
	var _g = 0;
	var _g1 = haxepunk_input_Input.handlers;
	while(_g < _g1.length) {
		var handler = _g1[_g];
		++_g;
		handler.update();
	}
	var i = 0;
	while(i < haxepunk_input_Input._signals.length) {
		var op = haxepunk_input_Input._signals[i++];
		var type = haxepunk_input_Input._signals[i++];
		switch(op) {
		case "press":
			var signals = haxepunk_HXP.engine.onInputPressed;
			if(signals.signals.exists(type)) {
				var _g2 = 0;
				var _g11 = signals.resolve(type).callbacks;
				while(_g2 < _g11.length) {
					var callback = _g11[_g2];
					++_g2;
					callback();
				}
			}
			var signals1 = haxepunk_HXP.engine._scene.onInputPressed;
			if(signals1.signals.exists(type)) {
				var _g3 = 0;
				var _g12 = signals1.resolve(type).callbacks;
				while(_g3 < _g12.length) {
					var callback1 = _g12[_g3];
					++_g3;
					callback1();
				}
			}
			break;
		case "release":
			var signals2 = haxepunk_HXP.engine.onInputReleased;
			if(signals2.signals.exists(type)) {
				var _g4 = 0;
				var _g13 = signals2.resolve(type).callbacks;
				while(_g4 < _g13.length) {
					var callback2 = _g13[_g4];
					++_g4;
					callback2();
				}
			}
			var signals3 = haxepunk_HXP.engine._scene.onInputReleased;
			if(signals3.signals.exists(type)) {
				var _g5 = 0;
				var _g14 = signals3.resolve(type).callbacks;
				while(_g5 < _g14.length) {
					var callback3 = _g14[_g5];
					++_g5;
					callback3();
				}
			}
			break;
		default:
		}
	}
	haxepunk_input_Input._signals.length = 0;
};
haxepunk_input_Input.postUpdate = function() {
	var _g = 0;
	var _g1 = haxepunk_input_Input.handlers;
	while(_g < _g1.length) {
		var handler = _g1[_g];
		++_g;
		handler.postUpdate();
	}
};
haxepunk_input_Input.triggerSignals = function() {
	var i = 0;
	while(i < haxepunk_input_Input._signals.length) {
		var op = haxepunk_input_Input._signals[i++];
		var type = haxepunk_input_Input._signals[i++];
		switch(op) {
		case "press":
			var signals = haxepunk_HXP.engine.onInputPressed;
			if(signals.signals.exists(type)) {
				var _g = 0;
				var _g1 = signals.resolve(type).callbacks;
				while(_g < _g1.length) {
					var callback = _g1[_g];
					++_g;
					callback();
				}
			}
			var signals1 = haxepunk_HXP.engine._scene.onInputPressed;
			if(signals1.signals.exists(type)) {
				var _g2 = 0;
				var _g11 = signals1.resolve(type).callbacks;
				while(_g2 < _g11.length) {
					var callback1 = _g11[_g2];
					++_g2;
					callback1();
				}
			}
			break;
		case "release":
			var signals2 = haxepunk_HXP.engine.onInputReleased;
			if(signals2.signals.exists(type)) {
				var _g3 = 0;
				var _g12 = signals2.resolve(type).callbacks;
				while(_g3 < _g12.length) {
					var callback2 = _g12[_g3];
					++_g3;
					callback2();
				}
			}
			var signals3 = haxepunk_HXP.engine._scene.onInputReleased;
			if(signals3.signals.exists(type)) {
				var _g4 = 0;
				var _g13 = signals3.resolve(type).callbacks;
				while(_g4 < _g13.length) {
					var callback3 = _g13[_g4];
					++_g4;
					callback3();
				}
			}
			break;
		default:
		}
	}
	haxepunk_input_Input._signals.length = 0;
};
var haxepunk_input_MouseManager = function() {
	this._lastFallthrough = false;
	this._lastCollisions = [];
	this._collisions = [];
	this._registeredObjects = new haxe_ds_ObjectMap();
	haxepunk_Entity.call(this);
	this.set_width(this.set_height(0));
	this.set_collidable(false);
	this.set_visible(false);
};
$hxClasses["haxepunk.input.MouseManager"] = haxepunk_input_MouseManager;
haxepunk_input_MouseManager.__name__ = ["haxepunk","input","MouseManager"];
haxepunk_input_MouseManager.__super__ = haxepunk_Entity;
haxepunk_input_MouseManager.prototype = $extend(haxepunk_Entity.prototype,{
	_registeredObjects: null
	,_collisions: null
	,_lastCollisions: null
	,_default: null
	,_lastFallthrough: null
	,add: function(entity,onPress,onRelease,onEnter,onExit,onWheel,fallThrough) {
		if(fallThrough == null) {
			fallThrough = false;
		}
		if(this._type == "") {
			this.set_type(entity._type);
		} else if(this._type != entity._type) {
			throw new js__$Boot_HaxeError("Entities added to a MouseManager must all be the same type.");
		}
		var data = new haxepunk_input_MouseData(entity,onPress,onRelease,onEnter,onExit,onWheel,fallThrough);
		this._registeredObjects.set(entity,data);
		return entity;
	}
	,addDefault: function(onPress,onRelease,onEnter,onExit,onWheel) {
		this._default = new haxepunk_input_MouseData(null,onPress,onRelease,onEnter,onExit,onWheel,false);
	}
	,remove: function(entity) {
		if(this._registeredObjects.h.__keys__[entity.__id__] != null) {
			this._registeredObjects.remove(entity);
		}
		return entity;
	}
	,clear: function() {
		var key = this._registeredObjects.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			this._registeredObjects.remove(key1);
		}
		while(this._lastCollisions.length > 0) this._lastCollisions.pop();
		this._default = null;
	}
	,getData: function(entity) {
		if(this._registeredObjects.h.__keys__[entity.__id__] != null) {
			return this._registeredObjects.h[entity.__id__];
		} else {
			return null;
		}
	}
	,update: function() {
		haxepunk_Entity.prototype.update.call(this);
		var mouseX = haxepunk_HXP.app.getMouseX();
		var mouseY = haxepunk_HXP.app.getMouseY();
		var collisions = this._collisions;
		var tmp;
		var tmp1;
		if(mouseX >= this._scene.x && mouseY >= this._scene.y) {
			var _this = this._scene;
			tmp1 = mouseX <= this._scene.x + (_this._width == null ? haxepunk_HXP.screen.width - _this.x : _this._width);
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var _this1 = this._scene;
			tmp = mouseY <= this._scene.y + (_this1._height == null ? haxepunk_HXP.screen.height - _this1.y : _this1._height);
		} else {
			tmp = false;
		}
		if(tmp) {
			var tmp2 = this._scene;
			var tmp3 = this._type;
			var _this2 = this._scene;
			var x = haxepunk_HXP.app.getMouseX() - haxepunk_HXP.screen.x - _this2.x;
			var _this3 = _this2.camera;
			var tmp4 = x / (_this3.scale * _this3.scaleX * haxepunk_HXP.screen.fullScaleX) + _this2.camera.x | 0;
			var _this4 = this._scene;
			var x1 = haxepunk_HXP.app.getMouseY() - haxepunk_HXP.screen.y - _this4.y;
			var _this5 = _this4.camera;
			tmp2.collidePointInto(tmp3,tmp4,x1 / (_this5.scale * _this5.scaleY * haxepunk_HXP.screen.fullScaleY) + _this4.camera.y | 0,collisions,true);
		}
		var fallthrough = true;
		var _g1 = 0;
		var _g = collisions.length;
		while(_g1 < _g) {
			var i = _g1++;
			var current = this.getData(collisions[i]);
			if(current != null && !current.fallThrough) {
				while(collisions.length > i + 1) collisions.pop();
				fallthrough = false;
				break;
			}
		}
		var _g2 = 0;
		while(_g2 < collisions.length) {
			var entity = collisions[_g2];
			++_g2;
			var current1 = this.getData(entity);
			if(current1 == null) {
				continue;
			}
			if(current1.onEnter != null) {
				if(this._lastCollisions.indexOf(entity) == -1) {
					current1.onEnter();
				}
			}
		}
		if(haxepunk_input_Mouse.mouseWheel) {
			var delta = haxepunk_input_Mouse.get_mouseWheelDelta();
			var _g3 = 0;
			while(_g3 < collisions.length) {
				var entity1 = collisions[_g3];
				++_g3;
				var current2 = this.getData(entity1);
				if(current2 == null) {
					continue;
				}
				if(current2.onWheel != null) {
					current2.onWheel(delta);
				}
			}
		}
		if(haxepunk_input_Mouse.mousePressed) {
			var _g4 = 0;
			while(_g4 < collisions.length) {
				var entity2 = collisions[_g4];
				++_g4;
				var current3 = this.getData(entity2);
				if(current3 == null) {
					continue;
				}
				if(current3.onPress != null) {
					current3.onPress();
				}
			}
		}
		if(haxepunk_input_Mouse.mouseReleased) {
			var _g5 = 0;
			while(_g5 < collisions.length) {
				var entity3 = collisions[_g5];
				++_g5;
				var current4 = this.getData(entity3);
				if(current4 == null) {
					continue;
				}
				if(current4.onRelease != null) {
					current4.onRelease();
				}
			}
		}
		var _g6 = 0;
		var _g11 = this._lastCollisions;
		while(_g6 < _g11.length) {
			var entity4 = _g11[_g6];
			++_g6;
			var current5 = this.getData(entity4);
			if(current5 == null) {
				continue;
			}
			if(current5.onExit != null) {
				if(collisions.indexOf(entity4) == -1) {
					current5.onExit();
				}
			}
		}
		if(fallthrough) {
			if(this._default != null) {
				if(this._default.onEnter != null && !this._lastFallthrough) {
					this._default.onEnter();
				}
				if(this._default.onPress != null && haxepunk_input_Mouse.mousePressed) {
					this._default.onPress();
				}
				if(this._default.onRelease != null && haxepunk_input_Mouse.mouseReleased) {
					this._default.onRelease();
				}
			}
		} else if(this._lastFallthrough) {
			if(this._default != null) {
				if(this._default.onExit != null) {
					this._default.onExit();
				}
			}
		}
		this._collisions = this._lastCollisions;
		if(this._collisions.length > 0) {
			this._collisions.splice(0,this._collisions.length);
		}
		this._lastCollisions = collisions;
		this._lastFallthrough = fallthrough;
	}
	,__class__: haxepunk_input_MouseManager
});
var haxepunk_input_MouseData = function(entity,onPress,onRelease,onEnter,onExit,onWheel,fallThrough) {
	this.entity = entity;
	this.onPress = onPress;
	this.onRelease = onRelease;
	this.onEnter = onEnter;
	this.onExit = onExit;
	this.onWheel = onWheel;
	this.fallThrough = fallThrough;
};
$hxClasses["haxepunk.input.MouseData"] = haxepunk_input_MouseData;
haxepunk_input_MouseData.__name__ = ["haxepunk","input","MouseData"];
haxepunk_input_MouseData.prototype = {
	entity: null
	,onPress: null
	,onRelease: null
	,onEnter: null
	,onExit: null
	,onWheel: null
	,fallThrough: null
	,__class__: haxepunk_input_MouseData
};
var haxepunk_input_Touch = function(x,y,id) {
	this.released = false;
	this.startX = this.x = x;
	this.startY = this.y = y;
	this.id = id;
	this.time = 0;
};
$hxClasses["haxepunk.input.Touch"] = haxepunk_input_Touch;
haxepunk_input_Touch.__name__ = ["haxepunk","input","Touch"];
haxepunk_input_Touch.__properties__ = {get_touchOrder:"get_touchOrder",get_touches:"get_touches"};
haxepunk_input_Touch.update = function() {
	var _g = 0;
	var _g1 = haxepunk_input_Touch._touchOrder;
	while(_g < _g1.length) {
		var touchId = _g1[_g];
		++_g;
		haxepunk_input_Touch._touches.h[touchId].updateTouch();
	}
	if(haxepunk_input__$Gesture_Gesture_$Impl_$.enabled) {
		haxepunk_input__$Gesture_Gesture_$Impl_$.update();
	}
	var i = 0;
	while(i < haxepunk_input_Touch._touchOrder.length) {
		var touchId1 = haxepunk_input_Touch._touchOrder[i];
		var touch = haxepunk_input_Touch._touches.h[touchId1];
		if(touch.released && touch.time != 0) {
			haxepunk_input_Touch._touches.remove(touchId1);
			HxOverrides.remove(haxepunk_input_Touch._touchOrder,touchId1);
		} else {
			++i;
		}
	}
};
haxepunk_input_Touch.postUpdate = function() {
};
haxepunk_input_Touch.checkInput = function(input) {
	return false;
};
haxepunk_input_Touch.pressedInput = function(input) {
	return false;
};
haxepunk_input_Touch.releasedInput = function(input) {
	return false;
};
haxepunk_input_Touch.touchPoints = function(touchCallback) {
	var _g = 0;
	var _g1 = haxepunk_input_Touch._touchOrder;
	while(_g < _g1.length) {
		var touchId = _g1[_g];
		++_g;
		touchCallback(haxepunk_input_Touch._touches.h[touchId]);
	}
};
haxepunk_input_Touch.get_touches = function() {
	return haxepunk_input_Touch._touches;
};
haxepunk_input_Touch.get_touchOrder = function() {
	return haxepunk_input_Touch._touchOrder;
};
haxepunk_input_Touch.prototype = {
	id: null
	,x: null
	,y: null
	,startX: null
	,startY: null
	,time: null
	,get_sceneX: function() {
		return this.x + (haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).x;
	}
	,get_sceneY: function() {
		return this.y + (haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).y;
	}
	,get_pressed: function() {
		return this.time == 0;
	}
	,released: null
	,updateTouch: function() {
		this.time += haxepunk_HXP.elapsed;
	}
	,__class__: haxepunk_input_Touch
	,__properties__: {get_pressed:"get_pressed",get_sceneY:"get_sceneY",get_sceneX:"get_sceneX"}
};
var haxepunk_masks_Circle = function(radius,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(radius == null) {
		radius = 1;
	}
	haxepunk_masks_Hitbox.call(this);
	this.set_radius(radius);
	this._x = x + radius;
	this._y = y + radius;
	var this1 = this._check;
	var key = Type.getClassName(haxepunk_Mask);
	var _this = this1;
	var value = $bind(this,this.collideMask);
	if(__map_reserved[key] != null) {
		_this.setReserved(key,value);
	} else {
		_this.h[key] = value;
	}
	var this2 = this._check;
	var key1 = Type.getClassName(haxepunk_masks_Circle);
	var _this1 = this2;
	var value1 = $bind(this,this.collideCircle);
	if(__map_reserved[key1] != null) {
		_this1.setReserved(key1,value1);
	} else {
		_this1.h[key1] = value1;
	}
	var this3 = this._check;
	var key2 = Type.getClassName(haxepunk_masks_Hitbox);
	var _this2 = this3;
	var value2 = $bind(this,this.collideHitbox);
	if(__map_reserved[key2] != null) {
		_this2.setReserved(key2,value2);
	} else {
		_this2.h[key2] = value2;
	}
	var this4 = this._check;
	var key3 = Type.getClassName(haxepunk_masks_Grid);
	var _this3 = this4;
	var value3 = $bind(this,this.collideGrid);
	if(__map_reserved[key3] != null) {
		_this3.setReserved(key3,value3);
	} else {
		_this3.h[key3] = value3;
	}
	var this5 = this._check;
	var key4 = Type.getClassName(haxepunk_masks_SlopedGrid);
	var _this4 = this5;
	var value4 = $bind(this,this.collideSlopedGrid);
	if(__map_reserved[key4] != null) {
		_this4.setReserved(key4,value4);
	} else {
		_this4.h[key4] = value4;
	}
};
$hxClasses["haxepunk.masks.Circle"] = haxepunk_masks_Circle;
haxepunk_masks_Circle.__name__ = ["haxepunk","masks","Circle"];
haxepunk_masks_Circle.__super__ = haxepunk_masks_Hitbox;
haxepunk_masks_Circle.prototype = $extend(haxepunk_masks_Hitbox.prototype,{
	collideMask: function(other) {
		var distanceX = Math.abs(this._parent.get_x() + this._x - other._parent.get_x() - other._parent.get_width() * 0.5);
		var distanceY = Math.abs(this._parent.get_y() + this._y - other._parent.get_y() - other._parent.get_height() * 0.5);
		if(distanceX > other._parent.get_width() * 0.5 + this._radius || distanceY > other._parent.get_height() * 0.5 + this._radius) {
			return false;
		}
		if(distanceX <= other._parent.get_width() * 0.5 || distanceY <= other._parent.get_height() * 0.5) {
			return true;
		}
		var distanceToCorner = (distanceX - other._parent.get_width() * 0.5) * (distanceX - other._parent.get_width() * 0.5) + (distanceY - other._parent.get_height() * 0.5) * (distanceY - other._parent.get_height() * 0.5);
		return distanceToCorner <= this._squaredRadius;
	}
	,collideCircle: function(other) {
		var dx = this._parent.get_x() + this._x - (other._parent.get_x() + other._x);
		var dy = this._parent.get_y() + this._y - (other._parent.get_y() + other._y);
		return dx * dx + dy * dy < Math.pow(this._radius + other._radius,2);
	}
	,collideGridTile: function(mx,my,hTileWidth,hTileHeight,thisX,thisY) {
		var collide = false;
		var dx = Math.abs(thisX - mx);
		if(dx <= hTileWidth + this._radius) {
			var dy = Math.abs(thisY - my);
			if(dy <= hTileHeight + this._radius) {
				if(dx <= hTileWidth || dy <= hTileHeight) {
					collide = true;
				} else {
					var xCornerDist = dx - hTileWidth;
					var yCornerDist = dy - hTileHeight;
					if(xCornerDist * xCornerDist + yCornerDist * yCornerDist <= this._squaredRadius) {
						collide = true;
					}
				}
			}
		}
		return collide;
	}
	,collideGrid: function(other) {
		var thisX = this._x + this._parent.get_x();
		var thisY = this._y + this._parent.get_y();
		var otherX = other.get_x() + other._parent.get_x();
		var otherY = other.get_y() + other._parent.get_y();
		var entityDistX = thisX - otherX;
		var entityDistY = thisY - otherY;
		var minx = Math.floor((entityDistX - this._radius) / (other._tile.width | 0));
		var miny = Math.floor((entityDistY - this._radius) / (other._tile.height | 0));
		var maxx = Math.ceil((entityDistX + this._radius) / (other._tile.width | 0));
		var maxy = Math.ceil((entityDistY + this._radius) / (other._tile.height | 0));
		if(minx < 0) {
			minx = 0;
		}
		if(miny < 0) {
			miny = 0;
		}
		if(maxx > other.columns) {
			maxx = other.columns;
		}
		if(maxy > other.rows) {
			maxy = other.rows;
		}
		var hTileWidth = (other._tile.width | 0) * 0.5;
		var hTileHeight = (other._tile.height | 0) * 0.5;
		var dx;
		var dy = otherY + miny * (other._tile.height | 0);
		var _g1 = miny;
		var _g = maxy;
		while(_g1 < _g) {
			var yy = _g1++;
			dx = otherX + minx * (other._tile.width | 0);
			var _g3 = minx;
			var _g2 = maxx;
			while(_g3 < _g2) {
				var xx = _g3++;
				if(other.getTile(xx,yy)) {
					var collide = false;
					var dx1 = Math.abs(thisX - (dx + hTileWidth));
					if(dx1 <= hTileWidth + this._radius) {
						var dy1 = Math.abs(thisY - (dy + hTileHeight));
						if(dy1 <= hTileHeight + this._radius) {
							if(dx1 <= hTileWidth || dy1 <= hTileHeight) {
								collide = true;
							} else {
								var xCornerDist = dx1 - hTileWidth;
								var yCornerDist = dy1 - hTileHeight;
								if(xCornerDist * xCornerDist + yCornerDist * yCornerDist <= this._squaredRadius) {
									collide = true;
								}
							}
						}
					}
					if(collide) {
						return true;
					}
				}
				dx += other._tile.width | 0;
			}
			dy += other._tile.height | 0;
		}
		return false;
	}
	,collideSlopedGrid: function(other) {
		var thisX = this._x + this._parent.get_x();
		var thisY = this._y + this._parent.get_y();
		var otherX = other.get_x() + other._parent.get_x();
		var otherY = other.get_y() + other._parent.get_y();
		var entityDistX = thisX - otherX;
		var entityDistY = thisY - otherY;
		var minx = Math.floor((entityDistX - this._radius) / (other._tile.width | 0));
		var miny = Math.floor((entityDistY - this._radius) / (other._tile.height | 0));
		var maxx = Math.ceil((entityDistX + this._radius) / (other._tile.width | 0));
		var maxy = Math.ceil((entityDistY + this._radius) / (other._tile.height | 0));
		if(minx < 0) {
			minx = 0;
		}
		if(miny < 0) {
			miny = 0;
		}
		if(maxx > other.columns) {
			maxx = other.columns;
		}
		if(maxy > other.rows) {
			maxy = other.rows;
		}
		var hTileWidth = (other._tile.width | 0) * 0.5;
		var hTileHeight = (other._tile.height | 0) * 0.5;
		var dx;
		var dy = otherY + miny * (other._tile.height | 0);
		var _g1 = miny;
		var _g = maxy;
		while(_g1 < _g) {
			var yy = _g1++;
			dx = otherX + minx * (other._tile.width | 0);
			var _g3 = minx;
			var _g2 = maxx;
			while(_g3 < _g2) {
				var xx = _g3++;
				var column = xx;
				var row = yy;
				var tile;
				if(!(column >= 0 && column < other.columns && row >= 0 && row < other.rows)) {
					tile = haxepunk_masks_SlopedGrid._emptyTile;
				} else {
					if(other.usePositions) {
						column = column / other._tile.width | 0;
						row = row / other._tile.height | 0;
					}
					tile = other.data[row][column];
				}
				if(tile.type == 1) {
					var collide = false;
					var dx1 = Math.abs(thisX - (dx + hTileWidth));
					if(dx1 <= hTileWidth + this._radius) {
						var dy1 = Math.abs(thisY - (dy + hTileHeight));
						if(dy1 <= hTileHeight + this._radius) {
							if(dx1 <= hTileWidth || dy1 <= hTileHeight) {
								collide = true;
							} else {
								var xCornerDist = dx1 - hTileWidth;
								var yCornerDist = dy1 - hTileHeight;
								if(xCornerDist * xCornerDist + yCornerDist * yCornerDist <= this._squaredRadius) {
									collide = true;
								}
							}
						}
					}
					if(collide) {
						return true;
					}
				} else if(tile.type == 2 || tile.type == 3) {
					var y1 = dy;
					y1 += tile.yOffset;
					var x2 = dx + other._tile.width;
					var y2 = y1 + tile.slope * other._tile.width;
					var left = (x2 - dx) * (thisY - y1) > (y2 - y1) * (thisX - dx);
					if(tile.type == 2 && !left || tile.type == 3 && left) {
						return true;
					}
					var x1 = dx;
					var y11 = dy + tile.yOffset;
					var yoff = tile.slope * (other._tile.width | 0);
					var x21 = x1 + yoff / tile.slope;
					var y21 = y11 + yoff;
					var dx2 = x21 - x1;
					var dy2 = y21 - y11;
					var fx = x1 - thisX;
					var fy = y11 - thisY;
					var a = dx2 * dx2 + dy2 * dy2;
					var b = (fx * dx2 + fy * dy2) * 2;
					var c = fx * fx + fy * fy - this._radius * this._radius;
					var discriminant = b * b - 4 * a * c;
					if(discriminant >= 0) {
						discriminant = Math.sqrt(discriminant);
						var t1 = (-b - discriminant) / (2 * a);
						var t2 = (-b + discriminant) / (2 * a);
						if(t1 >= 0 && t1 <= 1 || t2 >= 0 && t2 <= 1 || t1 < 0 && t2 > 1) {
							return true;
						}
					}
				}
				dx += other._tile.width | 0;
			}
			dy += other._tile.height | 0;
		}
		return false;
	}
	,collideHitbox: function(other) {
		var _otherHalfWidth = other._width * 0.5;
		var _otherHalfHeight = other._height * 0.5;
		var px = this._x + this._parent.get_x();
		var py = this._y + this._parent.get_y();
		var ox = other._x;
		var oy = other._y;
		if((other._parent != haxepunk_Entity._EMPTY ? other._parent : null) != null) {
			ox += (other._parent != haxepunk_Entity._EMPTY ? other._parent : null).get_x();
			oy += (other._parent != haxepunk_Entity._EMPTY ? other._parent : null).get_y();
		}
		var distanceX = Math.abs(px - ox - _otherHalfWidth);
		var distanceY = Math.abs(py - oy - _otherHalfHeight);
		if(distanceX > _otherHalfWidth + this._radius || distanceY > _otherHalfHeight + this._radius) {
			return false;
		}
		if(distanceX <= _otherHalfWidth || distanceY <= _otherHalfHeight) {
			return true;
		}
		var distanceToCorner = (distanceX - _otherHalfWidth) * (distanceX - _otherHalfWidth) + (distanceY - _otherHalfHeight) * (distanceY - _otherHalfHeight);
		return distanceToCorner <= this._squaredRadius;
	}
	,project: function(axis,projection) {
		projection.min = -this._radius;
		projection.max = this._radius;
	}
	,debugDraw: function(camera) {
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		haxepunk_Mask.drawContext.lineThickness = 2;
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		var _this = haxepunk_Mask.drawContext;
		_this.color = 16711680;
		_this.alpha = 0.25;
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		haxepunk_Mask.drawContext.circleFilled((this._parent.get_x() + this._x - camera.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX),(this._parent.get_y() + this._y - camera.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY),this._radius,null,camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX,camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY);
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		var _this1 = haxepunk_Mask.drawContext;
		_this1.color = 16711680;
		_this1.alpha = 0.5;
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		var _this2 = haxepunk_Mask.drawContext;
		var x = (this._parent.get_x() + this._x - camera.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX);
		var y = (this._parent.get_y() + this._y - camera.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY);
		var radius = this._radius;
		var scaleX = camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX;
		var scaleY = camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY;
		var radians = 2 * Math.PI / 25;
		var halfThick = _this2.lineThickness / 2;
		var innerRadius = radius - halfThick;
		var outerRadius = radius + halfThick;
		var inner_y;
		var inner_x = 0;
		inner_y = 0;
		var outer_y;
		var outer_x = 0;
		outer_y = 0;
		var lastOuter_y;
		var lastOuter_x = 0;
		lastOuter_y = 0;
		var lastInner_y;
		var lastInner_x = 0;
		lastInner_y = 0;
		if(_this2.shader == null) {
			_this2.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = _this2.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : _this2.scene;
		_this2.command = scene.batch.getDrawCommand(null,_this2.shader,_this2.smooth,_this2.blend,null);
		var _g1 = 0;
		var _g = 26;
		while(_g1 < _g) {
			var segment = _g1++;
			var theta = segment * radians;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			inner_x = x + sin * innerRadius * scaleX;
			inner_y = y + cos * innerRadius * scaleY;
			outer_x = x + sin * outerRadius * scaleX;
			outer_y = y + cos * outerRadius * scaleY;
			if(segment != 0) {
				var _this3 = _this2.command;
				var tx1 = lastInner_x;
				var ty1 = lastInner_y;
				var tx2 = lastOuter_x;
				var ty2 = lastOuter_y;
				var tx3 = outer_x;
				var ty3 = outer_y;
				var color = _this2.color;
				var alpha = _this2.alpha;
				if(alpha > 0) {
					var onScreen;
					var onScreen1;
					var onScreen2;
					var _this4 = _this3.visibleArea;
					if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this4.x + _this4.width) {
						onScreen2 = (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this3.visibleArea.x;
					} else {
						onScreen2 = false;
					}
					if(onScreen2) {
						var _this5 = _this3.visibleArea;
						onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this5.y + _this5.height;
					} else {
						onScreen1 = false;
					}
					if(onScreen1) {
						onScreen = (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this3.visibleArea.y;
					} else {
						onScreen = false;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx1;
						data1.ty1 = ty1;
						data1.uvx1 = 0;
						data1.uvy1 = 0;
						data1.tx2 = tx2;
						data1.ty2 = ty2;
						data1.uvx2 = 0;
						data1.uvy2 = 0;
						data1.tx3 = tx3;
						data1.ty3 = ty3;
						data1.uvx3 = 0;
						data1.uvy3 = 0;
						data1.color = color;
						data1.alpha = alpha;
						if(_this3.data == null) {
							_this3.data = data1;
						} else {
							_this3._lastData._next = data1;
						}
						_this3._lastData = data1;
						++_this3.triangleCount;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x1 = a > b ? b > c ? c : b : a > c ? c : a;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c1 = data1.tx3;
						var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
						var a2 = data1.ty1;
						var b2 = data1.ty2;
						var c2 = data1.ty3;
						var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
						var a3 = data1.ty1;
						var b3 = data1.ty2;
						var c3 = data1.ty3;
						var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
						if(_this3.bounds.width == 0) {
							_this3.bounds.x = x1;
							_this3.bounds.width = x2 - x1;
						} else {
							if(x1 < _this3.bounds.x) {
								_this3.bounds.width += _this3.bounds.x - x1;
								_this3.bounds.x = x1;
							}
							var _this6 = _this3.bounds;
							if(x2 > _this6.x + _this6.width) {
								_this3.bounds.width = x2 - _this3.bounds.x;
							}
						}
						if(_this3.bounds.height == 0) {
							_this3.bounds.y = y1;
							_this3.bounds.height = y2 - y1;
						} else {
							if(y1 < _this3.bounds.y) {
								_this3.bounds.height += _this3.bounds.y - y1;
								_this3.bounds.y = y1;
							}
							var _this7 = _this3.bounds;
							if(y2 > _this7.y + _this7.height) {
								_this3.bounds.height = y2 - _this3.bounds.y;
							}
						}
					}
				}
				var _this8 = _this2.command;
				var tx11 = lastInner_x;
				var ty11 = lastInner_y;
				var tx21 = outer_x;
				var ty21 = outer_y;
				var tx31 = inner_x;
				var ty31 = inner_y;
				var color1 = _this2.color;
				var alpha1 = _this2.alpha;
				if(alpha1 > 0) {
					var onScreen3;
					var onScreen4;
					var onScreen5;
					var _this9 = _this8.visibleArea;
					if((tx11 > tx21 ? tx21 > tx31 ? tx31 : tx21 : tx11 > tx31 ? tx31 : tx11) <= _this9.x + _this9.width) {
						onScreen5 = (tx11 < tx21 ? tx21 < tx31 ? tx31 : tx21 : tx11 < tx31 ? tx31 : tx11) >= _this8.visibleArea.x;
					} else {
						onScreen5 = false;
					}
					if(onScreen5) {
						var _this10 = _this8.visibleArea;
						onScreen4 = (ty11 > ty21 ? ty21 > ty31 ? ty31 : ty21 : ty11 > ty31 ? ty31 : ty11) <= _this10.y + _this10.height;
					} else {
						onScreen4 = false;
					}
					if(onScreen4) {
						onScreen3 = (ty11 < ty21 ? ty21 < ty31 ? ty31 : ty21 : ty11 < ty31 ? ty31 : ty11) >= _this8.visibleArea.y;
					} else {
						onScreen3 = false;
					}
					if(onScreen3) {
						var data2;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data2._next = null;
						} else {
							data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data3 = data2;
						data3.tx1 = tx11;
						data3.ty1 = ty11;
						data3.uvx1 = 0;
						data3.uvy1 = 0;
						data3.tx2 = tx21;
						data3.ty2 = ty21;
						data3.uvx2 = 0;
						data3.uvy2 = 0;
						data3.tx3 = tx31;
						data3.ty3 = ty31;
						data3.uvx3 = 0;
						data3.uvy3 = 0;
						data3.color = color1;
						data3.alpha = alpha1;
						if(_this8.data == null) {
							_this8.data = data3;
						} else {
							_this8._lastData._next = data3;
						}
						_this8._lastData = data3;
						++_this8.triangleCount;
						var a4 = data3.tx1;
						var b4 = data3.tx2;
						var c4 = data3.tx3;
						var x11 = a4 > b4 ? b4 > c4 ? c4 : b4 : a4 > c4 ? c4 : a4;
						var a5 = data3.tx1;
						var b5 = data3.tx2;
						var c5 = data3.tx3;
						var x21 = a5 < b5 ? b5 < c5 ? c5 : b5 : a5 < c5 ? c5 : a5;
						var a6 = data3.ty1;
						var b6 = data3.ty2;
						var c6 = data3.ty3;
						var y11 = a6 > b6 ? b6 > c6 ? c6 : b6 : a6 > c6 ? c6 : a6;
						var a7 = data3.ty1;
						var b7 = data3.ty2;
						var c7 = data3.ty3;
						var y21 = a7 < b7 ? b7 < c7 ? c7 : b7 : a7 < c7 ? c7 : a7;
						if(_this8.bounds.width == 0) {
							_this8.bounds.x = x11;
							_this8.bounds.width = x21 - x11;
						} else {
							if(x11 < _this8.bounds.x) {
								_this8.bounds.width += _this8.bounds.x - x11;
								_this8.bounds.x = x11;
							}
							var _this11 = _this8.bounds;
							if(x21 > _this11.x + _this11.width) {
								_this8.bounds.width = x21 - _this8.bounds.x;
							}
						}
						if(_this8.bounds.height == 0) {
							_this8.bounds.y = y11;
							_this8.bounds.height = y21 - y11;
						} else {
							if(y11 < _this8.bounds.y) {
								_this8.bounds.height += _this8.bounds.y - y11;
								_this8.bounds.y = y11;
							}
							var _this12 = _this8.bounds;
							if(y21 > _this12.y + _this12.height) {
								_this8.bounds.height = y21 - _this8.bounds.y;
							}
						}
					}
				}
			}
			lastOuter_x = outer_x;
			lastOuter_y = outer_y;
			lastInner_x = inner_x;
			lastInner_y = inner_y;
		}
	}
	,get_x: function() {
		return this._x - this._radius;
	}
	,get_y: function() {
		return this._y - this._radius;
	}
	,get_radius: function() {
		return this._radius;
	}
	,set_radius: function(value) {
		if(this._radius == value) {
			return value;
		}
		this._radius = value;
		this._squaredRadius = value * value;
		this.set_height(this.set_width(this._radius + this._radius));
		if(this.list != null) {
			this.list.update();
		} else if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this.update();
		}
		return this._radius;
	}
	,update: function() {
		if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this._parent.originX = -this._x + this._radius;
			this._parent.originY = -this._y + this._radius;
			this._parent.set_height(this._parent.set_width(this._radius + this._radius));
			if(this.list != null) {
				this.list.update();
			}
		}
	}
	,_radius: null
	,_squaredRadius: null
	,__class__: haxepunk_masks_Circle
	,__properties__: $extend(haxepunk_masks_Hitbox.prototype.__properties__,{set_radius:"set_radius",get_radius:"get_radius"})
});
var haxepunk_masks_Grid = function(width,height,tileWidth,tileHeight,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	haxepunk_masks_Hitbox.call(this);
	if(width == 0 || height == 0 || tileWidth == 0 || tileHeight == 0) {
		throw new js__$Boot_HaxeError("Illegal Grid, sizes cannot be 0.");
	}
	this._rect = haxepunk_HXP.rect;
	this._point = haxepunk_HXP.point;
	this._point2 = haxepunk_HXP.point2;
	this.columns = width / tileWidth | 0;
	this.rows = height / tileHeight | 0;
	this._tile = new haxepunk_math_Rectangle(0,0,tileWidth,tileHeight);
	this._x = x;
	this._y = y;
	this._width = width;
	this._height = height;
	this.usePositions = false;
	var this1 = this._check;
	var key = Type.getClassName(haxepunk_Mask);
	var _this = this1;
	var value = $bind(this,this.collideMask);
	if(__map_reserved[key] != null) {
		_this.setReserved(key,value);
	} else {
		_this.h[key] = value;
	}
	var this2 = this._check;
	var key1 = Type.getClassName(haxepunk_masks_Hitbox);
	var _this1 = this2;
	var value1 = $bind(this,this.collideHitbox);
	if(__map_reserved[key1] != null) {
		_this1.setReserved(key1,value1);
	} else {
		_this1.h[key1] = value1;
	}
	var this3 = this._check;
	var key2 = Type.getClassName(haxepunk_masks_Pixelmask);
	var _this2 = this3;
	var value2 = $bind(this,this.collidePixelmask);
	if(__map_reserved[key2] != null) {
		_this2.setReserved(key2,value2);
	} else {
		_this2.h[key2] = value2;
	}
	var this4 = this._check;
	var key3 = Type.getClassName(haxepunk_masks_Grid);
	var _this3 = this4;
	var value3 = $bind(this,this.collideGrid);
	if(__map_reserved[key3] != null) {
		_this3.setReserved(key3,value3);
	} else {
		_this3.h[key3] = value3;
	}
	this.data = [];
	var _g1 = 0;
	var _g = this.rows;
	while(_g1 < _g) {
		var x1 = _g1++;
		this.data.push([]);
	}
};
$hxClasses["haxepunk.masks.Grid"] = haxepunk_masks_Grid;
haxepunk_masks_Grid.__name__ = ["haxepunk","masks","Grid"];
haxepunk_masks_Grid.__super__ = haxepunk_masks_Hitbox;
haxepunk_masks_Grid.prototype = $extend(haxepunk_masks_Hitbox.prototype,{
	usePositions: null
	,setTile: function(column,row,solid) {
		if(solid == null) {
			solid = true;
		}
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
		}
		this.setTileXY(column,row,solid);
	}
	,setTileXY: function(x,y,solid) {
		if(solid == null) {
			solid = true;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(!(!(x < 0 || x > this.columns - 1 || y < 0 || y > this.rows - 1))) {
			return;
		}
		this.data[y][x] = solid;
	}
	,clearTile: function(column,row) {
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		this.setTile(column,row,false);
	}
	,checkTile: function(column,row) {
		return !(column < 0 || column > this.columns - 1 || row < 0 || row > this.rows - 1);
	}
	,getTile: function(column,row) {
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
		}
		return this.getTileXY(column,row);
	}
	,getTileXY: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(!(!(x < 0 || x > this.columns - 1 || y < 0 || y > this.rows - 1))) {
			return false;
		}
		return this.data[y][x];
	}
	,setRect: function(column,row,width,height,solid) {
		if(solid == null) {
			solid = true;
		}
		if(height == null) {
			height = 1;
		}
		if(width == null) {
			width = 1;
		}
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
			width = width / this._tile.width | 0;
			height = height / this._tile.height | 0;
		}
		var _g1 = row;
		var _g = row + height;
		while(_g1 < _g) {
			var yy = _g1++;
			var _g3 = column;
			var _g2 = column + width;
			while(_g3 < _g2) {
				var xx = _g3++;
				this.setTileXY(xx,yy,solid);
			}
		}
	}
	,clearRect: function(column,row,width,height) {
		if(height == null) {
			height = 1;
		}
		if(width == null) {
			width = 1;
		}
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		this.setRect(column,row,width,height,false);
	}
	,loadFromString: function(str,columnSep,rowSep) {
		if(rowSep == null) {
			rowSep = "\n";
		}
		if(columnSep == null) {
			columnSep = ",";
		}
		var row = str.split(rowSep);
		var rows = row.length;
		var col;
		var cols;
		var x;
		var y;
		var _g1 = 0;
		var _g = rows;
		while(_g1 < _g) {
			var y1 = _g1++;
			if(row[y1] == "") {
				continue;
			}
			col = row[y1].split(columnSep);
			cols = col.length;
			var _g3 = 0;
			var _g2 = cols;
			while(_g3 < _g2) {
				var x1 = _g3++;
				if(col[x1] == "") {
					continue;
				}
				this.setTile(x1,y1,Std.parseInt(col[x1]) > 0);
			}
		}
	}
	,loadFrom2DArray: function(array) {
		var _g1 = 0;
		var _g = array.length;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = array[0].length;
			while(_g3 < _g2) {
				var x = _g3++;
				this.setTile(x,y,array[y][x] > 0);
			}
		}
	}
	,saveToString: function(columnSep,rowSep,solid,empty) {
		if(empty == null) {
			empty = "false";
		}
		if(solid == null) {
			solid = "true";
		}
		if(rowSep == null) {
			rowSep = "\n";
		}
		if(columnSep == null) {
			columnSep = ",";
		}
		var s = "";
		var x;
		var y;
		var _g1 = 0;
		var _g = this.rows;
		while(_g1 < _g) {
			var y1 = _g1++;
			var _g3 = 0;
			var _g2 = this.columns;
			while(_g3 < _g2) {
				var x1 = _g3++;
				s += Std.string(this.getTileXY(x1,y1) ? solid : empty);
				if(x1 != this.columns - 1) {
					s += columnSep;
				}
			}
			if(y1 != this.rows - 1) {
				s += rowSep;
			}
		}
		return s;
	}
	,clone: function() {
		var cloneGrid = new haxepunk_masks_Grid(this._width,this._height,this._tile.width | 0,this._tile.height | 0,this._x,this._y);
		var _g1 = 0;
		var _g = this.rows;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.columns;
			while(_g3 < _g2) {
				var x = _g3++;
				cloneGrid.setTile(x,y,this.getTile(x,y));
			}
		}
		return cloneGrid;
	}
	,get_tileWidth: function() {
		return this._tile.width | 0;
	}
	,get_tileHeight: function() {
		return this._tile.height | 0;
	}
	,columns: null
	,rows: null
	,data: null
	,collideMask: function(other) {
		var rectX;
		var rectY;
		var pointX;
		var pointY;
		var tmp = other._parent.get_x() - other._parent.originX - this._parent.get_x();
		this._rect.x = tmp + this._parent.originX;
		var tmp1 = other._parent.get_y() - other._parent.originY - this._parent.get_y();
		this._rect.y = tmp1 + this._parent.originY;
		pointX = ((this._rect.x + other._parent.get_width() - 1) / this._tile.width | 0) + 1;
		pointY = ((this._rect.y + other._parent.get_height() - 1) / this._tile.height | 0) + 1;
		rectX = this._rect.x / this._tile.width | 0;
		rectY = this._rect.y / this._tile.height | 0;
		var _g1 = rectY;
		var _g = pointY;
		while(_g1 < _g) {
			var dy = _g1++;
			var _g3 = rectX;
			var _g2 = pointX;
			while(_g3 < _g2) {
				var dx = _g3++;
				if(this.getTile(dx,dy)) {
					return true;
				}
			}
		}
		return false;
	}
	,collideHitbox: function(other) {
		var rectX;
		var rectY;
		var pointX;
		var pointY;
		var tmp = other._parent.get_x() - other._x - this._parent.get_x();
		this._rect.x = tmp + this._x;
		var tmp1 = other._parent.get_y() - other._y - this._parent.get_y();
		this._rect.y = tmp1 + this._y;
		pointX = ((this._rect.x + other._width - 1) / this._tile.width | 0) + 1;
		pointY = ((this._rect.y + other._height - 1) / this._tile.height | 0) + 1;
		rectX = this._rect.x / this._tile.width | 0;
		rectY = this._rect.y / this._tile.height | 0;
		var _g1 = rectY;
		var _g = pointY;
		while(_g1 < _g) {
			var dy = _g1++;
			var _g3 = rectX;
			var _g2 = pointX;
			while(_g3 < _g2) {
				var dx = _g3++;
				if(this.getTile(dx,dy)) {
					return true;
				}
			}
		}
		return false;
	}
	,collidePixelmask: function(other) {
		var tmp = this._parent.get_x() + this._x;
		this._point.x = tmp - this._parent.originX;
		var tmp1 = this._parent.get_y() + this._y;
		this._point.y = tmp1 - this._parent.originY;
		if(((other instanceof haxepunk_masks_Imagemask) ? other : null) != null) {
			this._rect = (js_Boot.__cast(other , haxepunk_masks_Imagemask)).getBounds();
			this._rect.x += other._parent.get_x();
			this._rect.y += other._parent.get_y();
		} else {
			var tmp2 = other._parent.get_x() + other.get_x();
			this._rect.x = tmp2 - other._parent.originX;
			var tmp3 = other._parent.get_y() + other.get_y();
			this._rect.y = tmp3 - other._parent.originY;
			this._rect.width = other.get_width();
			this._rect.height = other.get_height();
		}
		var r1 = new haxepunk_math_Rectangle(this._point.x,this._point.y,this._width,this._height);
		var intersect = r1.intersection(this._rect);
		if(intersect == null) {
			return false;
		}
		var _g1 = Math.floor(intersect.x - this._rect.x);
		var _g = Math.floor(intersect.x - this._rect.x + intersect.width);
		while(_g1 < _g) {
			var dx = _g1++;
			var _g3 = Math.floor(intersect.y - this._rect.y);
			var _g2 = Math.floor(intersect.y - this._rect.y + intersect.height);
			while(_g3 < _g2) {
				var dy = _g3++;
				var tx = (dx + this._rect.x) / this._tile.width | 0;
				var ty = (dy + this._rect.y) / this._tile.height | 0;
				if(this.data[ty][tx] && (other.get_data().getPixel(dx,dy) >> 24 & 255) > 0) {
					return true;
				}
			}
		}
		return false;
	}
	,collideGrid: function(other) {
		var ax1 = this._parent.get_x() + this._x;
		var ax2 = ax1 + this._width;
		var bx1 = other._parent.get_x() + other._x;
		var bx2 = bx1 + other._width;
		if(ax2 < bx1 || ax1 > bx2) {
			return false;
		}
		var ay1 = this._parent.get_y() + this._y;
		var ay2 = ay1 + this._height;
		var by1 = other._parent.get_y() + other._y;
		var by2 = by1 + other._height;
		if(ay2 < by1 || ay1 > by2) {
			return false;
		}
		var ox1 = ax1 > bx1 ? ax1 : bx1;
		var oy1 = ay1 > by1 ? ay1 : by1;
		var ox2 = ax2 < bx2 ? ax2 : bx2;
		var oy2 = ay2 < by2 ? ay2 : by2;
		var tw;
		var th;
		if(this._tile.width < other._tile.width) {
			tw = this._tile.width;
			ox1 -= this._parent.get_x() + this._x;
			ox1 = (ox1 / tw | 0) * tw;
			ox1 += this._parent.get_x() + this._x;
		} else {
			tw = other._tile.width;
			ox1 -= other._parent.get_x() + other._x;
			ox1 = (ox1 / tw | 0) * tw;
			ox1 += other._parent.get_x() + other._x;
		}
		if(this._tile.height < other._tile.height) {
			th = this._tile.height;
			oy1 -= this._parent.get_y() + this._y;
			oy1 = (oy1 / th | 0) * th;
			oy1 += this._parent.get_y() + this._y;
		} else {
			th = other._tile.height;
			oy1 -= other._parent.get_y() + other._y;
			oy1 = (oy1 / th | 0) * th;
			oy1 += other._parent.get_y() + other._y;
		}
		var y = oy1;
		var x = 0;
		while(y < oy2) {
			var ar1 = (y - this._parent.get_y() - this._y) / this._tile.height | 0;
			var br1 = (y - other._parent.get_y() - other._y) / other._tile.height | 0;
			var ar2 = (y - this._parent.get_y() - this._y + (th - 1)) / this._tile.height | 0;
			var br2 = (y - other._parent.get_y() - other._y + (th - 1)) / other._tile.height | 0;
			x = ox1;
			while(x < ox2) {
				var ac1 = (x - this._parent.get_x() - this._x) / this._tile.width | 0;
				var bc1 = (x - other._parent.get_x() - other._x) / other._tile.width | 0;
				var ac2 = (x - this._parent.get_x() - this._x + (tw - 1)) / this._tile.width | 0;
				var bc2 = (x - other._parent.get_x() - other._x + (tw - 1)) / other._tile.width | 0;
				if(this.getTile(ac1,ar1) && other.getTile(bc1,br1) || this.getTile(ac2,ar1) && other.getTile(bc2,br1) || this.getTile(ac1,ar2) && other.getTile(bc1,br2) || this.getTile(ac2,ar2) && other.getTile(bc2,br2)) {
					return true;
				}
				x += tw;
			}
			y += th;
		}
		return false;
	}
	,debugDraw: function(camera) {
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		var dc = haxepunk_Mask.drawContext;
		var scaleX = camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX;
		var scaleY = camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY;
		var cellX;
		var cellY;
		var stepX = (this._tile.width | 0) * scaleX;
		var stepY = (this._tile.height | 0) * scaleY;
		var px = this._x + this._parent.get_x() - (haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).x;
		var py = this._y + this._parent.get_y() - (haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).y;
		var startx = Math.floor(-px / (this._tile.width | 0));
		var starty = Math.floor(-py / (this._tile.height | 0));
		var destx = startx + 1 + Math.ceil(haxepunk_HXP.width / (this._tile.width | 0));
		var desty = starty + 1 + Math.ceil(haxepunk_HXP.height / (this._tile.height | 0));
		if(startx > this.columns || starty > this.rows || destx < 0 || desty < 0) {
			return;
		}
		if(startx < 0) {
			startx = 0;
		}
		if(destx > this.columns) {
			destx = this.columns;
		}
		if(starty < 0) {
			starty = 0;
		}
		if(desty > this.rows) {
			desty = this.rows;
		}
		px = (px + startx * (this._tile.width | 0)) * scaleX;
		py = (py + starty * (this._tile.height | 0)) * scaleY;
		var row;
		cellY = py;
		var _g1 = starty;
		var _g = desty;
		while(_g1 < _g) {
			var y = _g1++;
			cellX = px;
			row = this.data[y];
			var _g3 = startx;
			var _g2 = destx;
			while(_g3 < _g2) {
				var x = _g3++;
				if(row[x]) {
					dc.lineThickness = 2;
					dc.color = 16777215;
					dc.alpha = 0.3;
					dc.rect(cellX,cellY,stepX,stepY);
					dc.color = 255;
					dc.alpha = 1;
					if(x < this.columns - 1 && !row[x + 1]) {
						dc.line(cellX + stepX,cellY,cellX + stepX,cellY + stepY);
					}
					if(x > 0 && !row[x - 1]) {
						dc.line(cellX,cellY,cellX,cellY + stepY);
					}
					if(y < this.rows - 1 && !this.data[y + 1][x]) {
						dc.line(cellX,cellY + stepY,cellX + stepX,cellY + stepY);
					}
					if(y > 0 && !this.data[y - 1][x]) {
						dc.line(cellX,cellY,cellX + stepX,cellY);
					}
				}
				cellX += stepX;
			}
			cellY += stepY;
		}
	}
	,squareProjection: function(axis,point) {
		if(axis.x < axis.y) {
			point.x = axis.x;
			point.y = axis.y;
		} else {
			point.y = axis.x;
			point.x = axis.y;
		}
	}
	,_tile: null
	,_rect: null
	,_point: null
	,_point2: null
	,__class__: haxepunk_masks_Grid
	,__properties__: $extend(haxepunk_masks_Hitbox.prototype.__properties__,{get_tileHeight:"get_tileHeight",get_tileWidth:"get_tileWidth"})
});
var haxepunk_masks_Pixelmask = function(source,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	haxepunk_masks_Hitbox.call(this);
	if(js_Boot.__instanceof(source,haxepunk_backend_flash__$Texture_Texture_$Impl_$)) {
		this._data = source;
	} else {
		this._data = haxepunk_assets_AssetCache.global.getTexture(source);
	}
	if(this._data == null) {
		throw new js__$Boot_HaxeError("Invalid Pixelmask source image.");
	}
	this.threshold = 1;
	this._rect = haxepunk_HXP.rect;
	this._point = haxepunk_HXP.point;
	this._point2 = haxepunk_HXP.point2;
	this._width = this.get_data().width;
	this._height = this.get_data().height;
	this._x = x;
	this._y = y;
	var this1 = this._check;
	var key = Type.getClassName(haxepunk_Mask);
	var _this = this1;
	var value = $bind(this,this.collideMask);
	if(__map_reserved[key] != null) {
		_this.setReserved(key,value);
	} else {
		_this.h[key] = value;
	}
	var this2 = this._check;
	var key1 = Type.getClassName(haxepunk_masks_Pixelmask);
	var _this1 = this2;
	var value1 = $bind(this,this.collidePixelmask);
	if(__map_reserved[key1] != null) {
		_this1.setReserved(key1,value1);
	} else {
		_this1.h[key1] = value1;
	}
	var this3 = this._check;
	var key2 = Type.getClassName(haxepunk_masks_Hitbox);
	var _this2 = this3;
	var value2 = $bind(this,this.collideHitbox);
	if(__map_reserved[key2] != null) {
		_this2.setReserved(key2,value2);
	} else {
		_this2.h[key2] = value2;
	}
};
$hxClasses["haxepunk.masks.Pixelmask"] = haxepunk_masks_Pixelmask;
haxepunk_masks_Pixelmask.__name__ = ["haxepunk","masks","Pixelmask"];
haxepunk_masks_Pixelmask.__super__ = haxepunk_masks_Hitbox;
haxepunk_masks_Pixelmask.prototype = $extend(haxepunk_masks_Hitbox.prototype,{
	threshold: null
	,collideMask: function(other) {
		var tmp = this._parent.get_x();
		this._point.x = tmp + this._x;
		var tmp1 = this._parent.get_y();
		this._point.y = tmp1 + this._y;
		var tmp2 = other._parent.get_x();
		this._rect.x = tmp2 - other._parent.originX;
		var tmp3 = other._parent.get_y();
		this._rect.y = tmp3 - other._parent.originY;
		this._rect.width = other._parent.get_width();
		this._rect.height = other._parent.get_height();
		var tmp4 = other._parent.get_x() - other._parent.originX;
		var tmp5 = this._parent.get_x() + this._x;
		this._point.x = tmp4 - tmp5;
		var tmp6 = other._parent.get_y() - other._parent.originY;
		var tmp7 = this._parent.get_y() + this._y;
		this._point.y = tmp6 - tmp7;
		var r1 = new haxepunk_math_Rectangle(0,0,this._data.width,this._data.height);
		var r2 = new haxepunk_math_Rectangle(this._point.x,this._point.y,other._parent.get_width(),other._parent.get_height());
		var intersect = r1.intersection(r2);
		if(intersect == null) {
			return false;
		}
		var _g1 = Math.floor(intersect.x);
		var _g = Math.floor(intersect.x + intersect.width + 1);
		while(_g1 < _g) {
			var dx = _g1++;
			var _g3 = Math.floor(intersect.y);
			var _g2 = Math.floor(intersect.y + intersect.height + 1);
			while(_g3 < _g2) {
				var dy = _g3++;
				if((this._data.getPixel(dx,dy) >> 24 & 255) > 0) {
					return true;
				}
			}
		}
		return false;
	}
	,collideHitbox: function(other) {
		var tmp = this._parent.get_x();
		this._point.x = tmp + this._x;
		var tmp1 = this._parent.get_y();
		this._point.y = tmp1 + this._y;
		var tmp2 = other._parent.get_x();
		this._rect.x = tmp2 + other._x;
		var tmp3 = other._parent.get_y();
		this._rect.y = tmp3 + other._y;
		this._rect.width = other._width;
		this._rect.height = other._height;
		var tmp4 = other._parent.get_x() + other._x;
		var tmp5 = this._parent.get_x() + this._x;
		this._point.x = tmp4 - tmp5;
		var tmp6 = other._parent.get_y() + other._y;
		var tmp7 = this._parent.get_y() + this._y;
		this._point.y = tmp6 - tmp7;
		var r1 = new haxepunk_math_Rectangle(0,0,this._data.width,this._data.height);
		var r2 = new haxepunk_math_Rectangle(this._point.x,this._point.y,other.get_width(),other.get_height());
		var intersect = r1.intersection(r2);
		if(intersect == null) {
			return false;
		}
		var _g1 = Math.floor(intersect.x);
		var _g = Math.floor(intersect.x + intersect.width + 1);
		while(_g1 < _g) {
			var dx = _g1++;
			var _g3 = Math.floor(intersect.y);
			var _g2 = Math.floor(intersect.y + intersect.height + 1);
			while(_g3 < _g2) {
				var dy = _g3++;
				if((this._data.getPixel(dx,dy) >> 24 & 255) > 0) {
					return true;
				}
			}
		}
		return false;
	}
	,collidePixelmask: function(other) {
		var tmp = other._parent.get_x() + other._x;
		var tmp1 = this._parent.get_x() + this._x;
		this._point.x = tmp - tmp1;
		var tmp2 = other._parent.get_y() + other._y;
		var tmp3 = this._parent.get_y() + this._y;
		this._point.y = tmp2 - tmp3;
		var r1 = new haxepunk_math_Rectangle(0,0,this._data.width,this._data.height);
		var r2 = new haxepunk_math_Rectangle(this._point.x,this._point.y,other._data.width,other._data.height);
		var intersect = r1.intersection(r2);
		if(intersect == null) {
			return false;
		}
		var _g1 = Math.floor(intersect.x);
		var _g = Math.floor(intersect.x + intersect.width + 1);
		while(_g1 < _g) {
			var dx = _g1++;
			var _g3 = Math.floor(intersect.y);
			var _g2 = Math.floor(intersect.y + intersect.height + 1);
			while(_g3 < _g2) {
				var dy = _g3++;
				var p1 = this._data.getPixel(dx,dy) >> 24 & 255;
				var p2 = other._data.getPixel(Math.floor(dx - this._point.x),Math.floor(dy - this._point.y)) >> 24 & 255;
				if(p1 > 0 && p2 > 0) {
					return true;
				}
			}
		}
		return false;
	}
	,get_data: function() {
		return this._data;
	}
	,set_data: function(value) {
		this._data = value;
		this._width = value.width;
		this._height = value.height;
		this.update();
		return this._data;
	}
	,_data: null
	,_rect: null
	,_point: null
	,_point2: null
	,__class__: haxepunk_masks_Pixelmask
	,__properties__: $extend(haxepunk_masks_Hitbox.prototype.__properties__,{set_data:"set_data",get_data:"get_data"})
});
var haxepunk_masks_Imagemask = function(source) {
	haxepunk_masks_Pixelmask.call(this,new openfl_display_BitmapData(1,1,false,0));
	this._class = Type.getClassName(Type.getSuperClass(js_Boot.getClass(this)));
	this._source = source;
	this.update();
	var this1 = this._check;
	var key = Type.getClassName(haxepunk_masks_Imagemask);
	var _this = this1;
	var value = $bind(this,this.collidePixelmask);
	if(__map_reserved[key] != null) {
		_this.setReserved(key,value);
	} else {
		_this.h[key] = value;
	}
};
$hxClasses["haxepunk.masks.Imagemask"] = haxepunk_masks_Imagemask;
haxepunk_masks_Imagemask.__name__ = ["haxepunk","masks","Imagemask"];
haxepunk_masks_Imagemask.__super__ = haxepunk_masks_Pixelmask;
haxepunk_masks_Imagemask.prototype = $extend(haxepunk_masks_Pixelmask.prototype,{
	setSource: function(newsource) {
		this._source = newsource;
		this.update();
	}
	,update: function() {
		var r = this.getBounds();
		this._x = Math.floor(r.x);
		this._y = Math.floor(r.y);
		this._width = Math.ceil(r.width);
		this._height = Math.ceil(r.height);
		this._data = new openfl_display_BitmapData(this._width,this._height,true,0);
		haxepunk_masks_Pixelmask.prototype.update.call(this);
	}
	,getBounds: function() {
		var sx = this._source.scale * this._source.scaleX;
		var sy = this._source.scale * this._source.scaleY;
		var matrix = new openfl_geom_Matrix(sx,0,0,sy,-this._source.originX * sx,-this._source.originY * sy);
		matrix.rotate(this._source.angle * (Math.PI / -180));
		var point = new openfl_geom_Point(0,0);
		var p1 = matrix.transformPoint(point);
		point.x = this._source.get_width();
		point.y = this._source.get_height();
		var p2 = matrix.transformPoint(point);
		point.x = 0;
		point.y = this._source.get_height();
		var p3 = matrix.transformPoint(point);
		point.x = this._source.get_width();
		point.y = 0;
		var p4 = matrix.transformPoint(point);
		var r = new haxepunk_math_Rectangle(0,0,0,0);
		r.x = Math.min(Math.min(p1.x,p2.x),Math.min(p3.x,p4.x));
		r.y = Math.min(Math.min(p1.y,p2.y),Math.min(p3.y,p4.y));
		r.width = Math.max(Math.max(p1.x - r.x,p2.x - r.x),Math.max(p3.x - r.x,p4.x - r.x));
		r.height = Math.max(Math.max(p1.y - r.y,p2.y - r.y),Math.max(p3.y - r.y,p4.y - r.y));
		return r;
	}
	,collidePixelmask: function(other) {
		var rect = this.getBounds();
		rect.x += this._parent.get_x();
		rect.y += this._parent.get_y();
		if(((other instanceof haxepunk_masks_Imagemask) ? other : null) != null) {
			this._rect = (js_Boot.__cast(other , haxepunk_masks_Imagemask)).getBounds();
			this._rect.x += other._parent.get_x();
			this._rect.y += other._parent.get_y();
		} else {
			var tmp = other._parent.get_x() + other.get_x();
			this._rect.x = tmp - other._parent.originX;
			var tmp1 = other._parent.get_y() + other.get_y();
			this._rect.y = tmp1 - other._parent.originY;
			this._rect.width = other.get_width();
			this._rect.height = other.get_height();
		}
		var intersect = rect.intersection(this._rect);
		if(intersect == null) {
			return false;
		}
		var _g1 = Math.floor(intersect.x);
		var _g = Math.floor(intersect.x + intersect.width);
		while(_g1 < _g) {
			var dx = _g1++;
			var _g3 = Math.floor(intersect.y);
			var _g2 = Math.floor(intersect.y + intersect.height);
			while(_g3 < _g2) {
				var dy = _g3++;
				var p1 = this._data.getPixel(dx - rect.x | 0,dy - rect.y | 0) >> 24 & 255;
				var p2 = other._data.getPixel(dx - this._rect.x | 0,dy - this._rect.y | 0) >> 24 & 255;
				if(p1 > 0 && p2 > 0) {
					return true;
				}
			}
		}
		return false;
	}
	,_source: null
	,__class__: haxepunk_masks_Imagemask
});
var haxepunk_math_Projection = function() {
	this.max = this.min = 0;
};
$hxClasses["haxepunk.math.Projection"] = haxepunk_math_Projection;
haxepunk_math_Projection.__name__ = ["haxepunk","math","Projection"];
haxepunk_math_Projection.prototype = {
	max: null
	,min: null
	,overlaps: function(other) {
		return !(this.min > other.max || this.max < other.min);
	}
	,getOverlap: function(other) {
		if(this.max > other.max) {
			return this.max - other.min;
		} else {
			return other.max - this.min;
		}
	}
	,toString: function() {
		return "[ " + this.min + ", " + this.max + " ]";
	}
	,__class__: haxepunk_math_Projection
};
var haxepunk_masks_Polygon = function(points,origin) {
	this.maxY = 0;
	this.maxX = 0;
	this.minY = 0;
	this.minX = 0;
	haxepunk_masks_Hitbox.call(this);
	if(points.length < 3) {
		throw new js__$Boot_HaxeError("The polygon needs at least 3 sides.");
	}
	this._points = points;
	this._fakeEntity = new haxepunk_Entity();
	this._fakeTileHitbox = new haxepunk_masks_Hitbox();
	var this1 = this._check;
	var key = Type.getClassName(haxepunk_Mask);
	var _this = this1;
	var value = $bind(this,this.collideMask);
	if(__map_reserved[key] != null) {
		_this.setReserved(key,value);
	} else {
		_this.h[key] = value;
	}
	var this2 = this._check;
	var key1 = Type.getClassName(haxepunk_masks_Hitbox);
	var _this1 = this2;
	var value1 = $bind(this,this.collideHitbox);
	if(__map_reserved[key1] != null) {
		_this1.setReserved(key1,value1);
	} else {
		_this1.h[key1] = value1;
	}
	var this3 = this._check;
	var key2 = Type.getClassName(haxepunk_masks_Grid);
	var _this2 = this3;
	var value2 = $bind(this,this.collideGrid);
	if(__map_reserved[key2] != null) {
		_this2.setReserved(key2,value2);
	} else {
		_this2.h[key2] = value2;
	}
	var this4 = this._check;
	var key3 = Type.getClassName(haxepunk_masks_Circle);
	var _this3 = this4;
	var value3 = $bind(this,this.collideCircle);
	if(__map_reserved[key3] != null) {
		_this3.setReserved(key3,value3);
	} else {
		_this3.h[key3] = value3;
	}
	var this5 = this._check;
	var key4 = Type.getClassName(haxepunk_masks_Polygon);
	var _this4 = this5;
	var value4 = $bind(this,this.collidePolygon);
	if(__map_reserved[key4] != null) {
		_this4.setReserved(key4,value4);
	} else {
		_this4.h[key4] = value4;
	}
	this.origin = origin != null ? origin : new haxepunk_math_Vector2();
	this._angle = 0;
	this.updateAxes();
};
$hxClasses["haxepunk.masks.Polygon"] = haxepunk_masks_Polygon;
haxepunk_masks_Polygon.__name__ = ["haxepunk","masks","Polygon"];
haxepunk_masks_Polygon.fromPoints = function(points,origin) {
	var cp = haxepunk_math_MakeConvex.run(points);
	var list = new haxepunk_masks_Masklist();
	var _g = 0;
	while(_g < cp.length) {
		var p = cp[_g];
		++_g;
		list.add(new haxepunk_masks_Polygon(p,origin));
	}
	return list;
};
haxepunk_masks_Polygon.createPolygon = function(sides,radius,angle) {
	if(angle == null) {
		angle = 0;
	}
	if(radius == null) {
		radius = 100;
	}
	if(sides == null) {
		sides = 3;
	}
	if(sides < 3) {
		throw new js__$Boot_HaxeError("The polygon needs at least 3 sides.");
	}
	var rotationAngle = Math.PI * 2 / sides;
	var points = [];
	var _g1 = 0;
	var _g = sides;
	while(_g1 < _g) {
		var i = _g1++;
		var tempAngle = Math.PI + i * rotationAngle;
		var p = new haxepunk_math_Vector2();
		p.x = Math.cos(tempAngle) * radius + radius;
		p.y = Math.sin(tempAngle) * radius + radius;
		points.push(p);
	}
	var poly = new haxepunk_masks_Polygon(points);
	poly.origin.x = radius;
	poly.origin.y = radius;
	poly.set_angle(angle);
	return poly;
};
haxepunk_masks_Polygon.createFromArray = function(points) {
	var p = [];
	var i = 0;
	while(i < points.length) p.push(new haxepunk_math_Vector2(points[i++],points[i++]));
	return new haxepunk_masks_Polygon(p);
};
haxepunk_masks_Polygon.__super__ = haxepunk_masks_Hitbox;
haxepunk_masks_Polygon.prototype = $extend(haxepunk_masks_Hitbox.prototype,{
	origin: null
	,minX: null
	,minY: null
	,maxX: null
	,maxY: null
	,collideMask: function(other) {
		var offset;
		var offsetX = this._parent.get_x() + this._x - other._parent.get_x();
		var offsetY = this._parent.get_y() + this._y - other._parent.get_y();
		this.project(haxepunk_masks_Polygon.vertical,haxepunk_masks_Polygon.firstProj);
		other.project(haxepunk_masks_Polygon.vertical,haxepunk_masks_Polygon.secondProj);
		haxepunk_masks_Polygon.firstProj.min += offsetY;
		haxepunk_masks_Polygon.firstProj.max += offsetY;
		var _this = haxepunk_masks_Polygon.firstProj;
		var other1 = haxepunk_masks_Polygon.secondProj;
		if(!(!(_this.min > other1.max || _this.max < other1.min))) {
			return false;
		}
		this.project(haxepunk_masks_Polygon.horizontal,haxepunk_masks_Polygon.firstProj);
		other.project(haxepunk_masks_Polygon.horizontal,haxepunk_masks_Polygon.secondProj);
		haxepunk_masks_Polygon.firstProj.min += offsetX;
		haxepunk_masks_Polygon.firstProj.max += offsetX;
		var _this1 = haxepunk_masks_Polygon.firstProj;
		var other2 = haxepunk_masks_Polygon.secondProj;
		if(!(!(_this1.min > other2.max || _this1.max < other2.min))) {
			return false;
		}
		var _g = 0;
		var _g1 = this._axes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.project(a,haxepunk_masks_Polygon.firstProj);
			other.project(a,haxepunk_masks_Polygon.secondProj);
			offset = offsetX * a.x + offsetY * a.y;
			haxepunk_masks_Polygon.firstProj.min += offset;
			haxepunk_masks_Polygon.firstProj.max += offset;
			var _this2 = haxepunk_masks_Polygon.firstProj;
			var other3 = haxepunk_masks_Polygon.secondProj;
			if(!(!(_this2.min > other3.max || _this2.max < other3.min))) {
				return false;
			}
		}
		return true;
	}
	,collideHitbox: function(hitbox) {
		var offset;
		var offsetX = this._parent.get_x() + this._x - hitbox._parent.get_x();
		var offsetY = this._parent.get_y() + this._y - hitbox._parent.get_y();
		this.project(haxepunk_masks_Polygon.vertical,haxepunk_masks_Polygon.firstProj);
		hitbox.project(haxepunk_masks_Polygon.vertical,haxepunk_masks_Polygon.secondProj);
		haxepunk_masks_Polygon.firstProj.min += offsetY;
		haxepunk_masks_Polygon.firstProj.max += offsetY;
		var _this = haxepunk_masks_Polygon.firstProj;
		var other = haxepunk_masks_Polygon.secondProj;
		if(!(!(_this.min > other.max || _this.max < other.min))) {
			return false;
		}
		this.project(haxepunk_masks_Polygon.horizontal,haxepunk_masks_Polygon.firstProj);
		hitbox.project(haxepunk_masks_Polygon.horizontal,haxepunk_masks_Polygon.secondProj);
		haxepunk_masks_Polygon.firstProj.min += offsetX;
		haxepunk_masks_Polygon.firstProj.max += offsetX;
		var _this1 = haxepunk_masks_Polygon.firstProj;
		var other1 = haxepunk_masks_Polygon.secondProj;
		if(!(!(_this1.min > other1.max || _this1.max < other1.min))) {
			return false;
		}
		var _g = 0;
		var _g1 = this._axes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.project(a,haxepunk_masks_Polygon.firstProj);
			hitbox.project(a,haxepunk_masks_Polygon.secondProj);
			offset = offsetX * a.x + offsetY * a.y;
			haxepunk_masks_Polygon.firstProj.min += offset;
			haxepunk_masks_Polygon.firstProj.max += offset;
			var _this2 = haxepunk_masks_Polygon.firstProj;
			var other2 = haxepunk_masks_Polygon.secondProj;
			if(!(!(_this2.min > other2.max || _this2.max < other2.min))) {
				return false;
			}
		}
		return true;
	}
	,collideGrid: function(grid) {
		var tileW = grid._tile.width | 0;
		var tileH = grid._tile.height | 0;
		var solidTile;
		this._fakeEntity.set_width(tileW);
		this._fakeEntity.set_height(tileH);
		this._fakeEntity.set_x(this._parent.get_x());
		this._fakeEntity.set_y(this._parent.get_y());
		this._fakeEntity.originX = grid._parent.originX + grid._x;
		this._fakeEntity.originY = grid._parent.originY + grid._y;
		this._fakeTileHitbox._width = tileW;
		this._fakeTileHitbox._height = tileH;
		this._fakeTileHitbox.set_parent(this._fakeEntity);
		var _g1 = 0;
		var _g = grid.rows;
		while(_g1 < _g) {
			var r = _g1++;
			var _g3 = 0;
			var _g2 = grid.columns;
			while(_g3 < _g2) {
				var c = _g3++;
				this._fakeEntity.set_x(grid._parent.get_x() + grid._x + c * tileW);
				this._fakeEntity.set_y(grid._parent.get_y() + grid._y + r * tileH);
				solidTile = grid.getTile(c,r);
				if(solidTile && this.collideHitbox(this._fakeTileHitbox)) {
					return true;
				}
			}
		}
		return false;
	}
	,collideCircle: function(circle) {
		var edgesCrossed = 0;
		var p1;
		var p2;
		var i;
		var j;
		var nPoints = this._points.length;
		var offsetX = this._parent.get_x() + this._x;
		var offsetY = this._parent.get_y() + this._y;
		i = 0;
		j = nPoints - 1;
		while(i < nPoints) {
			p1 = this._points[i];
			p2 = this._points[j];
			var distFromCenter = (p2.x - p1.x) * (circle._y + circle._parent.get_y() - p1.y - offsetY) / (p2.y - p1.y) + p1.x + offsetX;
			if(p1.y + offsetY > circle._y + circle._parent.get_y() != p2.y + offsetY > circle._y + circle._parent.get_y() && circle._x + circle._parent.get_x() < distFromCenter) {
				++edgesCrossed;
			}
			j = i;
			++i;
		}
		if((edgesCrossed & 1) > 0) {
			return true;
		}
		var radiusSqr = circle._radius * circle._radius;
		var cx = circle._x + circle._parent.get_x();
		var cy = circle._y + circle._parent.get_y();
		var minDistanceSqr = 0;
		var closestX;
		var closestY;
		i = 0;
		j = nPoints - 1;
		while(i < nPoints) {
			p1 = this._points[i];
			p2 = this._points[j];
			var segmentLenSqr = (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);
			var t = ((cx - p1.x - offsetX) * (p2.x - p1.x) + (cy - p1.y - offsetY) * (p2.y - p1.y)) / segmentLenSqr;
			if(t < 0) {
				closestX = p1.x;
				closestY = p1.y;
			} else if(t > 1) {
				closestX = p2.x;
				closestY = p2.y;
			} else {
				closestX = p1.x + t * (p2.x - p1.x);
				closestY = p1.y + t * (p2.y - p1.y);
			}
			closestX += offsetX;
			closestY += offsetY;
			minDistanceSqr = (cx - closestX) * (cx - closestX) + (cy - closestY) * (cy - closestY);
			if(minDistanceSqr <= radiusSqr) {
				return true;
			}
			j = i;
			++i;
		}
		return false;
	}
	,collidePolygon: function(other) {
		var offset;
		var offsetX = this._parent.get_x() + this._x - other._parent.get_x() - other._x;
		var offsetY = this._parent.get_y() + this._y - other._parent.get_y() - other._y;
		var _g = 0;
		var _g1 = this._axes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.project(a,haxepunk_masks_Polygon.firstProj);
			other.project(a,haxepunk_masks_Polygon.secondProj);
			offset = offsetX * a.x + offsetY * a.y;
			haxepunk_masks_Polygon.firstProj.min += offset;
			haxepunk_masks_Polygon.firstProj.max += offset;
			var _this = haxepunk_masks_Polygon.firstProj;
			var other1 = haxepunk_masks_Polygon.secondProj;
			if(!(!(_this.min > other1.max || _this.max < other1.min))) {
				return false;
			}
		}
		var _g2 = 0;
		var _g11 = other._axes;
		while(_g2 < _g11.length) {
			var a1 = _g11[_g2];
			++_g2;
			this.project(a1,haxepunk_masks_Polygon.firstProj);
			other.project(a1,haxepunk_masks_Polygon.secondProj);
			offset = offsetX * a1.x + offsetY * a1.y;
			haxepunk_masks_Polygon.firstProj.min += offset;
			haxepunk_masks_Polygon.firstProj.max += offset;
			var _this1 = haxepunk_masks_Polygon.firstProj;
			var other2 = haxepunk_masks_Polygon.secondProj;
			if(!(!(_this1.min > other2.max || _this1.max < other2.min))) {
				return false;
			}
		}
		return true;
	}
	,project: function(axis,projection) {
		var p = this._points[0];
		var min = axis.x * p.x + axis.y * p.y;
		var max = min;
		var _g1 = 1;
		var _g = this._points.length;
		while(_g1 < _g) {
			var i = _g1++;
			p = this._points[i];
			var cur = axis.x * p.x + axis.y * p.y;
			if(cur < min) {
				min = cur;
			} else if(cur > max) {
				max = cur;
			}
		}
		projection.min = min;
		projection.max = max;
	}
	,debugDraw: function(camera) {
		var offsetX = this._parent.get_x() + this._x - camera.x;
		var offsetY = this._parent.get_y() + this._y - camera.y;
		var scaleX = camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX;
		var scaleY = camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY;
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		var dc = haxepunk_Mask.drawContext;
		dc.color = 255;
		dc.alpha = 0.3;
		var _g1 = 1;
		var _g = this._points.length + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var a = i - 1;
			var b = i % this._points.length;
			dc.line((this._points[a].x + offsetX) * scaleX,(this._points[a].y + offsetY) * scaleY,(this._points[b].x + offsetX) * scaleX,(this._points[b].y + offsetY) * scaleY);
		}
		var x = (offsetX + this.origin.x) * scaleX;
		var y = (offsetY + this.origin.y) * scaleY;
		var radians = 2 * Math.PI / 25;
		var halfThick = dc.lineThickness / 2;
		var innerRadius = 2 - halfThick;
		var outerRadius = 2 + halfThick;
		var inner_y;
		var inner_x = 0;
		inner_y = 0;
		var outer_y;
		var outer_x = 0;
		outer_y = 0;
		var lastOuter_y;
		var lastOuter_x = 0;
		lastOuter_y = 0;
		var lastInner_y;
		var lastInner_x = 0;
		lastInner_y = 0;
		if(dc.shader == null) {
			dc.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = dc.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : dc.scene;
		dc.command = scene.batch.getDrawCommand(null,dc.shader,dc.smooth,dc.blend,null);
		var _g11 = 0;
		var _g2 = 26;
		while(_g11 < _g2) {
			var segment = _g11++;
			var theta = segment * radians;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			inner_x = x + sin * innerRadius;
			inner_y = y + cos * innerRadius;
			outer_x = x + sin * outerRadius;
			outer_y = y + cos * outerRadius;
			if(segment != 0) {
				var _this = dc.command;
				var tx1 = lastInner_x;
				var ty1 = lastInner_y;
				var tx2 = lastOuter_x;
				var ty2 = lastOuter_y;
				var tx3 = outer_x;
				var ty3 = outer_y;
				var color = dc.color;
				var alpha = dc.alpha;
				if(alpha > 0) {
					var onScreen;
					var onScreen1;
					var onScreen2;
					var _this1 = _this.visibleArea;
					if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width) {
						onScreen2 = (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x;
					} else {
						onScreen2 = false;
					}
					if(onScreen2) {
						var _this2 = _this.visibleArea;
						onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this2.y + _this2.height;
					} else {
						onScreen1 = false;
					}
					if(onScreen1) {
						onScreen = (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
					} else {
						onScreen = false;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx1;
						data1.ty1 = ty1;
						data1.uvx1 = 0;
						data1.uvy1 = 0;
						data1.tx2 = tx2;
						data1.ty2 = ty2;
						data1.uvx2 = 0;
						data1.uvy2 = 0;
						data1.tx3 = tx3;
						data1.ty3 = ty3;
						data1.uvx3 = 0;
						data1.uvy3 = 0;
						data1.color = color;
						data1.alpha = alpha;
						if(_this.data == null) {
							_this.data = data1;
						} else {
							_this._lastData._next = data1;
						}
						_this._lastData = data1;
						++_this.triangleCount;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c = data1.tx3;
						var x1 = a1 > b1 ? b1 > c ? c : b1 : a1 > c ? c : a1;
						var a2 = data1.tx1;
						var b2 = data1.tx2;
						var c1 = data1.tx3;
						var x2 = a2 < b2 ? b2 < c1 ? c1 : b2 : a2 < c1 ? c1 : a2;
						var a3 = data1.ty1;
						var b3 = data1.ty2;
						var c2 = data1.ty3;
						var y1 = a3 > b3 ? b3 > c2 ? c2 : b3 : a3 > c2 ? c2 : a3;
						var a4 = data1.ty1;
						var b4 = data1.ty2;
						var c3 = data1.ty3;
						var y2 = a4 < b4 ? b4 < c3 ? c3 : b4 : a4 < c3 ? c3 : a4;
						if(_this.bounds.width == 0) {
							_this.bounds.x = x1;
							_this.bounds.width = x2 - x1;
						} else {
							if(x1 < _this.bounds.x) {
								_this.bounds.width += _this.bounds.x - x1;
								_this.bounds.x = x1;
							}
							var _this3 = _this.bounds;
							if(x2 > _this3.x + _this3.width) {
								_this.bounds.width = x2 - _this.bounds.x;
							}
						}
						if(_this.bounds.height == 0) {
							_this.bounds.y = y1;
							_this.bounds.height = y2 - y1;
						} else {
							if(y1 < _this.bounds.y) {
								_this.bounds.height += _this.bounds.y - y1;
								_this.bounds.y = y1;
							}
							var _this4 = _this.bounds;
							if(y2 > _this4.y + _this4.height) {
								_this.bounds.height = y2 - _this.bounds.y;
							}
						}
					}
				}
				var _this5 = dc.command;
				var tx11 = lastInner_x;
				var ty11 = lastInner_y;
				var tx21 = outer_x;
				var ty21 = outer_y;
				var tx31 = inner_x;
				var ty31 = inner_y;
				var color1 = dc.color;
				var alpha1 = dc.alpha;
				if(alpha1 > 0) {
					var onScreen3;
					var onScreen4;
					var onScreen5;
					var _this6 = _this5.visibleArea;
					if((tx11 > tx21 ? tx21 > tx31 ? tx31 : tx21 : tx11 > tx31 ? tx31 : tx11) <= _this6.x + _this6.width) {
						onScreen5 = (tx11 < tx21 ? tx21 < tx31 ? tx31 : tx21 : tx11 < tx31 ? tx31 : tx11) >= _this5.visibleArea.x;
					} else {
						onScreen5 = false;
					}
					if(onScreen5) {
						var _this7 = _this5.visibleArea;
						onScreen4 = (ty11 > ty21 ? ty21 > ty31 ? ty31 : ty21 : ty11 > ty31 ? ty31 : ty11) <= _this7.y + _this7.height;
					} else {
						onScreen4 = false;
					}
					if(onScreen4) {
						onScreen3 = (ty11 < ty21 ? ty21 < ty31 ? ty31 : ty21 : ty11 < ty31 ? ty31 : ty11) >= _this5.visibleArea.y;
					} else {
						onScreen3 = false;
					}
					if(onScreen3) {
						var data2;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data2._next = null;
						} else {
							data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data3 = data2;
						data3.tx1 = tx11;
						data3.ty1 = ty11;
						data3.uvx1 = 0;
						data3.uvy1 = 0;
						data3.tx2 = tx21;
						data3.ty2 = ty21;
						data3.uvx2 = 0;
						data3.uvy2 = 0;
						data3.tx3 = tx31;
						data3.ty3 = ty31;
						data3.uvx3 = 0;
						data3.uvy3 = 0;
						data3.color = color1;
						data3.alpha = alpha1;
						if(_this5.data == null) {
							_this5.data = data3;
						} else {
							_this5._lastData._next = data3;
						}
						_this5._lastData = data3;
						++_this5.triangleCount;
						var a5 = data3.tx1;
						var b5 = data3.tx2;
						var c4 = data3.tx3;
						var x11 = a5 > b5 ? b5 > c4 ? c4 : b5 : a5 > c4 ? c4 : a5;
						var a6 = data3.tx1;
						var b6 = data3.tx2;
						var c5 = data3.tx3;
						var x21 = a6 < b6 ? b6 < c5 ? c5 : b6 : a6 < c5 ? c5 : a6;
						var a7 = data3.ty1;
						var b7 = data3.ty2;
						var c6 = data3.ty3;
						var y11 = a7 > b7 ? b7 > c6 ? c6 : b7 : a7 > c6 ? c6 : a7;
						var a8 = data3.ty1;
						var b8 = data3.ty2;
						var c7 = data3.ty3;
						var y21 = a8 < b8 ? b8 < c7 ? c7 : b8 : a8 < c7 ? c7 : a8;
						if(_this5.bounds.width == 0) {
							_this5.bounds.x = x11;
							_this5.bounds.width = x21 - x11;
						} else {
							if(x11 < _this5.bounds.x) {
								_this5.bounds.width += _this5.bounds.x - x11;
								_this5.bounds.x = x11;
							}
							var _this8 = _this5.bounds;
							if(x21 > _this8.x + _this8.width) {
								_this5.bounds.width = x21 - _this5.bounds.x;
							}
						}
						if(_this5.bounds.height == 0) {
							_this5.bounds.y = y11;
							_this5.bounds.height = y21 - y11;
						} else {
							if(y11 < _this5.bounds.y) {
								_this5.bounds.height += _this5.bounds.y - y11;
								_this5.bounds.y = y11;
							}
							var _this9 = _this5.bounds;
							if(y21 > _this9.y + _this9.height) {
								_this5.bounds.height = y21 - _this5.bounds.y;
							}
						}
					}
				}
			}
			lastOuter_x = outer_x;
			lastOuter_y = outer_y;
			lastInner_x = inner_x;
			lastInner_y = inner_y;
		}
	}
	,get_angle: function() {
		return this._angle;
	}
	,set_angle: function(value) {
		if(value != this._angle) {
			this.rotate(value - this._angle);
			if(this.list != null || (this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
				this.update();
			}
		}
		return value;
	}
	,get_points: function() {
		return this._points;
	}
	,set_points: function(value) {
		if(this._points != value) {
			this._points = value;
			if(this.list != null || (this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
				this.updateAxes();
			}
		}
		return value;
	}
	,update: function() {
		this.project(haxepunk_masks_Polygon.horizontal,haxepunk_masks_Polygon.firstProj);
		var projX = Math.round(haxepunk_masks_Polygon.firstProj.min);
		this._width = Math.round(haxepunk_masks_Polygon.firstProj.max - haxepunk_masks_Polygon.firstProj.min);
		this.project(haxepunk_masks_Polygon.vertical,haxepunk_masks_Polygon.secondProj);
		var projY = Math.round(haxepunk_masks_Polygon.secondProj.min);
		this._height = Math.round(haxepunk_masks_Polygon.secondProj.max - haxepunk_masks_Polygon.secondProj.min);
		this.minX = this._x + projX;
		this.minY = this._y + projY;
		this.maxX = Math.round(this.minX + this._width);
		this.maxY = Math.round(this.minY + this._height);
		if(this.list != null) {
			this.list.update();
		} else if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this._parent.originX = -this._x - projX;
			this._parent.originY = -this._y - projY;
			this._parent.set_width(this._width);
			this._parent.set_height(this._height);
		}
	}
	,rotate: function(angleDelta) {
		this._angle += angleDelta;
		angleDelta *= Math.PI / -180;
		var p;
		var _g1 = 0;
		var _g = this._points.length;
		while(_g1 < _g) {
			var i = _g1++;
			p = this._points[i];
			var dx = p.x - this.origin.x;
			var dy = p.y - this.origin.y;
			var pointAngle = Math.atan2(dy,dx);
			var length = Math.sqrt(dx * dx + dy * dy);
			p.x = Math.cos(pointAngle + angleDelta) * length + this.origin.x;
			p.y = Math.sin(pointAngle + angleDelta) * length + this.origin.y;
		}
		var _g2 = 0;
		var _g11 = this._axes;
		while(_g2 < _g11.length) {
			var a = _g11[_g2];
			++_g2;
			var axisAngle = Math.atan2(a.y,a.x);
			a.x = Math.cos(axisAngle + angleDelta);
			a.y = Math.sin(axisAngle + angleDelta);
		}
	}
	,generateAxes: function() {
		this._axes = [];
		var temp;
		var nPoints = this._points.length;
		var edge;
		var i;
		var j;
		i = 0;
		j = nPoints - 1;
		while(i < nPoints) {
			edge = new haxepunk_math_Vector2();
			edge.x = this._points[i].x - this._points[j].x;
			edge.y = this._points[i].y - this._points[j].y;
			temp = edge.y;
			edge.y = -edge.x;
			edge.x = temp;
			if(!(edge.x == 0 && edge.y == 0)) {
				var normal = 1 / Math.sqrt(edge.x * edge.x + edge.y * edge.y);
				edge.x *= normal;
				edge.y *= normal;
			}
			this._axes.push(edge);
			j = i;
			++i;
		}
	}
	,removeDuplicateAxes: function() {
		var i = this._axes.length - 1;
		var j = i - 1;
		while(i > 0) {
			if(Math.abs(this._axes[i].x - this._axes[j].x) < haxepunk_masks_Polygon.EPSILON && Math.abs(this._axes[i].y - this._axes[j].y) < haxepunk_masks_Polygon.EPSILON || Math.abs(this._axes[j].x + this._axes[i].x) < haxepunk_masks_Polygon.EPSILON && Math.abs(this._axes[i].y + this._axes[j].y) < haxepunk_masks_Polygon.EPSILON) {
				this._axes.splice(i,1);
				--i;
			}
			--j;
			if(j < 0) {
				--i;
				j = i - 1;
			}
		}
	}
	,updateAxes: function() {
		this.generateAxes();
		this.removeDuplicateAxes();
		this.update();
	}
	,_angle: null
	,_points: null
	,_axes: null
	,_fakeEntity: null
	,_fakeTileHitbox: null
	,__class__: haxepunk_masks_Polygon
	,__properties__: $extend(haxepunk_masks_Hitbox.prototype.__properties__,{set_points:"set_points",get_points:"get_points",set_angle:"set_angle",get_angle:"get_angle"})
});
var haxepunk_masks_SlopedGrid = function(width,height,tileWidth,tileHeight,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	haxepunk_masks_Hitbox.call(this);
	if(width == 0 || height == 0 || tileWidth == 0 || tileHeight == 0) {
		throw new js__$Boot_HaxeError("Illegal Grid, sizes cannot be 0.");
	}
	this._rect = haxepunk_HXP.rect;
	this._point = haxepunk_HXP.point;
	this._point2 = haxepunk_HXP.point2;
	this.columns = width / tileWidth | 0;
	this.rows = height / tileHeight | 0;
	this._tile = new haxepunk_math_Rectangle(0,0,tileWidth,tileHeight);
	this._x = x;
	this._y = y;
	this._width = width;
	this._height = height;
	this.usePositions = false;
	var this1 = this._check;
	var key = Type.getClassName(haxepunk_Mask);
	var _this = this1;
	var value = $bind(this,this.collideMask);
	if(__map_reserved[key] != null) {
		_this.setReserved(key,value);
	} else {
		_this.h[key] = value;
	}
	var this2 = this._check;
	var key1 = Type.getClassName(haxepunk_masks_Hitbox);
	var _this1 = this2;
	var value1 = $bind(this,this.collideHitbox);
	if(__map_reserved[key1] != null) {
		_this1.setReserved(key1,value1);
	} else {
		_this1.h[key1] = value1;
	}
	this.data = [];
	var _g1 = 0;
	var _g = this.rows;
	while(_g1 < _g) {
		var x1 = _g1++;
		this.data.push([]);
		var _g3 = 0;
		var _g2 = this.columns;
		while(_g3 < _g2) {
			var y1 = _g3++;
			this.data[x1][y1] = haxepunk_masks_SlopedGrid._emptyTile;
		}
	}
};
$hxClasses["haxepunk.masks.SlopedGrid"] = haxepunk_masks_SlopedGrid;
haxepunk_masks_SlopedGrid.__name__ = ["haxepunk","masks","SlopedGrid"];
haxepunk_masks_SlopedGrid.__super__ = haxepunk_masks_Hitbox;
haxepunk_masks_SlopedGrid.prototype = $extend(haxepunk_masks_Hitbox.prototype,{
	usePositions: null
	,collidePoint: function(cx,cy) {
		var px = this._x + this._parent.get_x();
		var py = this._y + this._parent.get_y();
		var column = (cx - px) / this._tile.width | 0;
		var row = (cy - py) / this._tile.height | 0;
		var x = px + column * this._tile.width;
		var y = py + row * this._tile.height;
		var column1 = column;
		var row1 = row;
		var tile;
		if(!(column1 >= 0 && column1 < this.columns && row1 >= 0 && row1 < this.rows)) {
			tile = haxepunk_masks_SlopedGrid._emptyTile;
		} else {
			if(this.usePositions) {
				column1 = column1 / this._tile.width | 0;
				row1 = row1 / this._tile.height | 0;
			}
			tile = this.data[row1][column1];
		}
		if(tile != null) {
			if(tile.type == 1) {
				return true;
			} else if(tile.type == 2 || tile.type == 3) {
				var y1 = y;
				y1 += tile.yOffset;
				var x2 = x + this._tile.width;
				var y2 = y1 + tile.slope * this._tile.width;
				var left = (x2 - x) * (cy - y1) > (y2 - y1) * (cx - x);
				if(tile.type == 2 && !left || tile.type == 3 && left) {
					return true;
				}
			}
		}
		return false;
	}
	,collidePointInSlope: function(x1,y1,px,py,tile) {
		y1 += tile.yOffset;
		var x2 = x1 + this._tile.width;
		var y2 = y1 + tile.slope * this._tile.width;
		var left = (x2 - x1) * (py - y1) > (y2 - y1) * (px - x1);
		if(!(tile.type == 2 && !left)) {
			if(tile.type == 3) {
				return left;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,setTile: function(column,row,type,slope,yOffset) {
		if(yOffset == null) {
			yOffset = 0;
		}
		if(slope == null) {
			slope = 0;
		}
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		if(!(column >= 0 && column < this.columns && row >= 0 && row < this.rows)) {
			return;
		}
		if(type == null) {
			type = 1;
		}
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
		}
		if(type == null) {
			this.data[row][column] = { type : type, slope : slope, yOffset : yOffset * this._tile.height};
		} else {
			switch(type) {
			case 4:
				this.data[row][column] = { type : 2, slope : -1, yOffset : this._tile.height};
				break;
			case 5:
				this.data[row][column] = { type : 2, slope : 1, yOffset : 0};
				break;
			case 6:
				this.data[row][column] = { type : 3, slope : 1, yOffset : 0};
				break;
			case 7:
				this.data[row][column] = { type : 3, slope : -1, yOffset : this._tile.height};
				break;
			default:
				this.data[row][column] = { type : type, slope : slope, yOffset : yOffset * this._tile.height};
			}
		}
	}
	,clearTile: function(column,row) {
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		this.setTile(column,row,0);
	}
	,checkTile: function(column,row) {
		if(column >= 0 && column < this.columns && row >= 0) {
			return row < this.rows;
		} else {
			return false;
		}
	}
	,getTile: function(column,row) {
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		if(!(column >= 0 && column < this.columns && row >= 0 && row < this.rows)) {
			return haxepunk_masks_SlopedGrid._emptyTile;
		} else {
			if(this.usePositions) {
				column = column / this._tile.width | 0;
				row = row / this._tile.height | 0;
			}
			return this.data[row][column];
		}
	}
	,setRect: function(column,row,width,height,type,slope,yOffset) {
		if(yOffset == null) {
			yOffset = 0;
		}
		if(slope == null) {
			slope = 0;
		}
		if(height == null) {
			height = 1;
		}
		if(width == null) {
			width = 1;
		}
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		if(type == null) {
			type = 1;
		}
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
			width = width / this._tile.width | 0;
			height = height / this._tile.height | 0;
		}
		var _g1 = row;
		var _g = row + height;
		while(_g1 < _g) {
			var yy = _g1++;
			var _g3 = column;
			var _g2 = column + width;
			while(_g3 < _g2) {
				var xx = _g3++;
				this.setTile(xx,yy,type,slope,yOffset);
			}
		}
	}
	,clearRect: function(column,row,width,height) {
		if(height == null) {
			height = 1;
		}
		if(width == null) {
			width = 1;
		}
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		this.setRect(column,row,width,height,0);
	}
	,get_tileWidth: function() {
		return this._tile.width | 0;
	}
	,get_tileHeight: function() {
		return this._tile.height | 0;
	}
	,columns: null
	,rows: null
	,data: null
	,collideBox: function(opx,opy,opw,oph,px,py) {
		this._rect.x = opx - px;
		this._rect.y = opy - py;
		var startx = this._rect.x / this._tile.width | 0;
		var starty = this._rect.y / this._tile.height | 0;
		var endx = ((this._rect.x + opw - 1) / this._tile.width | 0) + 1;
		var endy = ((this._rect.y + oph - 1) / this._tile.height | 0) + 1;
		var yy = py + starty * this._tile.height;
		var _g1 = starty;
		var _g = endy;
		while(_g1 < _g) {
			var dy = _g1++;
			var xx = px + startx * this._tile.width;
			var _g3 = startx;
			var _g2 = endx;
			while(_g3 < _g2) {
				var dx = _g3++;
				var column = dx;
				var row = dy;
				var tile;
				if(!(column >= 0 && column < this.columns && row >= 0 && row < this.rows)) {
					tile = haxepunk_masks_SlopedGrid._emptyTile;
				} else {
					if(this.usePositions) {
						column = column / this._tile.width | 0;
						row = row / this._tile.height | 0;
					}
					tile = this.data[row][column];
				}
				if(tile == null) {
					continue;
				}
				var _g4 = tile.type;
				switch(_g4) {
				case 1:
					return true;
				case 2:
					var x = opx;
					var y = opy;
					if(tile.slope > 0) {
						x += opw;
					}
					x = haxepunk_math_MathUtil.clamp(x,xx,xx + (this._tile.width | 0));
					y = haxepunk_math_MathUtil.clamp(y,yy,yy + (this._tile.height | 0));
					var y1 = yy;
					y1 += tile.yOffset;
					var x2 = xx + this._tile.width;
					var y2 = y1 + tile.slope * this._tile.width;
					var left = (x2 - xx) * (y - y1) > (y2 - y1) * (x - xx);
					if(tile.type == 2 && !left || tile.type == 3 && left) {
						return true;
					}
					break;
				case 3:
					var x1 = opx;
					var y3 = opy + oph;
					if(tile.slope < 0) {
						x1 += opw;
					}
					x1 = haxepunk_math_MathUtil.clamp(x1,xx,xx + (this._tile.width | 0));
					y3 = haxepunk_math_MathUtil.clamp(y3,yy,yy + (this._tile.height | 0));
					var y11 = yy;
					y11 += tile.yOffset;
					var x21 = xx + this._tile.width;
					var y21 = y11 + tile.slope * this._tile.width;
					var left1 = (x21 - xx) * (y3 - y11) > (y21 - y11) * (x1 - xx);
					if(tile.type == 2 && !left1 || tile.type == 3 && left1) {
						return true;
					}
					break;
				default:
				}
				xx += this._tile.width;
			}
			yy += this._tile.height;
		}
		return false;
	}
	,collideMask: function(other) {
		var x = this._x + this._parent.get_x();
		var y = this._y + this._parent.get_y();
		return this.collideBox(other._parent.get_x() - other._parent.originX,other._parent.get_y() - other._parent.originY,other._parent.get_width(),other._parent.get_height(),this._parent.get_x() + this._parent.originX,this._parent.get_y() + this._parent.originY);
	}
	,collideHitbox: function(other) {
		var x = this._x + this._parent.get_x();
		var y = this._y + this._parent.get_y();
		var ox = other._x + other._parent.get_x();
		var oy = other._y + other._parent.get_y();
		return this.collideBox(ox,oy,other._width,other._height,x,y);
	}
	,debugDraw: function(camera) {
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		var dc = haxepunk_Mask.drawContext;
		var scaleX = camera.scale * camera.scaleX * haxepunk_HXP.screen.fullScaleX;
		var scaleY = camera.scale * camera.scaleY * haxepunk_HXP.screen.fullScaleY;
		var cellX;
		var cellY;
		var stepX = (this._tile.width | 0) * scaleX;
		var stepY = (this._tile.height | 0) * scaleY;
		var px = this._x + this._parent.get_x() - camera.x;
		var py = this._y + this._parent.get_y() - camera.y;
		var startx = Math.floor(-px / (this._tile.width | 0));
		var starty = Math.floor(-py / (this._tile.height | 0));
		var destx = startx + 1 + Math.ceil(haxepunk_HXP.width / (this._tile.width | 0));
		var desty = starty + 1 + Math.ceil(haxepunk_HXP.height / (this._tile.height | 0));
		if(startx > this.columns || starty > this.rows || destx < 0 || desty < 0) {
			return;
		}
		if(startx < 0) {
			startx = 0;
		}
		if(destx > this.columns) {
			destx = this.columns;
		}
		if(starty < 0) {
			starty = 0;
		}
		if(desty > this.rows) {
			desty = this.rows;
		}
		px = (px + startx * (this._tile.width | 0)) * scaleX;
		py = (py + starty * (this._tile.height | 0)) * scaleY;
		dc.lineThickness = 2;
		var row;
		cellY = py;
		var _g1 = starty;
		var _g = desty;
		while(_g1 < _g) {
			var y = _g1++;
			cellX = px;
			row = this.data[y];
			var _g3 = startx;
			var _g2 = destx;
			while(_g3 < _g2) {
				var x = _g3++;
				var tile = row[x];
				if(tile != null) {
					if(tile.type == 1) {
						dc.color = 16777215;
						dc.alpha = 0.3;
						dc.rect(cellX,cellY,stepX,stepY);
						dc.color = 255;
						dc.alpha = 1;
						if(x < this.columns - 1 && row[x + 1].type == 0) {
							dc.line(cellX + stepX,cellY,cellX + stepX,cellY + stepY);
						}
						if(x > 0 && row[x - 1].type == 0) {
							dc.line(cellX,cellY,cellX,cellY + stepY);
						}
						if(y < this.rows - 1 && this.data[y + 1][x].type == 0) {
							dc.line(cellX,cellY + stepY,cellX + stepX,cellY + stepY);
						}
						if(y > 0 && this.data[y - 1][x].type == 0) {
							dc.line(cellX,cellY,cellX + stepX,cellY);
						}
					} else if(tile.type == 3 || tile.type == 2) {
						var offset = tile.yOffset * scaleY;
						var slope = tile.slope * scaleY / scaleX;
						var xpos = cellX;
						var endx = stepX;
						var ypos = cellY + offset;
						var endy = slope * endx;
						if(offset < 0) {
							var fx = -offset / slope;
							endx = stepX - fx;
							xpos = cellX + fx;
							ypos = cellY;
							if(y <= 0 || this.data[y - 1][x].type == 1) {
								dc.line(cellX,ypos,xpos,ypos);
							}
						} else if(offset > stepY) {
							var fx1 = -(offset - stepX) / slope;
							endx = stepX - fx1;
							xpos = cellX + fx1;
							ypos = cellY + stepY;
							if(y >= this.rows - 1 || this.data[y + 1][x].type == 1) {
								dc.line(cellX,ypos,xpos,ypos);
							}
						} else if(offset + endy < 0) {
							var fx2 = -offset / slope;
							endx = fx2;
							if(y <= 0 || this.data[y - 1][x].type == 1) {
								dc.line(cellX + fx2,cellY,cellX + stepX,cellY);
							}
						} else if(offset + endy > stepY) {
							var fx3 = -(offset - stepX) / slope;
							endx = fx3;
							if(y >= this.rows - 1 || this.data[y + 1][x].type == 1) {
								dc.line(cellX + fx3,cellY + stepY,cellX + stepX,cellY + stepY);
							}
						}
						endy = slope * endx;
						dc.line(xpos,ypos,xpos + endx,ypos + endy);
					}
				}
				cellX += stepX;
			}
			cellY += stepY;
		}
	}
	,_tile: null
	,_rect: null
	,_point: null
	,_point2: null
	,__class__: haxepunk_masks_SlopedGrid
	,__properties__: $extend(haxepunk_masks_Hitbox.prototype.__properties__,{get_tileHeight:"get_tileHeight",get_tileWidth:"get_tileWidth"})
});
var haxepunk_math_MakeConvex = function() { };
$hxClasses["haxepunk.math.MakeConvex"] = haxepunk_math_MakeConvex;
haxepunk_math_MakeConvex.__name__ = ["haxepunk","math","MakeConvex"];
haxepunk_math_MakeConvex.findInvalid = function(p) {
	var invalidVertices = [];
	var np = p.length;
	var _g1 = 0;
	var _g = np;
	while(_g1 < _g) {
		var currentVIndex = _g1++;
		var currentV = p[currentVIndex];
		var nextV = p[(currentVIndex + 1) % np];
		var nextNextV = p[(currentVIndex + 2) % np];
		var currentEdge = haxepunk_math__$MakeConvex_Point_$Impl_$.subR(nextV,currentV);
		var nextEdge = haxepunk_math__$MakeConvex_Point_$Impl_$.subR(nextNextV,nextV);
		if(haxepunk_math__$MakeConvex_Point_$Impl_$.dot(haxepunk_math__$MakeConvex_Point_$Impl_$.orthoR(currentEdge),nextEdge) < 0) {
			invalidVertices.push((currentVIndex + 1) % np);
		}
	}
	return invalidVertices;
};
haxepunk_math_MakeConvex.run = function(polygon) {
	var p = polygon.slice();
	var r = [];
	var invalidVertices = haxepunk_math_MakeConvex.findInvalid(p);
	var np = p.length;
	var n = invalidVertices.length;
	while(true) {
		n = invalidVertices.length;
		if(!(n > 0)) {
			break;
		}
		var startIndex = 0;
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			if(n == 1 || (invalidVertices[i] + 1) % np != invalidVertices[(i + 1) % n]) {
				startIndex = invalidVertices[i];
				break;
			}
		}
		var startVertex = [p[startIndex]];
		var firstEdge = haxepunk_math__$MakeConvex_Point_$Impl_$.subR(p[(startIndex + 1) % np],startVertex[0]);
		var found = false;
		var target = [0];
		var _g11 = 2;
		var _g2 = np;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var curIndex = (startIndex + i1) % np;
			var curVertex = p[curIndex];
			if(invalidVertices.indexOf(curIndex) > -1) {
				found = true;
				target[0] = curIndex;
			} else if(haxepunk_math__$MakeConvex_Point_$Impl_$.dot(haxepunk_math__$MakeConvex_Point_$Impl_$.orthoR(haxepunk_math__$MakeConvex_Point_$Impl_$.subR(startVertex[0],curVertex)),firstEdge) < 0) {
				found = true;
				target[0] = (startIndex + i1 - 1) % np;
			}
			if(found) {
				var newPoly = [[]];
				var k = startIndex;
				while(true) {
					newPoly[0].push(p[k]);
					if(k == target[0]) {
						break;
					}
					k = (k + 1) % np;
				}
				r.push(newPoly[0]);
				var p1 = (function(newPoly1,target1,startVertex1) {
					return function(x) {
						if(!(newPoly1[0].indexOf(x) == -1 || x == startVertex1[0])) {
							return x == p[target1[0]];
						} else {
							return true;
						}
					};
				})(newPoly,target,startVertex);
				p = p.filter(p1);
				np = p.length;
				invalidVertices = haxepunk_math_MakeConvex.findInvalid(p);
				if(invalidVertices.length == 0) {
					r.push(p);
				}
				break;
			}
		}
	}
	if(r.length == 0) {
		return [polygon];
	} else {
		return r;
	}
};
var haxepunk_math__$MakeConvex_Point_$Impl_$ = {};
$hxClasses["haxepunk.math._MakeConvex.Point_Impl_"] = haxepunk_math__$MakeConvex_Point_$Impl_$;
haxepunk_math__$MakeConvex_Point_$Impl_$.__name__ = ["haxepunk","math","_MakeConvex","Point_Impl_"];
haxepunk_math__$MakeConvex_Point_$Impl_$._new = function(x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this1 = new haxepunk_math_Vector2(x,y);
	return this1;
};
haxepunk_math__$MakeConvex_Point_$Impl_$.fromStruct = function(v) {
	return haxepunk_math__$MakeConvex_Point_$Impl_$._new(v.x,v.y);
};
haxepunk_math__$MakeConvex_Point_$Impl_$.addR = function(this1,b) {
	return haxepunk_math__$MakeConvex_Point_$Impl_$._new(this1.x + b.x,this1.y + b.y);
};
haxepunk_math__$MakeConvex_Point_$Impl_$.subR = function(this1,b) {
	return haxepunk_math__$MakeConvex_Point_$Impl_$.addR(this1,haxepunk_math__$MakeConvex_Point_$Impl_$.negR(b));
};
haxepunk_math__$MakeConvex_Point_$Impl_$.negR = function(this1) {
	return haxepunk_math__$MakeConvex_Point_$Impl_$._new(-this1.x,-this1.y);
};
haxepunk_math__$MakeConvex_Point_$Impl_$.dot = function(this1,b) {
	return this1.x * b.x + this1.y * b.y;
};
haxepunk_math__$MakeConvex_Point_$Impl_$.orthoR = function(this1) {
	return haxepunk_math__$MakeConvex_Point_$Impl_$._new(this1.y,-this1.x);
};
var haxepunk_math_MathUtil = function() { };
$hxClasses["haxepunk.math.MathUtil"] = haxepunk_math_MathUtil;
haxepunk_math_MathUtil.__name__ = ["haxepunk","math","MathUtil"];
haxepunk_math_MathUtil.__properties__ = {get_RAD:"get_RAD",get_DEG:"get_DEG",get_NUMBER_MAX_VALUE:"get_NUMBER_MAX_VALUE"};
haxepunk_math_MathUtil.get_NUMBER_MAX_VALUE = function() {
	return 179 * Math.pow(10,306);
};
haxepunk_math_MathUtil.get_DEG = function() {
	return -180 / Math.PI;
};
haxepunk_math_MathUtil.get_RAD = function() {
	return Math.PI / -180;
};
haxepunk_math_MathUtil.sign = function(value) {
	if(value < 0) {
		return -1;
	} else if(value > 0) {
		return 1;
	} else {
		return 0;
	}
};
haxepunk_math_MathUtil.approach = function(value,target,amount) {
	if(value < target - amount) {
		return value + amount;
	} else if(value > target + amount) {
		return value - amount;
	} else {
		return target;
	}
};
haxepunk_math_MathUtil.lerp = function(a,b,t) {
	if(t == null) {
		t = 1;
	}
	return a + (b - a) * t;
};
haxepunk_math_MathUtil.ilerp = function(a,b,t) {
	if(t == null) {
		t = 1;
	}
	return Math.round(a + (b - a) * t) | 0;
};
haxepunk_math_MathUtil.stepTowards = function(object,x,y,distance) {
	if(distance == null) {
		distance = 1;
	}
	haxepunk_math_MathUtil.point.x = x - object.x;
	haxepunk_math_MathUtil.point.y = y - object.y;
	var this1 = haxepunk_math_MathUtil.point;
	if(Math.sqrt(this1.x * this1.x + this1.y * this1.y) <= distance) {
		object.x = x;
		object.y = y;
		return;
	}
	var this2 = haxepunk_math_MathUtil.point;
	if(this2.x != 0 || this2.y != 0) {
		var norm = distance / Math.sqrt(this2.x * this2.x + this2.y * this2.y);
		var _g = this2;
		_g.x *= norm;
		var _g1 = this2;
		_g1.y *= norm;
	}
	object.x += haxepunk_math_MathUtil.point.x;
	object.y += haxepunk_math_MathUtil.point.y;
};
haxepunk_math_MathUtil.anchorTo = function(object,anchor,distance) {
	if(distance == null) {
		distance = 0;
	}
	haxepunk_math_MathUtil.point.x = object.x - anchor.x;
	haxepunk_math_MathUtil.point.y = object.y - anchor.y;
	var this1 = haxepunk_math_MathUtil.point;
	if(Math.sqrt(this1.x * this1.x + this1.y * this1.y) > distance) {
		var this2 = haxepunk_math_MathUtil.point;
		if(this2.x != 0 || this2.y != 0) {
			var norm = distance / Math.sqrt(this2.x * this2.x + this2.y * this2.y);
			var _g = this2;
			_g.x *= norm;
			var _g1 = this2;
			_g1.y *= norm;
		}
	}
	object.x = anchor.x + haxepunk_math_MathUtil.point.x;
	object.y = anchor.y + haxepunk_math_MathUtil.point.y;
};
haxepunk_math_MathUtil.angle = function(x1,y1,x2,y2) {
	var a = Math.atan2(y2 - y1,x2 - x1) * (-180 / Math.PI);
	if(a < 0) {
		return a + 360;
	} else {
		return a;
	}
};
haxepunk_math_MathUtil.angleXY = function(object,angle,length,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(length == null) {
		length = 1;
	}
	angle *= Math.PI / -180;
	object.x = Math.cos(angle) * length + x;
	object.y = Math.sin(angle) * length + y;
};
haxepunk_math_MathUtil.angleDifference = function(angle1,angle2) {
	var diff = angle2 - angle1;
	while(diff < -180) diff += 360;
	while(diff > 180) diff -= 360;
	return diff;
};
haxepunk_math_MathUtil.rotateAround = function(object,anchor,angle,relative) {
	if(relative == null) {
		relative = true;
	}
	if(angle == null) {
		angle = 0;
	}
	if(relative) {
		var a = Math.atan2(object.y - anchor.y,object.x - anchor.x) * (-180 / Math.PI);
		angle += a < 0 ? a + 360 : a;
	}
	var angle1 = angle;
	var x1 = anchor.x;
	var y1 = anchor.y;
	var x2 = object.x;
	var y2 = object.y;
	var length = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	angle1 *= Math.PI / -180;
	object.x = Math.cos(angle1) * length + anchor.x;
	object.y = Math.sin(angle1) * length + anchor.y;
};
haxepunk_math_MathUtil.roundTo = function(num,precision) {
	if(precision == null) {
		precision = 0;
	}
	var exp = Math.pow(10,precision);
	return Math.round(num * exp) / exp;
};
haxepunk_math_MathUtil.distance = function(x1,y1,x2,y2) {
	if(y2 == null) {
		y2 = 0;
	}
	if(x2 == null) {
		x2 = 0;
	}
	return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
};
haxepunk_math_MathUtil.distanceSquared = function(x1,y1,x2,y2) {
	if(y2 == null) {
		y2 = 0;
	}
	if(x2 == null) {
		x2 = 0;
	}
	return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
};
haxepunk_math_MathUtil.distanceRects = function(x1,y1,w1,h1,x2,y2,w2,h2) {
	if(x1 < x2 + w2 && x2 < x1 + w1) {
		if(y1 < y2 + h2 && y2 < y1 + h1) {
			return 0;
		}
		if(y1 > y2) {
			return y1 - (y2 + h2);
		}
		return y2 - (y1 + h1);
	}
	if(y1 < y2 + h2 && y2 < y1 + h1) {
		if(x1 > x2) {
			return x1 - (x2 + w2);
		}
		return x2 - (x1 + w1);
	}
	if(x1 > x2) {
		if(y1 > y2) {
			var x21 = x2 + w2;
			var y21 = y2 + h2;
			return Math.sqrt((x21 - x1) * (x21 - x1) + (y21 - y1) * (y21 - y1));
		}
		var y11 = y1 + h1;
		var x22 = x2 + w2;
		return Math.sqrt((x22 - x1) * (x22 - x1) + (y2 - y11) * (y2 - y11));
	}
	if(y1 > y2) {
		var x11 = x1 + w1;
		var y22 = y2 + h2;
		return Math.sqrt((x2 - x11) * (x2 - x11) + (y22 - y1) * (y22 - y1));
	}
	var x12 = x1 + w1;
	var y12 = y1 + h1;
	return Math.sqrt((x2 - x12) * (x2 - x12) + (y2 - y12) * (y2 - y12));
};
haxepunk_math_MathUtil.distanceRectPoint = function(px,py,rx,ry,rw,rh) {
	if(px >= rx && px <= rx + rw) {
		if(py >= ry && py <= ry + rh) {
			return 0;
		}
		if(py > ry) {
			return py - (ry + rh);
		}
		return ry - py;
	}
	if(py >= ry && py <= ry + rh) {
		if(px > rx) {
			return px - (rx + rw);
		}
		return rx - px;
	}
	if(px > rx) {
		if(py > ry) {
			var x2 = rx + rw;
			var y2 = ry + rh;
			return Math.sqrt((x2 - px) * (x2 - px) + (y2 - py) * (y2 - py));
		}
		var x21 = rx + rw;
		return Math.sqrt((x21 - px) * (x21 - px) + (ry - py) * (ry - py));
	}
	if(py > ry) {
		var y21 = ry + rh;
		return Math.sqrt((rx - px) * (rx - px) + (y21 - py) * (y21 - py));
	}
	return Math.sqrt((rx - px) * (rx - px) + (ry - py) * (ry - py));
};
haxepunk_math_MathUtil.clamp = function(value,min,max) {
	if(max > min) {
		if(value < min) {
			return min;
		} else if(value > max) {
			return max;
		} else {
			return value;
		}
	} else if(value < max) {
		return max;
	} else if(value > min) {
		return min;
	} else {
		return value;
	}
};
haxepunk_math_MathUtil.iclamp = function(value,min,max) {
	if(max > min) {
		if(value < min) {
			return min;
		} else if(value > max) {
			return max;
		} else {
			return value;
		}
	} else if(value < max) {
		return max;
	} else if(value > min) {
		return min;
	} else {
		return value;
	}
};
haxepunk_math_MathUtil.clampInRect = function(object,x,y,width,height,padding) {
	if(padding == null) {
		padding = 0;
	}
	object.x = haxepunk_math_MathUtil.clamp(object.x,x + padding,x + width - padding);
	object.y = haxepunk_math_MathUtil.clamp(object.y,y + padding,y + height - padding);
};
haxepunk_math_MathUtil.scale = function(value,min,max,min2,max2) {
	return min2 + (value - min) / (max - min) * (max2 - min2);
};
haxepunk_math_MathUtil.scaleClamp = function(value,min,max,min2,max2) {
	value = min2 + (value - min) / (max - min) * (max2 - min2);
	if(max2 > min2) {
		if(value < max2) {
			value = value;
		} else {
			value = max2;
		}
		if(value > min2) {
			return value;
		} else {
			return min2;
		}
	}
	if(value < min2) {
		value = value;
	} else {
		value = min2;
	}
	if(value > max2) {
		return value;
	} else {
		return max2;
	}
};
haxepunk_math_MathUtil.iround = function(f) {
	return Math.round(f) | 0;
};
haxepunk_math_MathUtil.abs = function(f) {
	if(f < 0) {
		return -f;
	} else {
		return f;
	}
};
haxepunk_math_MathUtil.iabs = function(i) {
	if(i < 0) {
		return -i;
	} else {
		return i;
	}
};
haxepunk_math_MathUtil.max = function(a,b) {
	if(a < b) {
		return b;
	} else {
		return a;
	}
};
haxepunk_math_MathUtil.maxOf3 = function(a,b,c) {
	if(a < b) {
		if(b < c) {
			return c;
		} else {
			return b;
		}
	} else if(a < c) {
		return c;
	} else {
		return a;
	}
};
haxepunk_math_MathUtil.imax = function(a,b) {
	if(a < b) {
		return b;
	} else {
		return a;
	}
};
haxepunk_math_MathUtil.min = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
haxepunk_math_MathUtil.minOf3 = function(a,b,c) {
	if(a > b) {
		if(b > c) {
			return c;
		} else {
			return b;
		}
	} else if(a > c) {
		return c;
	} else {
		return a;
	}
};
haxepunk_math_MathUtil.imin = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
haxepunk_math_MathUtil.sin = function(theta) {
	return Math.sin(theta);
};
haxepunk_math_MathUtil.cos = function(theta) {
	return Math.cos(theta);
};
haxepunk_math_MathUtil.tan = function(theta) {
	return Math.tan(theta);
};
haxepunk_math_MathUtil.acos = function(theta) {
	return Math.acos(theta);
};
haxepunk_math_MathUtil.asin = function(theta) {
	return Math.asin(theta);
};
haxepunk_math_MathUtil.atan = function(theta) {
	return Math.atan(theta);
};
haxepunk_math_MathUtil.atan2 = function(dy,dx) {
	return Math.atan2(dy,dx);
};
haxepunk_math_MathUtil.sqrt = function(f) {
	return Math.sqrt(f);
};
haxepunk_math_MathUtil.floor = function(f) {
	return Math.floor(f);
};
haxepunk_math_MathUtil.ceil = function(f) {
	return Math.ceil(f);
};
haxepunk_math_MathUtil.random = function() {
	return Math.random();
};
haxepunk_math_MathUtil.round = function(f) {
	return Math.round(f);
};
haxepunk_math_MathUtil.roundDecimal = function(f,places) {
	return (f * Math.pow(10,places) | 0) / Math.pow(10,places);
};
haxepunk_math_MathUtil.pow = function(v,p) {
	return Math.pow(v,p);
};
haxepunk_math_MathUtil.log = function(v) {
	return Math.log(v);
};
var haxepunk_math_Random = function() { };
$hxClasses["haxepunk.math.Random"] = haxepunk_math_Random;
haxepunk_math_Random.__name__ = ["haxepunk","math","Random"];
haxepunk_math_Random.__properties__ = {get_random:"get_random",set_randomSeed:"set_randomSeed",get_randomSeed:"get_randomSeed"};
haxepunk_math_Random.get_randomSeed = function() {
	return haxepunk_math_Random._seed;
};
haxepunk_math_Random.set_randomSeed = function(value) {
	haxepunk_math_Random._seed = haxepunk_math_MathUtil.clamp(value,1.0,2147483646) | 0;
	return haxepunk_math_Random._seed;
};
haxepunk_math_Random.randomizeSeed = function() {
	haxepunk_math_Random._seed = haxepunk_math_MathUtil.clamp(2147483647 * Math.random() | 0,1.0,2147483646) | 0;
};
haxepunk_math_Random.get_random = function() {
	haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
	return haxepunk_math_Random._seed / 2147483647;
};
haxepunk_math_Random.randInt = function(amount) {
	haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
	return haxepunk_math_Random._seed / 2147483647 * amount | 0;
};
var haxepunk_screen_ScaleMode = function(integer) {
	if(integer == null) {
		integer = false;
	}
	this.baseHeight = 0;
	this.baseWidth = 0;
	this.integer = false;
	this.integer = integer;
	this.setBaseSize(haxepunk_HXP.width,haxepunk_HXP.height);
};
$hxClasses["haxepunk.screen.ScaleMode"] = haxepunk_screen_ScaleMode;
haxepunk_screen_ScaleMode.__name__ = ["haxepunk","screen","ScaleMode"];
haxepunk_screen_ScaleMode.prototype = {
	integer: null
	,baseWidth: null
	,baseHeight: null
	,setBaseSize: function(width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(width == -1) {
			width = haxepunk_HXP.width;
		}
		if(height == -1) {
			height = haxepunk_HXP.height;
		}
		this.baseWidth = width;
		this.baseHeight = height;
	}
	,resize: function(stageWidth,stageHeight) {
		haxepunk_HXP.screen.set_x(haxepunk_HXP.screen.set_y(0));
		haxepunk_HXP.screen.set_scale(1);
		haxepunk_HXP.screen.set_scaleX(stageWidth / this.baseWidth);
		haxepunk_HXP.screen.set_scaleY(stageHeight / this.baseHeight);
		haxepunk_HXP.screen.width = stageWidth;
		haxepunk_HXP.screen.height = stageHeight;
		if(this.integer) {
			haxepunk_HXP.screen.set_scaleX(Math.max(1,haxepunk_HXP.screen.scaleX) | 0);
			haxepunk_HXP.screen.set_scaleY(Math.max(1,haxepunk_HXP.screen.scaleY) | 0);
		}
	}
	,__class__: haxepunk_screen_ScaleMode
};
var haxepunk_tmx__$TmxEntity_Map_$Impl_$ = {};
$hxClasses["haxepunk.tmx._TmxEntity.Map_Impl_"] = haxepunk_tmx__$TmxEntity_Map_$Impl_$;
haxepunk_tmx__$TmxEntity_Map_$Impl_$.__name__ = ["haxepunk","tmx","_TmxEntity","Map_Impl_"];
haxepunk_tmx__$TmxEntity_Map_$Impl_$._new = function(map) {
	var this1 = map;
	return this1;
};
haxepunk_tmx__$TmxEntity_Map_$Impl_$.toMap = function(this1) {
	return this1;
};
haxepunk_tmx__$TmxEntity_Map_$Impl_$.fromString = function(s) {
	var this1 = new haxe_xml_Fast(Xml.parse(haxepunk_backend_flash_AssetLoader.getText(s)));
	var this2 = new haxepunk_tmx_TmxMap(this1);
	return this2;
};
haxepunk_tmx__$TmxEntity_Map_$Impl_$.fromTmxMap = function(map) {
	var this1 = map;
	return this1;
};
haxepunk_tmx__$TmxEntity_Map_$Impl_$.fromMapData = function(mapData) {
	var this1 = new haxepunk_tmx_TmxMap(mapData);
	return this1;
};
var haxepunk_tmx_TmxEntity = function(mapData) {
	haxepunk_Entity.call(this);
	this.map = mapData;
	this.debugObjectMask = true;
};
$hxClasses["haxepunk.tmx.TmxEntity"] = haxepunk_tmx_TmxEntity;
haxepunk_tmx_TmxEntity.__name__ = ["haxepunk","tmx","TmxEntity"];
haxepunk_tmx_TmxEntity.__super__ = haxepunk_Entity;
haxepunk_tmx_TmxEntity.prototype = $extend(haxepunk_Entity.prototype,{
	map: null
	,debugObjectMask: null
	,loadImageLayer: function(name) {
		var _this = this.map.imageLayers;
		if((__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) == false) {
			haxe_Log.trace("Image layer '" + name + "' doesn't exist",{ fileName : "TmxEntity.hx", lineNumber : 52, className : "haxepunk.tmx.TmxEntity", methodName : "loadImageLayer"});
			return;
		}
		var _this1 = this.map.imageLayers;
		var s = __map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name];
		var region = haxepunk_assets_AssetCache.getRegion(s);
		var tmp;
		if(region == null) {
			var data = null;
			if(haxepunk_graphics_atlas_AtlasData._dataPool.exists(s)) {
				data = haxepunk_graphics_atlas_AtlasData._dataPool.get(s);
			} else {
				var texture = haxepunk_assets_AssetCache.global.getTexture(s);
				if(texture != null) {
					data = new haxepunk_graphics_atlas_AtlasData(texture,s);
				}
			}
			var this1 = data;
			tmp = haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1);
		} else {
			tmp = region;
		}
		this.addGraphic(new haxepunk_graphics_Image(tmp));
	}
	,loadGraphic: function(tileset,layerNames,skip) {
		var gid;
		var layer;
		var _g = 0;
		while(_g < layerNames.length) {
			var name = layerNames[_g];
			++_g;
			if(this.map.layers._map.exists(name) == false) {
				haxe_Log.trace("Layer '" + name + "' doesn't exist",{ fileName : "TmxEntity.hx", lineNumber : 68, className : "haxepunk.tmx.TmxEntity", methodName : "loadGraphic"});
				continue;
			}
			layer = this.map.layers._map.get(name);
			var spacing = this.map.getTileMapSpacing(name);
			var tilemap = new haxepunk_graphics_tile_Tilemap(tileset,this.map.fullWidth,this.map.fullHeight,this.map.tileWidth,this.map.tileHeight,spacing,spacing);
			var _g2 = 0;
			var _g1 = layer.height;
			while(_g2 < _g1) {
				var row = _g2++;
				var _g4 = 0;
				var _g3 = layer.width;
				while(_g4 < _g3) {
					var col = _g4++;
					gid = layer.tileGIDs[row][col] - 1;
					if(gid < 0) {
						continue;
					}
					if(skip == null || Lambda.has(skip,gid) == false) {
						tilemap.setTile(col,row,gid);
					}
				}
			}
			this.addGraphic(tilemap);
		}
	}
	,loadMask: function(collideLayer,typeName,skip) {
		if(typeName == null) {
			typeName = "solid";
		}
		if(collideLayer == null) {
			collideLayer = "collide";
		}
		var tileCoords = [];
		if(!this.map.layers._map.exists(collideLayer)) {
			haxe_Log.trace("Layer '" + collideLayer + "' doesn't exist",{ fileName : "TmxEntity.hx", lineNumber : 100, className : "haxepunk.tmx.TmxEntity", methodName : "loadMask"});
			return tileCoords;
		}
		var gid;
		var layer = this.map.layers._map.get(collideLayer);
		var grid = new haxepunk_masks_Grid(this.map.fullWidth,this.map.fullHeight,this.map.tileWidth,this.map.tileHeight);
		var _g1 = 0;
		var _g = layer.height;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = 0;
			var _g2 = layer.width;
			while(_g3 < _g2) {
				var col = _g3++;
				gid = layer.tileGIDs[row][col] - 1;
				if(gid < 0) {
					continue;
				}
				if(skip == null || Lambda.has(skip,gid) == false) {
					grid.setTile(col,row,true);
					tileCoords.push(new haxepunk_tmx_TmxVec4(col * this.map.tileWidth,row * this.map.tileHeight,this.map.tileWidth,this.map.tileHeight));
				}
			}
		}
		this.set_mask(grid);
		this.set_type(typeName);
		var width = grid.get_width();
		var height = grid.get_height();
		this.set_width(width);
		this.set_height(height);
		this.originX = 0;
		this.originY = 0;
		return tileCoords;
	}
	,loadObjectMask: function(collideLayer,typeName) {
		if(typeName == null) {
			typeName = "solidObject";
		}
		if(collideLayer == null) {
			collideLayer = "objects";
		}
		if(this.map.getObjectGroup(collideLayer) == null) {
			haxe_Log.trace("ObjectGroup '" + collideLayer + "' doesn't exist",{ fileName : "TmxEntity.hx", lineNumber : 192, className : "haxepunk.tmx.TmxEntity", methodName : "loadObjectMask"});
			return;
		}
		var objectGroup = this.map.getObjectGroup(collideLayer);
		var masks_ar = [];
		var debug_graphics_ar = [];
		var _g = 0;
		var _g1 = objectGroup.objects;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			masks_ar.push(object.shapeMask);
			debug_graphics_ar.push(object.debug_graphic);
		}
		if(this.debugObjectMask) {
			var debug_graphicList = new haxepunk_graphics_Graphiclist(debug_graphics_ar);
			this.addGraphic(debug_graphicList);
		}
		var maskList = new haxepunk_masks_Masklist(masks_ar);
		this.set_mask(maskList);
		this.set_type(typeName);
	}
	,__class__: haxepunk_tmx_TmxEntity
});
var haxepunk_tmx_TmxLayer = function(source,parent) {
	this.properties = new haxepunk_tmx_TmxPropertySet();
	this.map = parent;
	this.name = source.att.resolve("name");
	this.x = source.has.resolve("x") ? Std.parseInt(source.att.resolve("x")) : 0;
	this.y = source.has.resolve("y") ? Std.parseInt(source.att.resolve("y")) : 0;
	this.width = Std.parseInt(source.att.resolve("width"));
	this.height = Std.parseInt(source.att.resolve("height"));
	this.visible = source.has.resolve("visible") && source.att.resolve("visible") == "1";
	this.opacity = source.has.resolve("opacity") ? parseFloat(source.att.resolve("opacity")) : 0;
	var node;
	var _g_head = source.nodes.resolve("properties").h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var node1 = val;
		this.properties.extend(node1);
	}
	this.tileGIDs = [];
	var data = source.node.resolve("data");
	if(data != null) {
		var chunk = "";
		var data_encoding = "default";
		if(data.has.resolve("encoding")) {
			data_encoding = data.att.resolve("encoding");
		}
		switch(data_encoding) {
		case "base64":
			chunk = data.get_innerData();
			var compressed = false;
			if(data.has.resolve("compression")) {
				var _g = data.att.resolve("compression");
				if(_g == "zlib") {
					compressed = true;
				} else {
					throw new js__$Boot_HaxeError("TmxLayer - data compression type not supported!");
				}
			}
			this.tileGIDs = haxepunk_tmx_TmxLayer.base64ToArray(chunk,this.width,compressed);
			break;
		case "csv":
			chunk = data.get_innerData();
			this.tileGIDs = haxepunk_tmx_TmxLayer.csvToArray(chunk);
			break;
		default:
			var lineWidth = this.width;
			var rowIdx = -1;
			var _g_head1 = data.nodes.resolve("tile").h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var node2 = val1;
				if(++lineWidth >= this.width) {
					this.tileGIDs[++rowIdx] = [];
					lineWidth = 0;
				}
				var gid = Std.parseInt(node2.att.resolve("gid"));
				this.tileGIDs[rowIdx].push(gid);
			}
		}
	}
};
$hxClasses["haxepunk.tmx.TmxLayer"] = haxepunk_tmx_TmxLayer;
haxepunk_tmx_TmxLayer.__name__ = ["haxepunk","tmx","TmxLayer"];
haxepunk_tmx_TmxLayer.csvToArray = function(input) {
	var result = [];
	var rows = input.split("\n");
	var row;
	var _g = 0;
	while(_g < rows.length) {
		var row1 = rows[_g];
		++_g;
		if(row1 == "") {
			continue;
		}
		var resultRow = [];
		var entries = row1.split(",");
		var entry;
		var _g1 = 0;
		while(_g1 < entries.length) {
			var entry1 = entries[_g1];
			++_g1;
			resultRow.push(Std.parseInt(entry1));
		}
		result.push(resultRow);
	}
	return result;
};
haxepunk_tmx_TmxLayer.base64ToArray = function(chunk,lineWidth,compressed) {
	var result = [];
	var data = haxepunk_tmx_TmxLayer.base64ToByteArray(chunk);
	if(compressed) {
		data.uncompress();
	}
	data.__endian = 1;
	while(data.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
		var resultRow = [];
		var i;
		var _g1 = 0;
		var _g = lineWidth;
		while(_g1 < _g) {
			var i1 = _g1++;
			resultRow.push(data.readInt());
		}
		result.push(resultRow);
	}
	return result;
};
haxepunk_tmx_TmxLayer.base64ToByteArray = function(data) {
	var this1 = new openfl_utils_ByteArrayData(0);
	var output = this1;
	var lookup = [];
	var c;
	var _g1 = 0;
	var _g = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".length;
	while(_g1 < _g) {
		var c1 = _g1++;
		lookup[HxOverrides.cca("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",c1)] = c1;
	}
	var i = 0;
	while(i < data.length - 3) {
		if(data.charAt(i) == " " || data.charAt(i) == "\n") {
			++i;
			continue;
		}
		var a0 = lookup[HxOverrides.cca(data,i)];
		var a1 = lookup[HxOverrides.cca(data,i + 1)];
		var a2 = lookup[HxOverrides.cca(data,i + 2)];
		var a3 = lookup[HxOverrides.cca(data,i + 3)];
		if(a1 < 64) {
			output.writeByte((a0 << 2) + ((a1 & 48) >> 4));
		}
		if(a2 < 64) {
			output.writeByte(((a1 & 15) << 4) + ((a2 & 60) >> 2));
		}
		if(a3 < 64) {
			output.writeByte(((a2 & 3) << 6) + a3);
		}
		i += 4;
	}
	output.position = 0;
	return output;
};
haxepunk_tmx_TmxLayer.prototype = {
	map: null
	,name: null
	,x: null
	,y: null
	,width: null
	,height: null
	,opacity: null
	,visible: null
	,tileGIDs: null
	,properties: null
	,toCsv: function(tileSet) {
		var max = 16777215;
		var offset = 0;
		if(tileSet != null) {
			offset = tileSet.firstGID;
			max = tileSet.numTiles - 1;
		}
		var result = "";
		var row;
		var _g = 0;
		var _g1 = this.tileGIDs;
		while(_g < _g1.length) {
			var row1 = _g1[_g];
			++_g;
			var id = 0;
			var _g2 = 0;
			while(_g2 < row1.length) {
				var id1 = row1[_g2];
				++_g2;
				id1 -= offset;
				if(id1 < 0 || id1 > max) {
					id1 = 0;
				}
				result += id1 + ",";
			}
			result += id + "\n";
		}
		return result;
	}
	,__class__: haxepunk_tmx_TmxLayer
};
var haxepunk_tmx__$TmxMap_MapData_$Impl_$ = {};
$hxClasses["haxepunk.tmx._TmxMap.MapData_Impl_"] = haxepunk_tmx__$TmxMap_MapData_$Impl_$;
haxepunk_tmx__$TmxMap_MapData_$Impl_$.__name__ = ["haxepunk","tmx","_TmxMap","MapData_Impl_"];
haxepunk_tmx__$TmxMap_MapData_$Impl_$._new = function(f) {
	var this1 = f;
	return this1;
};
haxepunk_tmx__$TmxMap_MapData_$Impl_$.toMap = function(this1) {
	return this1;
};
haxepunk_tmx__$TmxMap_MapData_$Impl_$.fromString = function(s) {
	var this1 = new haxe_xml_Fast(Xml.parse(s));
	return this1;
};
haxepunk_tmx__$TmxMap_MapData_$Impl_$.fromXml = function(xml) {
	var this1 = new haxe_xml_Fast(xml);
	return this1;
};
haxepunk_tmx__$TmxMap_MapData_$Impl_$.fromByteArray = function(ba) {
	var this1 = new haxe_xml_Fast(Xml.parse(ba.toString()));
	return this1;
};
var haxepunk_tmx_TmxMap = function(data) {
	this.properties = new haxepunk_tmx_TmxPropertySet();
	var source = null;
	var node = null;
	source = data;
	this.tilesets = [];
	this.layers = new haxepunk_tmx_TmxOrderedHash();
	this.imageLayers = new haxe_ds_StringMap();
	this.objectGroups = new haxepunk_tmx_TmxOrderedHash();
	source = source.node.resolve("map");
	this.version = source.att.resolve("version");
	if(this.version == null) {
		this.version = "unknown";
	}
	this.orientation = source.att.resolve("orientation");
	if(this.orientation == null) {
		this.orientation = "orthogonal";
	}
	this.width = Std.parseInt(source.att.resolve("width"));
	this.height = Std.parseInt(source.att.resolve("height"));
	this.tileWidth = Std.parseInt(source.att.resolve("tilewidth"));
	this.tileHeight = Std.parseInt(source.att.resolve("tileheight"));
	this.fullWidth = this.width * this.tileWidth;
	this.fullHeight = this.height * this.tileHeight;
	var _g_head = source.nodes.resolve("properties").h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var node1 = val;
		this.properties.extend(node1);
	}
	var _g_head1 = source.nodes.resolve("tileset").h;
	while(_g_head1 != null) {
		var val1 = _g_head1.item;
		_g_head1 = _g_head1.next;
		var node2 = val1;
		var this1 = node2;
		this.tilesets.push(new haxepunk_tmx_TmxTileSet(this1));
	}
	var _g_head2 = source.nodes.resolve("layer").h;
	while(_g_head2 != null) {
		var val2 = _g_head2.item;
		_g_head2 = _g_head2.next;
		var node3 = val2;
		var _this = this.layers;
		var key = node3.att.resolve("name");
		var value = new haxepunk_tmx_TmxLayer(node3,this);
		if(!_this._map.exists(key)) {
			_this._keys.push(key);
		}
		_this._map.set(key,value);
	}
	var _g_head3 = source.nodes.resolve("imagelayer").h;
	while(_g_head3 != null) {
		var val3 = _g_head3.item;
		_g_head3 = _g_head3.next;
		var node4 = val3;
		var _g_head4 = node4.nodes.resolve("image").h;
		while(_g_head4 != null) {
			var val4 = _g_head4.item;
			_g_head4 = _g_head4.next;
			var img = val4;
			var this2 = this.imageLayers;
			var key1 = node4.att.resolve("name");
			var value1 = HxOverrides.substr(img.att.resolve("source"),3,null);
			var _this1 = this2;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value1);
			} else {
				_this1.h[key1] = value1;
			}
		}
	}
	var _g_head5 = source.nodes.resolve("objectgroup").h;
	while(_g_head5 != null) {
		var val5 = _g_head5.item;
		_g_head5 = _g_head5.next;
		var node5 = val5;
		var _this2 = this.objectGroups;
		var key2 = node5.att.resolve("name");
		var value2 = new haxepunk_tmx_TmxObjectGroup(node5,this);
		if(!_this2._map.exists(key2)) {
			_this2._keys.push(key2);
		}
		_this2._map.set(key2,value2);
	}
};
$hxClasses["haxepunk.tmx.TmxMap"] = haxepunk_tmx_TmxMap;
haxepunk_tmx_TmxMap.__name__ = ["haxepunk","tmx","TmxMap"];
haxepunk_tmx_TmxMap.loadFromFile = function(name) {
	var this1 = new haxe_xml_Fast(Xml.parse(openfl_utils_Assets.getText(name)));
	return new haxepunk_tmx_TmxMap(this1);
};
haxepunk_tmx_TmxMap.prototype = {
	version: null
	,orientation: null
	,width: null
	,height: null
	,tileWidth: null
	,tileHeight: null
	,fullWidth: null
	,fullHeight: null
	,properties: null
	,tilesets: null
	,layers: null
	,imageLayers: null
	,objectGroups: null
	,getLayer: function(name) {
		return this.layers._map.get(name);
	}
	,getObjectGroup: function(name) {
		return this.objectGroups._map.get(name);
	}
	,getGidOwner: function(gid) {
		var last = null;
		var set;
		var _g = 0;
		var _g1 = this.tilesets;
		while(_g < _g1.length) {
			var set1 = _g1[_g];
			++_g;
			if(set1.hasGid(gid)) {
				return set1;
			}
		}
		return null;
	}
	,getGidProperty: function(gid,property) {
		var last = null;
		var set;
		var _g = 0;
		var _g1 = this.tilesets;
		while(_g < _g1.length) {
			var set1 = _g1[_g];
			++_g;
			if(set1.hasGid(gid) && set1.getPropertiesByGid(gid) != null) {
				return set1.getPropertiesByGid(gid).resolve(property);
			}
		}
		return null;
	}
	,getTileMapSpacing: function(name) {
		var index = -1;
		var i = 0;
		var key = this.layers.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			if(key1 == name) {
				index = i;
				break;
			}
		}
		++i;
		if(index == -1) {
			return 0;
		}
		return this.tilesets[index].spacing;
	}
	,__class__: haxepunk_tmx_TmxMap
};
var haxepunk_tmx_TmxObject = function(source,parent) {
	this.group = parent;
	this.name = source.has.resolve("name") ? source.att.resolve("name") : "[object]";
	this.type = source.has.resolve("type") ? source.att.resolve("type") : "";
	this.x = Std.parseInt(source.att.resolve("x"));
	this.y = Std.parseInt(source.att.resolve("y"));
	this.width = source.has.resolve("width") ? Std.parseInt(source.att.resolve("width")) : 0;
	this.height = source.has.resolve("height") ? Std.parseInt(source.att.resolve("height")) : 0;
	this.shared = null;
	this.gid = -1;
	if(source.has.resolve("gid") && source.att.resolve("gid").length != 0) {
		this.gid = Std.parseInt(source.att.resolve("gid"));
		var set;
		var _g = 0;
		var _g1 = this.group.map.tilesets;
		while(_g < _g1.length) {
			var set1 = _g1[_g];
			++_g;
			this.shared = set1.getPropertiesByGid(this.gid);
			if(this.shared != null) {
				break;
			}
		}
	}
	var node;
	this.custom = new haxepunk_tmx_TmxPropertySet();
	var _g_head = source.nodes.resolve("properties").h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var node1 = val;
		this.custom.extend(node1);
	}
	if(source.hasNode.resolve("ellipse")) {
		var radius = (this.width < this.height ? this.width : this.height) / 2 | 0;
		this.shapeMask = new haxepunk_masks_Circle(radius,this.x,this.y);
		this.debug_graphic = haxepunk_graphics_Image.createCircle(radius,16711680,.6);
		this.debug_graphic.x = this.x;
		this.debug_graphic.y = this.y;
	} else {
		this.shapeMask = new haxepunk_masks_Hitbox(this.width,this.height,this.x,this.y);
		this.debug_graphic = haxepunk_graphics_Image.createRect(this.width,this.height,16711680,.6);
		this.debug_graphic.x = this.x;
		this.debug_graphic.y = this.y;
	}
};
$hxClasses["haxepunk.tmx.TmxObject"] = haxepunk_tmx_TmxObject;
haxepunk_tmx_TmxObject.__name__ = ["haxepunk","tmx","TmxObject"];
haxepunk_tmx_TmxObject.prototype = {
	group: null
	,name: null
	,type: null
	,x: null
	,y: null
	,width: null
	,height: null
	,gid: null
	,custom: null
	,shared: null
	,shapeMask: null
	,debug_graphic: null
	,__class__: haxepunk_tmx_TmxObject
};
var haxepunk_tmx_TmxObjectGroup = function(source,parent) {
	this.properties = new haxepunk_tmx_TmxPropertySet();
	this.objects = [];
	this.map = parent;
	this.name = source.att.resolve("name");
	this.x = source.has.resolve("x") ? Std.parseInt(source.att.resolve("x")) : 0;
	this.y = source.has.resolve("y") ? Std.parseInt(source.att.resolve("y")) : 0;
	this.width = this.map.width;
	this.height = this.map.height;
	this.visible = source.has.resolve("visible") && source.att.resolve("visible") == "1";
	this.opacity = source.has.resolve("opacity") ? parseFloat(source.att.resolve("opacity")) : 0;
	var node;
	var _g_head = source.nodes.resolve("properties").h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var node1 = val;
		this.properties.extend(node1);
	}
	var _g_head1 = source.nodes.resolve("object").h;
	while(_g_head1 != null) {
		var val1 = _g_head1.item;
		_g_head1 = _g_head1.next;
		var node2 = val1;
		this.objects.push(new haxepunk_tmx_TmxObject(node2,this));
	}
};
$hxClasses["haxepunk.tmx.TmxObjectGroup"] = haxepunk_tmx_TmxObjectGroup;
haxepunk_tmx_TmxObjectGroup.__name__ = ["haxepunk","tmx","TmxObjectGroup"];
haxepunk_tmx_TmxObjectGroup.prototype = {
	map: null
	,name: null
	,x: null
	,y: null
	,width: null
	,height: null
	,opacity: null
	,visible: null
	,properties: null
	,objects: null
	,__class__: haxepunk_tmx_TmxObjectGroup
};
var haxepunk_tmx_TmxOrderedHash = function() {
	this._keys = [];
	this._map = new haxe_ds_StringMap();
};
$hxClasses["haxepunk.tmx.TmxOrderedHash"] = haxepunk_tmx_TmxOrderedHash;
haxepunk_tmx_TmxOrderedHash.__name__ = ["haxepunk","tmx","TmxOrderedHash"];
haxepunk_tmx_TmxOrderedHash.prototype = {
	_keys: null
	,_map: null
	,set: function(key,value) {
		var _this = this._map;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			this._keys.push(key);
		}
		var _this1 = this._map;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,value);
		} else {
			_this1.h[key] = value;
		}
	}
	,remove: function(key) {
		HxOverrides.remove(this._keys,key);
		return this._map.remove(key);
	}
	,exists: function(key) {
		var _this = this._map;
		if(__map_reserved[key] != null) {
			return _this.existsReserved(key);
		} else {
			return _this.h.hasOwnProperty(key);
		}
	}
	,get: function(key) {
		var _this = this._map;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,iterator: function() {
		var _keys_itr = HxOverrides.iter(this._keys);
		var __map = this._map;
		return { next : function() {
			var key = _keys_itr.next();
			return __map_reserved[key] != null ? __map.getReserved(key) : __map.h[key];
		}, hasNext : $bind(_keys_itr,_keys_itr.hasNext)};
	}
	,keys: function() {
		return HxOverrides.iter(this._keys);
	}
	,toString: function() {
		var __map = this._map;
		var pairs = Lambda.map(this._keys,function(x) {
			return x + " => " + Std.string(__map_reserved[x] != null ? __map.getReserved(x) : __map.h[x]);
		});
		return "{" + pairs.join(", ") + "}";
	}
	,__class__: haxepunk_tmx_TmxOrderedHash
};
var haxepunk_tmx_TmxPropertySet = function() {
	this.keys = new haxe_ds_StringMap();
};
$hxClasses["haxepunk.tmx.TmxPropertySet"] = haxepunk_tmx_TmxPropertySet;
haxepunk_tmx_TmxPropertySet.__name__ = ["haxepunk","tmx","TmxPropertySet"];
haxepunk_tmx_TmxPropertySet.prototype = {
	resolve: function(name) {
		var _this = this.keys;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,has: function(name) {
		var _this = this.keys;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,extend: function(source) {
		var prop;
		var _g_head = source.nodes.resolve("property").h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var prop1 = val;
			var this1 = this.keys;
			var key = prop1.att.resolve("name");
			var value = prop1.att.resolve("value");
			var _this = this1;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		}
	}
	,keys: null
	,__class__: haxepunk_tmx_TmxPropertySet
};
var haxepunk_tmx__$TmxTileSet_TileSetData_$Impl_$ = {};
$hxClasses["haxepunk.tmx._TmxTileSet.TileSetData_Impl_"] = haxepunk_tmx__$TmxTileSet_TileSetData_$Impl_$;
haxepunk_tmx__$TmxTileSet_TileSetData_$Impl_$.__name__ = ["haxepunk","tmx","_TmxTileSet","TileSetData_Impl_"];
haxepunk_tmx__$TmxTileSet_TileSetData_$Impl_$._new = function(f) {
	var this1 = f;
	return this1;
};
haxepunk_tmx__$TmxTileSet_TileSetData_$Impl_$.toMap = function(this1) {
	return this1;
};
haxepunk_tmx__$TmxTileSet_TileSetData_$Impl_$.fromFast = function(f) {
	var this1 = f;
	return this1;
};
haxepunk_tmx__$TmxTileSet_TileSetData_$Impl_$.fromByteArray = function(ba) {
	var f = new haxe_xml_Fast(Xml.parse(ba.toString()));
	var this1 = f.node.resolve("tileset");
	return this1;
};
var haxepunk_tmx_TmxTileSet = function(data) {
	this.margin = 0;
	this.spacing = 0;
	var node;
	var source;
	this.numTiles = 16777215;
	this.numRows = this.numCols = 1;
	source = data;
	this.firstGID = source.has.resolve("firstgid") ? Std.parseInt(source.att.resolve("firstgid")) : 1;
	if(!source.has.resolve("source")) {
		var node1 = source.node.resolve("image");
		this.imageSource = node1.att.resolve("source");
		if(node1.has.resolve("width")) {
			this.imageWidth = Std.parseInt(node1.att.resolve("width"));
		}
		if(node1.has.resolve("height")) {
			this.imageHeight = Std.parseInt(node1.att.resolve("height"));
		}
		this.name = source.att.resolve("name");
		if(source.has.resolve("tilewidth")) {
			this.tileWidth = Std.parseInt(source.att.resolve("tilewidth"));
		}
		if(source.has.resolve("tileheight")) {
			this.tileHeight = Std.parseInt(source.att.resolve("tileheight"));
		}
		if(source.has.resolve("spacing")) {
			this.spacing = Std.parseInt(source.att.resolve("spacing"));
		}
		if(source.has.resolve("margin")) {
			this.margin = Std.parseInt(source.att.resolve("margin"));
		}
		this._tileProps = [];
		var _g_head = source.nodes.resolve("tile").h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var node2 = val;
			if(node2.has.resolve("id")) {
				var id = Std.parseInt(node2.att.resolve("id"));
				this._tileProps[id] = new haxepunk_tmx_TmxPropertySet();
				var _g_head1 = node2.nodes.resolve("properties").h;
				while(_g_head1 != null) {
					var val1 = _g_head1.item;
					_g_head1 = _g_head1.next;
					var prop = val1;
					this._tileProps[id].extend(prop);
				}
			}
		}
	}
};
$hxClasses["haxepunk.tmx.TmxTileSet"] = haxepunk_tmx_TmxTileSet;
haxepunk_tmx_TmxTileSet.__name__ = ["haxepunk","tmx","TmxTileSet"];
haxepunk_tmx_TmxTileSet.prototype = {
	_tileProps: null
	,_image: null
	,firstGID: null
	,name: null
	,tileWidth: null
	,tileHeight: null
	,spacing: null
	,margin: null
	,imageSource: null
	,imageWidth: null
	,imageHeight: null
	,numTiles: null
	,numRows: null
	,numCols: null
	,get_image: function() {
		return this._image;
	}
	,set_image: function(v) {
		this._image = v;
		this.numCols = Math.floor(v.width / this.tileWidth);
		this.numRows = Math.floor(v.height / this.tileHeight);
		this.numTiles = this.numRows * this.numCols;
		return this._image;
	}
	,hasGid: function(gid) {
		if(gid >= this.firstGID) {
			return gid < this.firstGID + this.numTiles;
		} else {
			return false;
		}
	}
	,fromGid: function(gid) {
		return gid - this.firstGID;
	}
	,toGid: function(id) {
		return this.firstGID + id;
	}
	,getPropertiesByGid: function(gid) {
		if(this._tileProps != null) {
			return this._tileProps[gid - this.firstGID];
		}
		return null;
	}
	,getProperties: function(id) {
		return this._tileProps[id];
	}
	,getRect: function(id) {
		return new openfl_geom_Rectangle(id % this.numCols * this.tileWidth,id / this.numCols * this.tileHeight);
	}
	,__class__: haxepunk_tmx_TmxTileSet
	,__properties__: {set_image:"set_image",get_image:"get_image"}
};
var haxepunk_tmx_TmxVec4 = function(x,y,width,height) {
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["haxepunk.tmx.TmxVec4"] = haxepunk_tmx_TmxVec4;
haxepunk_tmx_TmxVec4.__name__ = ["haxepunk","tmx","TmxVec4"];
haxepunk_tmx_TmxVec4.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,__class__: haxepunk_tmx_TmxVec4
};
var haxepunk_tweens_misc_Alarm = function(duration,type) {
	haxepunk_Tween.call(this,duration,type,null);
};
$hxClasses["haxepunk.tweens.misc.Alarm"] = haxepunk_tweens_misc_Alarm;
haxepunk_tweens_misc_Alarm.__name__ = ["haxepunk","tweens","misc","Alarm"];
haxepunk_tweens_misc_Alarm.__super__ = haxepunk_Tween;
haxepunk_tweens_misc_Alarm.prototype = $extend(haxepunk_Tween.prototype,{
	reset: function(duration) {
		this._target = duration;
		this.start();
	}
	,get_elapsed: function() {
		return this._time;
	}
	,get_duration: function() {
		return this._target;
	}
	,get_remaining: function() {
		return this._target - this._time;
	}
	,__class__: haxepunk_tweens_misc_Alarm
	,__properties__: $extend(haxepunk_Tween.prototype.__properties__,{get_remaining:"get_remaining",get_duration:"get_duration",get_elapsed:"get_elapsed"})
});
var haxepunk_tweens_misc_MultiVarTween = function(type) {
	this._vars = [];
	this._start = [];
	this._range = [];
	haxepunk_Tween.call(this,0,type);
};
$hxClasses["haxepunk.tweens.misc.MultiVarTween"] = haxepunk_tweens_misc_MultiVarTween;
haxepunk_tweens_misc_MultiVarTween.__name__ = ["haxepunk","tweens","misc","MultiVarTween"];
haxepunk_tweens_misc_MultiVarTween.__super__ = haxepunk_Tween;
haxepunk_tweens_misc_MultiVarTween.prototype = $extend(haxepunk_Tween.prototype,{
	tween: function(object,properties,duration,ease) {
		this._object = object;
		this._vars.length = 0;
		this._start.length = 0;
		this._range.length = 0;
		this._target = duration;
		this._ease = ease;
		var p;
		var fields = null;
		if(Reflect.isObject(properties)) {
			fields = Reflect.fields(properties);
		} else {
			throw new js__$Boot_HaxeError("Unsupported MultiVar properties container - use Object containing key/value pairs.");
		}
		var _g = 0;
		while(_g < fields.length) {
			var p1 = fields[_g];
			++_g;
			var a = Reflect.getProperty(object,p1);
			if(isNaN(a)) {
				throw new js__$Boot_HaxeError("The property " + p1 + " is not numeric.");
			}
			this._vars.push(p1);
			this._start.push(a);
			this._range.push(Reflect.field(properties,p1) - a);
		}
		this.start();
	}
	,updateInternal: function() {
		var i = this._vars.length;
		while(i-- > 0) Reflect.setProperty(this._object,this._vars[i],this._start[i] + this._range[i] * this._t);
	}
	,_object: null
	,_vars: null
	,_start: null
	,_range: null
	,__class__: haxepunk_tweens_misc_MultiVarTween
});
var haxepunk_utils__$BlendMode_BlendMode_$Impl_$ = {};
$hxClasses["haxepunk.utils._BlendMode.BlendMode_Impl_"] = haxepunk_utils__$BlendMode_BlendMode_$Impl_$;
haxepunk_utils__$BlendMode_BlendMode_$Impl_$.__name__ = ["haxepunk","utils","_BlendMode","BlendMode_Impl_"];
haxepunk_utils__$BlendMode_BlendMode_$Impl_$.fromFlashBlendMode = function(blend) {
	return blend;
};
var haxepunk_utils_CircularBuffer = function(len) {
	this.len = 0;
	this.pos = 0;
	var this1 = new Array(len);
	this.data = this1;
	this._iterator = new haxepunk_utils__$CircularBuffer_CircularBufferIterator(this);
};
$hxClasses["haxepunk.utils.CircularBuffer"] = haxepunk_utils_CircularBuffer;
haxepunk_utils_CircularBuffer.__name__ = ["haxepunk","utils","CircularBuffer"];
haxepunk_utils_CircularBuffer.prototype = {
	pos: null
	,len: null
	,data: null
	,_iterator: null
	,get_length: function() {
		return this.len;
	}
	,get_maxLength: function() {
		return this.data.length;
	}
	,get_first: function() {
		if(this.len < 1) {
			return null;
		} else {
			return this.data[this.pos % this.data.length];
		}
	}
	,get_last: function() {
		if(this.len < 1) {
			return null;
		} else {
			return this.data[(this.pos + (this.len - 1)) % this.data.length];
		}
	}
	,push: function(val) {
		this.data[(this.pos + this.len) % this.data.length] = val;
		if(this.len < this.data.length) {
			++this.len;
		} else {
			++this.pos;
		}
	}
	,pop: function() {
		if(this.len < 1) {
			return null;
		}
		return this.data[(this.pos + this.len--) % this.data.length];
	}
	,get: function(i) {
		if(i < 0 || i >= this.len) {
			return null;
		} else {
			return this.data[(this.pos + i) % this.data.length];
		}
	}
	,clear: function() {
		this.pos = this.len = 0;
	}
	,index: function(i) {
		return (this.pos + i) % this.data.length;
	}
	,iterator: function() {
		this._iterator.i = 0;
		return this._iterator;
	}
	,__class__: haxepunk_utils_CircularBuffer
	,__properties__: {get_last:"get_last",get_first:"get_first",get_maxLength:"get_maxLength",get_length:"get_length"}
};
var haxepunk_utils__$CircularBuffer_CircularBufferIterator = function(buffer) {
	this.i = 0;
	this.buffer = buffer;
};
$hxClasses["haxepunk.utils._CircularBuffer.CircularBufferIterator"] = haxepunk_utils__$CircularBuffer_CircularBufferIterator;
haxepunk_utils__$CircularBuffer_CircularBufferIterator.__name__ = ["haxepunk","utils","_CircularBuffer","CircularBufferIterator"];
haxepunk_utils__$CircularBuffer_CircularBufferIterator.prototype = {
	buffer: null
	,i: null
	,reset: function() {
		this.i = 0;
	}
	,hasNext: function() {
		return this.i < this.buffer.len;
	}
	,next: function() {
		var _this = this.buffer;
		var i = this.i++;
		if(i < 0 || i >= _this.len) {
			return null;
		} else {
			return _this.data[(_this.pos + i) % _this.data.length];
		}
	}
	,__class__: haxepunk_utils__$CircularBuffer_CircularBufferIterator
};
var haxepunk_utils__$Color_Color_$Impl_$ = {};
$hxClasses["haxepunk.utils._Color.Color_Impl_"] = haxepunk_utils__$Color_Color_$Impl_$;
haxepunk_utils__$Color_Color_$Impl_$.__name__ = ["haxepunk","utils","_Color","Color_Impl_"];
haxepunk_utils__$Color_Color_$Impl_$.__properties__ = {get_alpha:"get_alpha",get_blue:"get_blue",get_green:"get_green",get_red:"get_red",get_a:"get_a",get_b:"get_b",get_g:"get_g",get_r:"get_r"};
haxepunk_utils__$Color_Color_$Impl_$.colorLerp = function(fromColor,toColor,t) {
	if(t == null) {
		t = 1;
	}
	if(t <= 0) {
		return fromColor;
	} else if(t >= 1) {
		return toColor;
	} else {
		var a = fromColor >>> 24 & 255;
		var r = fromColor >>> 16 & 255;
		var g = fromColor >>> 8 & 255;
		var b = fromColor & 255;
		var dA = (toColor >>> 24 & 255) - a;
		var dR = (toColor >>> 16 & 255) - r;
		var dG = (toColor >>> 8 & 255) - g;
		var dB = (toColor & 255) - b;
		a += dA * t | 0;
		r += dR * t | 0;
		g += dG * t | 0;
		b += dB * t | 0;
		return a << 24 | r << 16 | g << 8 | b;
	}
};
haxepunk_utils__$Color_Color_$Impl_$.getColorRGB = function(r,g,b) {
	if(b == null) {
		b = 0;
	}
	if(g == null) {
		g = 0;
	}
	if(r == null) {
		r = 0;
	}
	return (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
haxepunk_utils__$Color_Color_$Impl_$.getColorRGBFloat = function(r,g,b) {
	var c = r * 256 | 0;
	var c1 = g * 256 | 0;
	var c2 = b * 256 | 0;
	return (haxepunk_math_MathUtil.iclamp(c,0,255) & 255) << 16 | (haxepunk_math_MathUtil.iclamp(c1,0,255) & 255) << 8 | haxepunk_math_MathUtil.iclamp(c2,0,255) & 255;
};
haxepunk_utils__$Color_Color_$Impl_$.getColorHSV = function(h,s,v) {
	h = h * 360 | 0;
	var hi = Math.floor(h / 60) % 6;
	var f = h / 60 - Math.floor(h / 60);
	var p = v * (1 - s);
	var q = v * (1 - f * s);
	var t = v * (1 - (1 - f) * s);
	switch(hi) {
	case 0:
		return (v * 255 | 0) << 16 | (t * 255 | 0) << 8 | (p * 255 | 0);
	case 1:
		return (q * 255 | 0) << 16 | (v * 255 | 0) << 8 | (p * 255 | 0);
	case 2:
		return (p * 255 | 0) << 16 | (v * 255 | 0) << 8 | (t * 255 | 0);
	case 3:
		return (p * 255 | 0) << 16 | (q * 255 | 0) << 8 | (v * 255 | 0);
	case 4:
		return (t * 255 | 0) << 16 | (p * 255 | 0) << 8 | (v * 255 | 0);
	case 5:
		return (v * 255 | 0) << 16 | (p * 255 | 0) << 8 | (q * 255 | 0);
	default:
		return 0;
	}
};
haxepunk_utils__$Color_Color_$Impl_$.get_r = function(this1) {
	return this1 >>> 16 & 255;
};
haxepunk_utils__$Color_Color_$Impl_$.get_g = function(this1) {
	return this1 >>> 8 & 255;
};
haxepunk_utils__$Color_Color_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
haxepunk_utils__$Color_Color_$Impl_$.get_a = function(this1) {
	return this1 >>> 24 & 255;
};
haxepunk_utils__$Color_Color_$Impl_$.get_red = function(this1) {
	return _$UInt_UInt_$Impl_$.toFloat(this1 >>> 16 & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
};
haxepunk_utils__$Color_Color_$Impl_$.get_green = function(this1) {
	return _$UInt_UInt_$Impl_$.toFloat(this1 >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
};
haxepunk_utils__$Color_Color_$Impl_$.get_blue = function(this1) {
	return _$UInt_UInt_$Impl_$.toFloat(this1 & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
};
haxepunk_utils__$Color_Color_$Impl_$.get_alpha = function(this1) {
	return _$UInt_UInt_$Impl_$.toFloat(this1 >>> 24 & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
};
haxepunk_utils__$Color_Color_$Impl_$.withAlpha = function(this1,a) {
	var alpha = a <= 0 ? 0 : a >= 1 ? -16777216 : (255 * a | 0) << 24;
	return this1 & 16777215 | alpha;
};
haxepunk_utils__$Color_Color_$Impl_$.getHue = function(this1) {
	var h = this1 >>> 16 & 255;
	var s = this1 >>> 8 & 255;
	var v = this1 & 255;
	var max = Math.max(h,Math.max(s,v)) | 0;
	var min = Math.min(h,Math.min(s,v)) | 0;
	var hue = 0;
	if(max == min) {
		hue = 0;
	} else if(max == h) {
		hue = (60 * (s - v) / (max - min) + 360) % 360;
	} else if(max == s) {
		hue = 60 * (v - h) / (max - min) + 120;
	} else if(max == v) {
		hue = 60 * (h - s) / (max - min) + 240;
	}
	return hue / 360;
};
haxepunk_utils__$Color_Color_$Impl_$.getSaturation = function(this1) {
	var h = this1 >>> 16 & 255;
	var s = this1 >>> 8 & 255;
	var v = this1 & 255;
	var max = Math.max(h,Math.max(s,v)) | 0;
	if(max == 0) {
		return 0;
	} else {
		var min = Math.min(h,Math.min(s,v)) | 0;
		return (max - min) / max;
	}
};
haxepunk_utils__$Color_Color_$Impl_$.getValue = function(this1) {
	var h = this1 >>> 16 & 255;
	var s = this1 >>> 8 & 255;
	var v = this1 & 255;
	return (Math.max(h,Math.max(s,v)) | 0) / 255;
};
haxepunk_utils__$Color_Color_$Impl_$.getLuminance = function(this1) {
	return 0.2126 * (_$UInt_UInt_$Impl_$.toFloat(this1 >>> 16 & 255) / _$UInt_UInt_$Impl_$.toFloat(255)) + 0.7152 * (_$UInt_UInt_$Impl_$.toFloat(this1 >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255)) + 0.0722 * (_$UInt_UInt_$Impl_$.toFloat(this1 & 255) / _$UInt_UInt_$Impl_$.toFloat(255));
};
haxepunk_utils__$Color_Color_$Impl_$.lerp = function(this1,toColor,t) {
	if(t == null) {
		t = 1;
	}
	if(t <= 0) {
		return this1;
	} else if(t >= 1) {
		return toColor;
	} else {
		var a = this1 >>> 24 & 255;
		var r = this1 >>> 16 & 255;
		var g = this1 >>> 8 & 255;
		var b = this1 & 255;
		var dA = (toColor >>> 24 & 255) - a;
		var dR = (toColor >>> 16 & 255) - r;
		var dG = (toColor >>> 8 & 255) - g;
		var dB = (toColor & 255) - b;
		a += dA * t | 0;
		r += dR * t | 0;
		g += dG * t | 0;
		b += dB * t | 0;
		return a << 24 | r << 16 | g << 8 | b;
	}
};
haxepunk_utils__$Color_Color_$Impl_$.multiply = function(this1,other) {
	var c = _$UInt_UInt_$Impl_$.toFloat(this1 >>> 16 & 255) / _$UInt_UInt_$Impl_$.toFloat(255) * (_$UInt_UInt_$Impl_$.toFloat(other >>> 16 & 255) / _$UInt_UInt_$Impl_$.toFloat(255)) * 256 | 0;
	var c1 = _$UInt_UInt_$Impl_$.toFloat(this1 >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255) * (_$UInt_UInt_$Impl_$.toFloat(other >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255)) * 256 | 0;
	var c2 = _$UInt_UInt_$Impl_$.toFloat(this1 & 255) / _$UInt_UInt_$Impl_$.toFloat(255) * (_$UInt_UInt_$Impl_$.toFloat(other & 255) / _$UInt_UInt_$Impl_$.toFloat(255)) * 256 | 0;
	return (haxepunk_math_MathUtil.iclamp(c,0,255) & 255) << 16 | (haxepunk_math_MathUtil.iclamp(c1,0,255) & 255) << 8 | haxepunk_math_MathUtil.iclamp(c2,0,255) & 255;
};
haxepunk_utils__$Color_Color_$Impl_$.toARGB = function(this1,alpha) {
	alpha = haxepunk_math_MathUtil.clamp(alpha,0,1);
	return (255 * alpha | 0) << 24 | this1;
};
var haxepunk_utils_Draw = function() { };
$hxClasses["haxepunk.utils.Draw"] = haxepunk_utils_Draw;
haxepunk_utils_Draw.__name__ = ["haxepunk","utils","Draw"];
haxepunk_utils_Draw.__properties__ = {set_lineThickness:"set_lineThickness",get_lineThickness:"get_lineThickness",set_alpha:"set_alpha",get_alpha:"get_alpha",set_color:"set_color",get_color:"get_color",set_smooth:"set_smooth",get_smooth:"get_smooth",set_shader:"set_shader",get_shader:"get_shader",set_blend:"set_blend",get_blend:"get_blend",get_instance:"get_instance"};
haxepunk_utils_Draw.get_instance = function() {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance;
};
haxepunk_utils_Draw.get_blend = function() {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.blend;
};
haxepunk_utils_Draw.set_blend = function(v) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.blend = v;
};
haxepunk_utils_Draw.get_shader = function() {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.shader;
};
haxepunk_utils_Draw.set_shader = function(v) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.shader = v;
};
haxepunk_utils_Draw.get_smooth = function() {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.smooth;
};
haxepunk_utils_Draw.set_smooth = function(v) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.smooth = v;
};
haxepunk_utils_Draw.get_color = function() {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.color;
};
haxepunk_utils_Draw.set_color = function(v) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.color = v;
};
haxepunk_utils_Draw.get_alpha = function() {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.alpha;
};
haxepunk_utils_Draw.set_alpha = function(v) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.alpha = v;
};
haxepunk_utils_Draw.get_lineThickness = function() {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.lineThickness;
};
haxepunk_utils_Draw.set_lineThickness = function(v) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.lineThickness = v;
};
haxepunk_utils_Draw.setColor = function(color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16777215;
	}
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.color = color;
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.alpha = alpha;
};
haxepunk_utils_Draw.line = function(x1,y1,x2,y2) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.line(x1,y1,x2,y2);
};
haxepunk_utils_Draw.polyline = function(points,miterJoint) {
	if(miterJoint == null) {
		miterJoint = false;
	}
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.polyline(points,miterJoint);
};
haxepunk_utils_Draw.rect = function(x,y,width,height) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.rect(x,y,width,height);
};
haxepunk_utils_Draw.rectFilled = function(x,y,width,height) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.rectFilled(x,y,width,height);
};
haxepunk_utils_Draw.circle = function(x,y,radius,segments,scaleX,scaleY) {
	if(scaleY == null) {
		scaleY = 1;
	}
	if(scaleX == null) {
		scaleX = 1;
	}
	if(segments == null) {
		segments = 25;
	}
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	var _this = haxepunk_utils_Draw.instance;
	var radians = 2 * Math.PI / segments;
	var halfThick = _this.lineThickness / 2;
	var innerRadius = radius - halfThick;
	var outerRadius = radius + halfThick;
	var inner_y;
	var inner_x = 0;
	inner_y = 0;
	var outer_y;
	var outer_x = 0;
	outer_y = 0;
	var lastOuter_y;
	var lastOuter_x = 0;
	lastOuter_y = 0;
	var lastInner_y;
	var lastInner_x = 0;
	lastInner_y = 0;
	if(_this.shader == null) {
		_this.shader = new haxepunk_graphics_shader_ColorShader();
	}
	var scene = _this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : _this.scene;
	_this.command = scene.batch.getDrawCommand(null,_this.shader,_this.smooth,_this.blend,null);
	var _g1 = 0;
	var _g = segments + 1;
	while(_g1 < _g) {
		var segment = _g1++;
		var theta = segment * radians;
		var sin = Math.sin(theta);
		var cos = Math.cos(theta);
		inner_x = x + sin * innerRadius * scaleX;
		inner_y = y + cos * innerRadius * scaleY;
		outer_x = x + sin * outerRadius * scaleX;
		outer_y = y + cos * outerRadius * scaleY;
		if(segment != 0) {
			var _this1 = _this.command;
			var tx1 = lastInner_x;
			var ty1 = lastInner_y;
			var tx2 = lastOuter_x;
			var ty2 = lastOuter_y;
			var tx3 = outer_x;
			var ty3 = outer_y;
			var color = _this.color;
			var alpha = _this.alpha;
			if(alpha > 0) {
				var onScreen;
				var onScreen1;
				var onScreen2;
				var _this2 = _this1.visibleArea;
				if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this2.x + _this2.width) {
					onScreen2 = (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this1.visibleArea.x;
				} else {
					onScreen2 = false;
				}
				if(onScreen2) {
					var _this3 = _this1.visibleArea;
					onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this3.y + _this3.height;
				} else {
					onScreen1 = false;
				}
				if(onScreen1) {
					onScreen = (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this1.visibleArea.y;
				} else {
					onScreen = false;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = tx1;
					data1.ty1 = ty1;
					data1.uvx1 = 0;
					data1.uvy1 = 0;
					data1.tx2 = tx2;
					data1.ty2 = ty2;
					data1.uvx2 = 0;
					data1.uvy2 = 0;
					data1.tx3 = tx3;
					data1.ty3 = ty3;
					data1.uvx3 = 0;
					data1.uvy3 = 0;
					data1.color = color;
					data1.alpha = alpha;
					if(_this1.data == null) {
						_this1.data = data1;
					} else {
						_this1._lastData._next = data1;
					}
					_this1._lastData = data1;
					++_this1.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a1 = data1.tx1;
					var b1 = data1.tx2;
					var c1 = data1.tx3;
					var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
					var a2 = data1.ty1;
					var b2 = data1.ty2;
					var c2 = data1.ty3;
					var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
					var a3 = data1.ty1;
					var b3 = data1.ty2;
					var c3 = data1.ty3;
					var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
					if(_this1.bounds.width == 0) {
						_this1.bounds.x = x1;
						_this1.bounds.width = x2 - x1;
					} else {
						if(x1 < _this1.bounds.x) {
							_this1.bounds.width += _this1.bounds.x - x1;
							_this1.bounds.x = x1;
						}
						var _this4 = _this1.bounds;
						if(x2 > _this4.x + _this4.width) {
							_this1.bounds.width = x2 - _this1.bounds.x;
						}
					}
					if(_this1.bounds.height == 0) {
						_this1.bounds.y = y1;
						_this1.bounds.height = y2 - y1;
					} else {
						if(y1 < _this1.bounds.y) {
							_this1.bounds.height += _this1.bounds.y - y1;
							_this1.bounds.y = y1;
						}
						var _this5 = _this1.bounds;
						if(y2 > _this5.y + _this5.height) {
							_this1.bounds.height = y2 - _this1.bounds.y;
						}
					}
				}
			}
			var _this6 = _this.command;
			var tx11 = lastInner_x;
			var ty11 = lastInner_y;
			var tx21 = outer_x;
			var ty21 = outer_y;
			var tx31 = inner_x;
			var ty31 = inner_y;
			var color1 = _this.color;
			var alpha1 = _this.alpha;
			if(alpha1 > 0) {
				var onScreen3;
				var onScreen4;
				var onScreen5;
				var _this7 = _this6.visibleArea;
				if((tx11 > tx21 ? tx21 > tx31 ? tx31 : tx21 : tx11 > tx31 ? tx31 : tx11) <= _this7.x + _this7.width) {
					onScreen5 = (tx11 < tx21 ? tx21 < tx31 ? tx31 : tx21 : tx11 < tx31 ? tx31 : tx11) >= _this6.visibleArea.x;
				} else {
					onScreen5 = false;
				}
				if(onScreen5) {
					var _this8 = _this6.visibleArea;
					onScreen4 = (ty11 > ty21 ? ty21 > ty31 ? ty31 : ty21 : ty11 > ty31 ? ty31 : ty11) <= _this8.y + _this8.height;
				} else {
					onScreen4 = false;
				}
				if(onScreen4) {
					onScreen3 = (ty11 < ty21 ? ty21 < ty31 ? ty31 : ty21 : ty11 < ty31 ? ty31 : ty11) >= _this6.visibleArea.y;
				} else {
					onScreen3 = false;
				}
				if(onScreen3) {
					var data2;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data2._next = null;
					} else {
						data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data3 = data2;
					data3.tx1 = tx11;
					data3.ty1 = ty11;
					data3.uvx1 = 0;
					data3.uvy1 = 0;
					data3.tx2 = tx21;
					data3.ty2 = ty21;
					data3.uvx2 = 0;
					data3.uvy2 = 0;
					data3.tx3 = tx31;
					data3.ty3 = ty31;
					data3.uvx3 = 0;
					data3.uvy3 = 0;
					data3.color = color1;
					data3.alpha = alpha1;
					if(_this6.data == null) {
						_this6.data = data3;
					} else {
						_this6._lastData._next = data3;
					}
					_this6._lastData = data3;
					++_this6.triangleCount;
					var a4 = data3.tx1;
					var b4 = data3.tx2;
					var c4 = data3.tx3;
					var x11 = a4 > b4 ? b4 > c4 ? c4 : b4 : a4 > c4 ? c4 : a4;
					var a5 = data3.tx1;
					var b5 = data3.tx2;
					var c5 = data3.tx3;
					var x21 = a5 < b5 ? b5 < c5 ? c5 : b5 : a5 < c5 ? c5 : a5;
					var a6 = data3.ty1;
					var b6 = data3.ty2;
					var c6 = data3.ty3;
					var y11 = a6 > b6 ? b6 > c6 ? c6 : b6 : a6 > c6 ? c6 : a6;
					var a7 = data3.ty1;
					var b7 = data3.ty2;
					var c7 = data3.ty3;
					var y21 = a7 < b7 ? b7 < c7 ? c7 : b7 : a7 < c7 ? c7 : a7;
					if(_this6.bounds.width == 0) {
						_this6.bounds.x = x11;
						_this6.bounds.width = x21 - x11;
					} else {
						if(x11 < _this6.bounds.x) {
							_this6.bounds.width += _this6.bounds.x - x11;
							_this6.bounds.x = x11;
						}
						var _this9 = _this6.bounds;
						if(x21 > _this9.x + _this9.width) {
							_this6.bounds.width = x21 - _this6.bounds.x;
						}
					}
					if(_this6.bounds.height == 0) {
						_this6.bounds.y = y11;
						_this6.bounds.height = y21 - y11;
					} else {
						if(y11 < _this6.bounds.y) {
							_this6.bounds.height += _this6.bounds.y - y11;
							_this6.bounds.y = y11;
						}
						var _this10 = _this6.bounds;
						if(y21 > _this10.y + _this10.height) {
							_this6.bounds.height = y21 - _this6.bounds.y;
						}
					}
				}
			}
		}
		lastOuter_x = outer_x;
		lastOuter_y = outer_y;
		lastInner_x = inner_x;
		lastInner_y = inner_y;
	}
};
haxepunk_utils_Draw.circleFilled = function(x,y,radius,segments,scaleX,scaleY) {
	if(scaleY == null) {
		scaleY = 1;
	}
	if(scaleX == null) {
		scaleX = 1;
	}
	if(segments == null) {
		segments = 25;
	}
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.circleFilled(x,y,radius,segments,scaleX,scaleY);
};
haxepunk_utils_Draw.arc = function(x,y,radius,start,angle,segments) {
	if(segments == null) {
		segments = 25;
	}
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.arc(x,y,radius,start,angle,segments);
};
haxepunk_utils_Draw.curve = function(x1,y1,x2,y2,x3,y3,segments) {
	if(segments == null) {
		segments = 25;
	}
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.curve(x1,y1,x2,y2,x3,y3,segments);
};
var haxepunk_utils_Ease = function() { };
$hxClasses["haxepunk.utils.Ease"] = haxepunk_utils_Ease;
haxepunk_utils_Ease.__name__ = ["haxepunk","utils","Ease"];
haxepunk_utils_Ease.linear = function(t) {
	return t;
};
haxepunk_utils_Ease.quadIn = function(t) {
	return t * t;
};
haxepunk_utils_Ease.quadOut = function(t) {
	return -t * (t - 2);
};
haxepunk_utils_Ease.quadInOut = function(t) {
	if(t <= .5) {
		return t * t * 2;
	} else {
		return 1 - --t * t * 2;
	}
};
haxepunk_utils_Ease.cubeIn = function(t) {
	return t * t * t;
};
haxepunk_utils_Ease.cubeOut = function(t) {
	return 1 + --t * t * t;
};
haxepunk_utils_Ease.cubeInOut = function(t) {
	if(t <= .5) {
		return t * t * t * 4;
	} else {
		return 1 + --t * t * t * 4;
	}
};
haxepunk_utils_Ease.quartIn = function(t) {
	return t * t * t * t;
};
haxepunk_utils_Ease.quartOut = function(t) {
	return 1 - --t * t * t * t;
};
haxepunk_utils_Ease.quartInOut = function(t) {
	if(t <= .5) {
		return t * t * t * t * 8;
	} else {
		t = t * 2 - 2;
		return (1 - t * t * t * t) / 2 + .5;
	}
};
haxepunk_utils_Ease.quintIn = function(t) {
	return t * t * t * t * t;
};
haxepunk_utils_Ease.quintOut = function(t) {
	return --t * t * t * t * t + 1;
};
haxepunk_utils_Ease.quintInOut = function(t) {
	if((t *= 2) < 1) {
		return t * t * t * t * t / 2;
	} else {
		return ((t -= 2) * t * t * t * t + 2) / 2;
	}
};
haxepunk_utils_Ease.sineIn = function(t) {
	return -Math.cos(1.57079632679489656 * t) + 1;
};
haxepunk_utils_Ease.sineOut = function(t) {
	return Math.sin(1.57079632679489656 * t);
};
haxepunk_utils_Ease.sineInOut = function(t) {
	return -Math.cos(3.141592653589793 * t) / 2 + .5;
};
haxepunk_utils_Ease.bounceIn = function(t) {
	t = 1 - t;
	if(t < 0.363636363636363646) {
		return 1 - 7.5625 * t * t;
	}
	if(t < 0.727272727272727293) {
		return 1 - (7.5625 * (t - 0.545454545454545414) * (t - 0.545454545454545414) + .75);
	}
	if(t < 0.909090909090909061) {
		return 1 - (7.5625 * (t - 0.818181818181818232) * (t - 0.818181818181818232) + .9375);
	}
	return 1 - (7.5625 * (t - 0.954545454545454586) * (t - 0.954545454545454586) + .984375);
};
haxepunk_utils_Ease.bounceOut = function(t) {
	if(t < 0.363636363636363646) {
		return 7.5625 * t * t;
	}
	if(t < 0.727272727272727293) {
		return 7.5625 * (t - 0.545454545454545414) * (t - 0.545454545454545414) + .75;
	}
	if(t < 0.909090909090909061) {
		return 7.5625 * (t - 0.818181818181818232) * (t - 0.818181818181818232) + .9375;
	}
	return 7.5625 * (t - 0.954545454545454586) * (t - 0.954545454545454586) + .984375;
};
haxepunk_utils_Ease.bounceInOut = function(t) {
	if(t < .5) {
		t = 1 - t * 2;
		if(t < 0.363636363636363646) {
			return (1 - 7.5625 * t * t) / 2;
		}
		if(t < 0.727272727272727293) {
			return (1 - (7.5625 * (t - 0.545454545454545414) * (t - 0.545454545454545414) + .75)) / 2;
		}
		if(t < 0.909090909090909061) {
			return (1 - (7.5625 * (t - 0.818181818181818232) * (t - 0.818181818181818232) + .9375)) / 2;
		}
		return (1 - (7.5625 * (t - 0.954545454545454586) * (t - 0.954545454545454586) + .984375)) / 2;
	}
	t = t * 2 - 1;
	if(t < 0.363636363636363646) {
		return 7.5625 * t * t / 2 + .5;
	}
	if(t < 0.727272727272727293) {
		return (7.5625 * (t - 0.545454545454545414) * (t - 0.545454545454545414) + .75) / 2 + .5;
	}
	if(t < 0.909090909090909061) {
		return (7.5625 * (t - 0.818181818181818232) * (t - 0.818181818181818232) + .9375) / 2 + .5;
	}
	return (7.5625 * (t - 0.954545454545454586) * (t - 0.954545454545454586) + .984375) / 2 + .5;
};
haxepunk_utils_Ease.circIn = function(t) {
	return -(Math.sqrt(1 - t * t) - 1);
};
haxepunk_utils_Ease.circOut = function(t) {
	return Math.sqrt(1 - (t - 1) * (t - 1));
};
haxepunk_utils_Ease.circInOut = function(t) {
	if(t <= .5) {
		return (Math.sqrt(1 - t * t * 4) - 1) / -2;
	} else {
		return (Math.sqrt(1 - (t * 2 - 2) * (t * 2 - 2)) + 1) / 2;
	}
};
haxepunk_utils_Ease.expoIn = function(t) {
	return Math.pow(2,10 * (t - 1));
};
haxepunk_utils_Ease.expoOut = function(t) {
	return -Math.pow(2,-10 * t) + 1;
};
haxepunk_utils_Ease.expoInOut = function(t) {
	if(t < .5) {
		return Math.pow(2,10 * (t * 2 - 1)) / 2;
	} else {
		return (-Math.pow(2,-10 * (t * 2 - 1)) + 2) / 2;
	}
};
haxepunk_utils_Ease.backIn = function(t) {
	return t * t * (2.70158 * t - 1.70158);
};
haxepunk_utils_Ease.backOut = function(t) {
	return 1 - --t * t * (-2.70158 * t - 1.70158);
};
haxepunk_utils_Ease.backInOut = function(t) {
	t *= 2;
	if(t < 1) {
		return t * t * (2.70158 * t - 1.70158) / 2;
	}
	--t;
	return (1 - --t * t * (-2.70158 * t - 1.70158)) / 2 + .5;
};
var haxepunk_utils_HaxelibInfoBuilder = function() { };
$hxClasses["haxepunk.utils.HaxelibInfoBuilder"] = haxepunk_utils_HaxelibInfoBuilder;
haxepunk_utils_HaxelibInfoBuilder.__name__ = ["haxepunk","utils","HaxelibInfoBuilder"];
var haxepunk_utils_HaxelibInfo = function() { };
$hxClasses["haxepunk.utils.HaxelibInfo"] = haxepunk_utils_HaxelibInfo;
haxepunk_utils_HaxelibInfo.__name__ = ["haxepunk","utils","HaxelibInfo"];
var haxepunk_utils__$Utf8String_Utf8String_$Impl_$ = {};
$hxClasses["haxepunk.utils._Utf8String.Utf8String_Impl_"] = haxepunk_utils__$Utf8String_Utf8String_$Impl_$;
haxepunk_utils__$Utf8String_Utf8String_$Impl_$.__name__ = ["haxepunk","utils","_Utf8String","Utf8String_Impl_"];
haxepunk_utils__$Utf8String_Utf8String_$Impl_$.__properties__ = {get_length:"get_length"};
haxepunk_utils__$Utf8String_Utf8String_$Impl_$.get_length = function(this1) {
	return this1.length;
};
haxepunk_utils__$Utf8String_Utf8String_$Impl_$._new = function(s) {
	var this1 = s;
	return this1;
};
haxepunk_utils__$Utf8String_Utf8String_$Impl_$.charAt = function(this1,pos) {
	var u = new haxe_Utf8(4);
	var c = HxOverrides.cca(this1,pos);
	u.__b += String.fromCharCode(c);
	return u.__b;
};
haxepunk_utils__$Utf8String_Utf8String_$Impl_$.charCodeAt = function(this1,pos) {
	return HxOverrides.cca(this1,pos);
};
haxepunk_utils__$Utf8String_Utf8String_$Impl_$.substr = function(this1,pos,len) {
	return HxOverrides.substr(this1,pos,len);
};
haxepunk_utils__$Utf8String_Utf8String_$Impl_$.concat = function(this1,rhs) {
	var buf_b = "";
	buf_b += Std.string(this1 == null ? "null" : "" + this1);
	buf_b += Std.string(Std.string(rhs));
	return buf_b;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,byteLength: null
	,byteOffset: null
	,buffer: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian ? a : b,littleEndian ? b : a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Float64Array = function() { };
$hxClasses["js.html.compat.Float64Array"] = js_html_compat_Float64Array;
js_html_compat_Float64Array.__name__ = ["js","html","compat","Float64Array"];
js_html_compat_Float64Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 3;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 3;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 3;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val1 = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			var val2 = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i64ToDouble(val1,val2));
		}
		arr.byteLength = arr.length << 3;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var v = haxe_io_FPHelper.doubleToI64(f);
			var i3 = v.low;
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
			var i4 = v.high;
			buffer1.push(i4 & 255);
			buffer1.push(i4 >> 8 & 255);
			buffer1.push(i4 >> 16 & 255);
			buffer1.push(i4 >>> 24);
		}
		arr.byteLength = arr.length << 3;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float64Array._subarray;
	arr.set = js_html_compat_Float64Array._set;
	return arr;
};
js_html_compat_Float64Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float64Array._subarray = function(start,end) {
	var a = js_html_compat_Float64Array._new(this.slice(start,end));
	a.byteOffset = start * 8;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime__$backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
lime__$backend_html5_GameDeviceData.__name__ = ["lime","_backend","html5","GameDeviceData"];
lime__$backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$backend_html5_GameDeviceData
};
var lime__$backend_html5_HTML5AudioSource = function(parent) {
	this.parent = parent;
	this.id = -1;
	this.gain = 1;
	this.position = new lime_math_Vector4();
};
$hxClasses["lime._backend.html5.HTML5AudioSource"] = lime__$backend_html5_HTML5AudioSource;
lime__$backend_html5_HTML5AudioSource.__name__ = ["lime","_backend","html5","HTML5AudioSource"];
lime__$backend_html5_HTML5AudioSource.prototype = {
	completed: null
	,gain: null
	,id: null
	,length: null
	,loops: null
	,parent: null
	,playing: null
	,position: null
	,dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		if(this.playing || this.parent.buffer == null) {
			return;
		}
		this.playing = true;
		var time = this.getCurrentTime();
		this.completed = false;
		var cacheVolume = this.parent.buffer.__srcHowl._volume;
		this.parent.buffer.__srcHowl._volume = this.parent.get_gain();
		this.id = this.parent.buffer.__srcHowl.play();
		this.parent.buffer.__srcHowl._volume = cacheVolume;
		this.setPosition(this.parent.get_position());
		this.parent.buffer.__srcHowl.on("end",$bind(this,this.howl_onEnd),this.id);
		this.setCurrentTime(time);
	}
	,pause: function() {
		this.playing = false;
		if(this.parent.buffer != null) {
			this.parent.buffer.__srcHowl.pause(this.id);
		}
	}
	,stop: function() {
		this.playing = false;
		if(this.parent.buffer != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
		}
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
			return;
		} else {
			this.parent.buffer.__srcHowl.stop(this.id);
		}
		this.completed = true;
		this.parent.onComplete.dispatch();
	}
	,getCurrentTime: function() {
		if(this.id == -1) {
			return 0;
		}
		if(this.completed) {
			return this.getLength();
		} else if(this.parent.buffer != null) {
			var time = (this.parent.buffer.__srcHowl.seek(this.id) * 1000 | 0) - this.parent.offset;
			if(time < 0) {
				return 0;
			}
			return time;
		}
		return 0;
	}
	,setCurrentTime: function(value) {
		if(this.parent.buffer != null) {
			var pos = (value + this.parent.offset) / 1000;
			if(pos < 0) {
				pos = 0;
			}
			this.parent.buffer.__srcHowl.seek(pos,this.id);
		}
		return value;
	}
	,getGain: function() {
		return this.gain;
	}
	,setGain: function(value) {
		if(this.parent.buffer != null) {
			this.parent.buffer.__srcHowl.volume(value,this.id);
		}
		return this.gain = value;
	}
	,getLength: function() {
		if(this.length != 0) {
			return this.length;
		}
		if(this.parent.buffer != null) {
			return this.parent.buffer.__srcHowl.duration() * 1000 | 0;
		}
		return 0;
	}
	,setLength: function(value) {
		return this.length = value;
	}
	,getLoops: function() {
		return this.loops;
	}
	,setLoops: function(value) {
		return this.loops = value;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(value) {
		this.position.x = value.x;
		this.position.y = value.y;
		this.position.z = value.z;
		this.position.w = value.w;
		return this.position;
	}
	,__class__: lime__$backend_html5_HTML5AudioSource
};
var lime__$backend_html5_HTML5GLRenderContext = function(context) {
	this.MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 37447;
	this.TIMEOUT_IGNORED = -1;
	this.INVALID_INDEX = -1;
	this.DEPTH32F_STENCIL8 = 36013;
	this.DEPTH_COMPONENT32F = 36012;
	this.DYNAMIC_COPY = 35050;
	this.DYNAMIC_READ = 35049;
	this.STATIC_COPY = 35046;
	this.STATIC_READ = 35045;
	this.STREAM_COPY = 35042;
	this.STREAM_READ = 35041;
	this.DEPTH_COMPONENT24 = 33190;
	this.MAX = 32776;
	this.MIN = 32775;
	this.STENCIL = 6146;
	this.DEPTH = 6145;
	this.COLOR = 6144;
	this.SYNC_FLUSH_COMMANDS_BIT = 1;
	this.WAIT_FAILED = 37149;
	this.CONDITION_SATISFIED = 37148;
	this.TIMEOUT_EXPIRED = 37147;
	this.ALREADY_SIGNALED = 37146;
	this.SIGNALED = 37145;
	this.UNSIGNALED = 37144;
	this.SYNC_GPU_COMMANDS_COMPLETE = 37143;
	this.SYNC_FENCE = 37142;
	this.SYNC_FLAGS = 37141;
	this.SYNC_STATUS = 37140;
	this.SYNC_CONDITION = 37139;
	this.OBJECT_TYPE = 37138;
	this.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
	this.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
	this.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
	this.UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
	this.UNIFORM_BLOCK_DATA_SIZE = 35392;
	this.UNIFORM_BLOCK_BINDING = 35391;
	this.UNIFORM_IS_ROW_MAJOR = 35390;
	this.UNIFORM_MATRIX_STRIDE = 35389;
	this.UNIFORM_ARRAY_STRIDE = 35388;
	this.UNIFORM_OFFSET = 35387;
	this.UNIFORM_BLOCK_INDEX = 35386;
	this.UNIFORM_SIZE = 35384;
	this.UNIFORM_TYPE = 35383;
	this.ACTIVE_UNIFORM_BLOCKS = 35382;
	this.UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
	this.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
	this.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
	this.MAX_UNIFORM_BLOCK_SIZE = 35376;
	this.MAX_UNIFORM_BUFFER_BINDINGS = 35375;
	this.MAX_COMBINED_UNIFORM_BLOCKS = 35374;
	this.MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
	this.MAX_VERTEX_UNIFORM_BLOCKS = 35371;
	this.UNIFORM_BUFFER_SIZE = 35370;
	this.UNIFORM_BUFFER_START = 35369;
	this.UNIFORM_BUFFER_BINDING = 35368;
	this.UNIFORM_BUFFER = 35345;
	this.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
	this.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
	this.RENDERBUFFER_SAMPLES = 36011;
	this.READ_FRAMEBUFFER_BINDING = 36010;
	this.DRAW_FRAMEBUFFER = 36009;
	this.READ_FRAMEBUFFER = 36008;
	this.DRAW_FRAMEBUFFER_BINDING = 36006;
	this.DEPTH24_STENCIL8 = 35056;
	this.FRAMEBUFFER_DEFAULT = 33304;
	this.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
	this.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
	this.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
	this.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
	this.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
	this.FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
	this.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
	this.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
	this.TRANSFORM_FEEDBACK_BINDING = 36389;
	this.TRANSFORM_FEEDBACK_ACTIVE = 36388;
	this.TRANSFORM_FEEDBACK_PAUSED = 36387;
	this.TRANSFORM_FEEDBACK = 36386;
	this.TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
	this.TRANSFORM_FEEDBACK_BUFFER = 35982;
	this.SEPARATE_ATTRIBS = 35981;
	this.INTERLEAVED_ATTRIBS = 35980;
	this.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
	this.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
	this.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
	this.TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
	this.TRANSFORM_FEEDBACK_BUFFER_START = 35972;
	this.TRANSFORM_FEEDBACK_VARYINGS = 35971;
	this.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
	this.TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
	this.VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
	this.VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
	this.SIGNED_NORMALIZED = 36764;
	this.UNSIGNED_NORMALIZED = 35863;
	this.UNSIGNED_INT_VEC4 = 36296;
	this.UNSIGNED_INT_VEC3 = 36295;
	this.UNSIGNED_INT_VEC2 = 36294;
	this.FLOAT_MAT4x3 = 35690;
	this.FLOAT_MAT4x2 = 35689;
	this.FLOAT_MAT3x4 = 35688;
	this.FLOAT_MAT3x2 = 35687;
	this.FLOAT_MAT2x4 = 35686;
	this.FLOAT_MAT2x3 = 35685;
	this.COPY_WRITE_BUFFER_BINDING = 36663;
	this.COPY_READ_BUFFER_BINDING = 36662;
	this.COPY_WRITE_BUFFER = 36663;
	this.COPY_READ_BUFFER = 36662;
	this.PIXEL_UNPACK_BUFFER_BINDING = 35055;
	this.PIXEL_PACK_BUFFER_BINDING = 35053;
	this.PIXEL_UNPACK_BUFFER = 35052;
	this.PIXEL_PACK_BUFFER = 35051;
	this.SAMPLER_BINDING = 35097;
	this.MAX_SAMPLES = 36183;
	this.UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
	this.UNSIGNED_INT_SAMPLER_CUBE = 36308;
	this.UNSIGNED_INT_SAMPLER_3D = 36307;
	this.UNSIGNED_INT_SAMPLER_2D = 36306;
	this.INT_SAMPLER_2D_ARRAY = 36303;
	this.INT_SAMPLER_CUBE = 36300;
	this.INT_SAMPLER_3D = 36299;
	this.INT_SAMPLER_2D = 36298;
	this.SAMPLER_CUBE_SHADOW = 36293;
	this.SAMPLER_2D_ARRAY_SHADOW = 36292;
	this.SAMPLER_2D_ARRAY = 36289;
	this.SAMPLER_2D_SHADOW = 35682;
	this.SAMPLER_3D = 35679;
	this.COLOR_ATTACHMENT15 = 36079;
	this.COLOR_ATTACHMENT14 = 36078;
	this.COLOR_ATTACHMENT13 = 36077;
	this.COLOR_ATTACHMENT12 = 36076;
	this.COLOR_ATTACHMENT11 = 36075;
	this.COLOR_ATTACHMENT10 = 36074;
	this.COLOR_ATTACHMENT9 = 36073;
	this.COLOR_ATTACHMENT8 = 36072;
	this.COLOR_ATTACHMENT7 = 36071;
	this.COLOR_ATTACHMENT6 = 36070;
	this.COLOR_ATTACHMENT5 = 36069;
	this.COLOR_ATTACHMENT4 = 36068;
	this.COLOR_ATTACHMENT3 = 36067;
	this.COLOR_ATTACHMENT2 = 36066;
	this.COLOR_ATTACHMENT1 = 36065;
	this.MAX_COLOR_ATTACHMENTS = 36063;
	this.DRAW_BUFFER15 = 34868;
	this.DRAW_BUFFER14 = 34867;
	this.DRAW_BUFFER13 = 34866;
	this.DRAW_BUFFER12 = 34865;
	this.DRAW_BUFFER11 = 34864;
	this.DRAW_BUFFER10 = 34863;
	this.DRAW_BUFFER9 = 34862;
	this.DRAW_BUFFER8 = 34861;
	this.DRAW_BUFFER7 = 34860;
	this.DRAW_BUFFER6 = 34859;
	this.DRAW_BUFFER5 = 34858;
	this.DRAW_BUFFER4 = 34857;
	this.DRAW_BUFFER3 = 34856;
	this.DRAW_BUFFER2 = 34855;
	this.DRAW_BUFFER1 = 34854;
	this.DRAW_BUFFER0 = 34853;
	this.MAX_DRAW_BUFFERS = 34852;
	this.ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
	this.ANY_SAMPLES_PASSED = 35887;
	this.QUERY_RESULT_AVAILABLE = 34919;
	this.QUERY_RESULT = 34918;
	this.CURRENT_QUERY = 34917;
	this.INT_2_10_10_10_REV = 36255;
	this.RG_INTEGER = 33320;
	this.RG = 33319;
	this.HALF_FLOAT = 5131;
	this.UNSIGNED_INT_24_8 = 34042;
	this.FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
	this.UNSIGNED_INT_5_9_9_9_REV = 35902;
	this.UNSIGNED_INT_10F_11F_11F_REV = 35899;
	this.UNSIGNED_INT_2_10_10_10_REV = 33640;
	this.TEXTURE_IMMUTABLE_LEVELS = 33503;
	this.TEXTURE_IMMUTABLE_FORMAT = 37167;
	this.RGB10_A2UI = 36975;
	this.RGBA8_SNORM = 36759;
	this.RGB8_SNORM = 36758;
	this.RG8_SNORM = 36757;
	this.R8_SNORM = 36756;
	this.RG32UI = 33340;
	this.RG32I = 33339;
	this.RG16UI = 33338;
	this.RG16I = 33337;
	this.RG8UI = 33336;
	this.RG8I = 33335;
	this.R32UI = 33334;
	this.R32I = 33333;
	this.R16UI = 33332;
	this.R16I = 33331;
	this.R8UI = 33330;
	this.R8I = 33329;
	this.RG32F = 33328;
	this.RG16F = 33327;
	this.R32F = 33326;
	this.R16F = 33325;
	this.RG8 = 33323;
	this.R8 = 33321;
	this.RGBA_INTEGER = 36249;
	this.RGB_INTEGER = 36248;
	this.RED_INTEGER = 36244;
	this.RGB8I = 36239;
	this.RGBA8I = 36238;
	this.RGB16I = 36233;
	this.RGBA16I = 36232;
	this.RGB32I = 36227;
	this.RGBA32I = 36226;
	this.RGB8UI = 36221;
	this.RGBA8UI = 36220;
	this.RGB16UI = 36215;
	this.RGBA16UI = 36214;
	this.RGB32UI = 36209;
	this.RGBA32UI = 36208;
	this.RGB9_E5 = 35901;
	this.R11F_G11F_B10F = 35898;
	this.TEXTURE_BINDING_2D_ARRAY = 35869;
	this.TEXTURE_2D_ARRAY = 35866;
	this.RGB16F = 34843;
	this.RGBA16F = 34842;
	this.RGB32F = 34837;
	this.RGBA32F = 34836;
	this.COMPARE_REF_TO_TEXTURE = 34894;
	this.SRGB8_ALPHA8 = 35907;
	this.SRGB8 = 35905;
	this.SRGB = 35904;
	this.TEXTURE_COMPARE_FUNC = 34893;
	this.TEXTURE_COMPARE_MODE = 34892;
	this.TEXTURE_MAX_LEVEL = 33085;
	this.TEXTURE_BASE_LEVEL = 33084;
	this.TEXTURE_MAX_LOD = 33083;
	this.TEXTURE_MIN_LOD = 33082;
	this.TEXTURE_WRAP_R = 32882;
	this.TEXTURE_3D = 32879;
	this.RGB10_A2 = 32857;
	this.RGBA8 = 32856;
	this.RGB8 = 32849;
	this.RED = 6403;
	this.MAX_ELEMENT_INDEX = 36203;
	this.MAX_SERVER_WAIT_TIMEOUT = 37137;
	this.MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
	this.MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
	this.VERTEX_ARRAY_BINDING = 34229;
	this.RASTERIZER_DISCARD = 35977;
	this.FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
	this.MAX_VARYING_COMPONENTS = 35659;
	this.MAX_PROGRAM_TEXEL_OFFSET = 35077;
	this.MIN_PROGRAM_TEXEL_OFFSET = 35076;
	this.MAX_ARRAY_TEXTURE_LAYERS = 35071;
	this.MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
	this.MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
	this.MAX_TEXTURE_LOD_BIAS = 34045;
	this.MAX_ELEMENTS_INDICES = 33001;
	this.MAX_ELEMENTS_VERTICES = 33000;
	this.MAX_3D_TEXTURE_SIZE = 32883;
	this.UNPACK_IMAGE_HEIGHT = 32878;
	this.UNPACK_SKIP_IMAGES = 32877;
	this.TEXTURE_BINDING_3D = 32874;
	this.PACK_SKIP_PIXELS = 3332;
	this.PACK_SKIP_ROWS = 3331;
	this.PACK_ROW_LENGTH = 3330;
	this.UNPACK_SKIP_PIXELS = 3316;
	this.UNPACK_SKIP_ROWS = 3315;
	this.UNPACK_ROW_LENGTH = 3314;
	this.READ_BUFFER = 3074;
	this.BROWSER_DEFAULT_WEBGL = 37444;
	this.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
	this.CONTEXT_LOST_WEBGL = 37442;
	this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
	this.UNPACK_FLIP_Y_WEBGL = 37440;
	this.INVALID_FRAMEBUFFER_OPERATION = 1286;
	this.MAX_RENDERBUFFER_SIZE = 34024;
	this.RENDERBUFFER_BINDING = 36007;
	this.FRAMEBUFFER_BINDING = 36006;
	this.FRAMEBUFFER_UNSUPPORTED = 36061;
	this.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
	this.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
	this.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
	this.FRAMEBUFFER_COMPLETE = 36053;
	this.NONE = 0;
	this.DEPTH_STENCIL_ATTACHMENT = 33306;
	this.STENCIL_ATTACHMENT = 36128;
	this.DEPTH_ATTACHMENT = 36096;
	this.COLOR_ATTACHMENT0 = 36064;
	this.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
	this.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
	this.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
	this.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
	this.RENDERBUFFER_STENCIL_SIZE = 36181;
	this.RENDERBUFFER_DEPTH_SIZE = 36180;
	this.RENDERBUFFER_ALPHA_SIZE = 36179;
	this.RENDERBUFFER_BLUE_SIZE = 36178;
	this.RENDERBUFFER_GREEN_SIZE = 36177;
	this.RENDERBUFFER_RED_SIZE = 36176;
	this.RENDERBUFFER_INTERNAL_FORMAT = 36164;
	this.RENDERBUFFER_HEIGHT = 36163;
	this.RENDERBUFFER_WIDTH = 36162;
	this.DEPTH_STENCIL = 34041;
	this.STENCIL_INDEX8 = 36168;
	this.STENCIL_INDEX = 6401;
	this.DEPTH_COMPONENT16 = 33189;
	this.RGB565 = 36194;
	this.RGB5_A1 = 32855;
	this.RGBA4 = 32854;
	this.RENDERBUFFER = 36161;
	this.FRAMEBUFFER = 36160;
	this.HIGH_INT = 36341;
	this.MEDIUM_INT = 36340;
	this.LOW_INT = 36339;
	this.HIGH_FLOAT = 36338;
	this.MEDIUM_FLOAT = 36337;
	this.LOW_FLOAT = 36336;
	this.COMPILE_STATUS = 35713;
	this.POINT_SPRITE = 34913;
	this.VERTEX_PROGRAM_POINT_SIZE = 34370;
	this.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
	this.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
	this.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
	this.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
	this.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
	this.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
	this.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
	this.SAMPLER_CUBE = 35680;
	this.SAMPLER_2D = 35678;
	this.FLOAT_MAT4 = 35676;
	this.FLOAT_MAT3 = 35675;
	this.FLOAT_MAT2 = 35674;
	this.BOOL_VEC4 = 35673;
	this.BOOL_VEC3 = 35672;
	this.BOOL_VEC2 = 35671;
	this.BOOL = 35670;
	this.INT_VEC4 = 35669;
	this.INT_VEC3 = 35668;
	this.INT_VEC2 = 35667;
	this.FLOAT_VEC4 = 35666;
	this.FLOAT_VEC3 = 35665;
	this.FLOAT_VEC2 = 35664;
	this.MIRRORED_REPEAT = 33648;
	this.CLAMP_TO_EDGE = 33071;
	this.REPEAT = 10497;
	this.ACTIVE_TEXTURE = 34016;
	this.TEXTURE31 = 34015;
	this.TEXTURE30 = 34014;
	this.TEXTURE29 = 34013;
	this.TEXTURE28 = 34012;
	this.TEXTURE27 = 34011;
	this.TEXTURE26 = 34010;
	this.TEXTURE25 = 34009;
	this.TEXTURE24 = 34008;
	this.TEXTURE23 = 34007;
	this.TEXTURE22 = 34006;
	this.TEXTURE21 = 34005;
	this.TEXTURE20 = 34004;
	this.TEXTURE19 = 34003;
	this.TEXTURE18 = 34002;
	this.TEXTURE17 = 34001;
	this.TEXTURE16 = 34000;
	this.TEXTURE15 = 33999;
	this.TEXTURE14 = 33998;
	this.TEXTURE13 = 33997;
	this.TEXTURE12 = 33996;
	this.TEXTURE11 = 33995;
	this.TEXTURE10 = 33994;
	this.TEXTURE9 = 33993;
	this.TEXTURE8 = 33992;
	this.TEXTURE7 = 33991;
	this.TEXTURE6 = 33990;
	this.TEXTURE5 = 33989;
	this.TEXTURE4 = 33988;
	this.TEXTURE3 = 33987;
	this.TEXTURE2 = 33986;
	this.TEXTURE1 = 33985;
	this.TEXTURE0 = 33984;
	this.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
	this.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
	this.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
	this.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
	this.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
	this.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
	this.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
	this.TEXTURE_BINDING_CUBE_MAP = 34068;
	this.TEXTURE_CUBE_MAP = 34067;
	this.TEXTURE = 5890;
	this.TEXTURE_2D = 3553;
	this.TEXTURE_WRAP_T = 10243;
	this.TEXTURE_WRAP_S = 10242;
	this.TEXTURE_MIN_FILTER = 10241;
	this.TEXTURE_MAG_FILTER = 10240;
	this.LINEAR_MIPMAP_LINEAR = 9987;
	this.NEAREST_MIPMAP_LINEAR = 9986;
	this.LINEAR_MIPMAP_NEAREST = 9985;
	this.NEAREST_MIPMAP_NEAREST = 9984;
	this.LINEAR = 9729;
	this.NEAREST = 9728;
	this.VERSION = 7938;
	this.RENDERER = 7937;
	this.VENDOR = 7936;
	this.DECR_WRAP = 34056;
	this.INCR_WRAP = 34055;
	this.INVERT = 5386;
	this.DECR = 7683;
	this.INCR = 7682;
	this.REPLACE = 7681;
	this.KEEP = 7680;
	this.ALWAYS = 519;
	this.GEQUAL = 518;
	this.NOTEQUAL = 517;
	this.GREATER = 516;
	this.LEQUAL = 515;
	this.EQUAL = 514;
	this.LESS = 513;
	this.NEVER = 512;
	this.CURRENT_PROGRAM = 35725;
	this.SHADING_LANGUAGE_VERSION = 35724;
	this.ACTIVE_ATTRIBUTES = 35721;
	this.ACTIVE_UNIFORMS = 35718;
	this.ATTACHED_SHADERS = 35717;
	this.VALIDATE_STATUS = 35715;
	this.LINK_STATUS = 35714;
	this.DELETE_STATUS = 35712;
	this.SHADER_TYPE = 35663;
	this.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
	this.MAX_TEXTURE_IMAGE_UNITS = 34930;
	this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
	this.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
	this.MAX_VARYING_VECTORS = 36348;
	this.MAX_VERTEX_UNIFORM_VECTORS = 36347;
	this.MAX_VERTEX_ATTRIBS = 34921;
	this.VERTEX_SHADER = 35633;
	this.FRAGMENT_SHADER = 35632;
	this.UNSIGNED_SHORT_5_6_5 = 33635;
	this.UNSIGNED_SHORT_5_5_5_1 = 32820;
	this.UNSIGNED_SHORT_4_4_4_4 = 32819;
	this.LUMINANCE_ALPHA = 6410;
	this.LUMINANCE = 6409;
	this.RGBA = 6408;
	this.RGB = 6407;
	this.ALPHA = 6406;
	this.DEPTH_COMPONENT = 6402;
	this.FLOAT = 5126;
	this.UNSIGNED_INT = 5125;
	this.INT = 5124;
	this.UNSIGNED_SHORT = 5123;
	this.SHORT = 5122;
	this.UNSIGNED_BYTE = 5121;
	this.BYTE = 5120;
	this.GENERATE_MIPMAP_HINT = 33170;
	this.NICEST = 4354;
	this.FASTEST = 4353;
	this.DONT_CARE = 4352;
	this.COMPRESSED_TEXTURE_FORMATS = 34467;
	this.SAMPLE_COVERAGE_INVERT = 32939;
	this.SAMPLE_COVERAGE_VALUE = 32938;
	this.SAMPLES = 32937;
	this.SAMPLE_BUFFERS = 32936;
	this.TEXTURE_BINDING_2D = 32873;
	this.POLYGON_OFFSET_FACTOR = 32824;
	this.POLYGON_OFFSET_UNITS = 10752;
	this.STENCIL_BITS = 3415;
	this.DEPTH_BITS = 3414;
	this.ALPHA_BITS = 3413;
	this.BLUE_BITS = 3412;
	this.GREEN_BITS = 3411;
	this.RED_BITS = 3410;
	this.SUBPIXEL_BITS = 3408;
	this.MAX_VIEWPORT_DIMS = 3386;
	this.MAX_TEXTURE_SIZE = 3379;
	this.PACK_ALIGNMENT = 3333;
	this.UNPACK_ALIGNMENT = 3317;
	this.COLOR_WRITEMASK = 3107;
	this.COLOR_CLEAR_VALUE = 3106;
	this.SCISSOR_BOX = 3088;
	this.VIEWPORT = 2978;
	this.STENCIL_BACK_WRITEMASK = 36005;
	this.STENCIL_BACK_VALUE_MASK = 36004;
	this.STENCIL_BACK_REF = 36003;
	this.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
	this.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
	this.STENCIL_BACK_FAIL = 34817;
	this.STENCIL_BACK_FUNC = 34816;
	this.STENCIL_WRITEMASK = 2968;
	this.STENCIL_VALUE_MASK = 2963;
	this.STENCIL_REF = 2967;
	this.STENCIL_PASS_DEPTH_PASS = 2966;
	this.STENCIL_PASS_DEPTH_FAIL = 2965;
	this.STENCIL_FAIL = 2964;
	this.STENCIL_FUNC = 2962;
	this.STENCIL_CLEAR_VALUE = 2961;
	this.DEPTH_FUNC = 2932;
	this.DEPTH_CLEAR_VALUE = 2931;
	this.DEPTH_WRITEMASK = 2930;
	this.DEPTH_RANGE = 2928;
	this.FRONT_FACE = 2886;
	this.CULL_FACE_MODE = 2885;
	this.ALIASED_LINE_WIDTH_RANGE = 33902;
	this.ALIASED_POINT_SIZE_RANGE = 33901;
	this.LINE_WIDTH = 2849;
	this.CCW = 2305;
	this.CW = 2304;
	this.OUT_OF_MEMORY = 1285;
	this.INVALID_OPERATION = 1282;
	this.INVALID_VALUE = 1281;
	this.INVALID_ENUM = 1280;
	this.NO_ERROR = 0;
	this.SAMPLE_COVERAGE = 32928;
	this.SAMPLE_ALPHA_TO_COVERAGE = 32926;
	this.POLYGON_OFFSET_FILL = 32823;
	this.SCISSOR_TEST = 3089;
	this.DEPTH_TEST = 2929;
	this.STENCIL_TEST = 2960;
	this.DITHER = 3024;
	this.BLEND = 3042;
	this.CULL_FACE = 2884;
	this.FRONT_AND_BACK = 1032;
	this.BACK = 1029;
	this.FRONT = 1028;
	this.CURRENT_VERTEX_ATTRIB = 34342;
	this.BUFFER_USAGE = 34661;
	this.BUFFER_SIZE = 34660;
	this.DYNAMIC_DRAW = 35048;
	this.STATIC_DRAW = 35044;
	this.STREAM_DRAW = 35040;
	this.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
	this.ARRAY_BUFFER_BINDING = 34964;
	this.ELEMENT_ARRAY_BUFFER = 34963;
	this.ARRAY_BUFFER = 34962;
	this.BLEND_COLOR = 32773;
	this.ONE_MINUS_CONSTANT_ALPHA = 32772;
	this.CONSTANT_ALPHA = 32771;
	this.ONE_MINUS_CONSTANT_COLOR = 32770;
	this.CONSTANT_COLOR = 32769;
	this.BLEND_SRC_ALPHA = 32971;
	this.BLEND_DST_ALPHA = 32970;
	this.BLEND_SRC_RGB = 32969;
	this.BLEND_DST_RGB = 32968;
	this.FUNC_REVERSE_SUBTRACT = 32779;
	this.FUNC_SUBTRACT = 32778;
	this.BLEND_EQUATION_ALPHA = 34877;
	this.BLEND_EQUATION_RGB = 32777;
	this.BLEND_EQUATION = 32777;
	this.FUNC_ADD = 32774;
	this.SRC_ALPHA_SATURATE = 776;
	this.ONE_MINUS_DST_COLOR = 775;
	this.DST_COLOR = 774;
	this.ONE_MINUS_DST_ALPHA = 773;
	this.DST_ALPHA = 772;
	this.ONE_MINUS_SRC_ALPHA = 771;
	this.SRC_ALPHA = 770;
	this.ONE_MINUS_SRC_COLOR = 769;
	this.SRC_COLOR = 768;
	this.ONE = 1;
	this.ZERO = 0;
	this.TRIANGLE_FAN = 6;
	this.TRIANGLE_STRIP = 5;
	this.TRIANGLES = 4;
	this.LINE_STRIP = 3;
	this.LINE_LOOP = 2;
	this.LINES = 1;
	this.POINTS = 0;
	this.COLOR_BUFFER_BIT = 16384;
	this.STENCIL_BUFFER_BIT = 1024;
	this.DEPTH_BUFFER_BIT = 256;
	this.__context = context;
	this.version = 1;
	this.type = lime_graphics_opengl_GLContextType.WEBGL;
	if(context != null) {
		var gl = context;
		if(Object.prototype.hasOwnProperty.call(gl,"rawgl")) {
			gl = Reflect.field(context,"rawgl");
		}
		if(Object.prototype.hasOwnProperty.call(window,"WebGL2RenderingContext") && js_Boot.__instanceof(gl,WebGL2RenderingContext)) {
			this.version = 2;
		}
	}
};
$hxClasses["lime._backend.html5.HTML5GLRenderContext"] = lime__$backend_html5_HTML5GLRenderContext;
lime__$backend_html5_HTML5GLRenderContext.__name__ = ["lime","_backend","html5","HTML5GLRenderContext"];
lime__$backend_html5_HTML5GLRenderContext.prototype = {
	DEPTH_BUFFER_BIT: null
	,STENCIL_BUFFER_BIT: null
	,COLOR_BUFFER_BIT: null
	,POINTS: null
	,LINES: null
	,LINE_LOOP: null
	,LINE_STRIP: null
	,TRIANGLES: null
	,TRIANGLE_STRIP: null
	,TRIANGLE_FAN: null
	,ZERO: null
	,ONE: null
	,SRC_COLOR: null
	,ONE_MINUS_SRC_COLOR: null
	,SRC_ALPHA: null
	,ONE_MINUS_SRC_ALPHA: null
	,DST_ALPHA: null
	,ONE_MINUS_DST_ALPHA: null
	,DST_COLOR: null
	,ONE_MINUS_DST_COLOR: null
	,SRC_ALPHA_SATURATE: null
	,FUNC_ADD: null
	,BLEND_EQUATION: null
	,BLEND_EQUATION_RGB: null
	,BLEND_EQUATION_ALPHA: null
	,FUNC_SUBTRACT: null
	,FUNC_REVERSE_SUBTRACT: null
	,BLEND_DST_RGB: null
	,BLEND_SRC_RGB: null
	,BLEND_DST_ALPHA: null
	,BLEND_SRC_ALPHA: null
	,CONSTANT_COLOR: null
	,ONE_MINUS_CONSTANT_COLOR: null
	,CONSTANT_ALPHA: null
	,ONE_MINUS_CONSTANT_ALPHA: null
	,BLEND_COLOR: null
	,ARRAY_BUFFER: null
	,ELEMENT_ARRAY_BUFFER: null
	,ARRAY_BUFFER_BINDING: null
	,ELEMENT_ARRAY_BUFFER_BINDING: null
	,STREAM_DRAW: null
	,STATIC_DRAW: null
	,DYNAMIC_DRAW: null
	,BUFFER_SIZE: null
	,BUFFER_USAGE: null
	,CURRENT_VERTEX_ATTRIB: null
	,FRONT: null
	,BACK: null
	,FRONT_AND_BACK: null
	,CULL_FACE: null
	,BLEND: null
	,DITHER: null
	,STENCIL_TEST: null
	,DEPTH_TEST: null
	,SCISSOR_TEST: null
	,POLYGON_OFFSET_FILL: null
	,SAMPLE_ALPHA_TO_COVERAGE: null
	,SAMPLE_COVERAGE: null
	,NO_ERROR: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,CW: null
	,CCW: null
	,LINE_WIDTH: null
	,ALIASED_POINT_SIZE_RANGE: null
	,ALIASED_LINE_WIDTH_RANGE: null
	,CULL_FACE_MODE: null
	,FRONT_FACE: null
	,DEPTH_RANGE: null
	,DEPTH_WRITEMASK: null
	,DEPTH_CLEAR_VALUE: null
	,DEPTH_FUNC: null
	,STENCIL_CLEAR_VALUE: null
	,STENCIL_FUNC: null
	,STENCIL_FAIL: null
	,STENCIL_PASS_DEPTH_FAIL: null
	,STENCIL_PASS_DEPTH_PASS: null
	,STENCIL_REF: null
	,STENCIL_VALUE_MASK: null
	,STENCIL_WRITEMASK: null
	,STENCIL_BACK_FUNC: null
	,STENCIL_BACK_FAIL: null
	,STENCIL_BACK_PASS_DEPTH_FAIL: null
	,STENCIL_BACK_PASS_DEPTH_PASS: null
	,STENCIL_BACK_REF: null
	,STENCIL_BACK_VALUE_MASK: null
	,STENCIL_BACK_WRITEMASK: null
	,VIEWPORT: null
	,SCISSOR_BOX: null
	,COLOR_CLEAR_VALUE: null
	,COLOR_WRITEMASK: null
	,UNPACK_ALIGNMENT: null
	,PACK_ALIGNMENT: null
	,MAX_TEXTURE_SIZE: null
	,MAX_VIEWPORT_DIMS: null
	,SUBPIXEL_BITS: null
	,RED_BITS: null
	,GREEN_BITS: null
	,BLUE_BITS: null
	,ALPHA_BITS: null
	,DEPTH_BITS: null
	,STENCIL_BITS: null
	,POLYGON_OFFSET_UNITS: null
	,POLYGON_OFFSET_FACTOR: null
	,TEXTURE_BINDING_2D: null
	,SAMPLE_BUFFERS: null
	,SAMPLES: null
	,SAMPLE_COVERAGE_VALUE: null
	,SAMPLE_COVERAGE_INVERT: null
	,COMPRESSED_TEXTURE_FORMATS: null
	,DONT_CARE: null
	,FASTEST: null
	,NICEST: null
	,GENERATE_MIPMAP_HINT: null
	,BYTE: null
	,UNSIGNED_BYTE: null
	,SHORT: null
	,UNSIGNED_SHORT: null
	,INT: null
	,UNSIGNED_INT: null
	,FLOAT: null
	,DEPTH_COMPONENT: null
	,ALPHA: null
	,RGB: null
	,RGBA: null
	,LUMINANCE: null
	,LUMINANCE_ALPHA: null
	,UNSIGNED_SHORT_4_4_4_4: null
	,UNSIGNED_SHORT_5_5_5_1: null
	,UNSIGNED_SHORT_5_6_5: null
	,FRAGMENT_SHADER: null
	,VERTEX_SHADER: null
	,MAX_VERTEX_ATTRIBS: null
	,MAX_VERTEX_UNIFORM_VECTORS: null
	,MAX_VARYING_VECTORS: null
	,MAX_COMBINED_TEXTURE_IMAGE_UNITS: null
	,MAX_VERTEX_TEXTURE_IMAGE_UNITS: null
	,MAX_TEXTURE_IMAGE_UNITS: null
	,MAX_FRAGMENT_UNIFORM_VECTORS: null
	,SHADER_TYPE: null
	,DELETE_STATUS: null
	,LINK_STATUS: null
	,VALIDATE_STATUS: null
	,ATTACHED_SHADERS: null
	,ACTIVE_UNIFORMS: null
	,ACTIVE_ATTRIBUTES: null
	,SHADING_LANGUAGE_VERSION: null
	,CURRENT_PROGRAM: null
	,NEVER: null
	,LESS: null
	,EQUAL: null
	,LEQUAL: null
	,GREATER: null
	,NOTEQUAL: null
	,GEQUAL: null
	,ALWAYS: null
	,KEEP: null
	,REPLACE: null
	,INCR: null
	,DECR: null
	,INVERT: null
	,INCR_WRAP: null
	,DECR_WRAP: null
	,VENDOR: null
	,RENDERER: null
	,VERSION: null
	,NEAREST: null
	,LINEAR: null
	,NEAREST_MIPMAP_NEAREST: null
	,LINEAR_MIPMAP_NEAREST: null
	,NEAREST_MIPMAP_LINEAR: null
	,LINEAR_MIPMAP_LINEAR: null
	,TEXTURE_MAG_FILTER: null
	,TEXTURE_MIN_FILTER: null
	,TEXTURE_WRAP_S: null
	,TEXTURE_WRAP_T: null
	,TEXTURE_2D: null
	,TEXTURE: null
	,TEXTURE_CUBE_MAP: null
	,TEXTURE_BINDING_CUBE_MAP: null
	,TEXTURE_CUBE_MAP_POSITIVE_X: null
	,TEXTURE_CUBE_MAP_NEGATIVE_X: null
	,TEXTURE_CUBE_MAP_POSITIVE_Y: null
	,TEXTURE_CUBE_MAP_NEGATIVE_Y: null
	,TEXTURE_CUBE_MAP_POSITIVE_Z: null
	,TEXTURE_CUBE_MAP_NEGATIVE_Z: null
	,MAX_CUBE_MAP_TEXTURE_SIZE: null
	,TEXTURE0: null
	,TEXTURE1: null
	,TEXTURE2: null
	,TEXTURE3: null
	,TEXTURE4: null
	,TEXTURE5: null
	,TEXTURE6: null
	,TEXTURE7: null
	,TEXTURE8: null
	,TEXTURE9: null
	,TEXTURE10: null
	,TEXTURE11: null
	,TEXTURE12: null
	,TEXTURE13: null
	,TEXTURE14: null
	,TEXTURE15: null
	,TEXTURE16: null
	,TEXTURE17: null
	,TEXTURE18: null
	,TEXTURE19: null
	,TEXTURE20: null
	,TEXTURE21: null
	,TEXTURE22: null
	,TEXTURE23: null
	,TEXTURE24: null
	,TEXTURE25: null
	,TEXTURE26: null
	,TEXTURE27: null
	,TEXTURE28: null
	,TEXTURE29: null
	,TEXTURE30: null
	,TEXTURE31: null
	,ACTIVE_TEXTURE: null
	,REPEAT: null
	,CLAMP_TO_EDGE: null
	,MIRRORED_REPEAT: null
	,FLOAT_VEC2: null
	,FLOAT_VEC3: null
	,FLOAT_VEC4: null
	,INT_VEC2: null
	,INT_VEC3: null
	,INT_VEC4: null
	,BOOL: null
	,BOOL_VEC2: null
	,BOOL_VEC3: null
	,BOOL_VEC4: null
	,FLOAT_MAT2: null
	,FLOAT_MAT3: null
	,FLOAT_MAT4: null
	,SAMPLER_2D: null
	,SAMPLER_CUBE: null
	,VERTEX_ATTRIB_ARRAY_ENABLED: null
	,VERTEX_ATTRIB_ARRAY_SIZE: null
	,VERTEX_ATTRIB_ARRAY_STRIDE: null
	,VERTEX_ATTRIB_ARRAY_TYPE: null
	,VERTEX_ATTRIB_ARRAY_NORMALIZED: null
	,VERTEX_ATTRIB_ARRAY_POINTER: null
	,VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: null
	,VERTEX_PROGRAM_POINT_SIZE: null
	,POINT_SPRITE: null
	,COMPILE_STATUS: null
	,LOW_FLOAT: null
	,MEDIUM_FLOAT: null
	,HIGH_FLOAT: null
	,LOW_INT: null
	,MEDIUM_INT: null
	,HIGH_INT: null
	,FRAMEBUFFER: null
	,RENDERBUFFER: null
	,RGBA4: null
	,RGB5_A1: null
	,RGB565: null
	,DEPTH_COMPONENT16: null
	,STENCIL_INDEX: null
	,STENCIL_INDEX8: null
	,DEPTH_STENCIL: null
	,RENDERBUFFER_WIDTH: null
	,RENDERBUFFER_HEIGHT: null
	,RENDERBUFFER_INTERNAL_FORMAT: null
	,RENDERBUFFER_RED_SIZE: null
	,RENDERBUFFER_GREEN_SIZE: null
	,RENDERBUFFER_BLUE_SIZE: null
	,RENDERBUFFER_ALPHA_SIZE: null
	,RENDERBUFFER_DEPTH_SIZE: null
	,RENDERBUFFER_STENCIL_SIZE: null
	,FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: null
	,FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: null
	,FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: null
	,FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: null
	,COLOR_ATTACHMENT0: null
	,DEPTH_ATTACHMENT: null
	,STENCIL_ATTACHMENT: null
	,DEPTH_STENCIL_ATTACHMENT: null
	,NONE: null
	,FRAMEBUFFER_COMPLETE: null
	,FRAMEBUFFER_INCOMPLETE_ATTACHMENT: null
	,FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: null
	,FRAMEBUFFER_INCOMPLETE_DIMENSIONS: null
	,FRAMEBUFFER_UNSUPPORTED: null
	,FRAMEBUFFER_BINDING: null
	,RENDERBUFFER_BINDING: null
	,MAX_RENDERBUFFER_SIZE: null
	,INVALID_FRAMEBUFFER_OPERATION: null
	,UNPACK_FLIP_Y_WEBGL: null
	,UNPACK_PREMULTIPLY_ALPHA_WEBGL: null
	,CONTEXT_LOST_WEBGL: null
	,UNPACK_COLORSPACE_CONVERSION_WEBGL: null
	,BROWSER_DEFAULT_WEBGL: null
	,READ_BUFFER: null
	,UNPACK_ROW_LENGTH: null
	,UNPACK_SKIP_ROWS: null
	,UNPACK_SKIP_PIXELS: null
	,PACK_ROW_LENGTH: null
	,PACK_SKIP_ROWS: null
	,PACK_SKIP_PIXELS: null
	,TEXTURE_BINDING_3D: null
	,UNPACK_SKIP_IMAGES: null
	,UNPACK_IMAGE_HEIGHT: null
	,MAX_3D_TEXTURE_SIZE: null
	,MAX_ELEMENTS_VERTICES: null
	,MAX_ELEMENTS_INDICES: null
	,MAX_TEXTURE_LOD_BIAS: null
	,MAX_FRAGMENT_UNIFORM_COMPONENTS: null
	,MAX_VERTEX_UNIFORM_COMPONENTS: null
	,MAX_ARRAY_TEXTURE_LAYERS: null
	,MIN_PROGRAM_TEXEL_OFFSET: null
	,MAX_PROGRAM_TEXEL_OFFSET: null
	,MAX_VARYING_COMPONENTS: null
	,FRAGMENT_SHADER_DERIVATIVE_HINT: null
	,RASTERIZER_DISCARD: null
	,VERTEX_ARRAY_BINDING: null
	,MAX_VERTEX_OUTPUT_COMPONENTS: null
	,MAX_FRAGMENT_INPUT_COMPONENTS: null
	,MAX_SERVER_WAIT_TIMEOUT: null
	,MAX_ELEMENT_INDEX: null
	,RED: null
	,RGB8: null
	,RGBA8: null
	,RGB10_A2: null
	,TEXTURE_3D: null
	,TEXTURE_WRAP_R: null
	,TEXTURE_MIN_LOD: null
	,TEXTURE_MAX_LOD: null
	,TEXTURE_BASE_LEVEL: null
	,TEXTURE_MAX_LEVEL: null
	,TEXTURE_COMPARE_MODE: null
	,TEXTURE_COMPARE_FUNC: null
	,SRGB: null
	,SRGB8: null
	,SRGB8_ALPHA8: null
	,COMPARE_REF_TO_TEXTURE: null
	,RGBA32F: null
	,RGB32F: null
	,RGBA16F: null
	,RGB16F: null
	,TEXTURE_2D_ARRAY: null
	,TEXTURE_BINDING_2D_ARRAY: null
	,R11F_G11F_B10F: null
	,RGB9_E5: null
	,RGBA32UI: null
	,RGB32UI: null
	,RGBA16UI: null
	,RGB16UI: null
	,RGBA8UI: null
	,RGB8UI: null
	,RGBA32I: null
	,RGB32I: null
	,RGBA16I: null
	,RGB16I: null
	,RGBA8I: null
	,RGB8I: null
	,RED_INTEGER: null
	,RGB_INTEGER: null
	,RGBA_INTEGER: null
	,R8: null
	,RG8: null
	,R16F: null
	,R32F: null
	,RG16F: null
	,RG32F: null
	,R8I: null
	,R8UI: null
	,R16I: null
	,R16UI: null
	,R32I: null
	,R32UI: null
	,RG8I: null
	,RG8UI: null
	,RG16I: null
	,RG16UI: null
	,RG32I: null
	,RG32UI: null
	,R8_SNORM: null
	,RG8_SNORM: null
	,RGB8_SNORM: null
	,RGBA8_SNORM: null
	,RGB10_A2UI: null
	,TEXTURE_IMMUTABLE_FORMAT: null
	,TEXTURE_IMMUTABLE_LEVELS: null
	,UNSIGNED_INT_2_10_10_10_REV: null
	,UNSIGNED_INT_10F_11F_11F_REV: null
	,UNSIGNED_INT_5_9_9_9_REV: null
	,FLOAT_32_UNSIGNED_INT_24_8_REV: null
	,UNSIGNED_INT_24_8: null
	,HALF_FLOAT: null
	,RG: null
	,RG_INTEGER: null
	,INT_2_10_10_10_REV: null
	,CURRENT_QUERY: null
	,QUERY_RESULT: null
	,QUERY_RESULT_AVAILABLE: null
	,ANY_SAMPLES_PASSED: null
	,ANY_SAMPLES_PASSED_CONSERVATIVE: null
	,MAX_DRAW_BUFFERS: null
	,DRAW_BUFFER0: null
	,DRAW_BUFFER1: null
	,DRAW_BUFFER2: null
	,DRAW_BUFFER3: null
	,DRAW_BUFFER4: null
	,DRAW_BUFFER5: null
	,DRAW_BUFFER6: null
	,DRAW_BUFFER7: null
	,DRAW_BUFFER8: null
	,DRAW_BUFFER9: null
	,DRAW_BUFFER10: null
	,DRAW_BUFFER11: null
	,DRAW_BUFFER12: null
	,DRAW_BUFFER13: null
	,DRAW_BUFFER14: null
	,DRAW_BUFFER15: null
	,MAX_COLOR_ATTACHMENTS: null
	,COLOR_ATTACHMENT1: null
	,COLOR_ATTACHMENT2: null
	,COLOR_ATTACHMENT3: null
	,COLOR_ATTACHMENT4: null
	,COLOR_ATTACHMENT5: null
	,COLOR_ATTACHMENT6: null
	,COLOR_ATTACHMENT7: null
	,COLOR_ATTACHMENT8: null
	,COLOR_ATTACHMENT9: null
	,COLOR_ATTACHMENT10: null
	,COLOR_ATTACHMENT11: null
	,COLOR_ATTACHMENT12: null
	,COLOR_ATTACHMENT13: null
	,COLOR_ATTACHMENT14: null
	,COLOR_ATTACHMENT15: null
	,SAMPLER_3D: null
	,SAMPLER_2D_SHADOW: null
	,SAMPLER_2D_ARRAY: null
	,SAMPLER_2D_ARRAY_SHADOW: null
	,SAMPLER_CUBE_SHADOW: null
	,INT_SAMPLER_2D: null
	,INT_SAMPLER_3D: null
	,INT_SAMPLER_CUBE: null
	,INT_SAMPLER_2D_ARRAY: null
	,UNSIGNED_INT_SAMPLER_2D: null
	,UNSIGNED_INT_SAMPLER_3D: null
	,UNSIGNED_INT_SAMPLER_CUBE: null
	,UNSIGNED_INT_SAMPLER_2D_ARRAY: null
	,MAX_SAMPLES: null
	,SAMPLER_BINDING: null
	,PIXEL_PACK_BUFFER: null
	,PIXEL_UNPACK_BUFFER: null
	,PIXEL_PACK_BUFFER_BINDING: null
	,PIXEL_UNPACK_BUFFER_BINDING: null
	,COPY_READ_BUFFER: null
	,COPY_WRITE_BUFFER: null
	,COPY_READ_BUFFER_BINDING: null
	,COPY_WRITE_BUFFER_BINDING: null
	,FLOAT_MAT2x3: null
	,FLOAT_MAT2x4: null
	,FLOAT_MAT3x2: null
	,FLOAT_MAT3x4: null
	,FLOAT_MAT4x2: null
	,FLOAT_MAT4x3: null
	,UNSIGNED_INT_VEC2: null
	,UNSIGNED_INT_VEC3: null
	,UNSIGNED_INT_VEC4: null
	,UNSIGNED_NORMALIZED: null
	,SIGNED_NORMALIZED: null
	,VERTEX_ATTRIB_ARRAY_INTEGER: null
	,VERTEX_ATTRIB_ARRAY_DIVISOR: null
	,TRANSFORM_FEEDBACK_BUFFER_MODE: null
	,MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: null
	,TRANSFORM_FEEDBACK_VARYINGS: null
	,TRANSFORM_FEEDBACK_BUFFER_START: null
	,TRANSFORM_FEEDBACK_BUFFER_SIZE: null
	,TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: null
	,MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: null
	,MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: null
	,INTERLEAVED_ATTRIBS: null
	,SEPARATE_ATTRIBS: null
	,TRANSFORM_FEEDBACK_BUFFER: null
	,TRANSFORM_FEEDBACK_BUFFER_BINDING: null
	,TRANSFORM_FEEDBACK: null
	,TRANSFORM_FEEDBACK_PAUSED: null
	,TRANSFORM_FEEDBACK_ACTIVE: null
	,TRANSFORM_FEEDBACK_BINDING: null
	,FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: null
	,FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: null
	,FRAMEBUFFER_ATTACHMENT_RED_SIZE: null
	,FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: null
	,FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: null
	,FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: null
	,FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: null
	,FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: null
	,FRAMEBUFFER_DEFAULT: null
	,DEPTH24_STENCIL8: null
	,DRAW_FRAMEBUFFER_BINDING: null
	,READ_FRAMEBUFFER: null
	,DRAW_FRAMEBUFFER: null
	,READ_FRAMEBUFFER_BINDING: null
	,RENDERBUFFER_SAMPLES: null
	,FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: null
	,FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: null
	,UNIFORM_BUFFER: null
	,UNIFORM_BUFFER_BINDING: null
	,UNIFORM_BUFFER_START: null
	,UNIFORM_BUFFER_SIZE: null
	,MAX_VERTEX_UNIFORM_BLOCKS: null
	,MAX_FRAGMENT_UNIFORM_BLOCKS: null
	,MAX_COMBINED_UNIFORM_BLOCKS: null
	,MAX_UNIFORM_BUFFER_BINDINGS: null
	,MAX_UNIFORM_BLOCK_SIZE: null
	,MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: null
	,MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: null
	,UNIFORM_BUFFER_OFFSET_ALIGNMENT: null
	,ACTIVE_UNIFORM_BLOCKS: null
	,UNIFORM_TYPE: null
	,UNIFORM_SIZE: null
	,UNIFORM_BLOCK_INDEX: null
	,UNIFORM_OFFSET: null
	,UNIFORM_ARRAY_STRIDE: null
	,UNIFORM_MATRIX_STRIDE: null
	,UNIFORM_IS_ROW_MAJOR: null
	,UNIFORM_BLOCK_BINDING: null
	,UNIFORM_BLOCK_DATA_SIZE: null
	,UNIFORM_BLOCK_ACTIVE_UNIFORMS: null
	,UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: null
	,UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: null
	,UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: null
	,OBJECT_TYPE: null
	,SYNC_CONDITION: null
	,SYNC_STATUS: null
	,SYNC_FLAGS: null
	,SYNC_FENCE: null
	,SYNC_GPU_COMMANDS_COMPLETE: null
	,UNSIGNALED: null
	,SIGNALED: null
	,ALREADY_SIGNALED: null
	,TIMEOUT_EXPIRED: null
	,CONDITION_SATISFIED: null
	,WAIT_FAILED: null
	,SYNC_FLUSH_COMMANDS_BIT: null
	,COLOR: null
	,DEPTH: null
	,STENCIL: null
	,MIN: null
	,MAX: null
	,DEPTH_COMPONENT24: null
	,STREAM_READ: null
	,STREAM_COPY: null
	,STATIC_READ: null
	,STATIC_COPY: null
	,DYNAMIC_READ: null
	,DYNAMIC_COPY: null
	,DEPTH_COMPONENT32F: null
	,DEPTH32F_STENCIL8: null
	,INVALID_INDEX: null
	,TIMEOUT_IGNORED: null
	,MAX_CLIENT_WAIT_TIMEOUT_WEBGL: null
	,type: null
	,version: null
	,__context: null
	,__contextLost: null
	,activeTexture: function(texture) {
		this.__context.activeTexture(texture);
	}
	,attachShader: function(program,shader) {
		this.__context.attachShader(program,shader);
	}
	,beginQuery: function(target,query) {
		this.__context.beginQuery(target,query);
	}
	,beginTransformFeedback: function(primitiveNode) {
		this.__context.beginTransformFeedback(primitiveNode);
	}
	,bindAttribLocation: function(program,index,name) {
		this.__context.bindAttribLocation(program,index,name);
	}
	,bindBuffer: function(target,buffer) {
		this.__context.bindBuffer(target,buffer);
	}
	,bindBufferBase: function(target,index,buffer) {
		this.__context.bindBufferBase(target,index,buffer);
	}
	,bindBufferRange: function(target,index,buffer,offset,size) {
		this.__context.bindBufferRange(target,index,buffer,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(size));
	}
	,bindFramebuffer: function(target,framebuffer) {
		this.__context.bindFramebuffer(target,framebuffer);
	}
	,bindRenderbuffer: function(target,renderbuffer) {
		this.__context.bindRenderbuffer(target,renderbuffer);
	}
	,bindSampler: function(unit,sampler) {
		this.__context.bindSampler(unit,sampler);
	}
	,bindTexture: function(target,texture) {
		this.__context.bindTexture(target,texture);
	}
	,bindTransformFeedback: function(target,transformFeedback) {
		this.__context.bindTransformFeedback(target,transformFeedback);
	}
	,bindVertexArray: function(vertexArray) {
		this.__context.bindVertexArray(vertexArray);
	}
	,blendColor: function(red,green,blue,alpha) {
		this.__context.blendColor(red,green,blue,alpha);
	}
	,blendEquation: function(mode) {
		this.__context.blendEquation(mode);
	}
	,blendEquationSeparate: function(modeRGB,modeAlpha) {
		this.__context.blendEquationSeparate(modeRGB,modeAlpha);
	}
	,blendFunc: function(sfactor,dfactor) {
		this.__context.blendFunc(sfactor,dfactor);
	}
	,blendFuncSeparate: function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
		this.__context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
	}
	,blitFramebuffer: function(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
		this.__context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
	}
	,bufferData: function(target,size,data,usage) {
		this.__context.bufferData(target,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,size),usage);
	}
	,bufferDataWEBGL: function(target,srcData,usage,srcOffset,length) {
		if(srcOffset != null) {
			this.__context.bufferData(target,srcData,usage,srcOffset,length);
		} else {
			this.__context.bufferData(target,srcData,usage);
		}
	}
	,bufferSubData: function(target,dstByteOffset,size,data) {
		this.__context.bufferSubData(target,dstByteOffset,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,size));
	}
	,bufferSubDataWEBGL: function(target,dstByteOffset,srcData,srcOffset,length) {
		if(srcOffset != null) {
			this.__context.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
		} else {
			this.__context.bufferSubData(target,dstByteOffset,srcData);
		}
	}
	,checkFramebufferStatus: function(target) {
		return this.__context.checkFramebufferStatus(target);
	}
	,clear: function(mask) {
		this.__context.clear(mask);
	}
	,clearBufferfi: function(buffer,drawbuffer,depth,stencil) {
		this.__context.clearBufferfi(buffer,drawbuffer,depth,stencil);
	}
	,clearBufferfv: function(buffer,drawbuffer,values) {
		this.__context.clearBufferfv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(values));
	}
	,clearBufferfvWEBGL: function(buffer,drawbuffer,values,srcOffset) {
		this.__context.clearBufferfv(buffer,drawbuffer,values,srcOffset);
	}
	,clearBufferiv: function(buffer,drawbuffer,values) {
		this.__context.clearBufferiv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(values));
	}
	,clearBufferivWEBGL: function(buffer,drawbuffer,values,srcOffset) {
		this.__context.clearBufferiv(buffer,drawbuffer,values,srcOffset);
	}
	,clearBufferuiv: function(buffer,drawbuffer,values) {
		this.__context.clearBufferuiv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(values));
	}
	,clearBufferuivWEBGL: function(buffer,drawbuffer,values,srcOffset) {
		this.__context.clearBufferuiv(buffer,drawbuffer,values,srcOffset);
	}
	,clearColor: function(red,green,blue,alpha) {
		this.__context.clearColor(red,green,blue,alpha);
	}
	,clearDepth: function(depth) {
		this.__context.clearDepth(depth);
	}
	,clearDepthf: function(depth) {
		this.__context.clearDepth(depth);
	}
	,clearStencil: function(s) {
		this.__context.clearStencil(s);
	}
	,clientWaitSync: function(sync,flags,timeout) {
		return this.__context.clientWaitSync(sync,flags,timeout);
	}
	,copyBufferSubData: function(readTarget,writeTarget,readOffset,writeOffset,size) {
	}
	,colorMask: function(red,green,blue,alpha) {
		this.__context.colorMask(red,green,blue,alpha);
	}
	,compileShader: function(shader) {
		this.__context.compileShader(shader);
	}
	,compressedTexImage2D: function(target,level,internalformat,width,height,border,imageSize,data) {
		this.__context.compressedTexImage2D(target,level,internalformat,width,height,border,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
	}
	,compressedTexImage2DWEBGL: function(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
		if(srcOffset != null) {
			this.__context.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
		} else {
			this.__context.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
		}
	}
	,compressedTexImage3D: function(target,level,internalformat,width,height,depth,border,imageSize,data) {
		this.__context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
	}
	,compressedTexImage3DWEBGL: function(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride) {
		this.__context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride);
	}
	,compressedTexSubImage2D: function(target,level,xoffset,yoffset,width,height,format,imageSize,data) {
		this.__context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
	}
	,compressedTexSubImage2DWEBGL: function(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
		if(srcOffset != null) {
			this.__context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
		} else {
			this.__context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
		}
	}
	,compressedTexSubImage3D: function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data) {
		this.__context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
	}
	,compressedTexSubImage3DWEBGL: function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride) {
		this.__context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride);
	}
	,copySubBufferData: function(readTarget,writeTarget,readOffset,writeOffset,size) {
		this.__context.copySubBufferData(readTarget,writeTarget,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(readOffset)),lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(writeOffset)),size);
	}
	,copyTexImage2D: function(target,level,internalformat,x,y,width,height,border) {
		this.__context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
	}
	,copyTexSubImage2D: function(target,level,xoffset,yoffset,x,y,width,height) {
		this.__context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
	}
	,copyTexSubImage3D: function(target,level,xoffset,yoffset,zoffset,x,y,width,height) {
		this.__context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
	}
	,createBuffer: function() {
		return this.__context.createBuffer();
	}
	,createFramebuffer: function() {
		return this.__context.createFramebuffer();
	}
	,createProgram: function() {
		return this.__context.createProgram();
	}
	,createQuery: function() {
		return this.__context.createQuery();
	}
	,createRenderbuffer: function() {
		return this.__context.createRenderbuffer();
	}
	,createSampler: function() {
		return this.__context.createSampler();
	}
	,createShader: function(type) {
		return this.__context.createShader(type);
	}
	,createTexture: function() {
		return this.__context.createTexture();
	}
	,createTransformFeedback: function() {
		return this.__context.createTransformFeedback();
	}
	,createVertexArray: function() {
		return this.__context.createVertexArray();
	}
	,cullFace: function(mode) {
		this.__context.cullFace(mode);
	}
	,deleteBuffer: function(buffer) {
		this.__context.deleteBuffer(buffer);
	}
	,deleteFramebuffer: function(framebuffer) {
		this.__context.deleteFramebuffer(framebuffer);
	}
	,deleteProgram: function(program) {
		this.__context.deleteProgram(program);
	}
	,deleteQuery: function(query) {
		this.__context.deleteQuery(query);
	}
	,deleteRenderbuffer: function(renderbuffer) {
		this.__context.deleteRenderbuffer(renderbuffer);
	}
	,deleteSampler: function(sampler) {
		this.__context.deleteSampler(sampler);
	}
	,deleteShader: function(shader) {
		this.__context.deleteShader(shader);
	}
	,deleteSync: function(sync) {
		this.__context.deleteSync(sync);
	}
	,deleteTexture: function(texture) {
		this.__context.deleteTexture(texture);
	}
	,deleteTransformFeedback: function(transformFeedback) {
		this.__context.deleteTransformFeedback(transformFeedback);
	}
	,deleteVertexArray: function(vertexArray) {
		this.__context.deleteVertexArray(vertexArray);
	}
	,depthFunc: function(func) {
		this.__context.depthFunc(func);
	}
	,depthMask: function(flag) {
		this.__context.depthMask(flag);
	}
	,depthRange: function(zNear,zFar) {
		this.__context.depthRange(zNear,zFar);
	}
	,depthRangef: function(zNear,zFar) {
		this.__context.depthRange(zNear,zFar);
	}
	,detachShader: function(program,shader) {
		this.__context.detachShader(program,shader);
	}
	,disable: function(cap) {
		this.__context.disable(cap);
	}
	,disableVertexAttribArray: function(index) {
		this.__context.disableVertexAttribArray(index);
	}
	,drawArrays: function(mode,first,count) {
		this.__context.drawArrays(mode,first,count);
	}
	,drawArraysInstanced: function(mode,first,count,instanceCount) {
		this.__context.drawArraysInstanced(mode,first,count,instanceCount);
	}
	,drawBuffers: function(buffers) {
		this.__context.drawBuffers(buffers);
	}
	,drawElements: function(mode,count,type,offset) {
		this.__context.drawElements(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
	}
	,drawElementsInstanced: function(mode,count,type,offset,instanceCount) {
		this.__context.drawElementsInstanced(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),instanceCount);
	}
	,drawRangeElements: function(mode,start,end,count,type,offset) {
		this.__context.drawRangeElements(mode,start,end,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)));
	}
	,enable: function(cap) {
		this.__context.enable(cap);
	}
	,enableVertexAttribArray: function(index) {
		this.__context.enableVertexAttribArray(index);
	}
	,endQuery: function(target) {
		this.__context.endQuery(target);
	}
	,endTransformFeedback: function() {
		this.__context.endTransformFeedback();
	}
	,fenceSync: function(condition,flags) {
		return this.__context.fenceSync(condition,flags);
	}
	,finish: function() {
		this.__context.finish();
	}
	,flush: function() {
		this.__context.flush();
	}
	,framebufferRenderbuffer: function(target,attachment,renderbuffertarget,renderbuffer) {
		this.__context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
	}
	,framebufferTexture2D: function(target,attachment,textarget,texture,level) {
		this.__context.framebufferTexture2D(target,attachment,textarget,texture,level);
	}
	,framebufferTextureLayer: function(target,attachment,texture,level,layer) {
		this.__context.framebufferTextureLayer(target,attachment,texture,level,layer);
	}
	,frontFace: function(mode) {
		this.__context.frontFace(mode);
	}
	,generateMipmap: function(target) {
		this.__context.generateMipmap(target);
	}
	,getActiveAttrib: function(program,index) {
		return this.__context.getActiveAttrib(program,index);
	}
	,getActiveUniform: function(program,index) {
		return this.__context.getActiveUniform(program,index);
	}
	,getActiveUniformBlocki: function(program,uniformBlockIndex,pname) {
		return this.__context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
	}
	,getActiveUniformBlockiv: function(program,uniformBlockIndex,pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
		view[0] = this.__context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
	}
	,getActiveUniformBlockName: function(program,uniformBlockIndex) {
		return this.__context.getActiveUniformBlockName(program,uniformBlockIndex);
	}
	,getActiveUniformBlockParameter: function(program,uniformBlockIndex,pname) {
		return this.__context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
	}
	,getActiveUniforms: function(program,uniformIndices,pname) {
		return this.__context.getActiveUniforms(program,uniformIndices,pname);
	}
	,getActiveUniformsiv: function(program,uniformIndices,pname,params) {
	}
	,getAttachedShaders: function(program) {
		return this.__context.getAttachedShaders(program);
	}
	,getAttribLocation: function(program,name) {
		return this.__context.getAttribLocation(program,name);
	}
	,getBoolean: function(pname) {
		return this.__context.getParameter(pname);
	}
	,getBooleanv: function(pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt8Array(params);
		var result = this.__context.getParameter(pname);
		if((result instanceof Array) && result.__enum__ == null) {
			var data = result;
			var _g1 = 0;
			var _g = data.length;
			while(_g1 < _g) {
				var i = _g1++;
				view[i] = data[i] ? 1 : 0;
			}
		} else {
			view[0] = js_Boot.__cast(result , Bool) ? 1 : 0;
		}
	}
	,getBufferParameter: function(target,pname) {
		return this.__context.getBufferParameter(target,pname);
	}
	,getBufferParameteri: function(target,pname) {
		return this.__context.getBufferParameter(target,pname);
	}
	,getBufferParameteri64v: function(target,pname,params) {
	}
	,getBufferParameteriv: function(target,pname,data) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(data);
		view[0] = this.__context.getBufferParameter(target,pname);
	}
	,getBufferPointerv: function(target,pname) {
		return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
	}
	,getBufferSubData: function(target,offset,size,data) {
		this.__context.getBufferSubData(target,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,size));
	}
	,getBufferSubDataWEBGL: function(target,srcByteOffset,dstData,srcOffset,length) {
		if(srcOffset != null) {
			this.__context.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
		} else {
			this.__context.getBufferSubData(target,srcByteOffset,dstData);
		}
	}
	,getContextAttributes: function() {
		return this.__context.getContextAttributes();
	}
	,getError: function() {
		return this.__context.getError();
	}
	,getExtension: function(name) {
		return this.__context.getExtension(name);
	}
	,getFloat: function(pname) {
		return this.__context.getParameter(pname);
	}
	,getFloatv: function(pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(params);
		var result = this.__context.getParameter(pname);
		if(js_Boot.__instanceof(result,ArrayBufferView)) {
			var data = result;
			var _g1 = 0;
			var _g = data.length;
			while(_g1 < _g) {
				var i = _g1++;
				view[i] = data[i];
			}
		} else {
			view[0] = js_Boot.__cast(result , Float);
		}
	}
	,getFragDataLocation: function(program,name) {
		return this.__context.getFragDataLocation(program,name);
	}
	,getFramebufferAttachmentParameter: function(target,attachment,pname) {
		return this.__context.getFramebufferAttachmentParameter(target,attachment,pname);
	}
	,getFramebufferAttachmentParameteri: function(target,attachment,pname) {
		return this.__context.getFramebufferAttachmentParameter(target,attachment,pname);
	}
	,getFramebufferAttachmentParameteriv: function(target,attachment,pname,params) {
		var value = this.__context.getFramebufferAttachmentParameter(target,attachment,pname);
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
		view[0] = value;
	}
	,getIndexedParameter: function(target,index) {
		return this.__context.getIndexedParameter(target,index);
	}
	,getInteger: function(pname) {
		return this.__context.getParameter(pname);
	}
	,getInteger64: function(pname) {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,getInteger64i: function(pname) {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,getInteger64i_v: function(pname,index,params) {
	}
	,getInteger64v: function(pname,params) {
	}
	,getIntegeri: function(pname) {
		return 0;
	}
	,getIntegeri_v: function(pname,index,params) {
	}
	,getIntegerv: function(pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
		var result = this.__context.getParameter(pname);
		if(js_Boot.__instanceof(result,ArrayBufferView)) {
			var data = result;
			var _g1 = 0;
			var _g = data.length;
			while(_g1 < _g) {
				var i = _g1++;
				view[i] = data[i];
			}
		} else {
			view[0] = js_Boot.__cast(result , Int);
		}
	}
	,getInternalformati: function(target,internalformat,pname) {
		return 0;
	}
	,getInternalformativ: function(target,internalformat,pname,bufSize,params) {
	}
	,getInternalformatParameter: function(target,internalformat,pname) {
		return this.__context.getInternalformatParameter(target,internalformat,pname);
	}
	,getParameter: function(pname) {
		return this.__context.getParameter(pname);
	}
	,getProgramBinary: function(program,binaryFormat) {
		return null;
	}
	,getProgrami: function(program,pname) {
		return this.__context.getProgramParameter(program,pname);
	}
	,getProgramiv: function(program,pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
		view[0] = this.__context.getProgramParameter(program,pname);
	}
	,getProgramInfoLog: function(program) {
		return this.__context.getProgramInfoLog(program);
	}
	,getProgramParameter: function(program,pname) {
		return this.__context.getProgramParameter(program,pname);
	}
	,getQuery: function(target,pname) {
		return this.__context.getQuery(target,pname);
	}
	,getQueryi: function(target,pname) {
		return 0;
	}
	,getQueryiv: function(target,pname,params) {
	}
	,getQueryObjectui: function(query,pname) {
		return 0;
	}
	,getQueryObjectuiv: function(query,pname,params) {
	}
	,getQueryParameter: function(query,pname) {
		return this.__context.getQueryParameter(query,pname);
	}
	,getRenderbufferParameter: function(target,pname) {
		return this.__context.getRenderbufferParameter(target,pname);
	}
	,getRenderbufferParameteri: function(target,pname) {
		return this.__context.getRenderbufferParameter(target,pname);
	}
	,getRenderbufferParameteriv: function(target,pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
		view[0] = this.__context.getRenderbufferParameter(target,pname);
	}
	,getSamplerParameter: function(sampler,pname) {
		return this.__context.getSamplerParameter(sampler,pname);
	}
	,getSamplerParameterf: function(sampler,pname) {
		return 0;
	}
	,getSamplerParameterfv: function(sampler,pname,params) {
	}
	,getSamplerParameteri: function(sampler,pname) {
		return 0;
	}
	,getSamplerParameteriv: function(sampler,pname,params) {
	}
	,getShaderi: function(shader,pname) {
		return this.__context.getShaderParameter(shader,pname);
	}
	,getShaderiv: function(shader,pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
		view[0] = this.__context.getShaderParameter(shader,pname);
	}
	,getShaderInfoLog: function(shader) {
		return this.__context.getShaderInfoLog(shader);
	}
	,getShaderParameter: function(shader,pname) {
		return this.__context.getShaderParameter(shader,pname);
	}
	,getShaderPrecisionFormat: function(shadertype,precisiontype) {
		return this.__context.getShaderPrecisionFormat(shadertype,precisiontype);
	}
	,getShaderSource: function(shader) {
		return this.__context.getShaderSource(shader);
	}
	,getString: function(pname) {
		if(pname == 7939) {
			return this.__context.getSupportedExtensions().join(" ");
		} else {
			return this.__context.getParameter(pname);
		}
	}
	,getStringi: function(name,index) {
		return null;
	}
	,getSupportedExtensions: function() {
		return this.__context.getSupportedExtensions();
	}
	,getSyncParameter: function(sync,pname) {
		return this.__context.getSyncParameter(sync,pname);
	}
	,getSyncParameteri: function(sync,pname) {
		return 0;
	}
	,getSyncParameteriv: function(sync,pname,params) {
	}
	,getTexParameter: function(target,pname) {
		return this.__context.getTexParameter(target,pname);
	}
	,getTexParameterf: function(target,pname) {
		return this.__context.getTexParameter(target,pname);
	}
	,getTexParameterfv: function(target,pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(params);
		view[0] = this.__context.getTexParameter(target,pname);
	}
	,getTexParameteri: function(target,pname) {
		return this.__context.getTexParameter(target,pname);
	}
	,getTexParameteriv: function(target,pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
		view[0] = this.__context.getTexParameter(target,pname);
	}
	,getTransformFeedbackVarying: function(program,index) {
		return this.__context.getTransformFeedbackVarying(program,index);
	}
	,getUniform: function(program,location) {
		return this.__context.getUniform(program,location);
	}
	,getUniformf: function(program,location) {
		return this.__context.getUniform(program,location);
	}
	,getUniformfv: function(program,location,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(params);
		view[0] = this.__context.getUniform(program,location);
	}
	,getUniformi: function(program,location) {
		return this.__context.getUniform(program,location);
	}
	,getUniformiv: function(program,location,params) {
		var value = this.__context.getUniform(program,location);
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
		view[0] = value;
	}
	,getUniformui: function(program,location) {
		return 0;
	}
	,getUniformuiv: function(program,location,params) {
	}
	,getUniformBlockIndex: function(program,uniformBlockName) {
		return this.__context.getUniformBlockIndex(program,uniformBlockName);
	}
	,getUniformIndices: function(program,uniformNames) {
		return this.__context.getUniformIndices(program,uniformNames);
	}
	,getUniformLocation: function(program,name) {
		return this.__context.getUniformLocation(program,name);
	}
	,getVertexAttrib: function(index,pname) {
		return this.__context.getVertexAttrib(index,pname);
	}
	,getVertexAttribf: function(index,pname) {
		return 0;
	}
	,getVertexAttribfv: function(index,pname,params) {
	}
	,getVertexAttribi: function(index,pname) {
		return 0;
	}
	,getVertexAttribIi: function(index,pname) {
		return 0;
	}
	,getVertexAttribIiv: function(index,pname,params) {
	}
	,getVertexAttribIui: function(index,pname) {
		return 0;
	}
	,getVertexAttribIuiv: function(index,pname,params) {
	}
	,getVertexAttribiv: function(index,pname,params) {
	}
	,getVertexAttribOffset: function(index,pname) {
		return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(this.__context.getVertexAttribOffset(index,pname));
	}
	,getVertexAttribPointerv: function(index,pname) {
		return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(this.__context.getVertexAttribOffset(index,pname));
	}
	,hint: function(target,mode) {
		this.__context.hint(target,mode);
	}
	,invalidateFramebuffer: function(target,attachments) {
		this.__context.invalidateFramebuffer(target,attachments);
	}
	,invalidateSubFramebuffer: function(target,attachments,x,y,width,height) {
		this.__context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
	}
	,isBuffer: function(buffer) {
		return this.__context.isBuffer(buffer);
	}
	,isContextLost: function() {
		if(!this.__contextLost) {
			return this.__context.isContextLost();
		} else {
			return true;
		}
	}
	,isEnabled: function(cap) {
		return this.__context.isEnabled(cap);
	}
	,isFramebuffer: function(framebuffer) {
		return this.__context.isFramebuffer(framebuffer);
	}
	,isProgram: function(program) {
		return this.__context.isProgram(program);
	}
	,isQuery: function(query) {
		return this.__context.isQuery(query);
	}
	,isRenderbuffer: function(renderbuffer) {
		return this.__context.isRenderbuffer(renderbuffer);
	}
	,isSampler: function(sampler) {
		return this.__context.isSampler(sampler);
	}
	,isShader: function(shader) {
		return this.__context.isShader(shader);
	}
	,isSync: function(sync) {
		return this.__context.isSync(sync);
	}
	,isTexture: function(texture) {
		return this.__context.isTexture(texture);
	}
	,isTransformFeedback: function(transformFeedback) {
		return this.__context.isTransformFeedback(transformFeedback);
	}
	,isVertexArray: function(vertexArray) {
		return this.__context.isVertexArray(vertexArray);
	}
	,lineWidth: function(width) {
		this.__context.lineWidth(width);
	}
	,linkProgram: function(program) {
		this.__context.linkProgram(program);
	}
	,mapBufferRange: function(target,offset,length,access) {
		return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
	}
	,pauseTransformFeedback: function() {
		this.__context.pauseTransformFeedback();
	}
	,pixelStorei: function(pname,param) {
		this.__context.pixelStorei(pname,param);
	}
	,polygonOffset: function(factor,units) {
		this.__context.polygonOffset(factor,units);
	}
	,programBinary: function(program,binaryFormat,binary,length) {
	}
	,programParameteri: function(program,pname,value) {
	}
	,readBuffer: function(src) {
		this.__context.readBuffer(src);
	}
	,readPixels: function(x,y,width,height,format,type,pixels) {
		this.__context.readPixels(x,y,width,height,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(pixels));
	}
	,readPixelsWEBGL: function(x,y,width,height,format,type,pixels,dstOffset) {
		if(dstOffset != null) {
			this.__context.readPixels(x,y,width,height,format,type,pixels,dstOffset);
		} else {
			this.__context.readPixels(x,y,width,height,format,type,pixels);
		}
	}
	,releaseShaderCompiler: function() {
	}
	,renderbufferStorage: function(target,internalformat,width,height) {
		this.__context.renderbufferStorage(target,internalformat,width,height);
	}
	,renderbufferStorageMultisample: function(target,samples,internalFormat,width,height) {
		this.__context.renderbufferStorageMultisample(target,samples,internalFormat,width,height);
	}
	,resumeTransformFeedback: function() {
		this.__context.resumeTransformFeedback();
	}
	,sampleCoverage: function(value,invert) {
		this.__context.sampleCoverage(value,invert);
	}
	,samplerParameterf: function(sampler,pname,param) {
		this.__context.samplerParameterf(sampler,pname,param);
	}
	,samplerParameteri: function(sampler,pname,param) {
		this.__context.samplerParameteri(sampler,pname,param);
	}
	,scissor: function(x,y,width,height) {
		this.__context.scissor(x,y,width,height);
	}
	,shaderBinary: function(shaders,binaryformat,binary,length) {
	}
	,shaderSource: function(shader,source) {
		this.__context.shaderSource(shader,source);
	}
	,stencilFunc: function(func,ref,mask) {
		this.__context.stencilFunc(func,ref,mask);
	}
	,stencilFuncSeparate: function(face,func,ref,mask) {
		this.__context.stencilFuncSeparate(face,func,ref,mask);
	}
	,stencilMask: function(mask) {
		this.__context.stencilMask(mask);
	}
	,stencilMaskSeparate: function(face,mask) {
		this.__context.stencilMaskSeparate(face,mask);
	}
	,stencilOp: function(fail,zfail,zpass) {
		this.__context.stencilOp(fail,zfail,zpass);
	}
	,stencilOpSeparate: function(face,fail,zfail,zpass) {
		this.__context.stencilOpSeparate(face,fail,zfail,zpass);
	}
	,texImage2D: function(target,level,internalformat,width,height,border,format,type,data) {
		this.__context.texImage2D(target,level,internalformat,width,height,border,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
	}
	,texImage2DWEBGL: function(target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
		if(srcOffset != null) {
			this.__context.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
		} else if(format != null) {
			this.__context.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
		} else {
			this.__context.texImage2D(target,level,internalformat,width,height,border);
		}
	}
	,texImage3D: function(target,level,internalformat,width,height,depth,border,format,type,data) {
		this.__context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
	}
	,texImage3DWEBGL: function(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset) {
		this.__context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset);
	}
	,texStorage2D: function(target,level,internalformat,width,height) {
		this.__context.texStorage2D(target,level,internalformat,width,height);
	}
	,texStorage3D: function(target,level,internalformat,width,height,depth) {
		this.__context.texStorage3D(target,level,internalformat,width,height,depth);
	}
	,texParameterf: function(target,pname,param) {
		this.__context.texParameterf(target,pname,param);
	}
	,texParameteri: function(target,pname,param) {
		this.__context.texParameteri(target,pname,param);
	}
	,texSubImage2D: function(target,level,xoffset,yoffset,width,height,format,type,data) {
		this.__context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
	}
	,texSubImage2DWEBGL: function(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
		if(srcOffset != null) {
			this.__context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
		} else if(type != null) {
			this.__context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
		} else {
			this.__context.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
		}
	}
	,texSubImage3D: function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,data) {
		this.__context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
	}
	,texSubImage3DWEBGL: function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset) {
		this.__context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset);
	}
	,transformFeedbackVaryings: function(program,varyings,bufferMode) {
		this.__context.transformFeedbackVaryings(program,varyings,bufferMode);
	}
	,uniform1f: function(location,v0) {
		this.__context.uniform1f(location,v0);
	}
	,uniform1fv: function(location,count,v) {
		this.__context.uniform1fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4));
	}
	,uniform1fvWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniform1fv(location,data,srcOffset,srcLength);
		} else {
			this.__context.uniform1fv(location,data);
		}
	}
	,uniform1i: function(location,v0) {
		this.__context.uniform1i(location,v0);
	}
	,uniform1iv: function(location,count,v) {
		this.__context.uniform1iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4));
	}
	,uniform1ivWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniform1iv(location,data,srcOffset,srcLength);
		} else {
			this.__context.uniform1iv(location,data);
		}
	}
	,uniform1ui: function(location,v0) {
		this.__context.uniform1ui(location,v0);
		return;
	}
	,uniform1uiv: function(location,count,v) {
		this.__context.uniform1uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4));
	}
	,uniform1uivWEBGL: function(location,data,srcOffset,srcLength) {
		this.__context.uniform1uiv(location,data,srcOffset,srcLength);
	}
	,uniform2f: function(location,v0,v1) {
		this.__context.uniform2f(location,v0,v1);
	}
	,uniform2fv: function(location,count,v) {
		this.__context.uniform2fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 2));
	}
	,uniform2fvWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniform2fv(location,data,srcOffset,srcLength);
		} else {
			this.__context.uniform2fv(location,data);
		}
	}
	,uniform2i: function(location,x,y) {
		this.__context.uniform2i(location,x,y);
	}
	,uniform2iv: function(location,count,v) {
		this.__context.uniform2iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 2));
	}
	,uniform2ivWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniform2iv(location,data,srcOffset,srcLength);
		} else {
			this.__context.uniform2iv(location,data);
		}
	}
	,uniform2ui: function(location,v0,v1) {
		this.__context.uniform2ui(location,v0,v1);
	}
	,uniform2uiv: function(location,count,v) {
		this.__context.uniform2uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 2));
	}
	,uniform2uivWEBGL: function(location,data,srcOffset,srcLength) {
		this.__context.uniform2uiv(location,data,srcOffset,srcLength);
	}
	,uniform3f: function(location,v0,v1,v2) {
		this.__context.uniform3f(location,v0,v1,v2);
	}
	,uniform3fv: function(location,count,v) {
		this.__context.uniform3fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 3));
	}
	,uniform3fvWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniform3fv(location,data,srcOffset,srcLength);
		} else {
			this.__context.uniform3fv(location,data);
		}
	}
	,uniform3i: function(location,x,y,z) {
		this.__context.uniform3i(location,x,y,z);
	}
	,uniform3iv: function(location,count,v) {
		this.__context.uniform3iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 3));
	}
	,uniform3ivWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniform3iv(location,data,srcOffset,srcLength);
		} else {
			this.__context.uniform3iv(location,data);
		}
	}
	,uniform3ui: function(location,v0,v1,v2) {
		this.__context.uniform3ui(location,v0,v1,v2);
	}
	,uniform3uiv: function(location,count,v) {
		this.__context.uniform3uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 3));
	}
	,uniform3uivWEBGL: function(location,data,srcOffset,srcLength) {
		this.__context.uniform3uiv(location,data,srcOffset,srcLength);
	}
	,uniform4f: function(location,v0,v1,v2,v3) {
		this.__context.uniform4f(location,v0,v1,v2,v3);
	}
	,uniform4fv: function(location,count,v) {
		this.__context.uniform4fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 4));
	}
	,uniform4fvWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniform4fv(location,data,srcOffset,srcLength);
		} else {
			this.__context.uniform4fv(location,data);
		}
	}
	,uniform4i: function(location,v0,v1,v2,v3) {
		this.__context.uniform4i(location,v0,v1,v2,v3);
	}
	,uniform4iv: function(location,count,v) {
		this.__context.uniform4iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 4));
	}
	,uniform4ivWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniform4iv(location,data,srcOffset,srcLength);
		} else {
			this.__context.uniform4iv(location,data);
		}
	}
	,uniform4ui: function(location,v0,v1,v2,v3) {
		this.__context.uniform4ui(location,v0,v1,v2,v3);
	}
	,uniform4uiv: function(location,count,v) {
		this.__context.uniform4uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 4));
	}
	,uniform4uivWEBGL: function(location,data,srcOffset,srcLength) {
		this.__context.uniform4uiv(location,data,srcOffset,srcLength);
	}
	,uniformBlockBinding: function(program,uniformBlockIndex,uniformBlockBinding) {
		this.__context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
	}
	,uniformMatrix2fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 4));
	}
	,uniformMatrix2fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniformMatrix2fv(location,transpose,data,srcOffset,srcLength);
		} else {
			this.__context.uniformMatrix2fv(location,transpose,data);
		}
	}
	,uniformMatrix2x3fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix2x3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 6));
	}
	,uniformMatrix2x3fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		this.__context.uniformMatrix2x3fv(location,transpose,data,srcOffset,srcLength);
	}
	,uniformMatrix2x4fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix2x4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 8));
	}
	,uniformMatrix2x4fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		this.__context.uniformMatrix2x4fv(location,transpose,data,srcOffset,srcLength);
	}
	,uniformMatrix3fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 9));
	}
	,uniformMatrix3fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniformMatrix3fv(location,transpose,data,srcOffset,srcLength);
		} else {
			this.__context.uniformMatrix3fv(location,transpose,data);
		}
	}
	,uniformMatrix3x2fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix3x2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 6));
	}
	,uniformMatrix3x2fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		this.__context.uniformMatrix3x2fv(location,transpose,data,srcOffset,srcLength);
	}
	,uniformMatrix3x4fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix3x4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 12));
	}
	,uniformMatrix3x4fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		this.__context.uniformMatrix3x4fv(location,transpose,data,srcOffset,srcLength);
	}
	,uniformMatrix4fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 16));
	}
	,uniformMatrix4fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniformMatrix4fv(location,transpose,data,srcOffset,srcLength);
		} else {
			this.__context.uniformMatrix4fv(location,transpose,data);
		}
	}
	,uniformMatrix4x2fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix4x2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 8));
	}
	,uniformMatrix4x2fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniformMatrix4x2fv(location,transpose,data,srcOffset,srcLength);
		} else {
			this.__context.uniformMatrix4x2fv(location,transpose,data);
		}
	}
	,uniformMatrix4x3fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix4x3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 12));
	}
	,uniformMatrix4x3fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		this.__context.uniformMatrix4x3fv(location,transpose,data,srcOffset,srcLength);
	}
	,unmapBuffer: function(target) {
		return false;
	}
	,useProgram: function(program) {
		this.__context.useProgram(program);
	}
	,validateProgram: function(program) {
		this.__context.validateProgram(program);
	}
	,vertexAttrib1f: function(index,v0) {
		this.__context.vertexAttrib1f(index,v0);
	}
	,vertexAttrib1fv: function(index,v) {
		this.__context.vertexAttrib1fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
	}
	,vertexAttrib1fvWEBGL: function(index,v) {
		this.__context.vertexAttrib1fv(index,v);
	}
	,vertexAttrib2f: function(index,v0,v1) {
		this.__context.vertexAttrib2f(index,v0,v1);
	}
	,vertexAttrib2fv: function(index,v) {
		this.__context.vertexAttrib2fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
	}
	,vertexAttrib2fvWEBGL: function(index,v) {
		this.__context.vertexAttrib2fv(index,v);
	}
	,vertexAttrib3f: function(index,v0,v1,v2) {
		this.__context.vertexAttrib3f(index,v0,v1,v2);
	}
	,vertexAttrib3fv: function(index,v) {
		this.__context.vertexAttrib3fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
	}
	,vertexAttrib3fvWEBGL: function(index,v) {
		this.__context.vertexAttrib3fv(index,v);
	}
	,vertexAttrib4f: function(index,v0,v1,v2,v3) {
		this.__context.vertexAttrib4f(index,v0,v1,v2,v3);
	}
	,vertexAttrib4fv: function(index,v) {
		this.__context.vertexAttrib4fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
	}
	,vertexAttrib4fvWEBGL: function(index,v) {
		this.__context.vertexAttrib4fv(index,v);
	}
	,vertexAttribDivisor: function(index,divisor) {
		this.__context.vertexAttribDivisor(index,divisor);
	}
	,vertexAttribI4i: function(index,v0,v1,v2,v3) {
		this.__context.vertexAttribI4i(index,v0,v1,v2,v3);
	}
	,vertexAttribI4iv: function(index,v) {
		this.__context.vertexAttribI4iv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v));
	}
	,vertexAttribI4ivWEBGL: function(index,v) {
		this.__context.vertexAttribI4iv(index,v);
	}
	,vertexAttribI4ui: function(index,v0,v1,v2,v3) {
		this.__context.vertexAttribI4ui(index,v0,v1,v2,v3);
	}
	,vertexAttribI4uiv: function(index,v) {
		this.__context.vertexAttribI4uiv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v));
	}
	,vertexAttribI4uivWEBGL: function(index,v) {
		this.__context.vertexAttribI4uiv(index,v);
	}
	,vertexAttribIPointer: function(index,size,type,stride,offset) {
		this.__context.vertexAttribIPointer(index,size,type,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)));
	}
	,vertexAttribPointer: function(index,size,type,normalized,stride,offset) {
		this.__context.vertexAttribPointer(index,size,type,normalized,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
	}
	,viewport: function(x,y,width,height) {
		this.__context.viewport(x,y,width,height);
	}
	,waitSync: function(sync,flags,timeout) {
		this.__context.waitSync(sync,flags,timeout);
	}
	,get_canvas: function() {
		return this.__context.canvas;
	}
	,get_drawingBufferHeight: function() {
		return this.__context.drawingBufferHeight;
	}
	,get_drawingBufferWidth: function() {
		return this.__context.drawingBufferWidth;
	}
	,__class__: lime__$backend_html5_HTML5GLRenderContext
	,__properties__: {get_drawingBufferWidth:"get_drawingBufferWidth",get_drawingBufferHeight:"get_drawingBufferHeight",get_canvas:"get_canvas"}
};
var lime__$backend_html5_HTML5HTTPRequest = function() {
	this.validStatus0 = new EReg("Tizen","gi").match(window.navigator.userAgent);
};
$hxClasses["lime._backend.html5.HTML5HTTPRequest"] = lime__$backend_html5_HTML5HTTPRequest;
lime__$backend_html5_HTML5HTTPRequest.__name__ = ["lime","_backend","html5","HTML5HTTPRequest"];
lime__$backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
	var promise = new lime_app_Promise();
	if(lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit) {
		lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
		lime__$backend_html5_HTML5HTTPRequest.__loadImage(uri,promise);
	} else {
		lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE"});
	}
	return promise.future;
};
lime__$backend_html5_HTML5HTTPRequest.processQueue = function() {
	if(lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit && lime__$backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
		lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
		var queueItem = lime__$backend_html5_HTML5HTTPRequest.requestQueue.pop();
		var _g = queueItem.type;
		switch(_g) {
		case "BINARY":
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		case "IMAGE":
			lime__$backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri,queueItem.promise);
			break;
		case "TEXT":
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		default:
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
		}
	}
};
lime__$backend_html5_HTML5HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) {
		return "";
	} else {
		return hostname;
	}
};
lime__$backend_html5_HTML5HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") {
		switch(protocol) {
		case "ftp:":
			return "21";
		case "gopher:":
			return "70";
		case "http:":
			return "80";
		case "https:":
			return "443";
		case "ws:":
			return "80";
		case "wss:":
			return "443";
		default:
			return "";
		}
	}
	return port;
};
lime__$backend_html5_HTML5HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") {
		return "http:";
	} else {
		return protocol;
	}
};
lime__$backend_html5_HTML5HTTPRequest.__isSameOrigin = function(path) {
	if(lime__$backend_html5_HTML5HTTPRequest.originElement == null) {
		lime__$backend_html5_HTML5HTTPRequest.originElement = window.document.createElement("a");
		lime__$backend_html5_HTML5HTTPRequest.originHostname = lime__$backend_html5_HTML5HTTPRequest.__fixHostname(window.location.hostname);
		lime__$backend_html5_HTML5HTTPRequest.originProtocol = lime__$backend_html5_HTML5HTTPRequest.__fixProtocol(window.location.protocol);
		lime__$backend_html5_HTML5HTTPRequest.originPort = lime__$backend_html5_HTML5HTTPRequest.__fixPort(window.location.port,lime__$backend_html5_HTML5HTTPRequest.originProtocol);
	}
	var a = lime__$backend_html5_HTML5HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") {
		a.href = a.href;
	}
	var hostname = lime__$backend_html5_HTML5HTTPRequest.__fixHostname(a.hostname);
	var protocol = lime__$backend_html5_HTML5HTTPRequest.__fixProtocol(a.protocol);
	var port = lime__$backend_html5_HTML5HTTPRequest.__fixPort(a.port,protocol);
	var sameHost = hostname == "" || hostname == lime__$backend_html5_HTML5HTTPRequest.originHostname;
	var samePort = port == "" || port == lime__$backend_html5_HTML5HTTPRequest.originPort;
	if(protocol != "file:" && sameHost) {
		return samePort;
	} else {
		return false;
	}
};
lime__$backend_html5_HTML5HTTPRequest.__loadImage = function(uri,promise) {
	var image = new Image();
	if(!lime__$backend_html5_HTML5HTTPRequest.__isSameOrigin(uri)) {
		image.crossOrigin = "Anonymous";
	}
	if(lime__$backend_html5_HTML5HTTPRequest.supportsImageProgress == null) {
		lime__$backend_html5_HTML5HTTPRequest.supportsImageProgress = 'onprogress' in image;
	}
	if(lime__$backend_html5_HTML5HTTPRequest.supportsImageProgress || StringTools.startsWith(uri,"data:")) {
		image.addEventListener("load",function(event) {
			var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			buffer.__srcImage = image;
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
			promise.complete(new lime_graphics_Image(buffer));
		},false);
		image.addEventListener("progress",function(event1) {
			promise.progress(event1.loaded,event1.total);
		},false);
		image.addEventListener("error",function(event2) {
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
			promise.error(event2.detail);
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_) {
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
			var img = new lime_graphics_Image();
			img.__fromBytes(haxe_io_Bytes.ofData(request.response),function(img1) {
				promise.complete(img1);
			});
		};
		request.onerror = function(event3) {
			promise.error(event3.message);
		};
		request.onprogress = function(event4) {
			if(event4.lengthComputable) {
				promise.progress(event4.loaded,event4.total);
			}
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
lime__$backend_html5_HTML5HTTPRequest.prototype = {
	binary: null
	,parent: null
	,request: null
	,validStatus0: null
	,cancel: function() {
		if(this.request != null) {
			this.request.abort();
		}
	}
	,init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.parent.method == "POST") {
			this.request.upload.addEventListener("progress",progress,false);
		} else {
			this.request.addEventListener("progress",progress,false);
		}
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var key = this.parent.formData.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				if(query.length > 0) {
					query += "&";
				}
				var query1 = encodeURIComponent(key1) + "=";
				var _this = this.parent.formData;
				var s = Std.string(__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]);
				query += query1 + encodeURIComponent(s);
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var contentType = null;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") {
				contentType = header.value;
			} else {
				this.request.setRequestHeader(header.name,header.value);
			}
		}
		if(this.parent.contentType != null) {
			contentType = this.parent.contentType;
		}
		if(contentType == null) {
			if(this.parent.data != null) {
				contentType = "application/octet-stream";
			} else if(query != "") {
				contentType = "application/x-www-form-urlencoded";
			}
		}
		if(contentType != null) {
			this.request.setRequestHeader("Content-Type",contentType);
		}
		if(this.parent.withCredentials) {
			this.request.withCredentials = true;
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadData(uri,promise);
		} else {
			lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "BINARY"});
		}
		return promise.future;
	}
	,loadText: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadText(uri,promise);
		} else {
			lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "TEXT"});
		}
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__loadData: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				var bytes;
				if(_gthis.request.responseType == "") {
					bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
				} else {
					bytes = haxe_io_Bytes.ofData(_gthis.request.response);
				}
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
	}
	,__loadText: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status <= 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
	}
	,__class__: lime__$backend_html5_HTML5HTTPRequest
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.hide = function() {
	if(!lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime_app_Application.current.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime__$backend_html5_HTML5Mouse.show = function() {
	if(lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = false;
		var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
		lime__$backend_html5_HTML5Mouse.__cursor = null;
		lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
	}
};
lime__$backend_html5_HTML5Mouse.warp = function(x,y,window) {
};
lime__$backend_html5_HTML5Mouse.get_cursor = function() {
	if(lime__$backend_html5_HTML5Mouse.__cursor == null) {
		return lime_ui_MouseCursor.DEFAULT;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.__windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				var tmp;
				switch(value[1]) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				$window.backend.element.style.cursor = tmp;
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.get_lock = function() {
	return false;
};
lime__$backend_html5_HTML5Mouse.set_lock = function(value) {
	return value;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	parent: null
	,create: function() {
		this.createContext();
		var _g = this.parent.context;
		if(_g[1] == 0) {
			this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
			this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) {
			this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
			this.parent.type = lime_graphics_RendererType.DOM;
		} else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			var transparentBackground = Object.prototype.hasOwnProperty.call(this.parent.window.config,"background") && this.parent.window.config.background == null;
			var colorDepth = Object.prototype.hasOwnProperty.call(this.parent.window.config,"colorDepth") ? this.parent.window.config.colorDepth : 16;
			var options = Object.prototype.hasOwnProperty.call(this.parent.window.config,"antialiasing") && this.parent.window.config.antialiasing > 0;
			var options1 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : Object.prototype.hasOwnProperty.call(this.parent.window.config,"depthBuffer") ? this.parent.window.config.depthBuffer : true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call(this.parent.window.config,"stencilBuffer") && this.parent.window.config.stencilBuffer, preserveDrawingBuffer : false};
			var _g = 0;
			var _g1 = ["webgl2","webgl","experimental-webgl"];
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				webgl = this.parent.window.backend.canvas.getContext(name,options1);
				if(webgl != null) {
					break;
				}
			}
			if(webgl == null) {
				this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
				this.parent.type = lime_graphics_RendererType.CANVAS;
			} else {
				lime_graphics_opengl_GL.context = new lime__$backend_html5_HTML5GLRenderContext(webgl);
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
				this.parent.type = lime_graphics_RendererType.OPENGL;
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			if(lime_graphics_opengl_GL.context != null) {
				lime_graphics_opengl_GL.context.__contextLost = true;
			}
			this.parent.context = null;
			this.parent.onContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,readPixels: function(rect) {
		if(this.parent.window.backend.canvas != null) {
			if(rect == null) {
				rect = new lime_math_Rectangle(0,0,this.parent.window.backend.canvas.width,this.parent.window.backend.canvas.height);
			} else {
				rect.__contract(0,0,this.parent.window.backend.canvas.width,this.parent.window.backend.canvas.height);
			}
			if(rect.width > 0 && rect.height > 0) {
				var canvas = window.document.createElement("canvas");
				canvas.width = rect.width | 0;
				canvas.height = rect.height | 0;
				var context = canvas.getContext("2d");
				context.drawImage(this.parent.window.backend.canvas,-rect.x,-rect.y);
				return lime_graphics_Image.fromCanvas(canvas);
			}
		}
		return null;
	}
	,render: function() {
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) {
		this.element = parent.config.element;
	}
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"allowHighDPI") && parent.config.allowHighDPI) {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,element: null
	,cacheElementHeight: null
	,cacheElementWidth: null
	,cacheMouseX: null
	,cacheMouseY: null
	,currentTouches: null
	,enableTextEvents: null
	,isFullscreen: null
	,parent: null
	,primaryTouch: null
	,requestedFullscreen: null
	,resizeElement: null
	,scale: null
	,setHeight: null
	,setWidth: null
	,unusedTouchesPool: null
	,alert: function(message,title) {
		if(message != null) {
			js_Browser.alert(message);
		}
	}
	,close: function() {
		this.parent.application.removeWindow(this.parent);
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) {
			this.canvas = this.element;
		} else {
			this.canvas = window.document.createElement("canvas");
		}
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.cacheElementWidth = this.parent.__width;
			this.cacheElementHeight = this.parent.__height;
			this.resizeElement = true;
		}
		if(this.canvas != null) {
			this.canvas.width = Math.round(this.parent.__width * this.scale);
			this.canvas.height = Math.round(this.parent.__height * this.scale);
			this.canvas.style.width = this.parent.__width + "px";
			this.canvas.style.height = this.parent.__height + "px";
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.updateSize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) {
					this.element.appendChild(this.canvas);
				}
			} else {
				this.element.appendChild(this.div);
			}
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
			this.element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
		}
	}
	,focus: function() {
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getDisplayMode: function() {
		return lime_system_System.getDisplay(0).currentMode;
	}
	,setDisplayMode: function(value) {
		return value;
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleContextMenuEvent: function(event) {
		if(this.parent.onMouseUp.canceled) {
			event.preventDefault();
		}
	}
	,handleCutOrCopyEvent: function(event) {
		event.clipboardData.setData("text/plain",lime_system_Clipboard.get_text());
		event.preventDefault();
	}
	,handleFocusEvent: function(event) {
		if(this.enableTextEvents) {
			haxe_Timer.delay(function() {
				lime__$backend_html5_HTML5Window.textInput.focus();
			},20);
		}
	}
	,handleFullscreenEvent: function(event) {
		var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
		if(fullscreenElement != null) {
			this.isFullscreen = true;
			this.parent.__fullscreen = true;
			if(this.requestedFullscreen) {
				this.requestedFullscreen = false;
				this.parent.onFullscreen.dispatch();
			}
		} else {
			this.isFullscreen = false;
			this.parent.__fullscreen = false;
			var changeEvents = ["fullscreenchange","mozfullscreenchange","webkitfullscreenchange","MSFullscreenChange"];
			var errorEvents = ["fullscreenerror","mozfullscreenerror","webkitfullscreenerror","MSFullscreenError"];
			var _g1 = 0;
			var _g = changeEvents.length;
			while(_g1 < _g) {
				var i = _g1++;
				window.document.removeEventListener(changeEvents[i],$bind(this,this.handleFullscreenEvent),false);
				window.document.removeEventListener(errorEvents[i],$bind(this,this.handleFullscreenEvent),false);
			}
		}
	}
	,handleGamepadEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != lime__$backend_html5_HTML5Window.dummyCharacter) {
			if(lime__$backend_html5_HTML5Window.textInput.value.charAt(0) == lime__$backend_html5_HTML5Window.dummyCharacter) {
				this.parent.onTextInput.dispatch(HxOverrides.substr(lime__$backend_html5_HTML5Window.textInput.value,1,null));
			} else {
				this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value);
			}
			lime__$backend_html5_HTML5Window.textInput.value = lime__$backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if(this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY);
			if(this.parent.onMouseWheel.canceled) {
				event.preventDefault();
			}
		}
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = event.clipboardData.getData("text/plain");
			lime_system_Clipboard.set_text(text);
			if(this.enableTextEvents) {
				this.parent.onTextInput.dispatch(text);
			}
			event.preventDefault();
		}
	}
	,handleResizeEvent: function(event) {
		this.primaryTouch = null;
		this.updateSize();
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var touch;
		var x;
		var y;
		var cacheX;
		var cacheY;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			x = 0.0;
			y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			if(event.type == "touchstart") {
				touch = this.unusedTouchesPool.pop();
				if(touch == null) {
					touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch;
				}
				if(touch == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
			} else {
				touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					cacheX = touch.x;
					cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					var _g2 = event.type;
					switch(_g2) {
					case "touchcancel":
						lime_ui_Touch.onCancel.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.primaryTouch = null;
						}
						break;
					case "touchend":
						lime_ui_Touch.onEnd.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseUp.dispatch(x,y,0);
							this.primaryTouch = null;
						}
						break;
					case "touchmove":
						lime_ui_Touch.onMove.dispatch(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseMove.dispatch(x,y);
						}
						break;
					default:
					}
				}
			}
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setBorderless: function(value) {
		return value;
	}
	,setClipboard: function(value) {
		var inputEnabled = this.enableTextEvents;
		this.setEnableTextEvents(true);
		var cacheText = lime__$backend_html5_HTML5Window.textInput.value;
		lime__$backend_html5_HTML5Window.textInput.value = value;
		lime__$backend_html5_HTML5Window.textInput.select();
		if(window.document.queryCommandEnabled("copy")) {
			window.document.execCommand("copy");
		}
		lime__$backend_html5_HTML5Window.textInput.value = cacheText;
		this.setEnableTextEvents(inputEnabled);
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = lime__$backend_html5_HTML5Window.dummyCharacter;
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
			lime__$backend_html5_HTML5Window.textInput.select();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		if(value) {
			if(!this.requestedFullscreen && !this.isFullscreen) {
				this.requestedFullscreen = true;
				if(($_=this.element,$bind($_,$_.requestFullscreen))) {
					document.addEventListener("fullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("fullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.element.requestFullscreen();
				} else if(this.element.mozRequestFullScreen) {
					document.addEventListener("mozfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("mozfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.element.mozRequestFullScreen();
				} else if(this.element.webkitRequestFullscreen) {
					document.addEventListener("webkitfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("webkitfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.element.webkitRequestFullscreen();
				} else if(this.element.msRequestFullscreen) {
					document.addEventListener("MSFullscreenChange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("MSFullscreenError",$bind(this,this.handleFullscreenEvent),false);
					this.element.msRequestFullscreen();
				}
			}
		} else if(this.isFullscreen) {
			this.requestedFullscreen = false;
			if(document.exitFullscreen) {
				document.exitFullscreen();
			} else if(document.mozCancelFullScreen) {
				document.mozCancelFullScreen();
			} else if(document.webkitExitFullscreen) {
				document.webkitExitFullscreen();
			} else if(document.msExitFullscreen) {
				document.msExitFullscreen();
			}
		}
		return value;
	}
	,setIcon: function(image) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		var link = window.document.querySelector("link[rel*='icon']");
		if(link == null) {
			link = window.document.createElement("link");
		}
		link.type = "image/x-icon";
		link.rel = "shortcut icon";
		link.href = image.buffer.get_src().toDataURL("image/x-icon");
		window.document.getElementsByTagName("head")[0].appendChild(link);
	}
	,setMaximized: function(value) {
		return false;
	}
	,setMinimized: function(value) {
		return false;
	}
	,setResizable: function(value) {
		return value;
	}
	,setTitle: function(value) {
		if(value != null) {
			window.document.title = value;
		}
		return value;
	}
	,updateSize: function() {
		if(!this.parent.__resizable) {
			return;
		}
		var elementWidth;
		var elementHeight;
		if(this.element != null) {
			elementWidth = this.element.clientWidth;
			elementHeight = this.element.clientHeight;
		} else {
			elementWidth = window.innerWidth;
			elementHeight = window.innerHeight;
		}
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			var stretch = this.resizeElement || this.setWidth == 0 && this.setHeight == 0;
			if(this.element != null && (this.div == null || this.div != null && stretch)) {
				if(stretch) {
					if(this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
						this.parent.set_width(elementWidth);
						this.parent.set_height(elementHeight);
						if(this.canvas != null) {
							if(this.element != this.canvas) {
								this.canvas.width = Math.round(elementWidth * this.scale);
								this.canvas.height = Math.round(elementHeight * this.scale);
								this.canvas.style.width = elementWidth + "px";
								this.canvas.style.height = elementHeight + "px";
							}
						} else {
							this.div.style.width = elementWidth + "px";
							this.div.style.height = elementHeight + "px";
						}
						this.parent.onResize.dispatch(elementWidth,elementHeight);
					}
				} else {
					var scaleX = this.setWidth != 0 ? elementWidth / this.setWidth : 1;
					var scaleY = this.setHeight != 0 ? elementHeight / this.setHeight : 1;
					var targetWidth = elementWidth;
					var targetHeight = elementHeight;
					var marginLeft = 0;
					var marginTop = 0;
					if(scaleX < scaleY) {
						targetHeight = Math.floor(this.setHeight * scaleX);
						marginTop = Math.floor((elementHeight - targetHeight) / 2);
					} else {
						targetWidth = Math.floor(this.setWidth * scaleY);
						marginLeft = Math.floor((elementWidth - targetWidth) / 2);
					}
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.style.width = targetWidth + "px";
							this.canvas.style.height = targetHeight + "px";
							this.canvas.style.marginLeft = marginLeft + "px";
							this.canvas.style.marginTop = marginTop + "px";
						}
					} else {
						this.div.style.width = targetWidth + "px";
						this.div.style.height = targetHeight + "px";
						this.div.style.marginLeft = marginLeft + "px";
						this.div.style.marginTop = marginTop + "px";
					}
				}
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime__$backend_native_NativeCFFI = function() { };
$hxClasses["lime._backend.native.NativeCFFI"] = lime__$backend_native_NativeCFFI;
lime__$backend_native_NativeCFFI.__name__ = ["lime","_backend","native","NativeCFFI"];
var lime__$macros_AssetsMacro = function() { };
$hxClasses["lime._macros.AssetsMacro"] = lime__$macros_AssetsMacro;
lime__$macros_AssetsMacro.__name__ = ["lime","_macros","AssetsMacro"];
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = ["lime","app","Event"];
lime_app_Event.prototype = {
	canceled: null
	,__listeners: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,dispatch: null
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.error = e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.ofEvents = function(onComplete,onError,onProgress) {
	var promise = new lime_app_Promise();
	onComplete.add(function(data) {
		promise.complete(data);
	},true);
	if(onError != null) {
		onError.add(function(error) {
			promise.error(error);
		},true);
	}
	if(onProgress != null) {
		onProgress.add(function(progress,total) {
			promise.progress(progress,total);
		},true);
	}
	return promise.future;
};
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	error: null
	,isComplete: null
	,isError: null
	,value: null
	,__completeListeners: null
	,__errorListeners: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,ready: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		if(this.isComplete || this.isError) {
			return this;
		} else {
			lime_utils_Log.warn("Cannot block thread in JavaScript",{ fileName : "Future.hx", lineNumber : 157, className : "lime.app.Future", methodName : "ready"});
			return this;
		}
	}
	,result: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		this.ready(waitTime);
		if(this.isComplete) {
			return this.value;
		} else {
			return null;
		}
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.onError(this.error);
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = ["lime","app","_Future","FutureWork"];
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Preloader = function() {
	this.bytesTotalCache = new haxe_ds_StringMap();
	this.bytesLoadedCache2 = new haxe_ds_StringMap();
	this.bytesLoadedCache = new haxe_ds_ObjectMap();
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.libraries = [];
	this.libraryNames = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesLoadedCache2: null
	,bytesTotal: null
	,bytesTotalCache: null
	,initLibraryNames: null
	,libraries: null
	,libraryNames: null
	,loadedLibraries: null
	,loadedStage: null
	,preloadComplete: null
	,preloadStarted: null
	,simulateProgress: null
	,addLibrary: function(library) {
		this.libraries.push(library);
	}
	,addLibraryName: function(name) {
		if(this.libraryNames.indexOf(name) == -1) {
			this.libraryNames.push(name);
		}
	}
	,create: function(config) {
	}
	,load: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			this.bytesTotal += library.bytesTotal;
		}
		this.loadedLibraries = -1;
		this.preloadStarted = false;
		var _g2 = 0;
		var _g11 = this.libraries;
		while(_g2 < _g11.length) {
			var library1 = [_g11[_g2]];
			++_g2;
			lime_utils_Log.verbose("Preloading asset library",{ fileName : "Preloader.hx", lineNumber : 153, className : "lime.app.Preloader", methodName : "load"});
			library1[0].load().onProgress((function(library2) {
				return function(loaded,total) {
					if(_gthis.bytesLoadedCache.h.__keys__[library2[0].__id__] == null) {
						_gthis.bytesLoaded += loaded;
					} else {
						_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache.h[library2[0].__id__];
					}
					_gthis.bytesLoadedCache.set(library2[0],loaded);
					if(!_gthis.simulateProgress) {
						_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
					}
				};
			})(library1)).onComplete((function(library3) {
				return function(_) {
					if(_gthis.bytesLoadedCache.h.__keys__[library3[0].__id__] == null) {
						_gthis.bytesLoaded += library3[0].bytesTotal;
					} else {
						_gthis.bytesLoaded += library3[0].bytesTotal - _gthis.bytesLoadedCache.h[library3[0].__id__];
					}
					_gthis.loadedAssetLibrary();
				};
			})(library1)).onError((function() {
				return function(e) {
					lime_utils_Log.error(e,{ fileName : "Preloader.hx", lineNumber : 191, className : "lime.app.Preloader", methodName : "load"});
				};
			})());
		}
		var _g3 = 0;
		var _g12 = this.libraryNames;
		while(_g3 < _g12.length) {
			var name = _g12[_g3];
			++_g3;
			this.bytesTotal += 200;
		}
		this.loadedLibraries++;
		this.preloadStarted = true;
		this.updateProgress();
	}
	,loadedAssetLibrary: function(name) {
		this.loadedLibraries++;
		var current = this.loadedLibraries;
		if(!this.preloadStarted) {
			++current;
		}
		var totalLibraries = this.libraries.length + this.libraryNames.length;
		if(name != null) {
			lime_utils_Log.verbose("Loaded asset library: " + name + " [" + current + "/" + totalLibraries + "]",{ fileName : "Preloader.hx", lineNumber : 223, className : "lime.app.Preloader", methodName : "loadedAssetLibrary"});
		} else {
			lime_utils_Log.verbose("Loaded asset library [" + current + "/" + totalLibraries + "]",{ fileName : "Preloader.hx", lineNumber : 227, className : "lime.app.Preloader", methodName : "loadedAssetLibrary"});
		}
		this.updateProgress();
	}
	,start: function() {
		if(this.complete) {
			return;
		}
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		var _gthis = this;
		if(!this.simulateProgress) {
			this.onProgress.dispatch(this.bytesLoaded,this.bytesTotal);
		}
		if(this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
			this.initLibraryNames = true;
			var _g = 0;
			var _g1 = this.libraryNames;
			while(_g < _g1.length) {
				var name = [_g1[_g]];
				++_g;
				lime_utils_Log.verbose("Preloading asset library: " + name[0],{ fileName : "Preloader.hx", lineNumber : 276, className : "lime.app.Preloader", methodName : "updateProgress"});
				lime_utils_Assets.loadLibrary(name[0]).onProgress((function(name1) {
					return function(loaded,total) {
						if(total > 0) {
							var _this = _gthis.bytesTotalCache;
							if(!(__map_reserved[name1[0]] != null ? _this.existsReserved(name1[0]) : _this.h.hasOwnProperty(name1[0]))) {
								var _this1 = _gthis.bytesTotalCache;
								if(__map_reserved[name1[0]] != null) {
									_this1.setReserved(name1[0],total);
								} else {
									_this1.h[name1[0]] = total;
								}
								_gthis.bytesTotal += total - 200;
							}
							if(loaded > total) {
								loaded = total;
							}
							var _this2 = _gthis.bytesLoadedCache2;
							if(!(__map_reserved[name1[0]] != null ? _this2.existsReserved(name1[0]) : _this2.h.hasOwnProperty(name1[0]))) {
								_gthis.bytesLoaded += loaded;
							} else {
								var _this3 = _gthis.bytesLoadedCache2;
								_gthis.bytesLoaded += loaded - (__map_reserved[name1[0]] != null ? _this3.getReserved(name1[0]) : _this3.h[name1[0]]);
							}
							var _this4 = _gthis.bytesLoadedCache2;
							if(__map_reserved[name1[0]] != null) {
								_this4.setReserved(name1[0],loaded);
							} else {
								_this4.h[name1[0]] = loaded;
							}
							if(!_gthis.simulateProgress) {
								_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
							}
						}
					};
				})(name)).onComplete((function(name2) {
					return function(library) {
						var total1 = 200;
						var _this5 = _gthis.bytesTotalCache;
						if(__map_reserved[name2[0]] != null ? _this5.existsReserved(name2[0]) : _this5.h.hasOwnProperty(name2[0])) {
							var _this6 = _gthis.bytesTotalCache;
							if(__map_reserved[name2[0]] != null) {
								total1 = _this6.getReserved(name2[0]);
							} else {
								total1 = _this6.h[name2[0]];
							}
						}
						var _this7 = _gthis.bytesLoadedCache2;
						if(!(__map_reserved[name2[0]] != null ? _this7.existsReserved(name2[0]) : _this7.h.hasOwnProperty(name2[0]))) {
							_gthis.bytesLoaded += total1;
						} else {
							var _this8 = _gthis.bytesLoadedCache2;
							_gthis.bytesLoaded += total1 - (__map_reserved[name2[0]] != null ? _this8.getReserved(name2[0]) : _this8.h[name2[0]]);
						}
						_gthis.loadedAssetLibrary(name2[0]);
					};
				})(name)).onError((function() {
					return function(e) {
						lime_utils_Log.error(e,{ fileName : "Preloader.hx", lineNumber : 335, className : "lime.app.Preloader", methodName : "updateProgress"});
					};
				})());
			}
		}
		if(!this.simulateProgress && this.loadedLibraries == this.libraries.length + this.libraryNames.length) {
			if(!this.preloadComplete) {
				this.preloadComplete = true;
				lime_utils_Log.verbose("Preload complete",{ fileName : "Preloader.hx", lineNumber : 349, className : "lime.app.Preloader", methodName : "updateProgress"});
			}
			this.start();
		}
	}
	,__class__: lime_app_Preloader
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	future: null
	,isComplete: null
	,isError: null
	,complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,get_isComplete: function() {
		return this.future.isComplete;
	}
	,get_isError: function() {
		return this.future.isError;
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isError:"get_isError",get_isComplete:"get_isComplete"}
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = ["lime","app","_Event_Dynamic_Void"];
lime_app__$Event_$Dynamic_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","_Event_Float_Float_Int_Void"];
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Float_Float_Void"];
lime_app__$Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Float_Void"];
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Void"];
lime_app__$Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = ["lime","app","_Event_Int_Int_Void"];
lime_app__$Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = ["lime","app","_Event_Int_Void"];
lime_app__$Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","_Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","_Event_String_Int_Int_Void"];
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = ["lime","app","_Event_String_Void"];
lime_app__$Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = ["lime","app","_Event_Void_Void"];
lime_app__$Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$haxe_$Function_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_haxe_Function_Void"] = lime_app__$Event_$haxe_$Function_$Void;
lime_app__$Event_$haxe_$Function_$Void.__name__ = ["lime","app","_Event_haxe_Function_Void"];
lime_app__$Event_$haxe_$Function_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$haxe_$Function_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","_Event_lime_graphics_RenderContext_Void"];
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadAxis_Float_Void"];
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadButton_Void"];
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","_Event_lime_ui_Gamepad_Void"];
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","_Event_lime_ui_Joystick_Void"];
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","_Event_lime_ui_Touch_Void"];
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$ofEvents_$T_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_ofEvents_T_Void"] = lime_app__$Event_$ofEvents_$T_$Void;
lime_app__$Event_$ofEvents_$T_$Void.__name__ = ["lime","app","_Event_ofEvents_T_Void"];
lime_app__$Event_$ofEvents_$T_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$ofEvents_$T_$Void
};
var lime_graphics_ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime_graphics_ConsoleRenderContext.prototype = {
	createIndexBuffer: function(indices,count) {
		return new lime_graphics_console_IndexBuffer();
	}
	,createVertexBuffer: function(decl,count) {
		return new lime_graphics_console_VertexBuffer();
	}
	,lookupShader: function(name) {
		return new lime_graphics_console_Shader();
	}
	,clear: function(r,g,b,a,depth,stencil) {
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1.0;
		}
	}
	,bindShader: function(shader) {
	}
	,setViewport: function(x,y,width,height,nearPlane,farPlane) {
		if(farPlane == null) {
			farPlane = 1.0;
		}
		if(nearPlane == null) {
			nearPlane = 0.0;
		}
	}
	,setVertexShaderConstantF: function(startRegister,vec4,vec4count) {
	}
	,setVertexSource: function(vb) {
	}
	,setIndexSource: function(ib) {
	}
	,draw: function(primitive,startVertex,primitiveCount) {
	}
	,drawIndexed: function(primitive,vertexCount,startIndex,primitiveCount) {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,__class__: lime_graphics_ConsoleRenderContext
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var lime_graphics_FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime_graphics_FlashRenderContext.prototype = {
	accessibilityImplementation: null
	,accessibilityProperties: null
	,alpha: null
	,blendMode: null
	,blendShader: null
	,buttonMode: null
	,cacheAsBitmap: null
	,contextMenu: null
	,doubleClickEnabled: null
	,dropTarget: null
	,filters: null
	,focusRect: null
	,graphics: null
	,height: null
	,hitArea: null
	,loaderInfo: null
	,mask: null
	,mouseChildren: null
	,mouseEnabled: null
	,mouseX: null
	,mouseY: null
	,name: null
	,needsSoftKeyboard: null
	,numChildren: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,rotation: null
	,rotationX: null
	,rotationY: null
	,rotationZ: null
	,scale9Grid: null
	,scaleX: null
	,scaleY: null
	,scaleZ: null
	,scrollRect: null
	,softKeyboardInputAreaOfInterest: null
	,soundTransform: null
	,stage: null
	,tabChildren: null
	,tabEnabled: null
	,tabIndex: null
	,textSnapshot: null
	,transform: null
	,useHandCursor: null
	,visible: null
	,width: null
	,x: null
	,y: null
	,z: null
	,addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime_graphics_FlashRenderContext
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		type = lime_graphics_ImageType.CANVAS;
	}
	this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.fromBase64 = function(base64,type) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromFile(path);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	if(base64 == null || type == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + base64);
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) {
		return lime_app_Future.withValue(null);
	}
	var type = "";
	if(lime_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(lime_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(lime_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else if(lime_graphics_Image.__isWebP(bytes)) {
		type = "image/webp";
	} else {
		return lime_app_Future.withValue(null);
	}
	return lime_graphics_Image.loadFromBase64(lime_graphics_Image.__base64Encode(bytes),type);
};
lime_graphics_Image.loadFromFile = function(path) {
	if(path == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$backend_html5_HTML5HTTPRequest.loadImage(path);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) {
		lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	}
	return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes == null || bytes.length < 6) {
		return false;
	}
	var header = bytes.getString(0,6);
	if(header != "GIF87a") {
		return header == "GIF89a";
	} else {
		return true;
	}
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes == null || bytes.length < 4) {
		return false;
	}
	if(bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255) {
		return bytes.b[bytes.length - 1] == 217;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes == null || bytes.length < 8) {
		return false;
	}
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isWebP = function(bytes) {
	if(bytes == null || bytes.length < 16) {
		return false;
	}
	if(bytes.getString(0,4) == "RIFF") {
		return bytes.getString(8,4) == "WEBP";
	} else {
		return false;
	}
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,version: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			} else {
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this && destPoint.x < sourceRect.get_right() && destPoint.y < sourceRect.get_bottom()) {
			sourceImage = this.clone();
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) {
				lime_graphics_utils_ImageCanvasUtil.convertToData(alphaImage);
			}
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) {
				lime_graphics_utils_ImageCanvasUtil.convertToData(alphaImage);
			}
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null ? alphaImage.buffer.get_src() : null,alphaPoint != null ? alphaPoint.__toFlashPoint() : null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) {
			quality = 90;
		}
		if(format == null) {
			format = "png";
		}
		switch(format) {
		case "bmp":
			return lime_graphics_format_BMP.encode(this);
		case "jpeg":case "jpg":
			return lime_graphics_format_JPEG.encode(this,quality);
		case "png":
			return lime_graphics_format_PNG.encode(this);
		default:
		}
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) {
			findColor = true;
		}
		if(this.buffer == null) {
			return null;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this2 = 0;
					var bgra = this2;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this3 = 0;
					var rgba2 = this3;
					rgba2 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba3 = rgba2;
					return rgba3;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this2 = 0;
					var bgra = this2;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this3 = 0;
					var rgba2 = this3;
					rgba2 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba3 = rgba2;
					return rgba3;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) {
			return null;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytePointer,format,endian) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		if(endian == null) {
			endian = lime_system_Endian.BIG_ENDIAN;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 2:
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(this.buffer == null || sourceImage == null || sourceRect == null) {
			return 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			return lime_graphics_utils_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb = this1;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_color = argb;
			} else {
				switch(format) {
				case 1:
					_color = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb1 = this2;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_color = argb1;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb2 = this3;
					argb2 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					_color = argb2;
				}
			}
			var _mask;
			if(format == null) {
				var rgba2 = mask;
				var this4 = 0;
				var argb3 = this4;
				argb3 = (rgba2 & 255 & 255) << 24 | (rgba2 >>> 24 & 255 & 255) << 16 | (rgba2 >>> 16 & 255 & 255) << 8 | rgba2 >>> 8 & 255 & 255;
				_mask = argb3;
			} else {
				switch(format) {
				case 1:
					_mask = mask;
					break;
				case 2:
					var bgra1 = mask;
					var this5 = 0;
					var argb4 = this5;
					argb4 = (bgra1 & 255 & 255) << 24 | (bgra1 >>> 8 & 255 & 255) << 16 | (bgra1 >>> 16 & 255 & 255) << 8 | bgra1 >>> 24 & 255 & 255;
					_mask = argb4;
					break;
				default:
					var rgba3 = mask;
					var this6 = 0;
					var argb5 = this6;
					argb5 = (rgba3 & 255 & 255) << 24 | (rgba3 >>> 24 & 255 & 255) << 16 | (rgba3 >>> 16 & 255 & 255) << 8 | rgba3 >>> 8 & 255 & 255;
					_mask = argb5;
				}
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			return;
		}
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		if(!lime__$backend_html5_HTML5HTTPRequest.__isSameOrigin(path)) {
			image.crossOrigin = "Anonymous";
		}
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_1) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
		var image1 = image.complete;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			if(_g[1] == 1) {
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		if(this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width) {
			if(this.buffer.height != 0) {
				return (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				lime_graphics_utils_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 0:case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			if(_g1[1] == 1) {
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else {
				this1 = null;
			}
			buffer.data = this1;
			var view = this.data;
			var this2;
			if(view != null) {
				this2 = new Uint8Array(view);
			} else {
				this2 = null;
			}
			var copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) {
			this.__srcImage = value;
		} else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : ["lime","graphics","RenderContext"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app__$Event_$Void_$Void();
	this.onContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onContextLost = new lime_app__$Event_$Void_$Void();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.renderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	context: null
	,onContextLost: null
	,onContextRestored: null
	,onRender: null
	,type: null
	,window: null
	,backend: null
	,create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,readPixels: function(rect) {
		return this.backend.readPixels(rect);
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : ["lime","graphics","RendererType"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
var lime_graphics_cairo_Cairo = function(surface) {
	var tmp = surface != null;
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"};
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	target: null
	,userData: null
	,handle: null
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setFontSize: function(size) {
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showGlyphs: function(glyphs) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,textPath: function(utf8) {
	}
	,transform: function(matrix) {
	}
	,rotate: function(amount) {
	}
	,scale: function(x,y) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_operator:"set_operator",get_operator:"get_operator",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] = lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFTFontFace","CairoFTFontFace_Impl_"];
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new = function() {
	var this1 = 0;
	return this1;
};
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontFace","CairoFontFace_Impl_"];
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
	var this1 = null;
	return this1;
};
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontOptions","CairoFontOptions_Impl_"];
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
	var this1 = null;
	return this1;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoGlyph = function(index,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.index = index;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.graphics.cairo.CairoGlyph"] = lime_graphics_cairo_CairoGlyph;
lime_graphics_cairo_CairoGlyph.__name__ = ["lime","graphics","cairo","CairoGlyph"];
lime_graphics_cairo_CairoGlyph.prototype = {
	index: null
	,x: null
	,y: null
	,__class__: lime_graphics_cairo_CairoGlyph
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoImageSurface","CairoImageSurface_Impl_"];
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format,width,height) {
	var this1 = 0;
	return this1;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_console_IndexBuffer = function() {
};
$hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
lime_graphics_console_IndexBuffer.__name__ = ["lime","graphics","console","IndexBuffer"];
lime_graphics_console_IndexBuffer.prototype = {
	__class__: lime_graphics_console_IndexBuffer
};
var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = { __ename__ : ["lime","graphics","console","Primitive"], __constructs__ : ["Point","Line","LineStrip","Triangle","TriangleStrip"] };
lime_graphics_console_Primitive.Point = ["Point",0];
lime_graphics_console_Primitive.Point.toString = $estr;
lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Line = ["Line",1];
lime_graphics_console_Primitive.Line.toString = $estr;
lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.LineStrip = ["LineStrip",2];
lime_graphics_console_Primitive.LineStrip.toString = $estr;
lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Triangle = ["Triangle",3];
lime_graphics_console_Primitive.Triangle.toString = $estr;
lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip",4];
lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
var lime_graphics_console_Shader = function() {
};
$hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
lime_graphics_console_Shader.__name__ = ["lime","graphics","console","Shader"];
lime_graphics_console_Shader.prototype = {
	__class__: lime_graphics_console_Shader
};
var lime_graphics_console_VertexBuffer = function() {
};
$hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
lime_graphics_console_VertexBuffer.__name__ = ["lime","graphics","console","VertexBuffer"];
lime_graphics_console_VertexBuffer.prototype = {
	lock: function() {
		return new lime_graphics_console_VertexOutput();
	}
	,unlock: function() {
	}
	,__class__: lime_graphics_console_VertexBuffer
};
var lime_graphics_console_VertexOutput = function() {
};
$hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
lime_graphics_console_VertexOutput.__name__ = ["lime","graphics","console","VertexOutput"];
lime_graphics_console_VertexOutput.prototype = {
	vec2: function(x,y) {
	}
	,vec3: function(x,y,z) {
	}
	,color: function(r,g,b,a) {
	}
	,__class__: lime_graphics_console_VertexOutput
};
var lime_graphics_format_BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
lime_graphics_format_BMP.__name__ = ["lime","graphics","format","BMP"];
lime_graphics_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) {
		type = lime_graphics_format_BMPType.RGB;
	}
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) {
		switch(type[1]) {
		case 0:
			pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
			break;
		case 1:
			infoHeaderLength = 108;
			break;
		case 2:
			fileHeaderLength = 0;
			pixelValuesLength += image.width * image.height;
			break;
		}
	}
	var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
	var position = 0;
	if(fileHeaderLength > 0) {
		data.b[position++] = 66;
		data.b[position++] = 77;
		data.setInt32(position,data.length);
		position += 4;
		data.setUInt16(position,0);
		position += 2;
		data.setUInt16(position,0);
		position += 2;
		data.setInt32(position,fileHeaderLength + infoHeaderLength);
		position += 4;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime_graphics_format_BMPType.ICO ? image.height * 2 : image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime_graphics_format_BMPType.RGB ? 24 : 32);
	position += 2;
	data.setInt32(position,type == lime_graphics_format_BMPType.BITFIELD ? 3 : 0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime_graphics_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.b[position++] = 32;
		data.b[position++] = 110;
		data.b[position++] = 105;
		data.b[position++] = 87;
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.b[position++] = 0;
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) {
		switch(type[1]) {
		case 0:
			var _g1 = 0;
			var _g2 = image.height;
			while(_g1 < _g2) {
				var y = _g1++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g3 = 0;
				var _g21 = image.width;
				while(_g3 < _g21) {
					var x = _g3++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
				}
				var _g31 = 0;
				var _g22 = image.width * 3 % 4;
				while(_g31 < _g22) {
					var i1 = _g31++;
					data.b[position++] = 0;
				}
			}
			break;
		case 1:
			var _g11 = 0;
			var _g4 = image.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				readPosition = (image.height - 1 - y1) * 4 * image.width;
				var _g32 = 0;
				var _g23 = image.width;
				while(_g32 < _g23) {
					var x1 = _g32++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
				}
			}
			break;
		case 2:
			var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
			var maskPosition = 0;
			var _g12 = 0;
			var _g5 = image.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				readPosition = (image.height - 1 - y2) * 4 * image.width;
				var _g33 = 0;
				var _g24 = image.width;
				while(_g33 < _g24) {
					var x2 = _g33++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
					andMask.b[maskPosition++] = 0;
				}
			}
			data.blit(position,andMask,0,image.width * image.height);
			break;
		}
	}
	return data;
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : ["lime","graphics","format","BMPType"], __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
var lime_graphics_format_JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
lime_graphics_format_JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime_graphics_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			var v = HxOverrides.cca(buffer,i);
			bytes.b[i] = v & 255;
		}
		return bytes;
	}
	return null;
};
var lime_graphics_format_PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
lime_graphics_format_PNG.__name__ = ["lime","graphics","format","PNG"];
lime_graphics_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/png");
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			var v = HxOverrides.cca(buffer,i);
			bytes.b[i] = v & 255;
		}
		return bytes;
	}
	return null;
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.__properties__ = {get_version:"get_version",get_type:"get_type"};
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.__context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.__context.attachShader(program,shader);
};
lime_graphics_opengl_GL.beginQuery = function(target,query) {
	lime_graphics_opengl_GL.context.__context.beginQuery(target,query);
};
lime_graphics_opengl_GL.beginTransformFeedback = function(primitiveNode) {
	lime_graphics_opengl_GL.context.__context.beginTransformFeedback(primitiveNode);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.__context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.__context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindBufferBase = function(target,index,buffer) {
	lime_graphics_opengl_GL.context.__context.bindBufferBase(target,index,buffer);
};
lime_graphics_opengl_GL.bindBufferRange = function(target,index,buffer,offset,size) {
	lime_graphics_opengl_GL.context.__context.bindBufferRange(target,index,buffer,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(size));
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.__context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.__context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindSampler = function(unit,sampler) {
	lime_graphics_opengl_GL.context.__context.bindSampler(unit,sampler);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.__context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.bindTransformFeedback = function(target,transformFeedback) {
	lime_graphics_opengl_GL.context.__context.bindTransformFeedback(target,transformFeedback);
};
lime_graphics_opengl_GL.bindVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.__context.bindVertexArray(vertexArray);
};
lime_graphics_opengl_GL.blitFramebuffer = function(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	lime_graphics_opengl_GL.context.__context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.__context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.__context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.__context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.__context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.__context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferData = function(target,size,srcData,usage) {
	lime_graphics_opengl_GL.context.__context.bufferData(target,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(srcData,size),usage);
};
lime_graphics_opengl_GL.bufferDataWEBGL = function(target,srcData,usage,srcOffset,length) {
	lime_graphics_opengl_GL.context.bufferDataWEBGL(target,srcData,usage,srcOffset,length);
};
lime_graphics_opengl_GL.bufferSubData = function(target,dstByteOffset,size,srcData) {
	lime_graphics_opengl_GL.context.__context.bufferSubData(target,dstByteOffset,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(srcData,size));
};
lime_graphics_opengl_GL.bufferSubDataWEBGL = function(target,dstByteOffset,srcData,srcOffset,length) {
	lime_graphics_opengl_GL.context.bufferSubDataWEBGL(target,dstByteOffset,srcData,srcOffset,length);
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.__context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.__context.clear(mask);
};
lime_graphics_opengl_GL.clearBufferfi = function(buffer,drawbuffer,depth,stencil) {
	lime_graphics_opengl_GL.context.__context.clearBufferfi(buffer,drawbuffer,depth,stencil);
};
lime_graphics_opengl_GL.clearBufferfv = function(buffer,drawbuffer,value) {
	lime_graphics_opengl_GL.context.__context.clearBufferfv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(value));
};
lime_graphics_opengl_GL.clearBufferfvWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.__context.clearBufferfv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferiv = function(buffer,drawbuffer,value) {
	lime_graphics_opengl_GL.context.__context.clearBufferiv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(value));
};
lime_graphics_opengl_GL.clearBufferivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.__context.clearBufferiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferuiv = function(buffer,drawbuffer,value) {
	lime_graphics_opengl_GL.context.__context.clearBufferuiv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(value));
};
lime_graphics_opengl_GL.clearBufferuivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.__context.clearBufferuiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.__context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.__context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearDepthf = function(depth) {
	lime_graphics_opengl_GL.context.__context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.__context.clearStencil(s);
};
lime_graphics_opengl_GL.clientWaitSync = function(sync,flags,timeout) {
	return lime_graphics_opengl_GL.context.__context.clientWaitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.__context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.__context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,imageSize,data) {
	lime_graphics_opengl_GL.context.__context.compressedTexImage2D(target,level,internalformat,width,height,border,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
};
lime_graphics_opengl_GL.compressedTexImage2DWEBGL = function(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexImage2DWEBGL(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.compressedTexImage3D = function(target,level,internalformat,width,height,depth,border,imageSize,data) {
	lime_graphics_opengl_GL.context.__context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
};
lime_graphics_opengl_GL.compressedTexImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.__context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,imageSize,data) {
	lime_graphics_opengl_GL.context.__context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
};
lime_graphics_opengl_GL.compressedTexSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexSubImage2DWEBGL(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.compressedTexSubImage3D = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data) {
	lime_graphics_opengl_GL.context.__context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
};
lime_graphics_opengl_GL.compressedTexSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.__context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.copyBufferSubData = function(readTarget,writeTarget,readOffset,writeOffset,size) {
	var _this = lime_graphics_opengl_GL.context;
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.__context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.__context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.copyTexSubImage3D = function(target,level,xoffset,yoffset,zoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.__context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.__context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.__context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.__context.createProgram();
};
lime_graphics_opengl_GL.createQuery = function() {
	return lime_graphics_opengl_GL.context.__context.createQuery();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.__context.createRenderbuffer();
};
lime_graphics_opengl_GL.createSampler = function() {
	return lime_graphics_opengl_GL.context.__context.createSampler();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.__context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.__context.createTexture();
};
lime_graphics_opengl_GL.createTransformFeedback = function() {
	return lime_graphics_opengl_GL.context.__context.createTransformFeedback();
};
lime_graphics_opengl_GL.createVertexArray = function() {
	return lime_graphics_opengl_GL.context.__context.createVertexArray();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.__context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.__context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.__context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.__context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteQuery = function(query) {
	lime_graphics_opengl_GL.context.__context.deleteQuery(query);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.__context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteSampler = function(sampler) {
	lime_graphics_opengl_GL.context.__context.deleteSampler(sampler);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.__context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteSync = function(sync) {
	lime_graphics_opengl_GL.context.__context.deleteSync(sync);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.__context.deleteTexture(texture);
};
lime_graphics_opengl_GL.deleteTransformFeedback = function(transformFeedback) {
	lime_graphics_opengl_GL.context.__context.deleteTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.deleteVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.__context.deleteVertexArray(vertexArray);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.__context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.__context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.__context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.depthRangef = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.__context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.__context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.__context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.__context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.__context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawArraysInstanced = function(mode,first,count,instanceCount) {
	lime_graphics_opengl_GL.context.__context.drawArraysInstanced(mode,first,count,instanceCount);
};
lime_graphics_opengl_GL.drawBuffers = function(buffers) {
	lime_graphics_opengl_GL.context.__context.drawBuffers(buffers);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	var _this = lime_graphics_opengl_GL.context;
	var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(offset);
	_this.__context.drawElements(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
};
lime_graphics_opengl_GL.drawElementsInstanced = function(mode,count,type,offset,instanceCount) {
	lime_graphics_opengl_GL.context.__context.drawElementsInstanced(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),instanceCount);
};
lime_graphics_opengl_GL.drawRangeElements = function(mode,start,end,count,type,offset) {
	lime_graphics_opengl_GL.context.__context.drawRangeElements(mode,start,end,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)));
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.__context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.__context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.endQuery = function(target) {
	lime_graphics_opengl_GL.context.__context.endQuery(target);
};
lime_graphics_opengl_GL.endTransformFeedback = function() {
	lime_graphics_opengl_GL.context.__context.endTransformFeedback();
};
lime_graphics_opengl_GL.fenceSync = function(condition,flags) {
	return lime_graphics_opengl_GL.context.__context.fenceSync(condition,flags);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.__context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.__context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.__context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.__context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.framebufferTextureLayer = function(target,attachment,texture,level,layer) {
	lime_graphics_opengl_GL.context.__context.framebufferTextureLayer(target,attachment,texture,level,layer);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.__context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.__context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.__context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.__context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getActiveUniformBlocki = function(program,uniformBlockIndex,pname) {
	return lime_graphics_opengl_GL.context.__context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
lime_graphics_opengl_GL.getActiveUniformBlockiv = function(program,uniformBlockIndex,pname,params) {
	lime_graphics_opengl_GL.context.getActiveUniformBlockiv(program,uniformBlockIndex,pname,params);
};
lime_graphics_opengl_GL.getActiveUniformBlockName = function(program,uniformBlockIndex) {
	return lime_graphics_opengl_GL.context.__context.getActiveUniformBlockName(program,uniformBlockIndex);
};
lime_graphics_opengl_GL.getActiveUniformBlockParameter = function(program,uniformBlockIndex,pname) {
	return lime_graphics_opengl_GL.context.__context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
lime_graphics_opengl_GL.getActiveUniforms = function(program,uniformIndices,pname) {
	return lime_graphics_opengl_GL.context.__context.getActiveUniforms(program,uniformIndices,pname);
};
lime_graphics_opengl_GL.getActiveUniformsiv = function(program,uniformIndices,pname,params) {
	var _this = lime_graphics_opengl_GL.context;
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.__context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.__context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBoolean = function(pname) {
	return lime_graphics_opengl_GL.context.__context.getParameter(pname);
};
lime_graphics_opengl_GL.getBooleanv = function(pname,params) {
	lime_graphics_opengl_GL.context.getBooleanv(pname,params);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.__context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getBufferParameteri = function(target,pname) {
	return lime_graphics_opengl_GL.context.__context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getBufferParameteri64v = function(target,pname,params) {
	lime_graphics_opengl_GL.context.getBufferParameteri64v(target,pname,params);
	return;
};
lime_graphics_opengl_GL.getBufferParameteriv = function(target,pname,data) {
	lime_graphics_opengl_GL.context.getBufferParameteriv(target,pname,data);
	return;
};
lime_graphics_opengl_GL.getBufferPointerv = function(target,pname) {
	var _this = lime_graphics_opengl_GL.context;
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
};
lime_graphics_opengl_GL.getBufferSubData = function(target,offset,size,data) {
	lime_graphics_opengl_GL.context.__context.getBufferSubData(target,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,size));
};
lime_graphics_opengl_GL.getBufferSubDataWEBGL = function(target,srcByteOffset,dstData,srcOffset,length) {
	lime_graphics_opengl_GL.context.getBufferSubDataWEBGL(target,srcByteOffset,dstData,srcOffset,length);
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.__context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.__context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.__context.getExtension(name);
};
lime_graphics_opengl_GL.getFloat = function(pname) {
	return lime_graphics_opengl_GL.context.__context.getParameter(pname);
};
lime_graphics_opengl_GL.getFloatv = function(pname,params) {
	lime_graphics_opengl_GL.context.getFloatv(pname,params);
};
lime_graphics_opengl_GL.getFragDataLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.__context.getFragDataLocation(program,name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.__context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameteri = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.__context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameteriv = function(target,attachment,pname,params) {
	lime_graphics_opengl_GL.context.getFramebufferAttachmentParameteriv(target,attachment,pname,params);
};
lime_graphics_opengl_GL.getIndexedParameter = function(target,index) {
	return lime_graphics_opengl_GL.context.__context.getIndexedParameter(target,index);
};
lime_graphics_opengl_GL.getInteger = function(pname) {
	return lime_graphics_opengl_GL.context.__context.getParameter(pname);
};
lime_graphics_opengl_GL.getInteger64 = function(pname) {
	var _this = lime_graphics_opengl_GL.context;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	return this1;
};
lime_graphics_opengl_GL.getInteger64i = function(pname) {
	var _this = lime_graphics_opengl_GL.context;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	return this1;
};
lime_graphics_opengl_GL.getInteger64i_v = function(pname,index,params) {
	var _this = lime_graphics_opengl_GL.context;
	return;
};
lime_graphics_opengl_GL.getInteger64v = function(pname,params) {
	lime_graphics_opengl_GL.context.getInteger64v(pname,params);
	return;
};
lime_graphics_opengl_GL.getIntegeri_v = function(pname,index,params) {
	var _this = lime_graphics_opengl_GL.context;
	return;
};
lime_graphics_opengl_GL.getIntegerv = function(pname,params) {
	lime_graphics_opengl_GL.context.getIntegerv(pname,params);
};
lime_graphics_opengl_GL.getInternalformati = function(target,internalformat,pname) {
	var _this = lime_graphics_opengl_GL.context;
	return 0;
};
lime_graphics_opengl_GL.getInternalformativ = function(target,internalformat,pname,bufSize,params) {
	lime_graphics_opengl_GL.context.getInternalformativ(target,internalformat,pname,bufSize,params);
};
lime_graphics_opengl_GL.getInternalformatParameter = function(target,internalformat,pname) {
	return lime_graphics_opengl_GL.context.__context.getInternalformatParameter(target,internalformat,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.__context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgrami = function(program,pname) {
	return lime_graphics_opengl_GL.context.__context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getProgramiv = function(program,pname,params) {
	lime_graphics_opengl_GL.context.getProgramiv(program,pname,params);
};
lime_graphics_opengl_GL.getProgramBinary = function(program,binaryFormat) {
	var _this = lime_graphics_opengl_GL.context;
	return null;
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.__context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.__context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getQuery = function(target,pname) {
	return lime_graphics_opengl_GL.context.__context.getQuery(target,pname);
};
lime_graphics_opengl_GL.getQueryi = function(target,pname) {
	var _this = lime_graphics_opengl_GL.context;
	return 0;
};
lime_graphics_opengl_GL.getQueryiv = function(target,pname,params) {
	lime_graphics_opengl_GL.context.getQueryiv(target,pname,params);
};
lime_graphics_opengl_GL.getQueryObjectui = function(query,pname) {
	var _this = lime_graphics_opengl_GL.context;
	return 0;
};
lime_graphics_opengl_GL.getQueryObjectuiv = function(query,pname,params) {
	lime_graphics_opengl_GL.context.getQueryObjectuiv(query,pname,params);
};
lime_graphics_opengl_GL.getQueryParameter = function(query,pname) {
	return lime_graphics_opengl_GL.context.__context.getQueryParameter(query,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.__context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameteri = function(target,pname) {
	return lime_graphics_opengl_GL.context.__context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameteriv = function(target,pname,params) {
	lime_graphics_opengl_GL.context.getRenderbufferParameteriv(target,pname,params);
};
lime_graphics_opengl_GL.getSamplerParameter = function(sampler,pname) {
	return lime_graphics_opengl_GL.context.__context.getSamplerParameter(sampler,pname);
};
lime_graphics_opengl_GL.getSamplerParameterf = function(sampler,pname) {
	var _this = lime_graphics_opengl_GL.context;
	return 0;
};
lime_graphics_opengl_GL.getSamplerParameterfv = function(sampler,pname,params) {
	lime_graphics_opengl_GL.context.getSamplerParameterfv(sampler,pname,params);
};
lime_graphics_opengl_GL.getSamplerParameteri = function(sampler,pname) {
	var _this = lime_graphics_opengl_GL.context;
	return 0;
};
lime_graphics_opengl_GL.getSamplerParameteriv = function(sampler,pname,params) {
	lime_graphics_opengl_GL.context.getSamplerParameteriv(sampler,pname,params);
};
lime_graphics_opengl_GL.getShaderi = function(shader,pname) {
	return lime_graphics_opengl_GL.context.__context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderiv = function(shader,pname,params) {
	lime_graphics_opengl_GL.context.getShaderiv(shader,pname,params);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.__context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.__context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.__context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.__context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getString = function(name) {
	return lime_graphics_opengl_GL.context.getString(name);
};
lime_graphics_opengl_GL.getStringi = function(name,index) {
	var _this = lime_graphics_opengl_GL.context;
	return null;
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.__context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getSyncParameter = function(sync,pname) {
	return lime_graphics_opengl_GL.context.__context.getSyncParameter(sync,pname);
};
lime_graphics_opengl_GL.getSyncParameteri = function(sync,pname) {
	var _this = lime_graphics_opengl_GL.context;
	return 0;
};
lime_graphics_opengl_GL.getSyncParameteriv = function(sync,pname,params) {
	lime_graphics_opengl_GL.context.getSyncParameteriv(sync,pname,params);
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.__context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getTexParameterf = function(target,pname) {
	return lime_graphics_opengl_GL.context.__context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getTexParameterfv = function(target,pname,params) {
	lime_graphics_opengl_GL.context.getTexParameterfv(target,pname,params);
};
lime_graphics_opengl_GL.getTexParameteri = function(target,pname) {
	return lime_graphics_opengl_GL.context.__context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getTexParameteriv = function(target,pname,params) {
	lime_graphics_opengl_GL.context.getTexParameteriv(target,pname,params);
};
lime_graphics_opengl_GL.getTransformFeedbackVarying = function(program,index) {
	return lime_graphics_opengl_GL.context.__context.getTransformFeedbackVarying(program,index);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.__context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformf = function(program,location) {
	return lime_graphics_opengl_GL.context.__context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformfv = function(program,location,params) {
	lime_graphics_opengl_GL.context.getUniformfv(program,location,params);
};
lime_graphics_opengl_GL.getUniformi = function(program,location) {
	return lime_graphics_opengl_GL.context.__context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformiv = function(program,location,params) {
	lime_graphics_opengl_GL.context.getUniformiv(program,location,params);
};
lime_graphics_opengl_GL.getUniformui = function(program,location) {
	var _this = lime_graphics_opengl_GL.context;
	return 0;
};
lime_graphics_opengl_GL.getUniformuiv = function(program,location,params) {
	lime_graphics_opengl_GL.context.getUniformuiv(program,location,params);
};
lime_graphics_opengl_GL.getUniformBlockIndex = function(program,uniformBlockName) {
	return lime_graphics_opengl_GL.context.__context.getUniformBlockIndex(program,uniformBlockName);
};
lime_graphics_opengl_GL.getUniformIndices = function(program,uniformNames) {
	return lime_graphics_opengl_GL.context.__context.getUniformIndices(program,uniformNames);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.__context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.__context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribf = function(index,pname) {
	var _this = lime_graphics_opengl_GL.context;
	return 0;
};
lime_graphics_opengl_GL.getVertexAttribfv = function(index,pname,params) {
	lime_graphics_opengl_GL.context.getVertexAttribfv(index,pname,params);
};
lime_graphics_opengl_GL.getVertexAttribi = function(index,pname) {
	var _this = lime_graphics_opengl_GL.context;
	return 0;
};
lime_graphics_opengl_GL.getVertexAttribIi = function(index,pname) {
	var _this = lime_graphics_opengl_GL.context;
	return 0;
};
lime_graphics_opengl_GL.getVertexAttribIiv = function(index,pname,params) {
	var _this = lime_graphics_opengl_GL.context;
};
lime_graphics_opengl_GL.getVertexAttribIui = function(index,pname) {
	var _this = lime_graphics_opengl_GL.context;
	return 0;
};
lime_graphics_opengl_GL.getVertexAttribIuiv = function(index,pname,params) {
	var _this = lime_graphics_opengl_GL.context;
};
lime_graphics_opengl_GL.getVertexAttribiv = function(index,pname,params) {
	lime_graphics_opengl_GL.context.getVertexAttribiv(index,pname,params);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_graphics_opengl_GL.context.__context.getVertexAttribOffset(index,pname));
};
lime_graphics_opengl_GL.getVertexAttribPointerv = function(index,pname) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_graphics_opengl_GL.context.__context.getVertexAttribOffset(index,pname));
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.__context.hint(target,mode);
};
lime_graphics_opengl_GL.invalidateFramebuffer = function(target,attachments) {
	lime_graphics_opengl_GL.context.__context.invalidateFramebuffer(target,attachments);
};
lime_graphics_opengl_GL.invalidateSubFramebuffer = function(target,attachments,x,y,width,height) {
	lime_graphics_opengl_GL.context.__context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.__context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	var _this = lime_graphics_opengl_GL.context;
	if(!_this.__contextLost) {
		return _this.__context.isContextLost();
	} else {
		return true;
	}
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.__context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.__context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.__context.isProgram(program);
};
lime_graphics_opengl_GL.isQuery = function(query) {
	return lime_graphics_opengl_GL.context.__context.isQuery(query);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.__context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isSampler = function(sampler) {
	return lime_graphics_opengl_GL.context.__context.isSampler(sampler);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.__context.isShader(shader);
};
lime_graphics_opengl_GL.isSync = function(sync) {
	return lime_graphics_opengl_GL.context.__context.isSync(sync);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.__context.isTexture(texture);
};
lime_graphics_opengl_GL.isTransformFeedback = function(transformFeedback) {
	return lime_graphics_opengl_GL.context.__context.isTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.isVertexArray = function(vertexArray) {
	return lime_graphics_opengl_GL.context.__context.isVertexArray(vertexArray);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.__context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.__context.linkProgram(program);
};
lime_graphics_opengl_GL.mapBufferRange = function(target,offset,length,access) {
	var _this = lime_graphics_opengl_GL.context;
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
};
lime_graphics_opengl_GL.pauseTransformFeedback = function() {
	lime_graphics_opengl_GL.context.__context.pauseTransformFeedback();
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.__context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.__context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.programBinary = function(program,binaryFormat,binary,length) {
	var _this = lime_graphics_opengl_GL.context;
};
lime_graphics_opengl_GL.programParameteri = function(program,pname,value) {
	var _this = lime_graphics_opengl_GL.context;
};
lime_graphics_opengl_GL.readBuffer = function(src) {
	lime_graphics_opengl_GL.context.__context.readBuffer(src);
};
lime_graphics_opengl_GL.readPixels = function(x,y,width,height,format,type,pixels) {
	var _this = lime_graphics_opengl_GL.context;
	var pixels1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytesPointer(pixels);
	_this.__context.readPixels(x,y,width,height,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(pixels1));
};
lime_graphics_opengl_GL.readPixelsWEBGL = function(x,y,width,height,format,type,pixels,dstOffset) {
	lime_graphics_opengl_GL.context.readPixelsWEBGL(x,y,width,height,format,type,pixels,dstOffset);
};
lime_graphics_opengl_GL.releaseShaderCompiler = function() {
	var _this = lime_graphics_opengl_GL.context;
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.__context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.renderbufferStorageMultisample = function(target,samples,internalformat,width,height) {
	lime_graphics_opengl_GL.context.__context.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
lime_graphics_opengl_GL.resumeTransformFeedback = function() {
	lime_graphics_opengl_GL.context.__context.resumeTransformFeedback();
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.__context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.samplerParameterf = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.__context.samplerParameterf(sampler,pname,param);
};
lime_graphics_opengl_GL.samplerParameteri = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.__context.samplerParameteri(sampler,pname,param);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.__context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderBinary = function(shaders,binaryformat,binary,length) {
	var _this = lime_graphics_opengl_GL.context;
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.__context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.__context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.__context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.__context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.__context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.__context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.__context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,data) {
	lime_graphics_opengl_GL.context.__context.texImage2D(target,level,internalformat,width,height,border,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl_GL.texImage2DWEBGL = function(target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	lime_graphics_opengl_GL.context.texImage2DWEBGL(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
};
lime_graphics_opengl_GL.texImage3D = function(target,level,internalformat,width,height,depth,border,format,type,data) {
	lime_graphics_opengl_GL.context.__context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl_GL.texImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset) {
	lime_graphics_opengl_GL.context.__context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset);
};
lime_graphics_opengl_GL.texStorage2D = function(target,level,internalformat,width,height) {
	lime_graphics_opengl_GL.context.__context.texStorage2D(target,level,internalformat,width,height);
};
lime_graphics_opengl_GL.texStorage3D = function(target,level,internalformat,width,height,depth) {
	lime_graphics_opengl_GL.context.__context.texStorage3D(target,level,internalformat,width,height,depth);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.__context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.__context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	var _this = lime_graphics_opengl_GL.context;
	var data = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(pixels);
	_this.__context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl_GL.texSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	lime_graphics_opengl_GL.context.texSubImage2DWEBGL(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
};
lime_graphics_opengl_GL.texSubImage3D = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,data) {
	lime_graphics_opengl_GL.context.__context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl_GL.texSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset) {
	lime_graphics_opengl_GL.context.__context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset);
};
lime_graphics_opengl_GL.transformFeedbackVaryings = function(program,varyings,bufferMode) {
	lime_graphics_opengl_GL.context.__context.transformFeedbackVaryings(program,varyings,bufferMode);
};
lime_graphics_opengl_GL.uniform1f = function(location,v0) {
	lime_graphics_opengl_GL.context.__context.uniform1f(location,v0);
};
lime_graphics_opengl_GL.uniform1fv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform1fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4));
};
lime_graphics_opengl_GL.uniform1fvWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform1fvWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform1i = function(location,v0) {
	lime_graphics_opengl_GL.context.__context.uniform1i(location,v0);
};
lime_graphics_opengl_GL.uniform1iv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform1iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4));
};
lime_graphics_opengl_GL.uniform1ivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform1ivWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform1ui = function(location,v0) {
	lime_graphics_opengl_GL.context.__context.uniform1ui(location,v0);
};
lime_graphics_opengl_GL.uniform1uiv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform1uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4));
};
lime_graphics_opengl_GL.uniform1uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.__context.uniform1uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2f = function(location,v0,v1) {
	lime_graphics_opengl_GL.context.__context.uniform2f(location,v0,v1);
};
lime_graphics_opengl_GL.uniform2fv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform2fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 2));
};
lime_graphics_opengl_GL.uniform2fvWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform2fvWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.__context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2iv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform2iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 2));
};
lime_graphics_opengl_GL.uniform2ivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform2ivWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2ui = function(location,x,y) {
	lime_graphics_opengl_GL.context.__context.uniform2ui(location,x,y);
};
lime_graphics_opengl_GL.uniform2uiv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform2uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 2));
};
lime_graphics_opengl_GL.uniform2uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.__context.uniform2uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform3f = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.__context.uniform3f(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3fv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform3fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 3));
};
lime_graphics_opengl_GL.uniform3fvWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform3fvWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform3i = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.__context.uniform3i(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3iv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform3iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 3));
};
lime_graphics_opengl_GL.uniform3ivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform3ivWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform3ui = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.__context.uniform3ui(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3uiv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform3uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 3));
};
lime_graphics_opengl_GL.uniform3uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.__context.uniform3uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform4f = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.__context.uniform4f(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4fv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform4fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 4));
};
lime_graphics_opengl_GL.uniform4fvWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform4fvWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform4i = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.__context.uniform4i(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4iv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform4iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 4));
};
lime_graphics_opengl_GL.uniform4ivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform4ivWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform4ui = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.__context.uniform4ui(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4uiv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform4uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 4));
};
lime_graphics_opengl_GL.uniform4uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.__context.uniform4uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformBlockBinding = function(program,uniformBlockIndex,uniformBlockBinding) {
	lime_graphics_opengl_GL.context.__context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
};
lime_graphics_opengl_GL.uniformMatrix2fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 4));
};
lime_graphics_opengl_GL.uniformMatrix2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix2x3fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix2x3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 6));
};
lime_graphics_opengl_GL.uniformMatrix2x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix2x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix2x4fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix2x4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 8));
};
lime_graphics_opengl_GL.uniformMatrix2x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix2x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 9));
};
lime_graphics_opengl_GL.uniformMatrix3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3x2fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix3x2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 6));
};
lime_graphics_opengl_GL.uniformMatrix3x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix3x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3x4fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix3x4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 12));
};
lime_graphics_opengl_GL.uniformMatrix3x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix3x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 16));
};
lime_graphics_opengl_GL.uniformMatrix4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4x2fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix4x2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 8));
};
lime_graphics_opengl_GL.uniformMatrix4x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x2fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4x3fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix4x3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 12));
};
lime_graphics_opengl_GL.uniformMatrix4x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix4x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.unmapBuffer = function(target) {
	var _this = lime_graphics_opengl_GL.context;
	return false;
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.__currentProgram = program;
	lime_graphics_opengl_GL.context.__context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.__context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(index,v0) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib1f(index,v0);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib1fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
};
lime_graphics_opengl_GL.vertexAttrib1fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib1fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
};
lime_graphics_opengl_GL.vertexAttrib2f = function(index,v0,v1) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib2f(index,v0,v1);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib2fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
};
lime_graphics_opengl_GL.vertexAttrib2fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib2fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
};
lime_graphics_opengl_GL.vertexAttrib3f = function(index,v0,v1,v2) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib3f(index,v0,v1,v2);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib3fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
};
lime_graphics_opengl_GL.vertexAttrib3fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib3fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
};
lime_graphics_opengl_GL.vertexAttrib4f = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib4f(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib4fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
};
lime_graphics_opengl_GL.vertexAttrib4fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib4fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
};
lime_graphics_opengl_GL.vertexAttribDivisor = function(index,divisor) {
	lime_graphics_opengl_GL.context.__context.vertexAttribDivisor(index,divisor);
};
lime_graphics_opengl_GL.vertexAttribI4i = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.__context.vertexAttribI4i(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4iv = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttribI4iv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v));
};
lime_graphics_opengl_GL.vertexAttribI4ivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttribI4iv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v));
};
lime_graphics_opengl_GL.vertexAttribI4ui = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.__context.vertexAttribI4ui(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4uiv = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttribI4uiv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v));
};
lime_graphics_opengl_GL.vertexAttribI4uivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttribI4uiv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v));
};
lime_graphics_opengl_GL.vertexAttribIPointer = function(index,size,type,stride,offset) {
	lime_graphics_opengl_GL.context.__context.vertexAttribIPointer(index,size,type,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)));
};
lime_graphics_opengl_GL.vertexAttribPointer = function(index,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.__context.vertexAttribPointer(index,size,type,normalized,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.__context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.waitSync = function(sync,flags,timeout) {
	lime_graphics_opengl_GL.context.__context.waitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.get_type = function() {
	return lime_graphics_opengl_GL.context.type;
};
lime_graphics_opengl_GL.get_version = function() {
	return lime_graphics_opengl_GL.context.version;
};
lime_graphics_opengl_GL.__getObjectID = function(object) {
	if(object == null) {
		return 0;
	} else {
		return object.id;
	}
};
var lime_graphics_opengl_GLContextType = $hxClasses["lime.graphics.opengl.GLContextType"] = { __ename__ : ["lime","graphics","opengl","GLContextType"], __constructs__ : ["OPENGL","GLES","WEBGL"] };
lime_graphics_opengl_GLContextType.OPENGL = ["OPENGL",0];
lime_graphics_opengl_GLContextType.OPENGL.toString = $estr;
lime_graphics_opengl_GLContextType.OPENGL.__enum__ = lime_graphics_opengl_GLContextType;
lime_graphics_opengl_GLContextType.GLES = ["GLES",1];
lime_graphics_opengl_GLContextType.GLES.toString = $estr;
lime_graphics_opengl_GLContextType.GLES.__enum__ = lime_graphics_opengl_GLContextType;
lime_graphics_opengl_GLContextType.WEBGL = ["WEBGL",2];
lime_graphics_opengl_GLContextType.WEBGL.toString = $estr;
lime_graphics_opengl_GLContextType.WEBGL.__enum__ = lime_graphics_opengl_GLContextType;
var lime_graphics_opengl__$GLES2Context_GLES2Context_$Impl_$ = {};
$hxClasses["lime.graphics.opengl._GLES2Context.GLES2Context_Impl_"] = lime_graphics_opengl__$GLES2Context_GLES2Context_$Impl_$;
lime_graphics_opengl__$GLES2Context_GLES2Context_$Impl_$.__name__ = ["lime","graphics","opengl","_GLES2Context","GLES2Context_Impl_"];
lime_graphics_opengl__$GLES2Context_GLES2Context_$Impl_$.fromGL = function(gl) {
	return lime_graphics_opengl_GL.context;
};
var lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$ = {};
$hxClasses["lime.graphics.opengl._GLES3Context.GLES3Context_Impl_"] = lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$;
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.__name__ = ["lime","graphics","opengl","_GLES3Context","GLES3Context_Impl_"];
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.__properties__ = {get_version:"get_version",get_type:"get_type",get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL:"get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL",get_TIMEOUT_IGNORED:"get_TIMEOUT_IGNORED",get_INVALID_INDEX:"get_INVALID_INDEX",get_DEPTH32F_STENCIL8:"get_DEPTH32F_STENCIL8",get_DEPTH_COMPONENT32F:"get_DEPTH_COMPONENT32F",get_DYNAMIC_COPY:"get_DYNAMIC_COPY",get_DYNAMIC_READ:"get_DYNAMIC_READ",get_STATIC_COPY:"get_STATIC_COPY",get_STATIC_READ:"get_STATIC_READ",get_STREAM_COPY:"get_STREAM_COPY",get_STREAM_READ:"get_STREAM_READ",get_DEPTH_COMPONENT24:"get_DEPTH_COMPONENT24",get_MAX:"get_MAX",get_MIN:"get_MIN",get_STENCIL:"get_STENCIL",get_DEPTH:"get_DEPTH",get_COLOR:"get_COLOR",get_SYNC_FLUSH_COMMANDS_BIT:"get_SYNC_FLUSH_COMMANDS_BIT",get_WAIT_FAILED:"get_WAIT_FAILED",get_CONDITION_SATISFIED:"get_CONDITION_SATISFIED",get_TIMEOUT_EXPIRED:"get_TIMEOUT_EXPIRED",get_ALREADY_SIGNALED:"get_ALREADY_SIGNALED",get_SIGNALED:"get_SIGNALED",get_UNSIGNALED:"get_UNSIGNALED",get_SYNC_GPU_COMMANDS_COMPLETE:"get_SYNC_GPU_COMMANDS_COMPLETE",get_SYNC_FENCE:"get_SYNC_FENCE",get_SYNC_FLAGS:"get_SYNC_FLAGS",get_SYNC_STATUS:"get_SYNC_STATUS",get_SYNC_CONDITION:"get_SYNC_CONDITION",get_OBJECT_TYPE:"get_OBJECT_TYPE",get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER:"get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER:"get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES:"get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",get_UNIFORM_BLOCK_ACTIVE_UNIFORMS:"get_UNIFORM_BLOCK_ACTIVE_UNIFORMS",get_UNIFORM_BLOCK_DATA_SIZE:"get_UNIFORM_BLOCK_DATA_SIZE",get_UNIFORM_BLOCK_BINDING:"get_UNIFORM_BLOCK_BINDING",get_UNIFORM_IS_ROW_MAJOR:"get_UNIFORM_IS_ROW_MAJOR",get_UNIFORM_MATRIX_STRIDE:"get_UNIFORM_MATRIX_STRIDE",get_UNIFORM_ARRAY_STRIDE:"get_UNIFORM_ARRAY_STRIDE",get_UNIFORM_OFFSET:"get_UNIFORM_OFFSET",get_UNIFORM_BLOCK_INDEX:"get_UNIFORM_BLOCK_INDEX",get_UNIFORM_SIZE:"get_UNIFORM_SIZE",get_UNIFORM_TYPE:"get_UNIFORM_TYPE",get_ACTIVE_UNIFORM_BLOCKS:"get_ACTIVE_UNIFORM_BLOCKS",get_UNIFORM_BUFFER_OFFSET_ALIGNMENT:"get_UNIFORM_BUFFER_OFFSET_ALIGNMENT",get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS:"get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS:"get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",get_MAX_UNIFORM_BLOCK_SIZE:"get_MAX_UNIFORM_BLOCK_SIZE",get_MAX_UNIFORM_BUFFER_BINDINGS:"get_MAX_UNIFORM_BUFFER_BINDINGS",get_MAX_COMBINED_UNIFORM_BLOCKS:"get_MAX_COMBINED_UNIFORM_BLOCKS",get_MAX_FRAGMENT_UNIFORM_BLOCKS:"get_MAX_FRAGMENT_UNIFORM_BLOCKS",get_MAX_VERTEX_UNIFORM_BLOCKS:"get_MAX_VERTEX_UNIFORM_BLOCKS",get_UNIFORM_BUFFER_SIZE:"get_UNIFORM_BUFFER_SIZE",get_UNIFORM_BUFFER_START:"get_UNIFORM_BUFFER_START",get_UNIFORM_BUFFER_BINDING:"get_UNIFORM_BUFFER_BINDING",get_UNIFORM_BUFFER:"get_UNIFORM_BUFFER",get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:"get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",get_RENDERBUFFER_SAMPLES:"get_RENDERBUFFER_SAMPLES",get_READ_FRAMEBUFFER_BINDING:"get_READ_FRAMEBUFFER_BINDING",get_DRAW_FRAMEBUFFER:"get_DRAW_FRAMEBUFFER",get_READ_FRAMEBUFFER:"get_READ_FRAMEBUFFER",get_DRAW_FRAMEBUFFER_BINDING:"get_DRAW_FRAMEBUFFER_BINDING",get_DEPTH24_STENCIL8:"get_DEPTH24_STENCIL8",get_FRAMEBUFFER_DEFAULT:"get_FRAMEBUFFER_DEFAULT",get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:"get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE:"get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE:"get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE:"get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE:"get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",get_FRAMEBUFFER_ATTACHMENT_RED_SIZE:"get_FRAMEBUFFER_ATTACHMENT_RED_SIZE",get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:"get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:"get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",get_TRANSFORM_FEEDBACK_BINDING:"get_TRANSFORM_FEEDBACK_BINDING",get_TRANSFORM_FEEDBACK_ACTIVE:"get_TRANSFORM_FEEDBACK_ACTIVE",get_TRANSFORM_FEEDBACK_PAUSED:"get_TRANSFORM_FEEDBACK_PAUSED",get_TRANSFORM_FEEDBACK:"get_TRANSFORM_FEEDBACK",get_TRANSFORM_FEEDBACK_BUFFER_BINDING:"get_TRANSFORM_FEEDBACK_BUFFER_BINDING",get_TRANSFORM_FEEDBACK_BUFFER:"get_TRANSFORM_FEEDBACK_BUFFER",get_SEPARATE_ATTRIBS:"get_SEPARATE_ATTRIBS",get_INTERLEAVED_ATTRIBS:"get_INTERLEAVED_ATTRIBS",get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS:"get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS:"get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN:"get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",get_TRANSFORM_FEEDBACK_BUFFER_SIZE:"get_TRANSFORM_FEEDBACK_BUFFER_SIZE",get_TRANSFORM_FEEDBACK_BUFFER_START:"get_TRANSFORM_FEEDBACK_BUFFER_START",get_TRANSFORM_FEEDBACK_VARYINGS:"get_TRANSFORM_FEEDBACK_VARYINGS",get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS:"get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",get_TRANSFORM_FEEDBACK_BUFFER_MODE:"get_TRANSFORM_FEEDBACK_BUFFER_MODE",get_VERTEX_ATTRIB_ARRAY_DIVISOR:"get_VERTEX_ATTRIB_ARRAY_DIVISOR",get_VERTEX_ATTRIB_ARRAY_INTEGER:"get_VERTEX_ATTRIB_ARRAY_INTEGER",get_SIGNED_NORMALIZED:"get_SIGNED_NORMALIZED",get_UNSIGNED_NORMALIZED:"get_UNSIGNED_NORMALIZED",get_UNSIGNED_INT_VEC4:"get_UNSIGNED_INT_VEC4",get_UNSIGNED_INT_VEC3:"get_UNSIGNED_INT_VEC3",get_UNSIGNED_INT_VEC2:"get_UNSIGNED_INT_VEC2",get_FLOAT_MAT4x3:"get_FLOAT_MAT4x3",get_FLOAT_MAT4x2:"get_FLOAT_MAT4x2",get_FLOAT_MAT3x4:"get_FLOAT_MAT3x4",get_FLOAT_MAT3x2:"get_FLOAT_MAT3x2",get_FLOAT_MAT2x4:"get_FLOAT_MAT2x4",get_FLOAT_MAT2x3:"get_FLOAT_MAT2x3",get_COPY_WRITE_BUFFER_BINDING:"get_COPY_WRITE_BUFFER_BINDING",get_COPY_READ_BUFFER_BINDING:"get_COPY_READ_BUFFER_BINDING",get_COPY_WRITE_BUFFER:"get_COPY_WRITE_BUFFER",get_COPY_READ_BUFFER:"get_COPY_READ_BUFFER",get_PIXEL_UNPACK_BUFFER_BINDING:"get_PIXEL_UNPACK_BUFFER_BINDING",get_PIXEL_PACK_BUFFER_BINDING:"get_PIXEL_PACK_BUFFER_BINDING",get_PIXEL_UNPACK_BUFFER:"get_PIXEL_UNPACK_BUFFER",get_PIXEL_PACK_BUFFER:"get_PIXEL_PACK_BUFFER",get_SAMPLER_BINDING:"get_SAMPLER_BINDING",get_MAX_SAMPLES:"get_MAX_SAMPLES",get_UNSIGNED_INT_SAMPLER_2D_ARRAY:"get_UNSIGNED_INT_SAMPLER_2D_ARRAY",get_UNSIGNED_INT_SAMPLER_CUBE:"get_UNSIGNED_INT_SAMPLER_CUBE",get_UNSIGNED_INT_SAMPLER_3D:"get_UNSIGNED_INT_SAMPLER_3D",get_UNSIGNED_INT_SAMPLER_2D:"get_UNSIGNED_INT_SAMPLER_2D",get_INT_SAMPLER_2D_ARRAY:"get_INT_SAMPLER_2D_ARRAY",get_INT_SAMPLER_CUBE:"get_INT_SAMPLER_CUBE",get_INT_SAMPLER_3D:"get_INT_SAMPLER_3D",get_INT_SAMPLER_2D:"get_INT_SAMPLER_2D",get_SAMPLER_CUBE_SHADOW:"get_SAMPLER_CUBE_SHADOW",get_SAMPLER_2D_ARRAY_SHADOW:"get_SAMPLER_2D_ARRAY_SHADOW",get_SAMPLER_2D_ARRAY:"get_SAMPLER_2D_ARRAY",get_SAMPLER_2D_SHADOW:"get_SAMPLER_2D_SHADOW",get_SAMPLER_3D:"get_SAMPLER_3D",get_COLOR_ATTACHMENT15:"get_COLOR_ATTACHMENT15",get_COLOR_ATTACHMENT14:"get_COLOR_ATTACHMENT14",get_COLOR_ATTACHMENT13:"get_COLOR_ATTACHMENT13",get_COLOR_ATTACHMENT12:"get_COLOR_ATTACHMENT12",get_COLOR_ATTACHMENT11:"get_COLOR_ATTACHMENT11",get_COLOR_ATTACHMENT10:"get_COLOR_ATTACHMENT10",get_COLOR_ATTACHMENT9:"get_COLOR_ATTACHMENT9",get_COLOR_ATTACHMENT8:"get_COLOR_ATTACHMENT8",get_COLOR_ATTACHMENT7:"get_COLOR_ATTACHMENT7",get_COLOR_ATTACHMENT6:"get_COLOR_ATTACHMENT6",get_COLOR_ATTACHMENT5:"get_COLOR_ATTACHMENT5",get_COLOR_ATTACHMENT4:"get_COLOR_ATTACHMENT4",get_COLOR_ATTACHMENT3:"get_COLOR_ATTACHMENT3",get_COLOR_ATTACHMENT2:"get_COLOR_ATTACHMENT2",get_COLOR_ATTACHMENT1:"get_COLOR_ATTACHMENT1",get_MAX_COLOR_ATTACHMENTS:"get_MAX_COLOR_ATTACHMENTS",get_DRAW_BUFFER15:"get_DRAW_BUFFER15",get_DRAW_BUFFER14:"get_DRAW_BUFFER14",get_DRAW_BUFFER13:"get_DRAW_BUFFER13",get_DRAW_BUFFER12:"get_DRAW_BUFFER12",get_DRAW_BUFFER11:"get_DRAW_BUFFER11",get_DRAW_BUFFER10:"get_DRAW_BUFFER10",get_DRAW_BUFFER9:"get_DRAW_BUFFER9",get_DRAW_BUFFER8:"get_DRAW_BUFFER8",get_DRAW_BUFFER7:"get_DRAW_BUFFER7",get_DRAW_BUFFER6:"get_DRAW_BUFFER6",get_DRAW_BUFFER5:"get_DRAW_BUFFER5",get_DRAW_BUFFER4:"get_DRAW_BUFFER4",get_DRAW_BUFFER3:"get_DRAW_BUFFER3",get_DRAW_BUFFER2:"get_DRAW_BUFFER2",get_DRAW_BUFFER1:"get_DRAW_BUFFER1",get_DRAW_BUFFER0:"get_DRAW_BUFFER0",get_MAX_DRAW_BUFFERS:"get_MAX_DRAW_BUFFERS",get_ANY_SAMPLES_PASSED_CONSERVATIVE:"get_ANY_SAMPLES_PASSED_CONSERVATIVE",get_ANY_SAMPLES_PASSED:"get_ANY_SAMPLES_PASSED",get_QUERY_RESULT_AVAILABLE:"get_QUERY_RESULT_AVAILABLE",get_QUERY_RESULT:"get_QUERY_RESULT",get_CURRENT_QUERY:"get_CURRENT_QUERY",get_INT_2_10_10_10_REV:"get_INT_2_10_10_10_REV",get_RG_INTEGER:"get_RG_INTEGER",get_RG:"get_RG",get_HALF_FLOAT:"get_HALF_FLOAT",get_UNSIGNED_INT_24_8:"get_UNSIGNED_INT_24_8",get_FLOAT_32_UNSIGNED_INT_24_8_REV:"get_FLOAT_32_UNSIGNED_INT_24_8_REV",get_UNSIGNED_INT_5_9_9_9_REV:"get_UNSIGNED_INT_5_9_9_9_REV",get_UNSIGNED_INT_10F_11F_11F_REV:"get_UNSIGNED_INT_10F_11F_11F_REV",get_UNSIGNED_INT_2_10_10_10_REV:"get_UNSIGNED_INT_2_10_10_10_REV",get_TEXTURE_IMMUTABLE_LEVELS:"get_TEXTURE_IMMUTABLE_LEVELS",get_TEXTURE_IMMUTABLE_FORMAT:"get_TEXTURE_IMMUTABLE_FORMAT",get_RGB10_A2UI:"get_RGB10_A2UI",get_RGBA8_SNORM:"get_RGBA8_SNORM",get_RGB8_SNORM:"get_RGB8_SNORM",get_RG8_SNORM:"get_RG8_SNORM",get_R8_SNORM:"get_R8_SNORM",get_RG32UI:"get_RG32UI",get_RG32I:"get_RG32I",get_RG16UI:"get_RG16UI",get_RG16I:"get_RG16I",get_RG8UI:"get_RG8UI",get_RG8I:"get_RG8I",get_R32UI:"get_R32UI",get_R32I:"get_R32I",get_R16UI:"get_R16UI",get_R16I:"get_R16I",get_R8UI:"get_R8UI",get_R8I:"get_R8I",get_RG32F:"get_RG32F",get_RG16F:"get_RG16F",get_R32F:"get_R32F",get_R16F:"get_R16F",get_RG8:"get_RG8",get_R8:"get_R8",get_RGBA_INTEGER:"get_RGBA_INTEGER",get_RGB_INTEGER:"get_RGB_INTEGER",get_RED_INTEGER:"get_RED_INTEGER",get_RGB8I:"get_RGB8I",get_RGBA8I:"get_RGBA8I",get_RGB16I:"get_RGB16I",get_RGBA16I:"get_RGBA16I",get_RGB32I:"get_RGB32I",get_RGBA32I:"get_RGBA32I",get_RGB8UI:"get_RGB8UI",get_RGBA8UI:"get_RGBA8UI",get_RGB16UI:"get_RGB16UI",get_RGBA16UI:"get_RGBA16UI",get_RGB32UI:"get_RGB32UI",get_RGBA32UI:"get_RGBA32UI",get_RGB9_E5:"get_RGB9_E5",get_R11F_G11F_B10F:"get_R11F_G11F_B10F",get_TEXTURE_BINDING_2D_ARRAY:"get_TEXTURE_BINDING_2D_ARRAY",get_TEXTURE_2D_ARRAY:"get_TEXTURE_2D_ARRAY",get_RGB16F:"get_RGB16F",get_RGBA16F:"get_RGBA16F",get_RGB32F:"get_RGB32F",get_RGBA32F:"get_RGBA32F",get_COMPARE_REF_TO_TEXTURE:"get_COMPARE_REF_TO_TEXTURE",get_SRGB8_ALPHA8:"get_SRGB8_ALPHA8",get_SRGB8:"get_SRGB8",get_SRGB:"get_SRGB",get_TEXTURE_COMPARE_FUNC:"get_TEXTURE_COMPARE_FUNC",get_TEXTURE_COMPARE_MODE:"get_TEXTURE_COMPARE_MODE",get_TEXTURE_MAX_LEVEL:"get_TEXTURE_MAX_LEVEL",get_TEXTURE_BASE_LEVEL:"get_TEXTURE_BASE_LEVEL",get_TEXTURE_MAX_LOD:"get_TEXTURE_MAX_LOD",get_TEXTURE_MIN_LOD:"get_TEXTURE_MIN_LOD",get_TEXTURE_WRAP_R:"get_TEXTURE_WRAP_R",get_TEXTURE_3D:"get_TEXTURE_3D",get_RGB10_A2:"get_RGB10_A2",get_RGBA8:"get_RGBA8",get_RGB8:"get_RGB8",get_RED:"get_RED",get_MAX_ELEMENT_INDEX:"get_MAX_ELEMENT_INDEX",get_MAX_SERVER_WAIT_TIMEOUT:"get_MAX_SERVER_WAIT_TIMEOUT",get_MAX_FRAGMENT_INPUT_COMPONENTS:"get_MAX_FRAGMENT_INPUT_COMPONENTS",get_MAX_VERTEX_OUTPUT_COMPONENTS:"get_MAX_VERTEX_OUTPUT_COMPONENTS",get_VERTEX_ARRAY_BINDING:"get_VERTEX_ARRAY_BINDING",get_RASTERIZER_DISCARD:"get_RASTERIZER_DISCARD",get_FRAGMENT_SHADER_DERIVATIVE_HINT:"get_FRAGMENT_SHADER_DERIVATIVE_HINT",get_MAX_VARYING_COMPONENTS:"get_MAX_VARYING_COMPONENTS",get_MAX_PROGRAM_TEXEL_OFFSET:"get_MAX_PROGRAM_TEXEL_OFFSET",get_MIN_PROGRAM_TEXEL_OFFSET:"get_MIN_PROGRAM_TEXEL_OFFSET",get_MAX_ARRAY_TEXTURE_LAYERS:"get_MAX_ARRAY_TEXTURE_LAYERS",get_MAX_VERTEX_UNIFORM_COMPONENTS:"get_MAX_VERTEX_UNIFORM_COMPONENTS",get_MAX_FRAGMENT_UNIFORM_COMPONENTS:"get_MAX_FRAGMENT_UNIFORM_COMPONENTS",get_MAX_TEXTURE_LOD_BIAS:"get_MAX_TEXTURE_LOD_BIAS",get_MAX_ELEMENTS_INDICES:"get_MAX_ELEMENTS_INDICES",get_MAX_ELEMENTS_VERTICES:"get_MAX_ELEMENTS_VERTICES",get_MAX_3D_TEXTURE_SIZE:"get_MAX_3D_TEXTURE_SIZE",get_UNPACK_IMAGE_HEIGHT:"get_UNPACK_IMAGE_HEIGHT",get_UNPACK_SKIP_IMAGES:"get_UNPACK_SKIP_IMAGES",get_TEXTURE_BINDING_3D:"get_TEXTURE_BINDING_3D",get_PACK_SKIP_PIXELS:"get_PACK_SKIP_PIXELS",get_PACK_SKIP_ROWS:"get_PACK_SKIP_ROWS",get_PACK_ROW_LENGTH:"get_PACK_ROW_LENGTH",get_UNPACK_SKIP_PIXELS:"get_UNPACK_SKIP_PIXELS",get_UNPACK_SKIP_ROWS:"get_UNPACK_SKIP_ROWS",get_UNPACK_ROW_LENGTH:"get_UNPACK_ROW_LENGTH",get_READ_BUFFER:"get_READ_BUFFER",get_BROWSER_DEFAULT_WEBGL:"get_BROWSER_DEFAULT_WEBGL",get_UNPACK_COLORSPACE_CONVERSION_WEBGL:"get_UNPACK_COLORSPACE_CONVERSION_WEBGL",get_CONTEXT_LOST_WEBGL:"get_CONTEXT_LOST_WEBGL",get_UNPACK_PREMULTIPLY_ALPHA_WEBGL:"get_UNPACK_PREMULTIPLY_ALPHA_WEBGL",get_UNPACK_FLIP_Y_WEBGL:"get_UNPACK_FLIP_Y_WEBGL",get_INVALID_FRAMEBUFFER_OPERATION:"get_INVALID_FRAMEBUFFER_OPERATION",get_MAX_RENDERBUFFER_SIZE:"get_MAX_RENDERBUFFER_SIZE",get_RENDERBUFFER_BINDING:"get_RENDERBUFFER_BINDING",get_FRAMEBUFFER_BINDING:"get_FRAMEBUFFER_BINDING",get_FRAMEBUFFER_UNSUPPORTED:"get_FRAMEBUFFER_UNSUPPORTED",get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS:"get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS",get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:"get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT:"get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT",get_FRAMEBUFFER_COMPLETE:"get_FRAMEBUFFER_COMPLETE",get_NONE:"get_NONE",get_DEPTH_STENCIL_ATTACHMENT:"get_DEPTH_STENCIL_ATTACHMENT",get_STENCIL_ATTACHMENT:"get_STENCIL_ATTACHMENT",get_DEPTH_ATTACHMENT:"get_DEPTH_ATTACHMENT",get_COLOR_ATTACHMENT0:"get_COLOR_ATTACHMENT0",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:"get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:"get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",get_RENDERBUFFER_STENCIL_SIZE:"get_RENDERBUFFER_STENCIL_SIZE",get_RENDERBUFFER_DEPTH_SIZE:"get_RENDERBUFFER_DEPTH_SIZE",get_RENDERBUFFER_ALPHA_SIZE:"get_RENDERBUFFER_ALPHA_SIZE",get_RENDERBUFFER_BLUE_SIZE:"get_RENDERBUFFER_BLUE_SIZE",get_RENDERBUFFER_GREEN_SIZE:"get_RENDERBUFFER_GREEN_SIZE",get_RENDERBUFFER_RED_SIZE:"get_RENDERBUFFER_RED_SIZE",get_RENDERBUFFER_INTERNAL_FORMAT:"get_RENDERBUFFER_INTERNAL_FORMAT",get_RENDERBUFFER_HEIGHT:"get_RENDERBUFFER_HEIGHT",get_RENDERBUFFER_WIDTH:"get_RENDERBUFFER_WIDTH",get_DEPTH_STENCIL:"get_DEPTH_STENCIL",get_STENCIL_INDEX8:"get_STENCIL_INDEX8",get_STENCIL_INDEX:"get_STENCIL_INDEX",get_DEPTH_COMPONENT16:"get_DEPTH_COMPONENT16",get_RGB565:"get_RGB565",get_RGB5_A1:"get_RGB5_A1",get_RGBA4:"get_RGBA4",get_RENDERBUFFER:"get_RENDERBUFFER",get_FRAMEBUFFER:"get_FRAMEBUFFER",get_HIGH_INT:"get_HIGH_INT",get_MEDIUM_INT:"get_MEDIUM_INT",get_LOW_INT:"get_LOW_INT",get_HIGH_FLOAT:"get_HIGH_FLOAT",get_MEDIUM_FLOAT:"get_MEDIUM_FLOAT",get_LOW_FLOAT:"get_LOW_FLOAT",get_COMPILE_STATUS:"get_COMPILE_STATUS",get_POINT_SPRITE:"get_POINT_SPRITE",get_VERTEX_PROGRAM_POINT_SIZE:"get_VERTEX_PROGRAM_POINT_SIZE",get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:"get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",get_VERTEX_ATTRIB_ARRAY_POINTER:"get_VERTEX_ATTRIB_ARRAY_POINTER",get_VERTEX_ATTRIB_ARRAY_NORMALIZED:"get_VERTEX_ATTRIB_ARRAY_NORMALIZED",get_VERTEX_ATTRIB_ARRAY_TYPE:"get_VERTEX_ATTRIB_ARRAY_TYPE",get_VERTEX_ATTRIB_ARRAY_STRIDE:"get_VERTEX_ATTRIB_ARRAY_STRIDE",get_VERTEX_ATTRIB_ARRAY_SIZE:"get_VERTEX_ATTRIB_ARRAY_SIZE",get_VERTEX_ATTRIB_ARRAY_ENABLED:"get_VERTEX_ATTRIB_ARRAY_ENABLED",get_SAMPLER_CUBE:"get_SAMPLER_CUBE",get_SAMPLER_2D:"get_SAMPLER_2D",get_FLOAT_MAT4:"get_FLOAT_MAT4",get_FLOAT_MAT3:"get_FLOAT_MAT3",get_FLOAT_MAT2:"get_FLOAT_MAT2",get_BOOL_VEC4:"get_BOOL_VEC4",get_BOOL_VEC3:"get_BOOL_VEC3",get_BOOL_VEC2:"get_BOOL_VEC2",get_BOOL:"get_BOOL",get_INT_VEC4:"get_INT_VEC4",get_INT_VEC3:"get_INT_VEC3",get_INT_VEC2:"get_INT_VEC2",get_FLOAT_VEC4:"get_FLOAT_VEC4",get_FLOAT_VEC3:"get_FLOAT_VEC3",get_FLOAT_VEC2:"get_FLOAT_VEC2",get_MIRRORED_REPEAT:"get_MIRRORED_REPEAT",get_CLAMP_TO_EDGE:"get_CLAMP_TO_EDGE",get_REPEAT:"get_REPEAT",get_ACTIVE_TEXTURE:"get_ACTIVE_TEXTURE",get_TEXTURE31:"get_TEXTURE31",get_TEXTURE30:"get_TEXTURE30",get_TEXTURE29:"get_TEXTURE29",get_TEXTURE28:"get_TEXTURE28",get_TEXTURE27:"get_TEXTURE27",get_TEXTURE26:"get_TEXTURE26",get_TEXTURE25:"get_TEXTURE25",get_TEXTURE24:"get_TEXTURE24",get_TEXTURE23:"get_TEXTURE23",get_TEXTURE22:"get_TEXTURE22",get_TEXTURE21:"get_TEXTURE21",get_TEXTURE20:"get_TEXTURE20",get_TEXTURE19:"get_TEXTURE19",get_TEXTURE18:"get_TEXTURE18",get_TEXTURE17:"get_TEXTURE17",get_TEXTURE16:"get_TEXTURE16",get_TEXTURE15:"get_TEXTURE15",get_TEXTURE14:"get_TEXTURE14",get_TEXTURE13:"get_TEXTURE13",get_TEXTURE12:"get_TEXTURE12",get_TEXTURE11:"get_TEXTURE11",get_TEXTURE10:"get_TEXTURE10",get_TEXTURE9:"get_TEXTURE9",get_TEXTURE8:"get_TEXTURE8",get_TEXTURE7:"get_TEXTURE7",get_TEXTURE6:"get_TEXTURE6",get_TEXTURE5:"get_TEXTURE5",get_TEXTURE4:"get_TEXTURE4",get_TEXTURE3:"get_TEXTURE3",get_TEXTURE2:"get_TEXTURE2",get_TEXTURE1:"get_TEXTURE1",get_TEXTURE0:"get_TEXTURE0",get_MAX_CUBE_MAP_TEXTURE_SIZE:"get_MAX_CUBE_MAP_TEXTURE_SIZE",get_TEXTURE_CUBE_MAP_NEGATIVE_Z:"get_TEXTURE_CUBE_MAP_NEGATIVE_Z",get_TEXTURE_CUBE_MAP_POSITIVE_Z:"get_TEXTURE_CUBE_MAP_POSITIVE_Z",get_TEXTURE_CUBE_MAP_NEGATIVE_Y:"get_TEXTURE_CUBE_MAP_NEGATIVE_Y",get_TEXTURE_CUBE_MAP_POSITIVE_Y:"get_TEXTURE_CUBE_MAP_POSITIVE_Y",get_TEXTURE_CUBE_MAP_NEGATIVE_X:"get_TEXTURE_CUBE_MAP_NEGATIVE_X",get_TEXTURE_CUBE_MAP_POSITIVE_X:"get_TEXTURE_CUBE_MAP_POSITIVE_X",get_TEXTURE_BINDING_CUBE_MAP:"get_TEXTURE_BINDING_CUBE_MAP",get_TEXTURE_CUBE_MAP:"get_TEXTURE_CUBE_MAP",get_TEXTURE:"get_TEXTURE",get_TEXTURE_2D:"get_TEXTURE_2D",get_TEXTURE_WRAP_T:"get_TEXTURE_WRAP_T",get_TEXTURE_WRAP_S:"get_TEXTURE_WRAP_S",get_TEXTURE_MIN_FILTER:"get_TEXTURE_MIN_FILTER",get_TEXTURE_MAG_FILTER:"get_TEXTURE_MAG_FILTER",get_LINEAR_MIPMAP_LINEAR:"get_LINEAR_MIPMAP_LINEAR",get_NEAREST_MIPMAP_LINEAR:"get_NEAREST_MIPMAP_LINEAR",get_LINEAR_MIPMAP_NEAREST:"get_LINEAR_MIPMAP_NEAREST",get_NEAREST_MIPMAP_NEAREST:"get_NEAREST_MIPMAP_NEAREST",get_LINEAR:"get_LINEAR",get_NEAREST:"get_NEAREST",get_VERSION:"get_VERSION",get_RENDERER:"get_RENDERER",get_VENDOR:"get_VENDOR",get_DECR_WRAP:"get_DECR_WRAP",get_INCR_WRAP:"get_INCR_WRAP",get_INVERT:"get_INVERT",get_DECR:"get_DECR",get_INCR:"get_INCR",get_REPLACE:"get_REPLACE",get_KEEP:"get_KEEP",get_ALWAYS:"get_ALWAYS",get_GEQUAL:"get_GEQUAL",get_NOTEQUAL:"get_NOTEQUAL",get_GREATER:"get_GREATER",get_LEQUAL:"get_LEQUAL",get_EQUAL:"get_EQUAL",get_LESS:"get_LESS",get_NEVER:"get_NEVER",get_CURRENT_PROGRAM:"get_CURRENT_PROGRAM",get_SHADING_LANGUAGE_VERSION:"get_SHADING_LANGUAGE_VERSION",get_ACTIVE_ATTRIBUTES:"get_ACTIVE_ATTRIBUTES",get_ACTIVE_UNIFORMS:"get_ACTIVE_UNIFORMS",get_ATTACHED_SHADERS:"get_ATTACHED_SHADERS",get_VALIDATE_STATUS:"get_VALIDATE_STATUS",get_LINK_STATUS:"get_LINK_STATUS",get_DELETE_STATUS:"get_DELETE_STATUS",get_SHADER_TYPE:"get_SHADER_TYPE",get_MAX_FRAGMENT_UNIFORM_VECTORS:"get_MAX_FRAGMENT_UNIFORM_VECTORS",get_MAX_TEXTURE_IMAGE_UNITS:"get_MAX_TEXTURE_IMAGE_UNITS",get_MAX_VERTEX_TEXTURE_IMAGE_UNITS:"get_MAX_VERTEX_TEXTURE_IMAGE_UNITS",get_MAX_COMBINED_TEXTURE_IMAGE_UNITS:"get_MAX_COMBINED_TEXTURE_IMAGE_UNITS",get_MAX_VARYING_VECTORS:"get_MAX_VARYING_VECTORS",get_MAX_VERTEX_UNIFORM_VECTORS:"get_MAX_VERTEX_UNIFORM_VECTORS",get_MAX_VERTEX_ATTRIBS:"get_MAX_VERTEX_ATTRIBS",get_VERTEX_SHADER:"get_VERTEX_SHADER",get_FRAGMENT_SHADER:"get_FRAGMENT_SHADER",get_UNSIGNED_SHORT_5_6_5:"get_UNSIGNED_SHORT_5_6_5",get_UNSIGNED_SHORT_5_5_5_1:"get_UNSIGNED_SHORT_5_5_5_1",get_UNSIGNED_SHORT_4_4_4_4:"get_UNSIGNED_SHORT_4_4_4_4",get_LUMINANCE_ALPHA:"get_LUMINANCE_ALPHA",get_LUMINANCE:"get_LUMINANCE",get_RGBA:"get_RGBA",get_RGB:"get_RGB",get_ALPHA:"get_ALPHA",get_DEPTH_COMPONENT:"get_DEPTH_COMPONENT",get_FLOAT:"get_FLOAT",get_UNSIGNED_INT:"get_UNSIGNED_INT",get_INT:"get_INT",get_UNSIGNED_SHORT:"get_UNSIGNED_SHORT",get_SHORT:"get_SHORT",get_UNSIGNED_BYTE:"get_UNSIGNED_BYTE",get_BYTE:"get_BYTE",get_GENERATE_MIPMAP_HINT:"get_GENERATE_MIPMAP_HINT",get_NICEST:"get_NICEST",get_FASTEST:"get_FASTEST",get_DONT_CARE:"get_DONT_CARE",get_COMPRESSED_TEXTURE_FORMATS:"get_COMPRESSED_TEXTURE_FORMATS",get_SAMPLE_COVERAGE_INVERT:"get_SAMPLE_COVERAGE_INVERT",get_SAMPLE_COVERAGE_VALUE:"get_SAMPLE_COVERAGE_VALUE",get_SAMPLES:"get_SAMPLES",get_SAMPLE_BUFFERS:"get_SAMPLE_BUFFERS",get_TEXTURE_BINDING_2D:"get_TEXTURE_BINDING_2D",get_POLYGON_OFFSET_FACTOR:"get_POLYGON_OFFSET_FACTOR",get_POLYGON_OFFSET_UNITS:"get_POLYGON_OFFSET_UNITS",get_STENCIL_BITS:"get_STENCIL_BITS",get_DEPTH_BITS:"get_DEPTH_BITS",get_ALPHA_BITS:"get_ALPHA_BITS",get_BLUE_BITS:"get_BLUE_BITS",get_GREEN_BITS:"get_GREEN_BITS",get_RED_BITS:"get_RED_BITS",get_SUBPIXEL_BITS:"get_SUBPIXEL_BITS",get_MAX_VIEWPORT_DIMS:"get_MAX_VIEWPORT_DIMS",get_MAX_TEXTURE_SIZE:"get_MAX_TEXTURE_SIZE",get_PACK_ALIGNMENT:"get_PACK_ALIGNMENT",get_UNPACK_ALIGNMENT:"get_UNPACK_ALIGNMENT",get_COLOR_WRITEMASK:"get_COLOR_WRITEMASK",get_COLOR_CLEAR_VALUE:"get_COLOR_CLEAR_VALUE",get_SCISSOR_BOX:"get_SCISSOR_BOX",get_VIEWPORT:"get_VIEWPORT",get_STENCIL_BACK_WRITEMASK:"get_STENCIL_BACK_WRITEMASK",get_STENCIL_BACK_VALUE_MASK:"get_STENCIL_BACK_VALUE_MASK",get_STENCIL_BACK_REF:"get_STENCIL_BACK_REF",get_STENCIL_BACK_PASS_DEPTH_PASS:"get_STENCIL_BACK_PASS_DEPTH_PASS",get_STENCIL_BACK_PASS_DEPTH_FAIL:"get_STENCIL_BACK_PASS_DEPTH_FAIL",get_STENCIL_BACK_FAIL:"get_STENCIL_BACK_FAIL",get_STENCIL_BACK_FUNC:"get_STENCIL_BACK_FUNC",get_STENCIL_WRITEMASK:"get_STENCIL_WRITEMASK",get_STENCIL_VALUE_MASK:"get_STENCIL_VALUE_MASK",get_STENCIL_REF:"get_STENCIL_REF",get_STENCIL_PASS_DEPTH_PASS:"get_STENCIL_PASS_DEPTH_PASS",get_STENCIL_PASS_DEPTH_FAIL:"get_STENCIL_PASS_DEPTH_FAIL",get_STENCIL_FAIL:"get_STENCIL_FAIL",get_STENCIL_FUNC:"get_STENCIL_FUNC",get_STENCIL_CLEAR_VALUE:"get_STENCIL_CLEAR_VALUE",get_DEPTH_FUNC:"get_DEPTH_FUNC",get_DEPTH_CLEAR_VALUE:"get_DEPTH_CLEAR_VALUE",get_DEPTH_WRITEMASK:"get_DEPTH_WRITEMASK",get_DEPTH_RANGE:"get_DEPTH_RANGE",get_FRONT_FACE:"get_FRONT_FACE",get_CULL_FACE_MODE:"get_CULL_FACE_MODE",get_ALIASED_LINE_WIDTH_RANGE:"get_ALIASED_LINE_WIDTH_RANGE",get_ALIASED_POINT_SIZE_RANGE:"get_ALIASED_POINT_SIZE_RANGE",get_LINE_WIDTH:"get_LINE_WIDTH",get_CCW:"get_CCW",get_CW:"get_CW",get_OUT_OF_MEMORY:"get_OUT_OF_MEMORY",get_INVALID_OPERATION:"get_INVALID_OPERATION",get_INVALID_VALUE:"get_INVALID_VALUE",get_INVALID_ENUM:"get_INVALID_ENUM",get_NO_ERROR:"get_NO_ERROR",get_SAMPLE_COVERAGE:"get_SAMPLE_COVERAGE",get_SAMPLE_ALPHA_TO_COVERAGE:"get_SAMPLE_ALPHA_TO_COVERAGE",get_POLYGON_OFFSET_FILL:"get_POLYGON_OFFSET_FILL",get_SCISSOR_TEST:"get_SCISSOR_TEST",get_DEPTH_TEST:"get_DEPTH_TEST",get_STENCIL_TEST:"get_STENCIL_TEST",get_DITHER:"get_DITHER",get_BLEND:"get_BLEND",get_CULL_FACE:"get_CULL_FACE",get_FRONT_AND_BACK:"get_FRONT_AND_BACK",get_BACK:"get_BACK",get_FRONT:"get_FRONT",get_CURRENT_VERTEX_ATTRIB:"get_CURRENT_VERTEX_ATTRIB",get_BUFFER_USAGE:"get_BUFFER_USAGE",get_BUFFER_SIZE:"get_BUFFER_SIZE",get_DYNAMIC_DRAW:"get_DYNAMIC_DRAW",get_STATIC_DRAW:"get_STATIC_DRAW",get_STREAM_DRAW:"get_STREAM_DRAW",get_ELEMENT_ARRAY_BUFFER_BINDING:"get_ELEMENT_ARRAY_BUFFER_BINDING",get_ARRAY_BUFFER_BINDING:"get_ARRAY_BUFFER_BINDING",get_ELEMENT_ARRAY_BUFFER:"get_ELEMENT_ARRAY_BUFFER",get_ARRAY_BUFFER:"get_ARRAY_BUFFER",get_BLEND_COLOR:"get_BLEND_COLOR",get_ONE_MINUS_CONSTANT_ALPHA:"get_ONE_MINUS_CONSTANT_ALPHA",get_CONSTANT_ALPHA:"get_CONSTANT_ALPHA",get_ONE_MINUS_CONSTANT_COLOR:"get_ONE_MINUS_CONSTANT_COLOR",get_CONSTANT_COLOR:"get_CONSTANT_COLOR",get_BLEND_SRC_ALPHA:"get_BLEND_SRC_ALPHA",get_BLEND_DST_ALPHA:"get_BLEND_DST_ALPHA",get_BLEND_SRC_RGB:"get_BLEND_SRC_RGB",get_BLEND_DST_RGB:"get_BLEND_DST_RGB",get_FUNC_REVERSE_SUBTRACT:"get_FUNC_REVERSE_SUBTRACT",get_FUNC_SUBTRACT:"get_FUNC_SUBTRACT",get_BLEND_EQUATION_ALPHA:"get_BLEND_EQUATION_ALPHA",get_BLEND_EQUATION_RGB:"get_BLEND_EQUATION_RGB",get_BLEND_EQUATION:"get_BLEND_EQUATION",get_FUNC_ADD:"get_FUNC_ADD",get_SRC_ALPHA_SATURATE:"get_SRC_ALPHA_SATURATE",get_ONE_MINUS_DST_COLOR:"get_ONE_MINUS_DST_COLOR",get_DST_COLOR:"get_DST_COLOR",get_ONE_MINUS_DST_ALPHA:"get_ONE_MINUS_DST_ALPHA",get_DST_ALPHA:"get_DST_ALPHA",get_ONE_MINUS_SRC_ALPHA:"get_ONE_MINUS_SRC_ALPHA",get_SRC_ALPHA:"get_SRC_ALPHA",get_ONE_MINUS_SRC_COLOR:"get_ONE_MINUS_SRC_COLOR",get_SRC_COLOR:"get_SRC_COLOR",get_ONE:"get_ONE",get_ZERO:"get_ZERO",get_TRIANGLE_FAN:"get_TRIANGLE_FAN",get_TRIANGLE_STRIP:"get_TRIANGLE_STRIP",get_TRIANGLES:"get_TRIANGLES",get_LINE_STRIP:"get_LINE_STRIP",get_LINE_LOOP:"get_LINE_LOOP",get_LINES:"get_LINES",get_POINTS:"get_POINTS",get_COLOR_BUFFER_BIT:"get_COLOR_BUFFER_BIT",get_STENCIL_BUFFER_BIT:"get_STENCIL_BUFFER_BIT",get_DEPTH_BUFFER_BIT:"get_DEPTH_BUFFER_BIT",get_EXTENSIONS:"get_EXTENSIONS"};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_EXTENSIONS = function(this1) {
	return 7939;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_BUFFER_BIT = function(this1) {
	return this1.DEPTH_BUFFER_BIT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BUFFER_BIT = function(this1) {
	return this1.STENCIL_BUFFER_BIT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_BUFFER_BIT = function(this1) {
	return this1.COLOR_BUFFER_BIT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_POINTS = function(this1) {
	return this1.POINTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINES = function(this1) {
	return this1.LINES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINE_LOOP = function(this1) {
	return this1.LINE_LOOP;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINE_STRIP = function(this1) {
	return this1.LINE_STRIP;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRIANGLES = function(this1) {
	return this1.TRIANGLES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRIANGLE_STRIP = function(this1) {
	return this1.TRIANGLE_STRIP;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRIANGLE_FAN = function(this1) {
	return this1.TRIANGLE_FAN;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ZERO = function(this1) {
	return this1.ZERO;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE = function(this1) {
	return this1.ONE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRC_COLOR = function(this1) {
	return this1.SRC_COLOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_SRC_COLOR = function(this1) {
	return this1.ONE_MINUS_SRC_COLOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRC_ALPHA = function(this1) {
	return this1.SRC_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_SRC_ALPHA = function(this1) {
	return this1.ONE_MINUS_SRC_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DST_ALPHA = function(this1) {
	return this1.DST_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_DST_ALPHA = function(this1) {
	return this1.ONE_MINUS_DST_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DST_COLOR = function(this1) {
	return this1.DST_COLOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_DST_COLOR = function(this1) {
	return this1.ONE_MINUS_DST_COLOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRC_ALPHA_SATURATE = function(this1) {
	return this1.SRC_ALPHA_SATURATE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FUNC_ADD = function(this1) {
	return this1.FUNC_ADD;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_EQUATION = function(this1) {
	return this1.BLEND_EQUATION;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_EQUATION_RGB = function(this1) {
	return this1.BLEND_EQUATION_RGB;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_EQUATION_ALPHA = function(this1) {
	return this1.BLEND_EQUATION_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FUNC_SUBTRACT = function(this1) {
	return this1.FUNC_SUBTRACT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FUNC_REVERSE_SUBTRACT = function(this1) {
	return this1.FUNC_REVERSE_SUBTRACT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_DST_RGB = function(this1) {
	return this1.BLEND_DST_RGB;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_SRC_RGB = function(this1) {
	return this1.BLEND_SRC_RGB;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_DST_ALPHA = function(this1) {
	return this1.BLEND_DST_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_SRC_ALPHA = function(this1) {
	return this1.BLEND_SRC_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CONSTANT_COLOR = function(this1) {
	return this1.CONSTANT_COLOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_CONSTANT_COLOR = function(this1) {
	return this1.ONE_MINUS_CONSTANT_COLOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CONSTANT_ALPHA = function(this1) {
	return this1.CONSTANT_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_CONSTANT_ALPHA = function(this1) {
	return this1.ONE_MINUS_CONSTANT_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_COLOR = function(this1) {
	return this1.BLEND_COLOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ARRAY_BUFFER = function(this1) {
	return this1.ARRAY_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ELEMENT_ARRAY_BUFFER = function(this1) {
	return this1.ELEMENT_ARRAY_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.ARRAY_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ELEMENT_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.ELEMENT_ARRAY_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STREAM_DRAW = function(this1) {
	return this1.STREAM_DRAW;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STATIC_DRAW = function(this1) {
	return this1.STATIC_DRAW;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DYNAMIC_DRAW = function(this1) {
	return this1.DYNAMIC_DRAW;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BUFFER_SIZE = function(this1) {
	return this1.BUFFER_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BUFFER_USAGE = function(this1) {
	return this1.BUFFER_USAGE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CURRENT_VERTEX_ATTRIB = function(this1) {
	return this1.CURRENT_VERTEX_ATTRIB;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRONT = function(this1) {
	return this1.FRONT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BACK = function(this1) {
	return this1.BACK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRONT_AND_BACK = function(this1) {
	return this1.FRONT_AND_BACK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CULL_FACE = function(this1) {
	return this1.CULL_FACE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND = function(this1) {
	return this1.BLEND;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DITHER = function(this1) {
	return this1.DITHER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_TEST = function(this1) {
	return this1.STENCIL_TEST;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_TEST = function(this1) {
	return this1.DEPTH_TEST;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SCISSOR_TEST = function(this1) {
	return this1.SCISSOR_TEST;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_POLYGON_OFFSET_FILL = function(this1) {
	return this1.POLYGON_OFFSET_FILL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLE_ALPHA_TO_COVERAGE = function(this1) {
	return this1.SAMPLE_ALPHA_TO_COVERAGE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLE_COVERAGE = function(this1) {
	return this1.SAMPLE_COVERAGE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NO_ERROR = function(this1) {
	return this1.NO_ERROR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVALID_ENUM = function(this1) {
	return this1.INVALID_ENUM;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVALID_VALUE = function(this1) {
	return this1.INVALID_VALUE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVALID_OPERATION = function(this1) {
	return this1.INVALID_OPERATION;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_OUT_OF_MEMORY = function(this1) {
	return this1.OUT_OF_MEMORY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CW = function(this1) {
	return this1.CW;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CCW = function(this1) {
	return this1.CCW;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINE_WIDTH = function(this1) {
	return this1.LINE_WIDTH;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALIASED_POINT_SIZE_RANGE = function(this1) {
	return this1.ALIASED_POINT_SIZE_RANGE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALIASED_LINE_WIDTH_RANGE = function(this1) {
	return this1.ALIASED_LINE_WIDTH_RANGE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CULL_FACE_MODE = function(this1) {
	return this1.CULL_FACE_MODE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRONT_FACE = function(this1) {
	return this1.FRONT_FACE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_RANGE = function(this1) {
	return this1.DEPTH_RANGE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_WRITEMASK = function(this1) {
	return this1.DEPTH_WRITEMASK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_CLEAR_VALUE = function(this1) {
	return this1.DEPTH_CLEAR_VALUE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_FUNC = function(this1) {
	return this1.DEPTH_FUNC;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_CLEAR_VALUE = function(this1) {
	return this1.STENCIL_CLEAR_VALUE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_FUNC = function(this1) {
	return this1.STENCIL_FUNC;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_FAIL = function(this1) {
	return this1.STENCIL_FAIL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_PASS_DEPTH_FAIL = function(this1) {
	return this1.STENCIL_PASS_DEPTH_FAIL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_PASS_DEPTH_PASS = function(this1) {
	return this1.STENCIL_PASS_DEPTH_PASS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_REF = function(this1) {
	return this1.STENCIL_REF;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_VALUE_MASK = function(this1) {
	return this1.STENCIL_VALUE_MASK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_WRITEMASK = function(this1) {
	return this1.STENCIL_WRITEMASK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_FUNC = function(this1) {
	return this1.STENCIL_BACK_FUNC;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_FAIL = function(this1) {
	return this1.STENCIL_BACK_FAIL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_PASS_DEPTH_FAIL = function(this1) {
	return this1.STENCIL_BACK_PASS_DEPTH_FAIL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_PASS_DEPTH_PASS = function(this1) {
	return this1.STENCIL_BACK_PASS_DEPTH_PASS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_REF = function(this1) {
	return this1.STENCIL_BACK_REF;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_VALUE_MASK = function(this1) {
	return this1.STENCIL_BACK_VALUE_MASK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_WRITEMASK = function(this1) {
	return this1.STENCIL_BACK_WRITEMASK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VIEWPORT = function(this1) {
	return this1.VIEWPORT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SCISSOR_BOX = function(this1) {
	return this1.SCISSOR_BOX;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_CLEAR_VALUE = function(this1) {
	return this1.COLOR_CLEAR_VALUE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_WRITEMASK = function(this1) {
	return this1.COLOR_WRITEMASK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_ALIGNMENT = function(this1) {
	return this1.UNPACK_ALIGNMENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PACK_ALIGNMENT = function(this1) {
	return this1.PACK_ALIGNMENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TEXTURE_SIZE = function(this1) {
	return this1.MAX_TEXTURE_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VIEWPORT_DIMS = function(this1) {
	return this1.MAX_VIEWPORT_DIMS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SUBPIXEL_BITS = function(this1) {
	return this1.SUBPIXEL_BITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RED_BITS = function(this1) {
	return this1.RED_BITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_GREEN_BITS = function(this1) {
	return this1.GREEN_BITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLUE_BITS = function(this1) {
	return this1.BLUE_BITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALPHA_BITS = function(this1) {
	return this1.ALPHA_BITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_BITS = function(this1) {
	return this1.DEPTH_BITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BITS = function(this1) {
	return this1.STENCIL_BITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_POLYGON_OFFSET_UNITS = function(this1) {
	return this1.POLYGON_OFFSET_UNITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_POLYGON_OFFSET_FACTOR = function(this1) {
	return this1.POLYGON_OFFSET_FACTOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_BINDING_2D = function(this1) {
	return this1.TEXTURE_BINDING_2D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLE_BUFFERS = function(this1) {
	return this1.SAMPLE_BUFFERS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLES = function(this1) {
	return this1.SAMPLES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLE_COVERAGE_VALUE = function(this1) {
	return this1.SAMPLE_COVERAGE_VALUE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLE_COVERAGE_INVERT = function(this1) {
	return this1.SAMPLE_COVERAGE_INVERT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COMPRESSED_TEXTURE_FORMATS = function(this1) {
	return this1.COMPRESSED_TEXTURE_FORMATS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DONT_CARE = function(this1) {
	return this1.DONT_CARE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FASTEST = function(this1) {
	return this1.FASTEST;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NICEST = function(this1) {
	return this1.NICEST;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_GENERATE_MIPMAP_HINT = function(this1) {
	return this1.GENERATE_MIPMAP_HINT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BYTE = function(this1) {
	return this1.BYTE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_BYTE = function(this1) {
	return this1.UNSIGNED_BYTE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SHORT = function(this1) {
	return this1.SHORT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_SHORT = function(this1) {
	return this1.UNSIGNED_SHORT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT = function(this1) {
	return this1.INT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT = function(this1) {
	return this1.UNSIGNED_INT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT = function(this1) {
	return this1.FLOAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_COMPONENT = function(this1) {
	return this1.DEPTH_COMPONENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALPHA = function(this1) {
	return this1.ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB = function(this1) {
	return this1.RGB;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA = function(this1) {
	return this1.RGBA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LUMINANCE = function(this1) {
	return this1.LUMINANCE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LUMINANCE_ALPHA = function(this1) {
	return this1.LUMINANCE_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_SHORT_4_4_4_4 = function(this1) {
	return this1.UNSIGNED_SHORT_4_4_4_4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_SHORT_5_5_5_1 = function(this1) {
	return this1.UNSIGNED_SHORT_5_5_5_1;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_SHORT_5_6_5 = function(this1) {
	return this1.UNSIGNED_SHORT_5_6_5;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAGMENT_SHADER = function(this1) {
	return this1.FRAGMENT_SHADER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_SHADER = function(this1) {
	return this1.VERTEX_SHADER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_ATTRIBS = function(this1) {
	return this1.MAX_VERTEX_ATTRIBS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_UNIFORM_VECTORS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_VECTORS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VARYING_VECTORS = function(this1) {
	return this1.MAX_VARYING_VECTORS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_COMBINED_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_COMBINED_TEXTURE_IMAGE_UNITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_VERTEX_TEXTURE_IMAGE_UNITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_TEXTURE_IMAGE_UNITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_VECTORS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_VECTORS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SHADER_TYPE = function(this1) {
	return this1.SHADER_TYPE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DELETE_STATUS = function(this1) {
	return this1.DELETE_STATUS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINK_STATUS = function(this1) {
	return this1.LINK_STATUS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VALIDATE_STATUS = function(this1) {
	return this1.VALIDATE_STATUS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ATTACHED_SHADERS = function(this1) {
	return this1.ATTACHED_SHADERS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ACTIVE_UNIFORMS = function(this1) {
	return this1.ACTIVE_UNIFORMS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ACTIVE_ATTRIBUTES = function(this1) {
	return this1.ACTIVE_ATTRIBUTES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SHADING_LANGUAGE_VERSION = function(this1) {
	return this1.SHADING_LANGUAGE_VERSION;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CURRENT_PROGRAM = function(this1) {
	return this1.CURRENT_PROGRAM;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NEVER = function(this1) {
	return this1.NEVER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LESS = function(this1) {
	return this1.LESS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_EQUAL = function(this1) {
	return this1.EQUAL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LEQUAL = function(this1) {
	return this1.LEQUAL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_GREATER = function(this1) {
	return this1.GREATER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NOTEQUAL = function(this1) {
	return this1.NOTEQUAL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_GEQUAL = function(this1) {
	return this1.GEQUAL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALWAYS = function(this1) {
	return this1.ALWAYS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_KEEP = function(this1) {
	return this1.KEEP;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_REPLACE = function(this1) {
	return this1.REPLACE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INCR = function(this1) {
	return this1.INCR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DECR = function(this1) {
	return this1.DECR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVERT = function(this1) {
	return this1.INVERT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INCR_WRAP = function(this1) {
	return this1.INCR_WRAP;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DECR_WRAP = function(this1) {
	return this1.DECR_WRAP;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VENDOR = function(this1) {
	return this1.VENDOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERER = function(this1) {
	return this1.RENDERER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERSION = function(this1) {
	return this1.VERSION;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NEAREST = function(this1) {
	return this1.NEAREST;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINEAR = function(this1) {
	return this1.LINEAR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NEAREST_MIPMAP_NEAREST = function(this1) {
	return this1.NEAREST_MIPMAP_NEAREST;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINEAR_MIPMAP_NEAREST = function(this1) {
	return this1.LINEAR_MIPMAP_NEAREST;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NEAREST_MIPMAP_LINEAR = function(this1) {
	return this1.NEAREST_MIPMAP_LINEAR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINEAR_MIPMAP_LINEAR = function(this1) {
	return this1.LINEAR_MIPMAP_LINEAR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_MAG_FILTER = function(this1) {
	return this1.TEXTURE_MAG_FILTER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_MIN_FILTER = function(this1) {
	return this1.TEXTURE_MIN_FILTER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_WRAP_S = function(this1) {
	return this1.TEXTURE_WRAP_S;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_WRAP_T = function(this1) {
	return this1.TEXTURE_WRAP_T;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_2D = function(this1) {
	return this1.TEXTURE_2D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE = function(this1) {
	return this1.TEXTURE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP = function(this1) {
	return this1.TEXTURE_CUBE_MAP;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_BINDING_CUBE_MAP = function(this1) {
	return this1.TEXTURE_BINDING_CUBE_MAP;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_X = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_X;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_X = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_X;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_Y = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_Y;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_Y = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_Y;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_Z = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_Z;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_Z = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_Z;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_CUBE_MAP_TEXTURE_SIZE = function(this1) {
	return this1.MAX_CUBE_MAP_TEXTURE_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE0 = function(this1) {
	return this1.TEXTURE0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE1 = function(this1) {
	return this1.TEXTURE1;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE2 = function(this1) {
	return this1.TEXTURE2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE3 = function(this1) {
	return this1.TEXTURE3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE4 = function(this1) {
	return this1.TEXTURE4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE5 = function(this1) {
	return this1.TEXTURE5;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE6 = function(this1) {
	return this1.TEXTURE6;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE7 = function(this1) {
	return this1.TEXTURE7;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE8 = function(this1) {
	return this1.TEXTURE8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE9 = function(this1) {
	return this1.TEXTURE9;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE10 = function(this1) {
	return this1.TEXTURE10;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE11 = function(this1) {
	return this1.TEXTURE11;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE12 = function(this1) {
	return this1.TEXTURE12;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE13 = function(this1) {
	return this1.TEXTURE13;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE14 = function(this1) {
	return this1.TEXTURE14;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE15 = function(this1) {
	return this1.TEXTURE15;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE16 = function(this1) {
	return this1.TEXTURE16;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE17 = function(this1) {
	return this1.TEXTURE17;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE18 = function(this1) {
	return this1.TEXTURE18;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE19 = function(this1) {
	return this1.TEXTURE19;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE20 = function(this1) {
	return this1.TEXTURE20;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE21 = function(this1) {
	return this1.TEXTURE21;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE22 = function(this1) {
	return this1.TEXTURE22;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE23 = function(this1) {
	return this1.TEXTURE23;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE24 = function(this1) {
	return this1.TEXTURE24;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE25 = function(this1) {
	return this1.TEXTURE25;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE26 = function(this1) {
	return this1.TEXTURE26;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE27 = function(this1) {
	return this1.TEXTURE27;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE28 = function(this1) {
	return this1.TEXTURE28;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE29 = function(this1) {
	return this1.TEXTURE29;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE30 = function(this1) {
	return this1.TEXTURE30;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE31 = function(this1) {
	return this1.TEXTURE31;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ACTIVE_TEXTURE = function(this1) {
	return this1.ACTIVE_TEXTURE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_REPEAT = function(this1) {
	return this1.REPEAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CLAMP_TO_EDGE = function(this1) {
	return this1.CLAMP_TO_EDGE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MIRRORED_REPEAT = function(this1) {
	return this1.MIRRORED_REPEAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_VEC2 = function(this1) {
	return this1.FLOAT_VEC2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_VEC3 = function(this1) {
	return this1.FLOAT_VEC3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_VEC4 = function(this1) {
	return this1.FLOAT_VEC4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_VEC2 = function(this1) {
	return this1.INT_VEC2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_VEC3 = function(this1) {
	return this1.INT_VEC3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_VEC4 = function(this1) {
	return this1.INT_VEC4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BOOL = function(this1) {
	return this1.BOOL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BOOL_VEC2 = function(this1) {
	return this1.BOOL_VEC2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BOOL_VEC3 = function(this1) {
	return this1.BOOL_VEC3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BOOL_VEC4 = function(this1) {
	return this1.BOOL_VEC4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT2 = function(this1) {
	return this1.FLOAT_MAT2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT3 = function(this1) {
	return this1.FLOAT_MAT3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT4 = function(this1) {
	return this1.FLOAT_MAT4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_2D = function(this1) {
	return this1.SAMPLER_2D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_CUBE = function(this1) {
	return this1.SAMPLER_CUBE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_ENABLED = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_ENABLED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_SIZE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_STRIDE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_STRIDE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_TYPE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_TYPE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_NORMALIZED = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_NORMALIZED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_POINTER = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_POINTER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_PROGRAM_POINT_SIZE = function(this1) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_POINT_SPRITE = function(this1) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COMPILE_STATUS = function(this1) {
	return this1.COMPILE_STATUS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LOW_FLOAT = function(this1) {
	return this1.LOW_FLOAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MEDIUM_FLOAT = function(this1) {
	return this1.MEDIUM_FLOAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_HIGH_FLOAT = function(this1) {
	return this1.HIGH_FLOAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LOW_INT = function(this1) {
	return this1.LOW_INT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MEDIUM_INT = function(this1) {
	return this1.MEDIUM_INT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_HIGH_INT = function(this1) {
	return this1.HIGH_INT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER = function(this1) {
	return this1.FRAMEBUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER = function(this1) {
	return this1.RENDERBUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA4 = function(this1) {
	return this1.RGBA4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB5_A1 = function(this1) {
	return this1.RGB5_A1;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB565 = function(this1) {
	return this1.RGB565;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_COMPONENT16 = function(this1) {
	return this1.DEPTH_COMPONENT16;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_INDEX = function(this1) {
	return this1.STENCIL_INDEX;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_INDEX8 = function(this1) {
	return this1.STENCIL_INDEX8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_STENCIL = function(this1) {
	return this1.DEPTH_STENCIL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_WIDTH = function(this1) {
	return this1.RENDERBUFFER_WIDTH;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_HEIGHT = function(this1) {
	return this1.RENDERBUFFER_HEIGHT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_INTERNAL_FORMAT = function(this1) {
	return this1.RENDERBUFFER_INTERNAL_FORMAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_RED_SIZE = function(this1) {
	return this1.RENDERBUFFER_RED_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_GREEN_SIZE = function(this1) {
	return this1.RENDERBUFFER_GREEN_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_BLUE_SIZE = function(this1) {
	return this1.RENDERBUFFER_BLUE_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_ALPHA_SIZE = function(this1) {
	return this1.RENDERBUFFER_ALPHA_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_DEPTH_SIZE = function(this1) {
	return this1.RENDERBUFFER_DEPTH_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_STENCIL_SIZE = function(this1) {
	return this1.RENDERBUFFER_STENCIL_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT0 = function(this1) {
	return this1.COLOR_ATTACHMENT0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_ATTACHMENT = function(this1) {
	return this1.DEPTH_ATTACHMENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_ATTACHMENT = function(this1) {
	return this1.STENCIL_ATTACHMENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_STENCIL_ATTACHMENT = function(this1) {
	return this1.DEPTH_STENCIL_ATTACHMENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NONE = function(this1) {
	return this1.NONE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_COMPLETE = function(this1) {
	return this1.FRAMEBUFFER_COMPLETE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_UNSUPPORTED = function(this1) {
	return this1.FRAMEBUFFER_UNSUPPORTED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_BINDING = function(this1) {
	return this1.FRAMEBUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_BINDING = function(this1) {
	return this1.RENDERBUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_RENDERBUFFER_SIZE = function(this1) {
	return this1.MAX_RENDERBUFFER_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVALID_FRAMEBUFFER_OPERATION = function(this1) {
	return this1.INVALID_FRAMEBUFFER_OPERATION;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_FLIP_Y_WEBGL = function(this1) {
	return this1.UNPACK_FLIP_Y_WEBGL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_PREMULTIPLY_ALPHA_WEBGL = function(this1) {
	return this1.UNPACK_PREMULTIPLY_ALPHA_WEBGL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CONTEXT_LOST_WEBGL = function(this1) {
	return this1.CONTEXT_LOST_WEBGL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_COLORSPACE_CONVERSION_WEBGL = function(this1) {
	return this1.UNPACK_COLORSPACE_CONVERSION_WEBGL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BROWSER_DEFAULT_WEBGL = function(this1) {
	return this1.BROWSER_DEFAULT_WEBGL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_type = function(this1) {
	return this1.type;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_version = function(this1) {
	return this1.version;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_READ_BUFFER = function(this1) {
	return this1.READ_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_ROW_LENGTH = function(this1) {
	return this1.UNPACK_ROW_LENGTH;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_SKIP_ROWS = function(this1) {
	return this1.UNPACK_SKIP_ROWS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_SKIP_PIXELS = function(this1) {
	return this1.UNPACK_SKIP_PIXELS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PACK_ROW_LENGTH = function(this1) {
	return this1.PACK_ROW_LENGTH;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PACK_SKIP_ROWS = function(this1) {
	return this1.PACK_SKIP_ROWS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PACK_SKIP_PIXELS = function(this1) {
	return this1.PACK_SKIP_PIXELS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_BINDING_3D = function(this1) {
	return this1.TEXTURE_BINDING_3D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_SKIP_IMAGES = function(this1) {
	return this1.UNPACK_SKIP_IMAGES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_IMAGE_HEIGHT = function(this1) {
	return this1.UNPACK_IMAGE_HEIGHT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_3D_TEXTURE_SIZE = function(this1) {
	return this1.MAX_3D_TEXTURE_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_ELEMENTS_VERTICES = function(this1) {
	return this1.MAX_ELEMENTS_VERTICES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_ELEMENTS_INDICES = function(this1) {
	return this1.MAX_ELEMENTS_INDICES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TEXTURE_LOD_BIAS = function(this1) {
	return this1.MAX_TEXTURE_LOD_BIAS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_ARRAY_TEXTURE_LAYERS = function(this1) {
	return this1.MAX_ARRAY_TEXTURE_LAYERS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MIN_PROGRAM_TEXEL_OFFSET = function(this1) {
	return this1.MIN_PROGRAM_TEXEL_OFFSET;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_PROGRAM_TEXEL_OFFSET = function(this1) {
	return this1.MAX_PROGRAM_TEXEL_OFFSET;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VARYING_COMPONENTS = function(this1) {
	return this1.MAX_VARYING_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAGMENT_SHADER_DERIVATIVE_HINT = function(this1) {
	return this1.FRAGMENT_SHADER_DERIVATIVE_HINT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RASTERIZER_DISCARD = function(this1) {
	return this1.RASTERIZER_DISCARD;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ARRAY_BINDING = function(this1) {
	return this1.VERTEX_ARRAY_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_OUTPUT_COMPONENTS = function(this1) {
	return this1.MAX_VERTEX_OUTPUT_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_FRAGMENT_INPUT_COMPONENTS = function(this1) {
	return this1.MAX_FRAGMENT_INPUT_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_SERVER_WAIT_TIMEOUT = function(this1) {
	return this1.MAX_SERVER_WAIT_TIMEOUT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_ELEMENT_INDEX = function(this1) {
	return this1.MAX_ELEMENT_INDEX;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RED = function(this1) {
	return this1.RED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB8 = function(this1) {
	return this1.RGB8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA8 = function(this1) {
	return this1.RGBA8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB10_A2 = function(this1) {
	return this1.RGB10_A2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_3D = function(this1) {
	return this1.TEXTURE_3D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_WRAP_R = function(this1) {
	return this1.TEXTURE_WRAP_R;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_MIN_LOD = function(this1) {
	return this1.TEXTURE_MIN_LOD;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_MAX_LOD = function(this1) {
	return this1.TEXTURE_MAX_LOD;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_BASE_LEVEL = function(this1) {
	return this1.TEXTURE_BASE_LEVEL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_MAX_LEVEL = function(this1) {
	return this1.TEXTURE_MAX_LEVEL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_COMPARE_MODE = function(this1) {
	return this1.TEXTURE_COMPARE_MODE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_COMPARE_FUNC = function(this1) {
	return this1.TEXTURE_COMPARE_FUNC;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRGB = function(this1) {
	return this1.SRGB;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRGB8 = function(this1) {
	return this1.SRGB8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRGB8_ALPHA8 = function(this1) {
	return this1.SRGB8_ALPHA8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COMPARE_REF_TO_TEXTURE = function(this1) {
	return this1.COMPARE_REF_TO_TEXTURE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA32F = function(this1) {
	return this1.RGBA32F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB32F = function(this1) {
	return this1.RGB32F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA16F = function(this1) {
	return this1.RGBA16F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB16F = function(this1) {
	return this1.RGB16F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_2D_ARRAY = function(this1) {
	return this1.TEXTURE_2D_ARRAY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_BINDING_2D_ARRAY = function(this1) {
	return this1.TEXTURE_BINDING_2D_ARRAY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R11F_G11F_B10F = function(this1) {
	return this1.R11F_G11F_B10F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB9_E5 = function(this1) {
	return this1.RGB9_E5;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA32UI = function(this1) {
	return this1.RGBA32UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB32UI = function(this1) {
	return this1.RGB32UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA16UI = function(this1) {
	return this1.RGBA16UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB16UI = function(this1) {
	return this1.RGB16UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA8UI = function(this1) {
	return this1.RGBA8UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB8UI = function(this1) {
	return this1.RGB8UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA32I = function(this1) {
	return this1.RGBA32I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB32I = function(this1) {
	return this1.RGB32I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA16I = function(this1) {
	return this1.RGBA16I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB16I = function(this1) {
	return this1.RGB16I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA8I = function(this1) {
	return this1.RGBA8I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB8I = function(this1) {
	return this1.RGB8I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RED_INTEGER = function(this1) {
	return this1.RED_INTEGER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB_INTEGER = function(this1) {
	return this1.RGB_INTEGER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA_INTEGER = function(this1) {
	return this1.RGBA_INTEGER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R8 = function(this1) {
	return this1.R8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG8 = function(this1) {
	return this1.RG8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R16F = function(this1) {
	return this1.R16F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R32F = function(this1) {
	return this1.R32F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG16F = function(this1) {
	return this1.RG16F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG32F = function(this1) {
	return this1.RG32F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R8I = function(this1) {
	return this1.R8I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R8UI = function(this1) {
	return this1.R8UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R16I = function(this1) {
	return this1.R16I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R16UI = function(this1) {
	return this1.R16UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R32I = function(this1) {
	return this1.R32I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R32UI = function(this1) {
	return this1.R32UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG8I = function(this1) {
	return this1.RG8I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG8UI = function(this1) {
	return this1.RG8UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG16I = function(this1) {
	return this1.RG16I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG16UI = function(this1) {
	return this1.RG16UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG32I = function(this1) {
	return this1.RG32I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG32UI = function(this1) {
	return this1.RG32UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R8_SNORM = function(this1) {
	return this1.R8_SNORM;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG8_SNORM = function(this1) {
	return this1.RG8_SNORM;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB8_SNORM = function(this1) {
	return this1.RGB8_SNORM;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA8_SNORM = function(this1) {
	return this1.RGBA8_SNORM;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB10_A2UI = function(this1) {
	return this1.RGB10_A2UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_IMMUTABLE_FORMAT = function(this1) {
	return this1.TEXTURE_IMMUTABLE_FORMAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_IMMUTABLE_LEVELS = function(this1) {
	return this1.TEXTURE_IMMUTABLE_LEVELS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_2_10_10_10_REV = function(this1) {
	return this1.UNSIGNED_INT_2_10_10_10_REV;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_10F_11F_11F_REV = function(this1) {
	return this1.UNSIGNED_INT_10F_11F_11F_REV;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_5_9_9_9_REV = function(this1) {
	return this1.UNSIGNED_INT_5_9_9_9_REV;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_32_UNSIGNED_INT_24_8_REV = function(this1) {
	return this1.FLOAT_32_UNSIGNED_INT_24_8_REV;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_24_8 = function(this1) {
	return this1.UNSIGNED_INT_24_8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_HALF_FLOAT = function(this1) {
	return this1.HALF_FLOAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG = function(this1) {
	return this1.RG;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG_INTEGER = function(this1) {
	return this1.RG_INTEGER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_2_10_10_10_REV = function(this1) {
	return this1.INT_2_10_10_10_REV;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CURRENT_QUERY = function(this1) {
	return this1.CURRENT_QUERY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_QUERY_RESULT = function(this1) {
	return this1.QUERY_RESULT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_QUERY_RESULT_AVAILABLE = function(this1) {
	return this1.QUERY_RESULT_AVAILABLE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ANY_SAMPLES_PASSED = function(this1) {
	return this1.ANY_SAMPLES_PASSED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ANY_SAMPLES_PASSED_CONSERVATIVE = function(this1) {
	return this1.ANY_SAMPLES_PASSED_CONSERVATIVE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_DRAW_BUFFERS = function(this1) {
	return this1.MAX_DRAW_BUFFERS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER0 = function(this1) {
	return this1.DRAW_BUFFER0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER1 = function(this1) {
	return this1.DRAW_BUFFER1;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER2 = function(this1) {
	return this1.DRAW_BUFFER2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER3 = function(this1) {
	return this1.DRAW_BUFFER3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER4 = function(this1) {
	return this1.DRAW_BUFFER4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER5 = function(this1) {
	return this1.DRAW_BUFFER5;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER6 = function(this1) {
	return this1.DRAW_BUFFER6;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER7 = function(this1) {
	return this1.DRAW_BUFFER7;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER8 = function(this1) {
	return this1.DRAW_BUFFER8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER9 = function(this1) {
	return this1.DRAW_BUFFER9;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER10 = function(this1) {
	return this1.DRAW_BUFFER10;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER11 = function(this1) {
	return this1.DRAW_BUFFER11;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER12 = function(this1) {
	return this1.DRAW_BUFFER12;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER13 = function(this1) {
	return this1.DRAW_BUFFER13;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER14 = function(this1) {
	return this1.DRAW_BUFFER14;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER15 = function(this1) {
	return this1.DRAW_BUFFER15;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_COLOR_ATTACHMENTS = function(this1) {
	return this1.MAX_COLOR_ATTACHMENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT1 = function(this1) {
	return this1.COLOR_ATTACHMENT1;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT2 = function(this1) {
	return this1.COLOR_ATTACHMENT2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT3 = function(this1) {
	return this1.COLOR_ATTACHMENT3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT4 = function(this1) {
	return this1.COLOR_ATTACHMENT4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT5 = function(this1) {
	return this1.COLOR_ATTACHMENT5;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT6 = function(this1) {
	return this1.COLOR_ATTACHMENT6;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT7 = function(this1) {
	return this1.COLOR_ATTACHMENT7;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT8 = function(this1) {
	return this1.COLOR_ATTACHMENT8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT9 = function(this1) {
	return this1.COLOR_ATTACHMENT9;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT10 = function(this1) {
	return this1.COLOR_ATTACHMENT10;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT11 = function(this1) {
	return this1.COLOR_ATTACHMENT11;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT12 = function(this1) {
	return this1.COLOR_ATTACHMENT12;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT13 = function(this1) {
	return this1.COLOR_ATTACHMENT13;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT14 = function(this1) {
	return this1.COLOR_ATTACHMENT14;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT15 = function(this1) {
	return this1.COLOR_ATTACHMENT15;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_3D = function(this1) {
	return this1.SAMPLER_3D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_2D_SHADOW = function(this1) {
	return this1.SAMPLER_2D_SHADOW;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_2D_ARRAY = function(this1) {
	return this1.SAMPLER_2D_ARRAY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_2D_ARRAY_SHADOW = function(this1) {
	return this1.SAMPLER_2D_ARRAY_SHADOW;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_CUBE_SHADOW = function(this1) {
	return this1.SAMPLER_CUBE_SHADOW;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_SAMPLER_2D = function(this1) {
	return this1.INT_SAMPLER_2D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_SAMPLER_3D = function(this1) {
	return this1.INT_SAMPLER_3D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_SAMPLER_CUBE = function(this1) {
	return this1.INT_SAMPLER_CUBE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_SAMPLER_2D_ARRAY = function(this1) {
	return this1.INT_SAMPLER_2D_ARRAY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_2D = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_2D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_3D = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_3D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_CUBE = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_CUBE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_2D_ARRAY = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_2D_ARRAY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_SAMPLES = function(this1) {
	return this1.MAX_SAMPLES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_BINDING = function(this1) {
	return this1.SAMPLER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PIXEL_PACK_BUFFER = function(this1) {
	return this1.PIXEL_PACK_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PIXEL_UNPACK_BUFFER = function(this1) {
	return this1.PIXEL_UNPACK_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PIXEL_PACK_BUFFER_BINDING = function(this1) {
	return this1.PIXEL_PACK_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PIXEL_UNPACK_BUFFER_BINDING = function(this1) {
	return this1.PIXEL_UNPACK_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COPY_READ_BUFFER = function(this1) {
	return this1.COPY_READ_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COPY_WRITE_BUFFER = function(this1) {
	return this1.COPY_WRITE_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COPY_READ_BUFFER_BINDING = function(this1) {
	return this1.COPY_READ_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COPY_WRITE_BUFFER_BINDING = function(this1) {
	return this1.COPY_WRITE_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT2x3 = function(this1) {
	return this1.FLOAT_MAT2x3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT2x4 = function(this1) {
	return this1.FLOAT_MAT2x4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT3x2 = function(this1) {
	return this1.FLOAT_MAT3x2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT3x4 = function(this1) {
	return this1.FLOAT_MAT3x4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT4x2 = function(this1) {
	return this1.FLOAT_MAT4x2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT4x3 = function(this1) {
	return this1.FLOAT_MAT4x3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_VEC2 = function(this1) {
	return this1.UNSIGNED_INT_VEC2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_VEC3 = function(this1) {
	return this1.UNSIGNED_INT_VEC3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_VEC4 = function(this1) {
	return this1.UNSIGNED_INT_VEC4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_NORMALIZED = function(this1) {
	return this1.UNSIGNED_NORMALIZED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SIGNED_NORMALIZED = function(this1) {
	return this1.SIGNED_NORMALIZED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_INTEGER = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_INTEGER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_DIVISOR = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_DIVISOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_MODE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_MODE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_VARYINGS = function(this1) {
	return this1.TRANSFORM_FEEDBACK_VARYINGS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_START = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_START;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_SIZE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = function(this1) {
	return this1.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INTERLEAVED_ATTRIBS = function(this1) {
	return this1.INTERLEAVED_ATTRIBS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SEPARATE_ATTRIBS = function(this1) {
	return this1.SEPARATE_ATTRIBS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_BINDING = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK = function(this1) {
	return this1.TRANSFORM_FEEDBACK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_PAUSED = function(this1) {
	return this1.TRANSFORM_FEEDBACK_PAUSED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_ACTIVE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_ACTIVE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BINDING = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_RED_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_RED_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_DEFAULT = function(this1) {
	return this1.FRAMEBUFFER_DEFAULT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH24_STENCIL8 = function(this1) {
	return this1.DEPTH24_STENCIL8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_FRAMEBUFFER_BINDING = function(this1) {
	return this1.DRAW_FRAMEBUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_READ_FRAMEBUFFER = function(this1) {
	return this1.READ_FRAMEBUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_FRAMEBUFFER = function(this1) {
	return this1.DRAW_FRAMEBUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_READ_FRAMEBUFFER_BINDING = function(this1) {
	return this1.READ_FRAMEBUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_SAMPLES = function(this1) {
	return this1.RENDERBUFFER_SAMPLES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BUFFER = function(this1) {
	return this1.UNIFORM_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BUFFER_BINDING = function(this1) {
	return this1.UNIFORM_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BUFFER_START = function(this1) {
	return this1.UNIFORM_BUFFER_START;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BUFFER_SIZE = function(this1) {
	return this1.UNIFORM_BUFFER_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_BLOCKS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_BLOCKS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_COMBINED_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_COMBINED_UNIFORM_BLOCKS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_UNIFORM_BUFFER_BINDINGS = function(this1) {
	return this1.MAX_UNIFORM_BUFFER_BINDINGS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_UNIFORM_BLOCK_SIZE = function(this1) {
	return this1.MAX_UNIFORM_BLOCK_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BUFFER_OFFSET_ALIGNMENT = function(this1) {
	return this1.UNIFORM_BUFFER_OFFSET_ALIGNMENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ACTIVE_UNIFORM_BLOCKS = function(this1) {
	return this1.ACTIVE_UNIFORM_BLOCKS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_TYPE = function(this1) {
	return this1.UNIFORM_TYPE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_SIZE = function(this1) {
	return this1.UNIFORM_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_INDEX = function(this1) {
	return this1.UNIFORM_BLOCK_INDEX;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_OFFSET = function(this1) {
	return this1.UNIFORM_OFFSET;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_ARRAY_STRIDE = function(this1) {
	return this1.UNIFORM_ARRAY_STRIDE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_MATRIX_STRIDE = function(this1) {
	return this1.UNIFORM_MATRIX_STRIDE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_IS_ROW_MAJOR = function(this1) {
	return this1.UNIFORM_IS_ROW_MAJOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_BINDING = function(this1) {
	return this1.UNIFORM_BLOCK_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_DATA_SIZE = function(this1) {
	return this1.UNIFORM_BLOCK_DATA_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_ACTIVE_UNIFORMS = function(this1) {
	return this1.UNIFORM_BLOCK_ACTIVE_UNIFORMS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = function(this1) {
	return this1.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = function(this1) {
	return this1.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = function(this1) {
	return this1.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_OBJECT_TYPE = function(this1) {
	return this1.OBJECT_TYPE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_CONDITION = function(this1) {
	return this1.SYNC_CONDITION;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_STATUS = function(this1) {
	return this1.SYNC_STATUS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_FLAGS = function(this1) {
	return this1.SYNC_FLAGS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_FENCE = function(this1) {
	return this1.SYNC_FENCE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_GPU_COMMANDS_COMPLETE = function(this1) {
	return this1.SYNC_GPU_COMMANDS_COMPLETE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNALED = function(this1) {
	return this1.UNSIGNALED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SIGNALED = function(this1) {
	return this1.SIGNALED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALREADY_SIGNALED = function(this1) {
	return this1.ALREADY_SIGNALED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TIMEOUT_EXPIRED = function(this1) {
	return this1.TIMEOUT_EXPIRED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CONDITION_SATISFIED = function(this1) {
	return this1.CONDITION_SATISFIED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_WAIT_FAILED = function(this1) {
	return this1.WAIT_FAILED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_FLUSH_COMMANDS_BIT = function(this1) {
	return this1.SYNC_FLUSH_COMMANDS_BIT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR = function(this1) {
	return this1.COLOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH = function(this1) {
	return this1.DEPTH;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL = function(this1) {
	return this1.STENCIL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MIN = function(this1) {
	return this1.MIN;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX = function(this1) {
	return this1.MAX;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_COMPONENT24 = function(this1) {
	return this1.DEPTH_COMPONENT24;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STREAM_READ = function(this1) {
	return this1.STREAM_READ;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STREAM_COPY = function(this1) {
	return this1.STREAM_COPY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STATIC_READ = function(this1) {
	return this1.STATIC_READ;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STATIC_COPY = function(this1) {
	return this1.STATIC_COPY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DYNAMIC_READ = function(this1) {
	return this1.DYNAMIC_READ;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DYNAMIC_COPY = function(this1) {
	return this1.DYNAMIC_COPY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_COMPONENT32F = function(this1) {
	return this1.DEPTH_COMPONENT32F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH32F_STENCIL8 = function(this1) {
	return this1.DEPTH32F_STENCIL8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVALID_INDEX = function(this1) {
	return this1.INVALID_INDEX;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TIMEOUT_IGNORED = function(this1) {
	return this1.TIMEOUT_IGNORED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL = function(this1) {
	return this1.MAX_CLIENT_WAIT_TIMEOUT_WEBGL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.activeTexture = function(this1,texture) {
	this1.__context.activeTexture(texture);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.attachShader = function(this1,program,shader) {
	this1.__context.attachShader(program,shader);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.beginQuery = function(this1,target,query) {
	this1.__context.beginQuery(target,query);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.beginTransformFeedback = function(this1,primitiveNode) {
	this1.__context.beginTransformFeedback(primitiveNode);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindAttribLocation = function(this1,program,index,name) {
	this1.__context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindBuffer = function(this1,target,buffer) {
	this1.__context.bindBuffer(target,buffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindBufferBase = function(this1,target,index,buffer) {
	this1.__context.bindBufferBase(target,index,buffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindBufferRange = function(this1,target,index,buffer,offset,size) {
	this1.__context.bindBufferRange(target,index,buffer,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(size));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindFramebuffer = function(this1,target,framebuffer) {
	this1.__context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindRenderbuffer = function(this1,target,renderbuffer) {
	this1.__context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindSampler = function(this1,unit,sampler) {
	this1.__context.bindSampler(unit,sampler);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindTexture = function(this1,target,texture) {
	this1.__context.bindTexture(target,texture);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindTransformFeedback = function(this1,target,transformFeedback) {
	this1.__context.bindTransformFeedback(target,transformFeedback);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindVertexArray = function(this1,vertexArray) {
	this1.__context.bindVertexArray(vertexArray);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blendColor = function(this1,red,green,blue,alpha) {
	this1.__context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blendEquation = function(this1,mode) {
	this1.__context.blendEquation(mode);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blendEquationSeparate = function(this1,modeRGB,modeAlpha) {
	this1.__context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blendFunc = function(this1,sfactor,dfactor) {
	this1.__context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blendFuncSeparate = function(this1,srcRGB,dstRGB,srcAlpha,dstAlpha) {
	this1.__context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blitFramebuffer = function(this1,srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	this1.__context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bufferData = function(this1,target,size,data,usage) {
	this1.__context.bufferData(target,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,size),usage);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bufferSubData = function(this1,target,offset,size,data) {
	this1.__context.bufferSubData(target,offset,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,size));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.checkFramebufferStatus = function(this1,target) {
	return this1.__context.checkFramebufferStatus(target);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clear = function(this1,mask) {
	this1.__context.clear(mask);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearBufferfi = function(this1,buffer,drawbuffer,depth,stencil) {
	this1.__context.clearBufferfi(buffer,drawbuffer,depth,stencil);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearBufferfv = function(this1,buffer,drawbuffer,value) {
	this1.__context.clearBufferfv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(value));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearBufferiv = function(this1,buffer,drawbuffer,value) {
	this1.__context.clearBufferiv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(value));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearBufferuiv = function(this1,buffer,drawbuffer,value) {
	this1.__context.clearBufferuiv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(value));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearColor = function(this1,red,green,blue,alpha) {
	this1.__context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearDepthf = function(this1,depth) {
	this1.__context.clearDepth(depth);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearStencil = function(this1,s) {
	this1.__context.clearStencil(s);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clientWaitSync = function(this1,sync,flags,timeout) {
	return this1.__context.clientWaitSync(sync,flags,timeout);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.colorMask = function(this1,red,green,blue,alpha) {
	this1.__context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.compileShader = function(this1,shader) {
	this1.__context.compileShader(shader);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,imageSize,data) {
	this1.__context.compressedTexImage2D(target,level,internalformat,width,height,border,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.compressedTexImage3D = function(this1,target,level,internalformat,width,height,depth,border,imageSize,data) {
	this1.__context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,imageSize,data) {
	this1.__context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.compressedTexSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data) {
	this1.__context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.copyBufferSubData = function(this1,readTarget,writeTarget,readOffset,writeOffset,size) {
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.copyTexImage2D = function(this1,target,level,internalformat,x,y,width,height,border) {
	this1.__context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.copyTexSubImage2D = function(this1,target,level,xoffset,yoffset,x,y,width,height) {
	this1.__context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.copyTexSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,x,y,width,height) {
	this1.__context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createBuffer = function(this1) {
	return this1.__context.createBuffer();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createFramebuffer = function(this1) {
	return this1.__context.createFramebuffer();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createProgram = function(this1) {
	return this1.__context.createProgram();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createQuery = function(this1) {
	return this1.__context.createQuery();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createRenderbuffer = function(this1) {
	return this1.__context.createRenderbuffer();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createSampler = function(this1) {
	return this1.__context.createSampler();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createShader = function(this1,type) {
	return this1.__context.createShader(type);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createTexture = function(this1) {
	return this1.__context.createTexture();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createTransformFeedback = function(this1) {
	return this1.__context.createTransformFeedback();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createVertexArray = function(this1) {
	return this1.__context.createVertexArray();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.cullFace = function(this1,mode) {
	this1.__context.cullFace(mode);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteBuffer = function(this1,buffer) {
	this1.__context.deleteBuffer(buffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteFramebuffer = function(this1,framebuffer) {
	this1.__context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteProgram = function(this1,program) {
	this1.__context.deleteProgram(program);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteQuery = function(this1,query) {
	this1.__context.deleteQuery(query);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteRenderbuffer = function(this1,renderbuffer) {
	this1.__context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteSampler = function(this1,sampler) {
	this1.__context.deleteSampler(sampler);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteShader = function(this1,shader) {
	this1.__context.deleteShader(shader);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteSync = function(this1,sync) {
	this1.__context.deleteSync(sync);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteTexture = function(this1,texture) {
	this1.__context.deleteTexture(texture);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteTransformFeedback = function(this1,transformFeedback) {
	this1.__context.deleteTransformFeedback(transformFeedback);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteVertexArray = function(this1,vertexArray) {
	this1.__context.deleteVertexArray(vertexArray);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.depthFunc = function(this1,func) {
	this1.__context.depthFunc(func);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.depthMask = function(this1,flag) {
	this1.__context.depthMask(flag);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.depthRangef = function(this1,zNear,zFar) {
	this1.__context.depthRange(zNear,zFar);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.detachShader = function(this1,program,shader) {
	this1.__context.detachShader(program,shader);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.disable = function(this1,cap) {
	this1.__context.disable(cap);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.disableVertexAttribArray = function(this1,index) {
	this1.__context.disableVertexAttribArray(index);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawArrays = function(this1,mode,first,count) {
	this1.__context.drawArrays(mode,first,count);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawArraysInstanced = function(this1,mode,first,count,instanceCount) {
	this1.__context.drawArraysInstanced(mode,first,count,instanceCount);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawBuffers = function(this1,buffers) {
	this1.__context.drawBuffers(buffers);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawElements = function(this1,mode,count,type,offset) {
	this1.__context.drawElements(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawElementsInstanced = function(this1,mode,count,type,offset,instanceCount) {
	this1.__context.drawElementsInstanced(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),instanceCount);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawRangeElements = function(this1,mode,start,end,count,type,offset) {
	this1.__context.drawRangeElements(mode,start,end,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.enable = function(this1,cap) {
	this1.__context.enable(cap);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.enableVertexAttribArray = function(this1,index) {
	this1.__context.enableVertexAttribArray(index);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.endQuery = function(this1,target) {
	this1.__context.endQuery(target);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.endTransformFeedback = function(this1) {
	this1.__context.endTransformFeedback();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.fenceSync = function(this1,condition,flags) {
	return this1.__context.fenceSync(condition,flags);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.finish = function(this1) {
	this1.__context.finish();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.flush = function(this1) {
	this1.__context.flush();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.framebufferRenderbuffer = function(this1,target,attachment,renderbuffertarget,renderbuffer) {
	this1.__context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.framebufferTexture2D = function(this1,target,attachment,textarget,texture,level) {
	this1.__context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.framebufferTextureLayer = function(this1,target,attachment,texture,level,layer) {
	this1.__context.framebufferTextureLayer(target,attachment,texture,level,layer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.frontFace = function(this1,mode) {
	this1.__context.frontFace(mode);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genBuffers = function(this1,n,buffers) {
	if(buffers == null) {
		buffers = [];
	}
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		buffers[i] = this1.__context.createBuffer();
	}
	return buffers;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.generateMipmap = function(this1,target) {
	this1.__context.generateMipmap(target);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genFramebuffers = function(this1,n,framebuffers) {
	if(framebuffers == null) {
		framebuffers = [];
	}
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		framebuffers[i] = this1.__context.createFramebuffer();
	}
	return framebuffers;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genQueries = function(this1,n,queries) {
	if(queries == null) {
		queries = [];
	}
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		queries[i] = this1.__context.createQuery();
	}
	return queries;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genRenderbuffers = function(this1,n,renderbuffers) {
	if(renderbuffers == null) {
		renderbuffers = [];
	}
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		renderbuffers[i] = this1.__context.createRenderbuffer();
	}
	return renderbuffers;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genSamplers = function(this1,n,samplers) {
	if(samplers == null) {
		samplers = [];
	}
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		samplers[i] = this1.__context.createSampler();
	}
	return samplers;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genTextures = function(this1,n,textures) {
	if(textures == null) {
		textures = [];
	}
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		textures[i] = this1.__context.createTexture();
	}
	return textures;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genTransformFeedbacks = function(this1,n,transformFeedbacks) {
	if(transformFeedbacks == null) {
		transformFeedbacks = [];
	}
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		transformFeedbacks[i] = this1.__context.createTransformFeedback();
	}
	return transformFeedbacks;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveAttrib = function(this1,program,index) {
	return this1.__context.getActiveAttrib(program,index);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveUniform = function(this1,program,index) {
	return this1.__context.getActiveUniform(program,index);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveUniformBlocki = function(this1,program,uniformBlockIndex,pname) {
	return this1.__context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveUniformBlockiv = function(this1,program,uniformBlockIndex,pname,params) {
	this1.getActiveUniformBlockiv(program,uniformBlockIndex,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveUniformBlockName = function(this1,program,uniformBlockIndex) {
	return this1.__context.getActiveUniformBlockName(program,uniformBlockIndex);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveUniformsiv = function(this1,program,uniformIndices,pname,params) {
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getAttachedShaders = function(this1,program) {
	return this1.__context.getAttachedShaders(program);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getAttribLocation = function(this1,program,name) {
	return this1.__context.getAttribLocation(program,name);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBoolean = function(this1,pname) {
	return this1.__context.getParameter(pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBooleanv = function(this1,pname,params) {
	this1.getBooleanv(pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBufferParameteri = function(this1,target,pname) {
	return this1.__context.getBufferParameter(target,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBufferParameteri64v = function(this1,target,pname,params) {
	this1.getBufferParameteri64v(target,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBufferParameteriv = function(this1,target,pname,params) {
	this1.getBufferParameteriv(target,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBufferPointerv = function(this1,target,pname) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getError = function(this1) {
	return this1.__context.getError();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getFloat = function(this1,pname) {
	return this1.__context.getParameter(pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getFloatv = function(this1,pname,params) {
	this1.getFloatv(pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getExtension = function(this1,name) {
	return this1.__context.getExtension(name);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getFragDataLocation = function(this1,program,name) {
	return this1.__context.getFragDataLocation(program,name);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getFramebufferAttachmentParameteri = function(this1,target,attachment,pname) {
	return this1.__context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getFramebufferAttachmentParameteriv = function(this1,target,attachment,pname,params) {
	this1.getFramebufferAttachmentParameteriv(target,attachment,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInteger = function(this1,pname) {
	return this1.__context.getParameter(pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInteger64 = function(this1,pname) {
	var this2 = new haxe__$Int64__$_$_$Int64(0,0);
	return this2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInteger64i = function(this1,pname) {
	var this2 = new haxe__$Int64__$_$_$Int64(0,0);
	return this2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInteger64i_v = function(this1,pname,index,params) {
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInteger64v = function(this1,pname,params) {
	this1.getInteger64v(pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getIntegeri_v = function(this1,pname,index,params) {
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getIntegerv = function(this1,pname,params) {
	this1.getIntegerv(pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInternalformati = function(this1,target,internalformat,pname) {
	return this1.__context.getInternalformatParameter(target,internalformat,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInternalformativ = function(this1,target,internalformat,pname,bufSize,params) {
	this1.getInternalformativ(target,internalformat,pname,bufSize,params);
	return;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getProgramBinary = function(this1,program,binaryFormat) {
	return null;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getProgrami = function(this1,program,pname) {
	return this1.__context.getProgramParameter(program,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getProgramInfoLog = function(this1,program) {
	return this1.__context.getProgramInfoLog(program);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getProgramiv = function(this1,program,pname,params) {
	this1.getProgramiv(program,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getQueryi = function(this1,target,pname) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getQueryiv = function(this1,target,pname,params) {
	this1.getQueryiv(target,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getQueryObjectui = function(this1,query,pname) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getQueryObjectuiv = function(this1,query,pname,params) {
	this1.getQueryObjectuiv(query,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getRenderbufferParameteri = function(this1,target,pname) {
	return this1.__context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getRenderbufferParameteriv = function(this1,target,pname,params) {
	this1.getRenderbufferParameteriv(target,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSamplerParameteri = function(this1,sampler,pname) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSamplerParameteriv = function(this1,sampler,pname,params) {
	this1.getSamplerParameteriv(sampler,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSamplerParameterf = function(this1,sampler,pname) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSamplerParameterfv = function(this1,sampler,pname,params) {
	this1.getSamplerParameterfv(sampler,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getShaderInfoLog = function(this1,shader) {
	return this1.__context.getShaderInfoLog(shader);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getShaderi = function(this1,shader,pname) {
	return this1.__context.getShaderParameter(shader,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getShaderiv = function(this1,shader,pname,params) {
	this1.getShaderiv(shader,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getShaderPrecisionFormat = function(this1,shadertype,precisiontype) {
	return this1.__context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getShaderSource = function(this1,shader) {
	return this1.__context.getShaderSource(shader);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getString = function(this1,name) {
	return this1.getString(name);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getStringi = function(this1,name,index) {
	return null;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSyncParameteri = function(this1,sync,pname) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSyncParameteriv = function(this1,sync,pname,params) {
	this1.getSyncParameteriv(sync,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getTexParameterf = function(this1,target,pname) {
	return this1.__context.getTexParameter(target,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getTexParameterfv = function(this1,target,pname,params) {
	this1.getTexParameterfv(target,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getTexParameteri = function(this1,target,pname) {
	return this1.__context.getTexParameter(target,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getTexParameteriv = function(this1,target,pname,params) {
	this1.getTexParameteriv(target,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getTransformFeedbackVarying = function(this1,program,index) {
	return this1.__context.getTransformFeedbackVarying(program,index);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformf = function(this1,program,location) {
	return this1.__context.getUniform(program,location);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformfv = function(this1,program,location,params) {
	this1.getUniformfv(program,location,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformi = function(this1,program,location) {
	return this1.__context.getUniform(program,location);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformiv = function(this1,program,location,params) {
	this1.getUniformiv(program,location,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformui = function(this1,program,location) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformuiv = function(this1,program,location,params) {
	this1.getUniformuiv(program,location,params);
	return;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformBlockIndex = function(this1,program,uniformBlockName) {
	return this1.__context.getUniformBlockIndex(program,uniformBlockName);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformIndices = function(this1,program,uniformNames) {
	return this1.__context.getUniformIndices(program,uniformNames);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformLocation = function(this1,program,name) {
	return this1.__context.getUniformLocation(program,name);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribf = function(this1,index,pname) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribfv = function(this1,index,pname,params) {
	this1.getVertexAttribfv(index,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribi = function(this1,index,pname) {
	return this1.__context.getVertexAttrib(index,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribIi = function(this1,index,pname) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribIiv = function(this1,index,pname,params) {
	return;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribIui = function(this1,index,pname) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribIuiv = function(this1,index,pname,params) {
	return;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribiv = function(this1,index,pname,params) {
	this1.getVertexAttribiv(index,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribPointerv = function(this1,index,pname) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(this1.__context.getVertexAttribOffset(index,pname));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.hint = function(this1,target,mode) {
	this1.__context.hint(target,mode);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.invalidateFramebuffer = function(this1,target,attachments) {
	this1.__context.invalidateFramebuffer(target,attachments);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.invalidateSubFramebuffer = function(this1,target,attachments,x,y,width,height) {
	this1.__context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isBuffer = function(this1,buffer) {
	return this1.__context.isBuffer(buffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isEnabled = function(this1,cap) {
	return this1.__context.isEnabled(cap);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isFramebuffer = function(this1,framebuffer) {
	return this1.__context.isFramebuffer(framebuffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isProgram = function(this1,program) {
	return this1.__context.isProgram(program);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isQuery = function(this1,query) {
	return this1.__context.isQuery(query);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isRenderbuffer = function(this1,renderbuffer) {
	return this1.__context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isSampler = function(this1,sampler) {
	return this1.__context.isSampler(sampler);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isShader = function(this1,shader) {
	return this1.__context.isShader(shader);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isTexture = function(this1,texture) {
	return this1.__context.isTexture(texture);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isTransformFeedback = function(this1,transformFeedback) {
	return this1.__context.isTransformFeedback(transformFeedback);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isVertexArray = function(this1,vertexArray) {
	return this1.__context.isVertexArray(vertexArray);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.lineWidth = function(this1,width) {
	this1.__context.lineWidth(width);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.linkProgram = function(this1,program) {
	this1.__context.linkProgram(program);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.mapBufferRange = function(this1,target,offset,length,access) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.pauseTransformFeedback = function(this1) {
	this1.__context.pauseTransformFeedback();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.pixelStorei = function(this1,pname,param) {
	this1.__context.pixelStorei(pname,param);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.polygonOffset = function(this1,factor,units) {
	this1.__context.polygonOffset(factor,units);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.programBinary = function(this1,program,binaryFormat,binary,length) {
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.programParameteri = function(this1,program,pname,value) {
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.readBuffer = function(this1,src) {
	this1.__context.readBuffer(src);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.readPixels = function(this1,x,y,width,height,format,type,data) {
	this1.__context.readPixels(x,y,width,height,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.releaseShaderCompiler = function(this1) {
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.renderbufferStorage = function(this1,target,internalformat,width,height) {
	this1.__context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.renderbufferStorageMultisample = function(this1,target,samples,internalformat,width,height) {
	this1.__context.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.resumeTransformFeedback = function(this1) {
	this1.__context.resumeTransformFeedback();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.sampleCoverage = function(this1,value,invert) {
	this1.__context.sampleCoverage(value,invert);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.samplerParameterf = function(this1,sampler,pname,param) {
	this1.__context.samplerParameterf(sampler,pname,param);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.samplerParameteri = function(this1,sampler,pname,param) {
	this1.__context.samplerParameteri(sampler,pname,param);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.scissor = function(this1,x,y,width,height) {
	this1.__context.scissor(x,y,width,height);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.shaderBinary = function(this1,shaders,binaryformat,binary,length) {
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.shaderSource = function(this1,shader,source) {
	this1.__context.shaderSource(shader,source);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilFunc = function(this1,func,ref,mask) {
	this1.__context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilFuncSeparate = function(this1,face,func,ref,mask) {
	this1.__context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilMask = function(this1,mask) {
	this1.__context.stencilMask(mask);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilMaskSeparate = function(this1,face,mask) {
	this1.__context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilOp = function(this1,fail,zfail,zpass) {
	this1.__context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilOpSeparate = function(this1,face,fail,zfail,zpass) {
	this1.__context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,data) {
	this1.__context.texImage2D(target,level,internalformat,width,height,border,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texImage3D = function(this1,target,level,internalformat,width,height,depth,border,format,type,data) {
	this1.__context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texStorage2D = function(this1,target,level,internalformat,width,height) {
	this1.__context.texStorage2D(target,level,internalformat,width,height);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texStorage3D = function(this1,target,level,internalformat,width,height,depth) {
	this1.__context.texStorage3D(target,level,internalformat,width,height,depth);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texParameterf = function(this1,target,pname,param) {
	this1.__context.texParameterf(target,pname,param);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texParameteri = function(this1,target,pname,param) {
	this1.__context.texParameteri(target,pname,param);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,data) {
	this1.__context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,data) {
	this1.__context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.transformFeedbackVaryings = function(this1,program,varyings,bufferMode) {
	this1.__context.transformFeedbackVaryings(program,varyings,bufferMode);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1f = function(this1,location,v0) {
	this1.__context.uniform1f(location,v0);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1fv = function(this1,location,count,v) {
	this1.__context.uniform1fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1i = function(this1,location,v0) {
	this1.__context.uniform1i(location,v0);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1iv = function(this1,location,count,v) {
	this1.__context.uniform1iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1ui = function(this1,location,v0) {
	this1.__context.uniform1ui(location,v0);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1uiv = function(this1,location,count,v) {
	this1.__context.uniform1uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2f = function(this1,location,v0,v1) {
	this1.__context.uniform2f(location,v0,v1);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2fv = function(this1,location,count,v) {
	this1.__context.uniform2fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 2));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2i = function(this1,location,v0,v1) {
	this1.__context.uniform2i(location,v0,v1);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2iv = function(this1,location,count,v) {
	this1.__context.uniform2iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 2));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2ui = function(this1,location,v0,v1) {
	this1.__context.uniform2ui(location,v0,v1);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2uiv = function(this1,location,count,v) {
	this1.__context.uniform2uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 2));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3f = function(this1,location,v0,v1,v2) {
	this1.__context.uniform3f(location,v0,v1,v2);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3fv = function(this1,location,count,v) {
	this1.__context.uniform3fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 3));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3i = function(this1,location,v0,v1,v2) {
	this1.__context.uniform3i(location,v0,v1,v2);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3iv = function(this1,location,count,v) {
	this1.__context.uniform3iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 3));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3ui = function(this1,location,v0,v1,v2) {
	this1.__context.uniform3ui(location,v0,v1,v2);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3uiv = function(this1,location,count,v) {
	this1.__context.uniform3uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 3));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4f = function(this1,location,v0,v1,v2,v3) {
	this1.__context.uniform4f(location,v0,v1,v2,v3);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4fv = function(this1,location,count,v) {
	this1.__context.uniform4fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 4));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4i = function(this1,location,v0,v1,v2,v3) {
	this1.__context.uniform4i(location,v0,v1,v2,v3);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4iv = function(this1,location,count,v) {
	this1.__context.uniform4iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 4));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4ui = function(this1,location,v0,v1,v2,v3) {
	this1.__context.uniform4ui(location,v0,v1,v2,v3);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4uiv = function(this1,location,count,v) {
	this1.__context.uniform4uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 4));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformBlockBinding = function(this1,program,uniformBlockIndex,uniformBlockBinding) {
	this1.__context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix2fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 4));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix2x3fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix2x3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 6));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix2x4fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix2x4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 8));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix3fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 9));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix3x2fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix3x2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 6));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix3x4fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix3x4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 12));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix4fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 16));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix4x2fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix4x2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 8));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix4x3fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix4x3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 12));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.unmapBuffer = function(this1,target) {
	return false;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.useProgram = function(this1,program) {
	this1.__context.useProgram(program);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.validateProgram = function(this1,program) {
	this1.__context.validateProgram(program);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib1f = function(this1,indx,x) {
	this1.__context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib1fv = function(this1,indx,values) {
	this1.__context.vertexAttrib1fv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(values));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib2f = function(this1,indx,x,y) {
	this1.__context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib2fv = function(this1,indx,values) {
	this1.__context.vertexAttrib2fv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(values));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib3f = function(this1,indx,x,y,z) {
	this1.__context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib3fv = function(this1,indx,values) {
	this1.__context.vertexAttrib3fv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(values));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib4f = function(this1,indx,x,y,z,w) {
	this1.__context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib4fv = function(this1,indx,values) {
	this1.__context.vertexAttrib4fv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(values));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribDivisor = function(this1,index,divisor) {
	this1.__context.vertexAttribDivisor(index,divisor);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribI4i = function(this1,indx,x,y,z,w) {
	this1.__context.vertexAttribI4i(indx,x,y,z,w);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribI4iv = function(this1,indx,values) {
	this1.__context.vertexAttribI4iv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(values));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribI4ui = function(this1,indx,x,y,z,w) {
	this1.__context.vertexAttribI4ui(indx,x,y,z,w);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribI4uiv = function(this1,indx,values) {
	this1.__context.vertexAttribI4uiv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(values));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribIPointer = function(this1,indx,size,type,stride,pointer) {
	this1.__context.vertexAttribIPointer(indx,size,type,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(pointer)));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribPointer = function(this1,indx,size,type,normalized,stride,pointer) {
	this1.__context.vertexAttribPointer(indx,size,type,normalized,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(pointer));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.viewport = function(this1,x,y,width,height) {
	this1.__context.viewport(x,y,width,height);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.waitSync = function(this1,sync,flags,timeout) {
	this1.__context.waitSync(sync,flags,timeout);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.fromGL = function(gl) {
	return lime_graphics_opengl_GL.context;
};
var lime_utils_BytePointerData = function(bytes,offset) {
	this.bytes = bytes;
	this.offset = offset;
};
$hxClasses["lime.utils.BytePointerData"] = lime_utils_BytePointerData;
lime_utils_BytePointerData.__name__ = ["lime","utils","BytePointerData"];
lime_utils_BytePointerData.prototype = {
	bytes: null
	,offset: null
	,__class__: lime_utils_BytePointerData
};
var lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$ = {};
$hxClasses["lime.graphics.opengl._WebGL2Context.WebGL2Context_Impl_"] = lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$;
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.__name__ = ["lime","graphics","opengl","_WebGL2Context","WebGL2Context_Impl_"];
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.__properties__ = {get_version:"get_version",get_type:"get_type",get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL:"get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL",get_TIMEOUT_IGNORED:"get_TIMEOUT_IGNORED",get_INVALID_INDEX:"get_INVALID_INDEX",get_DEPTH32F_STENCIL8:"get_DEPTH32F_STENCIL8",get_DEPTH_COMPONENT32F:"get_DEPTH_COMPONENT32F",get_DYNAMIC_COPY:"get_DYNAMIC_COPY",get_DYNAMIC_READ:"get_DYNAMIC_READ",get_STATIC_COPY:"get_STATIC_COPY",get_STATIC_READ:"get_STATIC_READ",get_STREAM_COPY:"get_STREAM_COPY",get_STREAM_READ:"get_STREAM_READ",get_DEPTH_COMPONENT24:"get_DEPTH_COMPONENT24",get_MAX:"get_MAX",get_MIN:"get_MIN",get_STENCIL:"get_STENCIL",get_DEPTH:"get_DEPTH",get_COLOR:"get_COLOR",get_SYNC_FLUSH_COMMANDS_BIT:"get_SYNC_FLUSH_COMMANDS_BIT",get_WAIT_FAILED:"get_WAIT_FAILED",get_CONDITION_SATISFIED:"get_CONDITION_SATISFIED",get_TIMEOUT_EXPIRED:"get_TIMEOUT_EXPIRED",get_ALREADY_SIGNALED:"get_ALREADY_SIGNALED",get_SIGNALED:"get_SIGNALED",get_UNSIGNALED:"get_UNSIGNALED",get_SYNC_GPU_COMMANDS_COMPLETE:"get_SYNC_GPU_COMMANDS_COMPLETE",get_SYNC_FENCE:"get_SYNC_FENCE",get_SYNC_FLAGS:"get_SYNC_FLAGS",get_SYNC_STATUS:"get_SYNC_STATUS",get_SYNC_CONDITION:"get_SYNC_CONDITION",get_OBJECT_TYPE:"get_OBJECT_TYPE",get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER:"get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER:"get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES:"get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",get_UNIFORM_BLOCK_ACTIVE_UNIFORMS:"get_UNIFORM_BLOCK_ACTIVE_UNIFORMS",get_UNIFORM_BLOCK_DATA_SIZE:"get_UNIFORM_BLOCK_DATA_SIZE",get_UNIFORM_BLOCK_BINDING:"get_UNIFORM_BLOCK_BINDING",get_UNIFORM_IS_ROW_MAJOR:"get_UNIFORM_IS_ROW_MAJOR",get_UNIFORM_MATRIX_STRIDE:"get_UNIFORM_MATRIX_STRIDE",get_UNIFORM_ARRAY_STRIDE:"get_UNIFORM_ARRAY_STRIDE",get_UNIFORM_OFFSET:"get_UNIFORM_OFFSET",get_UNIFORM_BLOCK_INDEX:"get_UNIFORM_BLOCK_INDEX",get_UNIFORM_SIZE:"get_UNIFORM_SIZE",get_UNIFORM_TYPE:"get_UNIFORM_TYPE",get_ACTIVE_UNIFORM_BLOCKS:"get_ACTIVE_UNIFORM_BLOCKS",get_UNIFORM_BUFFER_OFFSET_ALIGNMENT:"get_UNIFORM_BUFFER_OFFSET_ALIGNMENT",get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS:"get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS:"get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",get_MAX_UNIFORM_BLOCK_SIZE:"get_MAX_UNIFORM_BLOCK_SIZE",get_MAX_UNIFORM_BUFFER_BINDINGS:"get_MAX_UNIFORM_BUFFER_BINDINGS",get_MAX_COMBINED_UNIFORM_BLOCKS:"get_MAX_COMBINED_UNIFORM_BLOCKS",get_MAX_FRAGMENT_UNIFORM_BLOCKS:"get_MAX_FRAGMENT_UNIFORM_BLOCKS",get_MAX_VERTEX_UNIFORM_BLOCKS:"get_MAX_VERTEX_UNIFORM_BLOCKS",get_UNIFORM_BUFFER_SIZE:"get_UNIFORM_BUFFER_SIZE",get_UNIFORM_BUFFER_START:"get_UNIFORM_BUFFER_START",get_UNIFORM_BUFFER_BINDING:"get_UNIFORM_BUFFER_BINDING",get_UNIFORM_BUFFER:"get_UNIFORM_BUFFER",get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:"get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",get_RENDERBUFFER_SAMPLES:"get_RENDERBUFFER_SAMPLES",get_READ_FRAMEBUFFER_BINDING:"get_READ_FRAMEBUFFER_BINDING",get_DRAW_FRAMEBUFFER:"get_DRAW_FRAMEBUFFER",get_READ_FRAMEBUFFER:"get_READ_FRAMEBUFFER",get_DRAW_FRAMEBUFFER_BINDING:"get_DRAW_FRAMEBUFFER_BINDING",get_DEPTH24_STENCIL8:"get_DEPTH24_STENCIL8",get_FRAMEBUFFER_DEFAULT:"get_FRAMEBUFFER_DEFAULT",get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:"get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE:"get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE:"get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE:"get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE:"get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",get_FRAMEBUFFER_ATTACHMENT_RED_SIZE:"get_FRAMEBUFFER_ATTACHMENT_RED_SIZE",get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:"get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:"get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",get_TRANSFORM_FEEDBACK_BINDING:"get_TRANSFORM_FEEDBACK_BINDING",get_TRANSFORM_FEEDBACK_ACTIVE:"get_TRANSFORM_FEEDBACK_ACTIVE",get_TRANSFORM_FEEDBACK_PAUSED:"get_TRANSFORM_FEEDBACK_PAUSED",get_TRANSFORM_FEEDBACK:"get_TRANSFORM_FEEDBACK",get_TRANSFORM_FEEDBACK_BUFFER_BINDING:"get_TRANSFORM_FEEDBACK_BUFFER_BINDING",get_TRANSFORM_FEEDBACK_BUFFER:"get_TRANSFORM_FEEDBACK_BUFFER",get_SEPARATE_ATTRIBS:"get_SEPARATE_ATTRIBS",get_INTERLEAVED_ATTRIBS:"get_INTERLEAVED_ATTRIBS",get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS:"get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS:"get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN:"get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",get_TRANSFORM_FEEDBACK_BUFFER_SIZE:"get_TRANSFORM_FEEDBACK_BUFFER_SIZE",get_TRANSFORM_FEEDBACK_BUFFER_START:"get_TRANSFORM_FEEDBACK_BUFFER_START",get_TRANSFORM_FEEDBACK_VARYINGS:"get_TRANSFORM_FEEDBACK_VARYINGS",get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS:"get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",get_TRANSFORM_FEEDBACK_BUFFER_MODE:"get_TRANSFORM_FEEDBACK_BUFFER_MODE",get_VERTEX_ATTRIB_ARRAY_DIVISOR:"get_VERTEX_ATTRIB_ARRAY_DIVISOR",get_VERTEX_ATTRIB_ARRAY_INTEGER:"get_VERTEX_ATTRIB_ARRAY_INTEGER",get_SIGNED_NORMALIZED:"get_SIGNED_NORMALIZED",get_UNSIGNED_NORMALIZED:"get_UNSIGNED_NORMALIZED",get_UNSIGNED_INT_VEC4:"get_UNSIGNED_INT_VEC4",get_UNSIGNED_INT_VEC3:"get_UNSIGNED_INT_VEC3",get_UNSIGNED_INT_VEC2:"get_UNSIGNED_INT_VEC2",get_FLOAT_MAT4x3:"get_FLOAT_MAT4x3",get_FLOAT_MAT4x2:"get_FLOAT_MAT4x2",get_FLOAT_MAT3x4:"get_FLOAT_MAT3x4",get_FLOAT_MAT3x2:"get_FLOAT_MAT3x2",get_FLOAT_MAT2x4:"get_FLOAT_MAT2x4",get_FLOAT_MAT2x3:"get_FLOAT_MAT2x3",get_COPY_WRITE_BUFFER_BINDING:"get_COPY_WRITE_BUFFER_BINDING",get_COPY_READ_BUFFER_BINDING:"get_COPY_READ_BUFFER_BINDING",get_COPY_WRITE_BUFFER:"get_COPY_WRITE_BUFFER",get_COPY_READ_BUFFER:"get_COPY_READ_BUFFER",get_PIXEL_UNPACK_BUFFER_BINDING:"get_PIXEL_UNPACK_BUFFER_BINDING",get_PIXEL_PACK_BUFFER_BINDING:"get_PIXEL_PACK_BUFFER_BINDING",get_PIXEL_UNPACK_BUFFER:"get_PIXEL_UNPACK_BUFFER",get_PIXEL_PACK_BUFFER:"get_PIXEL_PACK_BUFFER",get_SAMPLER_BINDING:"get_SAMPLER_BINDING",get_MAX_SAMPLES:"get_MAX_SAMPLES",get_UNSIGNED_INT_SAMPLER_2D_ARRAY:"get_UNSIGNED_INT_SAMPLER_2D_ARRAY",get_UNSIGNED_INT_SAMPLER_CUBE:"get_UNSIGNED_INT_SAMPLER_CUBE",get_UNSIGNED_INT_SAMPLER_3D:"get_UNSIGNED_INT_SAMPLER_3D",get_UNSIGNED_INT_SAMPLER_2D:"get_UNSIGNED_INT_SAMPLER_2D",get_INT_SAMPLER_2D_ARRAY:"get_INT_SAMPLER_2D_ARRAY",get_INT_SAMPLER_CUBE:"get_INT_SAMPLER_CUBE",get_INT_SAMPLER_3D:"get_INT_SAMPLER_3D",get_INT_SAMPLER_2D:"get_INT_SAMPLER_2D",get_SAMPLER_CUBE_SHADOW:"get_SAMPLER_CUBE_SHADOW",get_SAMPLER_2D_ARRAY_SHADOW:"get_SAMPLER_2D_ARRAY_SHADOW",get_SAMPLER_2D_ARRAY:"get_SAMPLER_2D_ARRAY",get_SAMPLER_2D_SHADOW:"get_SAMPLER_2D_SHADOW",get_SAMPLER_3D:"get_SAMPLER_3D",get_COLOR_ATTACHMENT15:"get_COLOR_ATTACHMENT15",get_COLOR_ATTACHMENT14:"get_COLOR_ATTACHMENT14",get_COLOR_ATTACHMENT13:"get_COLOR_ATTACHMENT13",get_COLOR_ATTACHMENT12:"get_COLOR_ATTACHMENT12",get_COLOR_ATTACHMENT11:"get_COLOR_ATTACHMENT11",get_COLOR_ATTACHMENT10:"get_COLOR_ATTACHMENT10",get_COLOR_ATTACHMENT9:"get_COLOR_ATTACHMENT9",get_COLOR_ATTACHMENT8:"get_COLOR_ATTACHMENT8",get_COLOR_ATTACHMENT7:"get_COLOR_ATTACHMENT7",get_COLOR_ATTACHMENT6:"get_COLOR_ATTACHMENT6",get_COLOR_ATTACHMENT5:"get_COLOR_ATTACHMENT5",get_COLOR_ATTACHMENT4:"get_COLOR_ATTACHMENT4",get_COLOR_ATTACHMENT3:"get_COLOR_ATTACHMENT3",get_COLOR_ATTACHMENT2:"get_COLOR_ATTACHMENT2",get_COLOR_ATTACHMENT1:"get_COLOR_ATTACHMENT1",get_MAX_COLOR_ATTACHMENTS:"get_MAX_COLOR_ATTACHMENTS",get_DRAW_BUFFER15:"get_DRAW_BUFFER15",get_DRAW_BUFFER14:"get_DRAW_BUFFER14",get_DRAW_BUFFER13:"get_DRAW_BUFFER13",get_DRAW_BUFFER12:"get_DRAW_BUFFER12",get_DRAW_BUFFER11:"get_DRAW_BUFFER11",get_DRAW_BUFFER10:"get_DRAW_BUFFER10",get_DRAW_BUFFER9:"get_DRAW_BUFFER9",get_DRAW_BUFFER8:"get_DRAW_BUFFER8",get_DRAW_BUFFER7:"get_DRAW_BUFFER7",get_DRAW_BUFFER6:"get_DRAW_BUFFER6",get_DRAW_BUFFER5:"get_DRAW_BUFFER5",get_DRAW_BUFFER4:"get_DRAW_BUFFER4",get_DRAW_BUFFER3:"get_DRAW_BUFFER3",get_DRAW_BUFFER2:"get_DRAW_BUFFER2",get_DRAW_BUFFER1:"get_DRAW_BUFFER1",get_DRAW_BUFFER0:"get_DRAW_BUFFER0",get_MAX_DRAW_BUFFERS:"get_MAX_DRAW_BUFFERS",get_ANY_SAMPLES_PASSED_CONSERVATIVE:"get_ANY_SAMPLES_PASSED_CONSERVATIVE",get_ANY_SAMPLES_PASSED:"get_ANY_SAMPLES_PASSED",get_QUERY_RESULT_AVAILABLE:"get_QUERY_RESULT_AVAILABLE",get_QUERY_RESULT:"get_QUERY_RESULT",get_CURRENT_QUERY:"get_CURRENT_QUERY",get_INT_2_10_10_10_REV:"get_INT_2_10_10_10_REV",get_RG_INTEGER:"get_RG_INTEGER",get_RG:"get_RG",get_HALF_FLOAT:"get_HALF_FLOAT",get_UNSIGNED_INT_24_8:"get_UNSIGNED_INT_24_8",get_FLOAT_32_UNSIGNED_INT_24_8_REV:"get_FLOAT_32_UNSIGNED_INT_24_8_REV",get_UNSIGNED_INT_5_9_9_9_REV:"get_UNSIGNED_INT_5_9_9_9_REV",get_UNSIGNED_INT_10F_11F_11F_REV:"get_UNSIGNED_INT_10F_11F_11F_REV",get_UNSIGNED_INT_2_10_10_10_REV:"get_UNSIGNED_INT_2_10_10_10_REV",get_TEXTURE_IMMUTABLE_LEVELS:"get_TEXTURE_IMMUTABLE_LEVELS",get_TEXTURE_IMMUTABLE_FORMAT:"get_TEXTURE_IMMUTABLE_FORMAT",get_RGB10_A2UI:"get_RGB10_A2UI",get_RGBA8_SNORM:"get_RGBA8_SNORM",get_RGB8_SNORM:"get_RGB8_SNORM",get_RG8_SNORM:"get_RG8_SNORM",get_R8_SNORM:"get_R8_SNORM",get_RG32UI:"get_RG32UI",get_RG32I:"get_RG32I",get_RG16UI:"get_RG16UI",get_RG16I:"get_RG16I",get_RG8UI:"get_RG8UI",get_RG8I:"get_RG8I",get_R32UI:"get_R32UI",get_R32I:"get_R32I",get_R16UI:"get_R16UI",get_R16I:"get_R16I",get_R8UI:"get_R8UI",get_R8I:"get_R8I",get_RG32F:"get_RG32F",get_RG16F:"get_RG16F",get_R32F:"get_R32F",get_R16F:"get_R16F",get_RG8:"get_RG8",get_R8:"get_R8",get_RGBA_INTEGER:"get_RGBA_INTEGER",get_RGB_INTEGER:"get_RGB_INTEGER",get_RED_INTEGER:"get_RED_INTEGER",get_RGB8I:"get_RGB8I",get_RGBA8I:"get_RGBA8I",get_RGB16I:"get_RGB16I",get_RGBA16I:"get_RGBA16I",get_RGB32I:"get_RGB32I",get_RGBA32I:"get_RGBA32I",get_RGB8UI:"get_RGB8UI",get_RGBA8UI:"get_RGBA8UI",get_RGB16UI:"get_RGB16UI",get_RGBA16UI:"get_RGBA16UI",get_RGB32UI:"get_RGB32UI",get_RGBA32UI:"get_RGBA32UI",get_RGB9_E5:"get_RGB9_E5",get_R11F_G11F_B10F:"get_R11F_G11F_B10F",get_TEXTURE_BINDING_2D_ARRAY:"get_TEXTURE_BINDING_2D_ARRAY",get_TEXTURE_2D_ARRAY:"get_TEXTURE_2D_ARRAY",get_RGB16F:"get_RGB16F",get_RGBA16F:"get_RGBA16F",get_RGB32F:"get_RGB32F",get_RGBA32F:"get_RGBA32F",get_COMPARE_REF_TO_TEXTURE:"get_COMPARE_REF_TO_TEXTURE",get_SRGB8_ALPHA8:"get_SRGB8_ALPHA8",get_SRGB8:"get_SRGB8",get_SRGB:"get_SRGB",get_TEXTURE_COMPARE_FUNC:"get_TEXTURE_COMPARE_FUNC",get_TEXTURE_COMPARE_MODE:"get_TEXTURE_COMPARE_MODE",get_TEXTURE_MAX_LEVEL:"get_TEXTURE_MAX_LEVEL",get_TEXTURE_BASE_LEVEL:"get_TEXTURE_BASE_LEVEL",get_TEXTURE_MAX_LOD:"get_TEXTURE_MAX_LOD",get_TEXTURE_MIN_LOD:"get_TEXTURE_MIN_LOD",get_TEXTURE_WRAP_R:"get_TEXTURE_WRAP_R",get_TEXTURE_3D:"get_TEXTURE_3D",get_RGB10_A2:"get_RGB10_A2",get_RGBA8:"get_RGBA8",get_RGB8:"get_RGB8",get_RED:"get_RED",get_MAX_ELEMENT_INDEX:"get_MAX_ELEMENT_INDEX",get_MAX_SERVER_WAIT_TIMEOUT:"get_MAX_SERVER_WAIT_TIMEOUT",get_MAX_FRAGMENT_INPUT_COMPONENTS:"get_MAX_FRAGMENT_INPUT_COMPONENTS",get_MAX_VERTEX_OUTPUT_COMPONENTS:"get_MAX_VERTEX_OUTPUT_COMPONENTS",get_VERTEX_ARRAY_BINDING:"get_VERTEX_ARRAY_BINDING",get_RASTERIZER_DISCARD:"get_RASTERIZER_DISCARD",get_FRAGMENT_SHADER_DERIVATIVE_HINT:"get_FRAGMENT_SHADER_DERIVATIVE_HINT",get_MAX_VARYING_COMPONENTS:"get_MAX_VARYING_COMPONENTS",get_MAX_PROGRAM_TEXEL_OFFSET:"get_MAX_PROGRAM_TEXEL_OFFSET",get_MIN_PROGRAM_TEXEL_OFFSET:"get_MIN_PROGRAM_TEXEL_OFFSET",get_MAX_ARRAY_TEXTURE_LAYERS:"get_MAX_ARRAY_TEXTURE_LAYERS",get_MAX_VERTEX_UNIFORM_COMPONENTS:"get_MAX_VERTEX_UNIFORM_COMPONENTS",get_MAX_FRAGMENT_UNIFORM_COMPONENTS:"get_MAX_FRAGMENT_UNIFORM_COMPONENTS",get_MAX_TEXTURE_LOD_BIAS:"get_MAX_TEXTURE_LOD_BIAS",get_MAX_ELEMENTS_INDICES:"get_MAX_ELEMENTS_INDICES",get_MAX_ELEMENTS_VERTICES:"get_MAX_ELEMENTS_VERTICES",get_MAX_3D_TEXTURE_SIZE:"get_MAX_3D_TEXTURE_SIZE",get_UNPACK_IMAGE_HEIGHT:"get_UNPACK_IMAGE_HEIGHT",get_UNPACK_SKIP_IMAGES:"get_UNPACK_SKIP_IMAGES",get_TEXTURE_BINDING_3D:"get_TEXTURE_BINDING_3D",get_PACK_SKIP_PIXELS:"get_PACK_SKIP_PIXELS",get_PACK_SKIP_ROWS:"get_PACK_SKIP_ROWS",get_PACK_ROW_LENGTH:"get_PACK_ROW_LENGTH",get_UNPACK_SKIP_PIXELS:"get_UNPACK_SKIP_PIXELS",get_UNPACK_SKIP_ROWS:"get_UNPACK_SKIP_ROWS",get_UNPACK_ROW_LENGTH:"get_UNPACK_ROW_LENGTH",get_READ_BUFFER:"get_READ_BUFFER",get_BROWSER_DEFAULT_WEBGL:"get_BROWSER_DEFAULT_WEBGL",get_UNPACK_COLORSPACE_CONVERSION_WEBGL:"get_UNPACK_COLORSPACE_CONVERSION_WEBGL",get_CONTEXT_LOST_WEBGL:"get_CONTEXT_LOST_WEBGL",get_UNPACK_PREMULTIPLY_ALPHA_WEBGL:"get_UNPACK_PREMULTIPLY_ALPHA_WEBGL",get_UNPACK_FLIP_Y_WEBGL:"get_UNPACK_FLIP_Y_WEBGL",get_INVALID_FRAMEBUFFER_OPERATION:"get_INVALID_FRAMEBUFFER_OPERATION",get_MAX_RENDERBUFFER_SIZE:"get_MAX_RENDERBUFFER_SIZE",get_RENDERBUFFER_BINDING:"get_RENDERBUFFER_BINDING",get_FRAMEBUFFER_BINDING:"get_FRAMEBUFFER_BINDING",get_FRAMEBUFFER_UNSUPPORTED:"get_FRAMEBUFFER_UNSUPPORTED",get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS:"get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS",get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:"get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT:"get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT",get_FRAMEBUFFER_COMPLETE:"get_FRAMEBUFFER_COMPLETE",get_NONE:"get_NONE",get_DEPTH_STENCIL_ATTACHMENT:"get_DEPTH_STENCIL_ATTACHMENT",get_STENCIL_ATTACHMENT:"get_STENCIL_ATTACHMENT",get_DEPTH_ATTACHMENT:"get_DEPTH_ATTACHMENT",get_COLOR_ATTACHMENT0:"get_COLOR_ATTACHMENT0",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:"get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:"get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",get_RENDERBUFFER_STENCIL_SIZE:"get_RENDERBUFFER_STENCIL_SIZE",get_RENDERBUFFER_DEPTH_SIZE:"get_RENDERBUFFER_DEPTH_SIZE",get_RENDERBUFFER_ALPHA_SIZE:"get_RENDERBUFFER_ALPHA_SIZE",get_RENDERBUFFER_BLUE_SIZE:"get_RENDERBUFFER_BLUE_SIZE",get_RENDERBUFFER_GREEN_SIZE:"get_RENDERBUFFER_GREEN_SIZE",get_RENDERBUFFER_RED_SIZE:"get_RENDERBUFFER_RED_SIZE",get_RENDERBUFFER_INTERNAL_FORMAT:"get_RENDERBUFFER_INTERNAL_FORMAT",get_RENDERBUFFER_HEIGHT:"get_RENDERBUFFER_HEIGHT",get_RENDERBUFFER_WIDTH:"get_RENDERBUFFER_WIDTH",get_DEPTH_STENCIL:"get_DEPTH_STENCIL",get_STENCIL_INDEX8:"get_STENCIL_INDEX8",get_STENCIL_INDEX:"get_STENCIL_INDEX",get_DEPTH_COMPONENT16:"get_DEPTH_COMPONENT16",get_RGB565:"get_RGB565",get_RGB5_A1:"get_RGB5_A1",get_RGBA4:"get_RGBA4",get_RENDERBUFFER:"get_RENDERBUFFER",get_FRAMEBUFFER:"get_FRAMEBUFFER",get_HIGH_INT:"get_HIGH_INT",get_MEDIUM_INT:"get_MEDIUM_INT",get_LOW_INT:"get_LOW_INT",get_HIGH_FLOAT:"get_HIGH_FLOAT",get_MEDIUM_FLOAT:"get_MEDIUM_FLOAT",get_LOW_FLOAT:"get_LOW_FLOAT",get_COMPILE_STATUS:"get_COMPILE_STATUS",get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:"get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",get_VERTEX_ATTRIB_ARRAY_POINTER:"get_VERTEX_ATTRIB_ARRAY_POINTER",get_VERTEX_ATTRIB_ARRAY_NORMALIZED:"get_VERTEX_ATTRIB_ARRAY_NORMALIZED",get_VERTEX_ATTRIB_ARRAY_TYPE:"get_VERTEX_ATTRIB_ARRAY_TYPE",get_VERTEX_ATTRIB_ARRAY_STRIDE:"get_VERTEX_ATTRIB_ARRAY_STRIDE",get_VERTEX_ATTRIB_ARRAY_SIZE:"get_VERTEX_ATTRIB_ARRAY_SIZE",get_VERTEX_ATTRIB_ARRAY_ENABLED:"get_VERTEX_ATTRIB_ARRAY_ENABLED",get_SAMPLER_CUBE:"get_SAMPLER_CUBE",get_SAMPLER_2D:"get_SAMPLER_2D",get_FLOAT_MAT4:"get_FLOAT_MAT4",get_FLOAT_MAT3:"get_FLOAT_MAT3",get_FLOAT_MAT2:"get_FLOAT_MAT2",get_BOOL_VEC4:"get_BOOL_VEC4",get_BOOL_VEC3:"get_BOOL_VEC3",get_BOOL_VEC2:"get_BOOL_VEC2",get_BOOL:"get_BOOL",get_INT_VEC4:"get_INT_VEC4",get_INT_VEC3:"get_INT_VEC3",get_INT_VEC2:"get_INT_VEC2",get_FLOAT_VEC4:"get_FLOAT_VEC4",get_FLOAT_VEC3:"get_FLOAT_VEC3",get_FLOAT_VEC2:"get_FLOAT_VEC2",get_MIRRORED_REPEAT:"get_MIRRORED_REPEAT",get_CLAMP_TO_EDGE:"get_CLAMP_TO_EDGE",get_REPEAT:"get_REPEAT",get_ACTIVE_TEXTURE:"get_ACTIVE_TEXTURE",get_TEXTURE31:"get_TEXTURE31",get_TEXTURE30:"get_TEXTURE30",get_TEXTURE29:"get_TEXTURE29",get_TEXTURE28:"get_TEXTURE28",get_TEXTURE27:"get_TEXTURE27",get_TEXTURE26:"get_TEXTURE26",get_TEXTURE25:"get_TEXTURE25",get_TEXTURE24:"get_TEXTURE24",get_TEXTURE23:"get_TEXTURE23",get_TEXTURE22:"get_TEXTURE22",get_TEXTURE21:"get_TEXTURE21",get_TEXTURE20:"get_TEXTURE20",get_TEXTURE19:"get_TEXTURE19",get_TEXTURE18:"get_TEXTURE18",get_TEXTURE17:"get_TEXTURE17",get_TEXTURE16:"get_TEXTURE16",get_TEXTURE15:"get_TEXTURE15",get_TEXTURE14:"get_TEXTURE14",get_TEXTURE13:"get_TEXTURE13",get_TEXTURE12:"get_TEXTURE12",get_TEXTURE11:"get_TEXTURE11",get_TEXTURE10:"get_TEXTURE10",get_TEXTURE9:"get_TEXTURE9",get_TEXTURE8:"get_TEXTURE8",get_TEXTURE7:"get_TEXTURE7",get_TEXTURE6:"get_TEXTURE6",get_TEXTURE5:"get_TEXTURE5",get_TEXTURE4:"get_TEXTURE4",get_TEXTURE3:"get_TEXTURE3",get_TEXTURE2:"get_TEXTURE2",get_TEXTURE1:"get_TEXTURE1",get_TEXTURE0:"get_TEXTURE0",get_MAX_CUBE_MAP_TEXTURE_SIZE:"get_MAX_CUBE_MAP_TEXTURE_SIZE",get_TEXTURE_CUBE_MAP_NEGATIVE_Z:"get_TEXTURE_CUBE_MAP_NEGATIVE_Z",get_TEXTURE_CUBE_MAP_POSITIVE_Z:"get_TEXTURE_CUBE_MAP_POSITIVE_Z",get_TEXTURE_CUBE_MAP_NEGATIVE_Y:"get_TEXTURE_CUBE_MAP_NEGATIVE_Y",get_TEXTURE_CUBE_MAP_POSITIVE_Y:"get_TEXTURE_CUBE_MAP_POSITIVE_Y",get_TEXTURE_CUBE_MAP_NEGATIVE_X:"get_TEXTURE_CUBE_MAP_NEGATIVE_X",get_TEXTURE_CUBE_MAP_POSITIVE_X:"get_TEXTURE_CUBE_MAP_POSITIVE_X",get_TEXTURE_BINDING_CUBE_MAP:"get_TEXTURE_BINDING_CUBE_MAP",get_TEXTURE_CUBE_MAP:"get_TEXTURE_CUBE_MAP",get_TEXTURE:"get_TEXTURE",get_TEXTURE_2D:"get_TEXTURE_2D",get_TEXTURE_WRAP_T:"get_TEXTURE_WRAP_T",get_TEXTURE_WRAP_S:"get_TEXTURE_WRAP_S",get_TEXTURE_MIN_FILTER:"get_TEXTURE_MIN_FILTER",get_TEXTURE_MAG_FILTER:"get_TEXTURE_MAG_FILTER",get_LINEAR_MIPMAP_LINEAR:"get_LINEAR_MIPMAP_LINEAR",get_NEAREST_MIPMAP_LINEAR:"get_NEAREST_MIPMAP_LINEAR",get_LINEAR_MIPMAP_NEAREST:"get_LINEAR_MIPMAP_NEAREST",get_NEAREST_MIPMAP_NEAREST:"get_NEAREST_MIPMAP_NEAREST",get_LINEAR:"get_LINEAR",get_NEAREST:"get_NEAREST",get_VERSION:"get_VERSION",get_RENDERER:"get_RENDERER",get_VENDOR:"get_VENDOR",get_DECR_WRAP:"get_DECR_WRAP",get_INCR_WRAP:"get_INCR_WRAP",get_INVERT:"get_INVERT",get_DECR:"get_DECR",get_INCR:"get_INCR",get_REPLACE:"get_REPLACE",get_KEEP:"get_KEEP",get_ALWAYS:"get_ALWAYS",get_GEQUAL:"get_GEQUAL",get_NOTEQUAL:"get_NOTEQUAL",get_GREATER:"get_GREATER",get_LEQUAL:"get_LEQUAL",get_EQUAL:"get_EQUAL",get_LESS:"get_LESS",get_NEVER:"get_NEVER",get_CURRENT_PROGRAM:"get_CURRENT_PROGRAM",get_SHADING_LANGUAGE_VERSION:"get_SHADING_LANGUAGE_VERSION",get_ACTIVE_ATTRIBUTES:"get_ACTIVE_ATTRIBUTES",get_ACTIVE_UNIFORMS:"get_ACTIVE_UNIFORMS",get_ATTACHED_SHADERS:"get_ATTACHED_SHADERS",get_VALIDATE_STATUS:"get_VALIDATE_STATUS",get_LINK_STATUS:"get_LINK_STATUS",get_DELETE_STATUS:"get_DELETE_STATUS",get_SHADER_TYPE:"get_SHADER_TYPE",get_MAX_FRAGMENT_UNIFORM_VECTORS:"get_MAX_FRAGMENT_UNIFORM_VECTORS",get_MAX_TEXTURE_IMAGE_UNITS:"get_MAX_TEXTURE_IMAGE_UNITS",get_MAX_VERTEX_TEXTURE_IMAGE_UNITS:"get_MAX_VERTEX_TEXTURE_IMAGE_UNITS",get_MAX_COMBINED_TEXTURE_IMAGE_UNITS:"get_MAX_COMBINED_TEXTURE_IMAGE_UNITS",get_MAX_VARYING_VECTORS:"get_MAX_VARYING_VECTORS",get_MAX_VERTEX_UNIFORM_VECTORS:"get_MAX_VERTEX_UNIFORM_VECTORS",get_MAX_VERTEX_ATTRIBS:"get_MAX_VERTEX_ATTRIBS",get_VERTEX_SHADER:"get_VERTEX_SHADER",get_FRAGMENT_SHADER:"get_FRAGMENT_SHADER",get_UNSIGNED_SHORT_5_6_5:"get_UNSIGNED_SHORT_5_6_5",get_UNSIGNED_SHORT_5_5_5_1:"get_UNSIGNED_SHORT_5_5_5_1",get_UNSIGNED_SHORT_4_4_4_4:"get_UNSIGNED_SHORT_4_4_4_4",get_LUMINANCE_ALPHA:"get_LUMINANCE_ALPHA",get_LUMINANCE:"get_LUMINANCE",get_RGBA:"get_RGBA",get_RGB:"get_RGB",get_ALPHA:"get_ALPHA",get_DEPTH_COMPONENT:"get_DEPTH_COMPONENT",get_FLOAT:"get_FLOAT",get_UNSIGNED_INT:"get_UNSIGNED_INT",get_INT:"get_INT",get_UNSIGNED_SHORT:"get_UNSIGNED_SHORT",get_SHORT:"get_SHORT",get_UNSIGNED_BYTE:"get_UNSIGNED_BYTE",get_BYTE:"get_BYTE",get_GENERATE_MIPMAP_HINT:"get_GENERATE_MIPMAP_HINT",get_NICEST:"get_NICEST",get_FASTEST:"get_FASTEST",get_DONT_CARE:"get_DONT_CARE",get_COMPRESSED_TEXTURE_FORMATS:"get_COMPRESSED_TEXTURE_FORMATS",get_SAMPLE_COVERAGE_INVERT:"get_SAMPLE_COVERAGE_INVERT",get_SAMPLE_COVERAGE_VALUE:"get_SAMPLE_COVERAGE_VALUE",get_SAMPLES:"get_SAMPLES",get_SAMPLE_BUFFERS:"get_SAMPLE_BUFFERS",get_TEXTURE_BINDING_2D:"get_TEXTURE_BINDING_2D",get_POLYGON_OFFSET_FACTOR:"get_POLYGON_OFFSET_FACTOR",get_POLYGON_OFFSET_UNITS:"get_POLYGON_OFFSET_UNITS",get_STENCIL_BITS:"get_STENCIL_BITS",get_DEPTH_BITS:"get_DEPTH_BITS",get_ALPHA_BITS:"get_ALPHA_BITS",get_BLUE_BITS:"get_BLUE_BITS",get_GREEN_BITS:"get_GREEN_BITS",get_RED_BITS:"get_RED_BITS",get_SUBPIXEL_BITS:"get_SUBPIXEL_BITS",get_MAX_VIEWPORT_DIMS:"get_MAX_VIEWPORT_DIMS",get_MAX_TEXTURE_SIZE:"get_MAX_TEXTURE_SIZE",get_PACK_ALIGNMENT:"get_PACK_ALIGNMENT",get_UNPACK_ALIGNMENT:"get_UNPACK_ALIGNMENT",get_COLOR_WRITEMASK:"get_COLOR_WRITEMASK",get_COLOR_CLEAR_VALUE:"get_COLOR_CLEAR_VALUE",get_SCISSOR_BOX:"get_SCISSOR_BOX",get_VIEWPORT:"get_VIEWPORT",get_STENCIL_BACK_WRITEMASK:"get_STENCIL_BACK_WRITEMASK",get_STENCIL_BACK_VALUE_MASK:"get_STENCIL_BACK_VALUE_MASK",get_STENCIL_BACK_REF:"get_STENCIL_BACK_REF",get_STENCIL_BACK_PASS_DEPTH_PASS:"get_STENCIL_BACK_PASS_DEPTH_PASS",get_STENCIL_BACK_PASS_DEPTH_FAIL:"get_STENCIL_BACK_PASS_DEPTH_FAIL",get_STENCIL_BACK_FAIL:"get_STENCIL_BACK_FAIL",get_STENCIL_BACK_FUNC:"get_STENCIL_BACK_FUNC",get_STENCIL_WRITEMASK:"get_STENCIL_WRITEMASK",get_STENCIL_VALUE_MASK:"get_STENCIL_VALUE_MASK",get_STENCIL_REF:"get_STENCIL_REF",get_STENCIL_PASS_DEPTH_PASS:"get_STENCIL_PASS_DEPTH_PASS",get_STENCIL_PASS_DEPTH_FAIL:"get_STENCIL_PASS_DEPTH_FAIL",get_STENCIL_FAIL:"get_STENCIL_FAIL",get_STENCIL_FUNC:"get_STENCIL_FUNC",get_STENCIL_CLEAR_VALUE:"get_STENCIL_CLEAR_VALUE",get_DEPTH_FUNC:"get_DEPTH_FUNC",get_DEPTH_CLEAR_VALUE:"get_DEPTH_CLEAR_VALUE",get_DEPTH_WRITEMASK:"get_DEPTH_WRITEMASK",get_DEPTH_RANGE:"get_DEPTH_RANGE",get_FRONT_FACE:"get_FRONT_FACE",get_CULL_FACE_MODE:"get_CULL_FACE_MODE",get_ALIASED_LINE_WIDTH_RANGE:"get_ALIASED_LINE_WIDTH_RANGE",get_ALIASED_POINT_SIZE_RANGE:"get_ALIASED_POINT_SIZE_RANGE",get_LINE_WIDTH:"get_LINE_WIDTH",get_CCW:"get_CCW",get_CW:"get_CW",get_OUT_OF_MEMORY:"get_OUT_OF_MEMORY",get_INVALID_OPERATION:"get_INVALID_OPERATION",get_INVALID_VALUE:"get_INVALID_VALUE",get_INVALID_ENUM:"get_INVALID_ENUM",get_NO_ERROR:"get_NO_ERROR",get_SAMPLE_COVERAGE:"get_SAMPLE_COVERAGE",get_SAMPLE_ALPHA_TO_COVERAGE:"get_SAMPLE_ALPHA_TO_COVERAGE",get_POLYGON_OFFSET_FILL:"get_POLYGON_OFFSET_FILL",get_SCISSOR_TEST:"get_SCISSOR_TEST",get_DEPTH_TEST:"get_DEPTH_TEST",get_STENCIL_TEST:"get_STENCIL_TEST",get_DITHER:"get_DITHER",get_BLEND:"get_BLEND",get_CULL_FACE:"get_CULL_FACE",get_FRONT_AND_BACK:"get_FRONT_AND_BACK",get_BACK:"get_BACK",get_FRONT:"get_FRONT",get_CURRENT_VERTEX_ATTRIB:"get_CURRENT_VERTEX_ATTRIB",get_BUFFER_USAGE:"get_BUFFER_USAGE",get_BUFFER_SIZE:"get_BUFFER_SIZE",get_DYNAMIC_DRAW:"get_DYNAMIC_DRAW",get_STATIC_DRAW:"get_STATIC_DRAW",get_STREAM_DRAW:"get_STREAM_DRAW",get_ELEMENT_ARRAY_BUFFER_BINDING:"get_ELEMENT_ARRAY_BUFFER_BINDING",get_ARRAY_BUFFER_BINDING:"get_ARRAY_BUFFER_BINDING",get_ELEMENT_ARRAY_BUFFER:"get_ELEMENT_ARRAY_BUFFER",get_ARRAY_BUFFER:"get_ARRAY_BUFFER",get_BLEND_COLOR:"get_BLEND_COLOR",get_ONE_MINUS_CONSTANT_ALPHA:"get_ONE_MINUS_CONSTANT_ALPHA",get_CONSTANT_ALPHA:"get_CONSTANT_ALPHA",get_ONE_MINUS_CONSTANT_COLOR:"get_ONE_MINUS_CONSTANT_COLOR",get_CONSTANT_COLOR:"get_CONSTANT_COLOR",get_BLEND_SRC_ALPHA:"get_BLEND_SRC_ALPHA",get_BLEND_DST_ALPHA:"get_BLEND_DST_ALPHA",get_BLEND_SRC_RGB:"get_BLEND_SRC_RGB",get_BLEND_DST_RGB:"get_BLEND_DST_RGB",get_FUNC_REVERSE_SUBTRACT:"get_FUNC_REVERSE_SUBTRACT",get_FUNC_SUBTRACT:"get_FUNC_SUBTRACT",get_BLEND_EQUATION_ALPHA:"get_BLEND_EQUATION_ALPHA",get_BLEND_EQUATION_RGB:"get_BLEND_EQUATION_RGB",get_BLEND_EQUATION:"get_BLEND_EQUATION",get_FUNC_ADD:"get_FUNC_ADD",get_SRC_ALPHA_SATURATE:"get_SRC_ALPHA_SATURATE",get_ONE_MINUS_DST_COLOR:"get_ONE_MINUS_DST_COLOR",get_DST_COLOR:"get_DST_COLOR",get_ONE_MINUS_DST_ALPHA:"get_ONE_MINUS_DST_ALPHA",get_DST_ALPHA:"get_DST_ALPHA",get_ONE_MINUS_SRC_ALPHA:"get_ONE_MINUS_SRC_ALPHA",get_SRC_ALPHA:"get_SRC_ALPHA",get_ONE_MINUS_SRC_COLOR:"get_ONE_MINUS_SRC_COLOR",get_SRC_COLOR:"get_SRC_COLOR",get_ONE:"get_ONE",get_ZERO:"get_ZERO",get_TRIANGLE_FAN:"get_TRIANGLE_FAN",get_TRIANGLE_STRIP:"get_TRIANGLE_STRIP",get_TRIANGLES:"get_TRIANGLES",get_LINE_STRIP:"get_LINE_STRIP",get_LINE_LOOP:"get_LINE_LOOP",get_LINES:"get_LINES",get_POINTS:"get_POINTS",get_COLOR_BUFFER_BIT:"get_COLOR_BUFFER_BIT",get_STENCIL_BUFFER_BIT:"get_STENCIL_BUFFER_BIT",get_DEPTH_BUFFER_BIT:"get_DEPTH_BUFFER_BIT"};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_BUFFER_BIT = function(this1) {
	return this1.DEPTH_BUFFER_BIT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BUFFER_BIT = function(this1) {
	return this1.STENCIL_BUFFER_BIT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_BUFFER_BIT = function(this1) {
	return this1.COLOR_BUFFER_BIT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_POINTS = function(this1) {
	return this1.POINTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINES = function(this1) {
	return this1.LINES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINE_LOOP = function(this1) {
	return this1.LINE_LOOP;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINE_STRIP = function(this1) {
	return this1.LINE_STRIP;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRIANGLES = function(this1) {
	return this1.TRIANGLES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRIANGLE_STRIP = function(this1) {
	return this1.TRIANGLE_STRIP;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRIANGLE_FAN = function(this1) {
	return this1.TRIANGLE_FAN;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ZERO = function(this1) {
	return this1.ZERO;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE = function(this1) {
	return this1.ONE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRC_COLOR = function(this1) {
	return this1.SRC_COLOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_SRC_COLOR = function(this1) {
	return this1.ONE_MINUS_SRC_COLOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRC_ALPHA = function(this1) {
	return this1.SRC_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_SRC_ALPHA = function(this1) {
	return this1.ONE_MINUS_SRC_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DST_ALPHA = function(this1) {
	return this1.DST_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_DST_ALPHA = function(this1) {
	return this1.ONE_MINUS_DST_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DST_COLOR = function(this1) {
	return this1.DST_COLOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_DST_COLOR = function(this1) {
	return this1.ONE_MINUS_DST_COLOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRC_ALPHA_SATURATE = function(this1) {
	return this1.SRC_ALPHA_SATURATE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FUNC_ADD = function(this1) {
	return this1.FUNC_ADD;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_EQUATION = function(this1) {
	return this1.BLEND_EQUATION;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_EQUATION_RGB = function(this1) {
	return this1.BLEND_EQUATION_RGB;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_EQUATION_ALPHA = function(this1) {
	return this1.BLEND_EQUATION_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FUNC_SUBTRACT = function(this1) {
	return this1.FUNC_SUBTRACT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FUNC_REVERSE_SUBTRACT = function(this1) {
	return this1.FUNC_REVERSE_SUBTRACT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_DST_RGB = function(this1) {
	return this1.BLEND_DST_RGB;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_SRC_RGB = function(this1) {
	return this1.BLEND_SRC_RGB;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_DST_ALPHA = function(this1) {
	return this1.BLEND_DST_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_SRC_ALPHA = function(this1) {
	return this1.BLEND_SRC_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CONSTANT_COLOR = function(this1) {
	return this1.CONSTANT_COLOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_CONSTANT_COLOR = function(this1) {
	return this1.ONE_MINUS_CONSTANT_COLOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CONSTANT_ALPHA = function(this1) {
	return this1.CONSTANT_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_CONSTANT_ALPHA = function(this1) {
	return this1.ONE_MINUS_CONSTANT_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_COLOR = function(this1) {
	return this1.BLEND_COLOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ARRAY_BUFFER = function(this1) {
	return this1.ARRAY_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ELEMENT_ARRAY_BUFFER = function(this1) {
	return this1.ELEMENT_ARRAY_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.ARRAY_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ELEMENT_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.ELEMENT_ARRAY_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STREAM_DRAW = function(this1) {
	return this1.STREAM_DRAW;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STATIC_DRAW = function(this1) {
	return this1.STATIC_DRAW;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DYNAMIC_DRAW = function(this1) {
	return this1.DYNAMIC_DRAW;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BUFFER_SIZE = function(this1) {
	return this1.BUFFER_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BUFFER_USAGE = function(this1) {
	return this1.BUFFER_USAGE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CURRENT_VERTEX_ATTRIB = function(this1) {
	return this1.CURRENT_VERTEX_ATTRIB;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRONT = function(this1) {
	return this1.FRONT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BACK = function(this1) {
	return this1.BACK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRONT_AND_BACK = function(this1) {
	return this1.FRONT_AND_BACK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CULL_FACE = function(this1) {
	return this1.CULL_FACE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND = function(this1) {
	return this1.BLEND;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DITHER = function(this1) {
	return this1.DITHER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_TEST = function(this1) {
	return this1.STENCIL_TEST;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_TEST = function(this1) {
	return this1.DEPTH_TEST;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SCISSOR_TEST = function(this1) {
	return this1.SCISSOR_TEST;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_POLYGON_OFFSET_FILL = function(this1) {
	return this1.POLYGON_OFFSET_FILL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLE_ALPHA_TO_COVERAGE = function(this1) {
	return this1.SAMPLE_ALPHA_TO_COVERAGE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLE_COVERAGE = function(this1) {
	return this1.SAMPLE_COVERAGE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NO_ERROR = function(this1) {
	return this1.NO_ERROR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVALID_ENUM = function(this1) {
	return this1.INVALID_ENUM;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVALID_VALUE = function(this1) {
	return this1.INVALID_VALUE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVALID_OPERATION = function(this1) {
	return this1.INVALID_OPERATION;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_OUT_OF_MEMORY = function(this1) {
	return this1.OUT_OF_MEMORY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CW = function(this1) {
	return this1.CW;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CCW = function(this1) {
	return this1.CCW;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINE_WIDTH = function(this1) {
	return this1.LINE_WIDTH;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALIASED_POINT_SIZE_RANGE = function(this1) {
	return this1.ALIASED_POINT_SIZE_RANGE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALIASED_LINE_WIDTH_RANGE = function(this1) {
	return this1.ALIASED_LINE_WIDTH_RANGE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CULL_FACE_MODE = function(this1) {
	return this1.CULL_FACE_MODE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRONT_FACE = function(this1) {
	return this1.FRONT_FACE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_RANGE = function(this1) {
	return this1.DEPTH_RANGE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_WRITEMASK = function(this1) {
	return this1.DEPTH_WRITEMASK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_CLEAR_VALUE = function(this1) {
	return this1.DEPTH_CLEAR_VALUE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_FUNC = function(this1) {
	return this1.DEPTH_FUNC;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_CLEAR_VALUE = function(this1) {
	return this1.STENCIL_CLEAR_VALUE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_FUNC = function(this1) {
	return this1.STENCIL_FUNC;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_FAIL = function(this1) {
	return this1.STENCIL_FAIL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_PASS_DEPTH_FAIL = function(this1) {
	return this1.STENCIL_PASS_DEPTH_FAIL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_PASS_DEPTH_PASS = function(this1) {
	return this1.STENCIL_PASS_DEPTH_PASS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_REF = function(this1) {
	return this1.STENCIL_REF;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_VALUE_MASK = function(this1) {
	return this1.STENCIL_VALUE_MASK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_WRITEMASK = function(this1) {
	return this1.STENCIL_WRITEMASK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_FUNC = function(this1) {
	return this1.STENCIL_BACK_FUNC;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_FAIL = function(this1) {
	return this1.STENCIL_BACK_FAIL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_PASS_DEPTH_FAIL = function(this1) {
	return this1.STENCIL_BACK_PASS_DEPTH_FAIL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_PASS_DEPTH_PASS = function(this1) {
	return this1.STENCIL_BACK_PASS_DEPTH_PASS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_REF = function(this1) {
	return this1.STENCIL_BACK_REF;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_VALUE_MASK = function(this1) {
	return this1.STENCIL_BACK_VALUE_MASK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_WRITEMASK = function(this1) {
	return this1.STENCIL_BACK_WRITEMASK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VIEWPORT = function(this1) {
	return this1.VIEWPORT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SCISSOR_BOX = function(this1) {
	return this1.SCISSOR_BOX;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_CLEAR_VALUE = function(this1) {
	return this1.COLOR_CLEAR_VALUE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_WRITEMASK = function(this1) {
	return this1.COLOR_WRITEMASK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_ALIGNMENT = function(this1) {
	return this1.UNPACK_ALIGNMENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PACK_ALIGNMENT = function(this1) {
	return this1.PACK_ALIGNMENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TEXTURE_SIZE = function(this1) {
	return this1.MAX_TEXTURE_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VIEWPORT_DIMS = function(this1) {
	return this1.MAX_VIEWPORT_DIMS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SUBPIXEL_BITS = function(this1) {
	return this1.SUBPIXEL_BITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RED_BITS = function(this1) {
	return this1.RED_BITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_GREEN_BITS = function(this1) {
	return this1.GREEN_BITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLUE_BITS = function(this1) {
	return this1.BLUE_BITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALPHA_BITS = function(this1) {
	return this1.ALPHA_BITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_BITS = function(this1) {
	return this1.DEPTH_BITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BITS = function(this1) {
	return this1.STENCIL_BITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_POLYGON_OFFSET_UNITS = function(this1) {
	return this1.POLYGON_OFFSET_UNITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_POLYGON_OFFSET_FACTOR = function(this1) {
	return this1.POLYGON_OFFSET_FACTOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_BINDING_2D = function(this1) {
	return this1.TEXTURE_BINDING_2D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLE_BUFFERS = function(this1) {
	return this1.SAMPLE_BUFFERS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLES = function(this1) {
	return this1.SAMPLES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLE_COVERAGE_VALUE = function(this1) {
	return this1.SAMPLE_COVERAGE_VALUE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLE_COVERAGE_INVERT = function(this1) {
	return this1.SAMPLE_COVERAGE_INVERT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COMPRESSED_TEXTURE_FORMATS = function(this1) {
	return this1.COMPRESSED_TEXTURE_FORMATS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DONT_CARE = function(this1) {
	return this1.DONT_CARE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FASTEST = function(this1) {
	return this1.FASTEST;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NICEST = function(this1) {
	return this1.NICEST;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_GENERATE_MIPMAP_HINT = function(this1) {
	return this1.GENERATE_MIPMAP_HINT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BYTE = function(this1) {
	return this1.BYTE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_BYTE = function(this1) {
	return this1.UNSIGNED_BYTE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SHORT = function(this1) {
	return this1.SHORT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_SHORT = function(this1) {
	return this1.UNSIGNED_SHORT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT = function(this1) {
	return this1.INT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT = function(this1) {
	return this1.UNSIGNED_INT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT = function(this1) {
	return this1.FLOAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_COMPONENT = function(this1) {
	return this1.DEPTH_COMPONENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALPHA = function(this1) {
	return this1.ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB = function(this1) {
	return this1.RGB;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA = function(this1) {
	return this1.RGBA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LUMINANCE = function(this1) {
	return this1.LUMINANCE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LUMINANCE_ALPHA = function(this1) {
	return this1.LUMINANCE_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_SHORT_4_4_4_4 = function(this1) {
	return this1.UNSIGNED_SHORT_4_4_4_4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_SHORT_5_5_5_1 = function(this1) {
	return this1.UNSIGNED_SHORT_5_5_5_1;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_SHORT_5_6_5 = function(this1) {
	return this1.UNSIGNED_SHORT_5_6_5;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAGMENT_SHADER = function(this1) {
	return this1.FRAGMENT_SHADER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_SHADER = function(this1) {
	return this1.VERTEX_SHADER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_ATTRIBS = function(this1) {
	return this1.MAX_VERTEX_ATTRIBS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_UNIFORM_VECTORS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_VECTORS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VARYING_VECTORS = function(this1) {
	return this1.MAX_VARYING_VECTORS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_COMBINED_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_COMBINED_TEXTURE_IMAGE_UNITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_VERTEX_TEXTURE_IMAGE_UNITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_TEXTURE_IMAGE_UNITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_VECTORS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_VECTORS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SHADER_TYPE = function(this1) {
	return this1.SHADER_TYPE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DELETE_STATUS = function(this1) {
	return this1.DELETE_STATUS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINK_STATUS = function(this1) {
	return this1.LINK_STATUS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VALIDATE_STATUS = function(this1) {
	return this1.VALIDATE_STATUS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ATTACHED_SHADERS = function(this1) {
	return this1.ATTACHED_SHADERS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ACTIVE_UNIFORMS = function(this1) {
	return this1.ACTIVE_UNIFORMS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ACTIVE_ATTRIBUTES = function(this1) {
	return this1.ACTIVE_ATTRIBUTES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SHADING_LANGUAGE_VERSION = function(this1) {
	return this1.SHADING_LANGUAGE_VERSION;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CURRENT_PROGRAM = function(this1) {
	return this1.CURRENT_PROGRAM;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NEVER = function(this1) {
	return this1.NEVER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LESS = function(this1) {
	return this1.LESS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_EQUAL = function(this1) {
	return this1.EQUAL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LEQUAL = function(this1) {
	return this1.LEQUAL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_GREATER = function(this1) {
	return this1.GREATER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NOTEQUAL = function(this1) {
	return this1.NOTEQUAL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_GEQUAL = function(this1) {
	return this1.GEQUAL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALWAYS = function(this1) {
	return this1.ALWAYS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_KEEP = function(this1) {
	return this1.KEEP;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_REPLACE = function(this1) {
	return this1.REPLACE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INCR = function(this1) {
	return this1.INCR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DECR = function(this1) {
	return this1.DECR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVERT = function(this1) {
	return this1.INVERT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INCR_WRAP = function(this1) {
	return this1.INCR_WRAP;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DECR_WRAP = function(this1) {
	return this1.DECR_WRAP;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VENDOR = function(this1) {
	return this1.VENDOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERER = function(this1) {
	return this1.RENDERER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERSION = function(this1) {
	return this1.VERSION;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NEAREST = function(this1) {
	return this1.NEAREST;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINEAR = function(this1) {
	return this1.LINEAR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NEAREST_MIPMAP_NEAREST = function(this1) {
	return this1.NEAREST_MIPMAP_NEAREST;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINEAR_MIPMAP_NEAREST = function(this1) {
	return this1.LINEAR_MIPMAP_NEAREST;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NEAREST_MIPMAP_LINEAR = function(this1) {
	return this1.NEAREST_MIPMAP_LINEAR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINEAR_MIPMAP_LINEAR = function(this1) {
	return this1.LINEAR_MIPMAP_LINEAR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_MAG_FILTER = function(this1) {
	return this1.TEXTURE_MAG_FILTER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_MIN_FILTER = function(this1) {
	return this1.TEXTURE_MIN_FILTER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_WRAP_S = function(this1) {
	return this1.TEXTURE_WRAP_S;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_WRAP_T = function(this1) {
	return this1.TEXTURE_WRAP_T;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_2D = function(this1) {
	return this1.TEXTURE_2D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE = function(this1) {
	return this1.TEXTURE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP = function(this1) {
	return this1.TEXTURE_CUBE_MAP;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_BINDING_CUBE_MAP = function(this1) {
	return this1.TEXTURE_BINDING_CUBE_MAP;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_X = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_X;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_X = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_X;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_Y = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_Y;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_Y = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_Y;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_Z = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_Z;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_Z = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_Z;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_CUBE_MAP_TEXTURE_SIZE = function(this1) {
	return this1.MAX_CUBE_MAP_TEXTURE_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE0 = function(this1) {
	return this1.TEXTURE0;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE1 = function(this1) {
	return this1.TEXTURE1;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE2 = function(this1) {
	return this1.TEXTURE2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE3 = function(this1) {
	return this1.TEXTURE3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE4 = function(this1) {
	return this1.TEXTURE4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE5 = function(this1) {
	return this1.TEXTURE5;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE6 = function(this1) {
	return this1.TEXTURE6;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE7 = function(this1) {
	return this1.TEXTURE7;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE8 = function(this1) {
	return this1.TEXTURE8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE9 = function(this1) {
	return this1.TEXTURE9;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE10 = function(this1) {
	return this1.TEXTURE10;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE11 = function(this1) {
	return this1.TEXTURE11;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE12 = function(this1) {
	return this1.TEXTURE12;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE13 = function(this1) {
	return this1.TEXTURE13;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE14 = function(this1) {
	return this1.TEXTURE14;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE15 = function(this1) {
	return this1.TEXTURE15;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE16 = function(this1) {
	return this1.TEXTURE16;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE17 = function(this1) {
	return this1.TEXTURE17;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE18 = function(this1) {
	return this1.TEXTURE18;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE19 = function(this1) {
	return this1.TEXTURE19;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE20 = function(this1) {
	return this1.TEXTURE20;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE21 = function(this1) {
	return this1.TEXTURE21;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE22 = function(this1) {
	return this1.TEXTURE22;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE23 = function(this1) {
	return this1.TEXTURE23;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE24 = function(this1) {
	return this1.TEXTURE24;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE25 = function(this1) {
	return this1.TEXTURE25;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE26 = function(this1) {
	return this1.TEXTURE26;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE27 = function(this1) {
	return this1.TEXTURE27;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE28 = function(this1) {
	return this1.TEXTURE28;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE29 = function(this1) {
	return this1.TEXTURE29;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE30 = function(this1) {
	return this1.TEXTURE30;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE31 = function(this1) {
	return this1.TEXTURE31;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ACTIVE_TEXTURE = function(this1) {
	return this1.ACTIVE_TEXTURE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_REPEAT = function(this1) {
	return this1.REPEAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CLAMP_TO_EDGE = function(this1) {
	return this1.CLAMP_TO_EDGE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MIRRORED_REPEAT = function(this1) {
	return this1.MIRRORED_REPEAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_VEC2 = function(this1) {
	return this1.FLOAT_VEC2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_VEC3 = function(this1) {
	return this1.FLOAT_VEC3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_VEC4 = function(this1) {
	return this1.FLOAT_VEC4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_VEC2 = function(this1) {
	return this1.INT_VEC2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_VEC3 = function(this1) {
	return this1.INT_VEC3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_VEC4 = function(this1) {
	return this1.INT_VEC4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BOOL = function(this1) {
	return this1.BOOL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BOOL_VEC2 = function(this1) {
	return this1.BOOL_VEC2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BOOL_VEC3 = function(this1) {
	return this1.BOOL_VEC3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BOOL_VEC4 = function(this1) {
	return this1.BOOL_VEC4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT2 = function(this1) {
	return this1.FLOAT_MAT2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT3 = function(this1) {
	return this1.FLOAT_MAT3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT4 = function(this1) {
	return this1.FLOAT_MAT4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_2D = function(this1) {
	return this1.SAMPLER_2D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_CUBE = function(this1) {
	return this1.SAMPLER_CUBE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_ENABLED = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_ENABLED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_SIZE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_STRIDE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_STRIDE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_TYPE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_TYPE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_NORMALIZED = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_NORMALIZED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_POINTER = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_POINTER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COMPILE_STATUS = function(this1) {
	return this1.COMPILE_STATUS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LOW_FLOAT = function(this1) {
	return this1.LOW_FLOAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MEDIUM_FLOAT = function(this1) {
	return this1.MEDIUM_FLOAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_HIGH_FLOAT = function(this1) {
	return this1.HIGH_FLOAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LOW_INT = function(this1) {
	return this1.LOW_INT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MEDIUM_INT = function(this1) {
	return this1.MEDIUM_INT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_HIGH_INT = function(this1) {
	return this1.HIGH_INT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER = function(this1) {
	return this1.FRAMEBUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER = function(this1) {
	return this1.RENDERBUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA4 = function(this1) {
	return this1.RGBA4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB5_A1 = function(this1) {
	return this1.RGB5_A1;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB565 = function(this1) {
	return this1.RGB565;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_COMPONENT16 = function(this1) {
	return this1.DEPTH_COMPONENT16;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_INDEX = function(this1) {
	return this1.STENCIL_INDEX;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_INDEX8 = function(this1) {
	return this1.STENCIL_INDEX8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_STENCIL = function(this1) {
	return this1.DEPTH_STENCIL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_WIDTH = function(this1) {
	return this1.RENDERBUFFER_WIDTH;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_HEIGHT = function(this1) {
	return this1.RENDERBUFFER_HEIGHT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_INTERNAL_FORMAT = function(this1) {
	return this1.RENDERBUFFER_INTERNAL_FORMAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_RED_SIZE = function(this1) {
	return this1.RENDERBUFFER_RED_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_GREEN_SIZE = function(this1) {
	return this1.RENDERBUFFER_GREEN_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_BLUE_SIZE = function(this1) {
	return this1.RENDERBUFFER_BLUE_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_ALPHA_SIZE = function(this1) {
	return this1.RENDERBUFFER_ALPHA_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_DEPTH_SIZE = function(this1) {
	return this1.RENDERBUFFER_DEPTH_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_STENCIL_SIZE = function(this1) {
	return this1.RENDERBUFFER_STENCIL_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT0 = function(this1) {
	return this1.COLOR_ATTACHMENT0;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_ATTACHMENT = function(this1) {
	return this1.DEPTH_ATTACHMENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_ATTACHMENT = function(this1) {
	return this1.STENCIL_ATTACHMENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_STENCIL_ATTACHMENT = function(this1) {
	return this1.DEPTH_STENCIL_ATTACHMENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NONE = function(this1) {
	return this1.NONE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_COMPLETE = function(this1) {
	return this1.FRAMEBUFFER_COMPLETE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_UNSUPPORTED = function(this1) {
	return this1.FRAMEBUFFER_UNSUPPORTED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_BINDING = function(this1) {
	return this1.FRAMEBUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_BINDING = function(this1) {
	return this1.RENDERBUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_RENDERBUFFER_SIZE = function(this1) {
	return this1.MAX_RENDERBUFFER_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVALID_FRAMEBUFFER_OPERATION = function(this1) {
	return this1.INVALID_FRAMEBUFFER_OPERATION;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_FLIP_Y_WEBGL = function(this1) {
	return this1.UNPACK_FLIP_Y_WEBGL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_PREMULTIPLY_ALPHA_WEBGL = function(this1) {
	return this1.UNPACK_PREMULTIPLY_ALPHA_WEBGL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CONTEXT_LOST_WEBGL = function(this1) {
	return this1.CONTEXT_LOST_WEBGL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_COLORSPACE_CONVERSION_WEBGL = function(this1) {
	return this1.UNPACK_COLORSPACE_CONVERSION_WEBGL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BROWSER_DEFAULT_WEBGL = function(this1) {
	return this1.BROWSER_DEFAULT_WEBGL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_type = function(this1) {
	return this1.type;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_version = function(this1) {
	return this1.version;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_READ_BUFFER = function(this1) {
	return this1.READ_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_ROW_LENGTH = function(this1) {
	return this1.UNPACK_ROW_LENGTH;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_SKIP_ROWS = function(this1) {
	return this1.UNPACK_SKIP_ROWS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_SKIP_PIXELS = function(this1) {
	return this1.UNPACK_SKIP_PIXELS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PACK_ROW_LENGTH = function(this1) {
	return this1.PACK_ROW_LENGTH;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PACK_SKIP_ROWS = function(this1) {
	return this1.PACK_SKIP_ROWS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PACK_SKIP_PIXELS = function(this1) {
	return this1.PACK_SKIP_PIXELS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_BINDING_3D = function(this1) {
	return this1.TEXTURE_BINDING_3D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_SKIP_IMAGES = function(this1) {
	return this1.UNPACK_SKIP_IMAGES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_IMAGE_HEIGHT = function(this1) {
	return this1.UNPACK_IMAGE_HEIGHT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_3D_TEXTURE_SIZE = function(this1) {
	return this1.MAX_3D_TEXTURE_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_ELEMENTS_VERTICES = function(this1) {
	return this1.MAX_ELEMENTS_VERTICES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_ELEMENTS_INDICES = function(this1) {
	return this1.MAX_ELEMENTS_INDICES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TEXTURE_LOD_BIAS = function(this1) {
	return this1.MAX_TEXTURE_LOD_BIAS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_ARRAY_TEXTURE_LAYERS = function(this1) {
	return this1.MAX_ARRAY_TEXTURE_LAYERS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MIN_PROGRAM_TEXEL_OFFSET = function(this1) {
	return this1.MIN_PROGRAM_TEXEL_OFFSET;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_PROGRAM_TEXEL_OFFSET = function(this1) {
	return this1.MAX_PROGRAM_TEXEL_OFFSET;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VARYING_COMPONENTS = function(this1) {
	return this1.MAX_VARYING_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAGMENT_SHADER_DERIVATIVE_HINT = function(this1) {
	return this1.FRAGMENT_SHADER_DERIVATIVE_HINT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RASTERIZER_DISCARD = function(this1) {
	return this1.RASTERIZER_DISCARD;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ARRAY_BINDING = function(this1) {
	return this1.VERTEX_ARRAY_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_OUTPUT_COMPONENTS = function(this1) {
	return this1.MAX_VERTEX_OUTPUT_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_FRAGMENT_INPUT_COMPONENTS = function(this1) {
	return this1.MAX_FRAGMENT_INPUT_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_SERVER_WAIT_TIMEOUT = function(this1) {
	return this1.MAX_SERVER_WAIT_TIMEOUT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_ELEMENT_INDEX = function(this1) {
	return this1.MAX_ELEMENT_INDEX;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RED = function(this1) {
	return this1.RED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB8 = function(this1) {
	return this1.RGB8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA8 = function(this1) {
	return this1.RGBA8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB10_A2 = function(this1) {
	return this1.RGB10_A2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_3D = function(this1) {
	return this1.TEXTURE_3D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_WRAP_R = function(this1) {
	return this1.TEXTURE_WRAP_R;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_MIN_LOD = function(this1) {
	return this1.TEXTURE_MIN_LOD;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_MAX_LOD = function(this1) {
	return this1.TEXTURE_MAX_LOD;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_BASE_LEVEL = function(this1) {
	return this1.TEXTURE_BASE_LEVEL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_MAX_LEVEL = function(this1) {
	return this1.TEXTURE_MAX_LEVEL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_COMPARE_MODE = function(this1) {
	return this1.TEXTURE_COMPARE_MODE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_COMPARE_FUNC = function(this1) {
	return this1.TEXTURE_COMPARE_FUNC;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRGB = function(this1) {
	return this1.SRGB;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRGB8 = function(this1) {
	return this1.SRGB8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRGB8_ALPHA8 = function(this1) {
	return this1.SRGB8_ALPHA8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COMPARE_REF_TO_TEXTURE = function(this1) {
	return this1.COMPARE_REF_TO_TEXTURE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA32F = function(this1) {
	return this1.RGBA32F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB32F = function(this1) {
	return this1.RGB32F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA16F = function(this1) {
	return this1.RGBA16F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB16F = function(this1) {
	return this1.RGB16F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_2D_ARRAY = function(this1) {
	return this1.TEXTURE_2D_ARRAY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_BINDING_2D_ARRAY = function(this1) {
	return this1.TEXTURE_BINDING_2D_ARRAY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R11F_G11F_B10F = function(this1) {
	return this1.R11F_G11F_B10F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB9_E5 = function(this1) {
	return this1.RGB9_E5;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA32UI = function(this1) {
	return this1.RGBA32UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB32UI = function(this1) {
	return this1.RGB32UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA16UI = function(this1) {
	return this1.RGBA16UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB16UI = function(this1) {
	return this1.RGB16UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA8UI = function(this1) {
	return this1.RGBA8UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB8UI = function(this1) {
	return this1.RGB8UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA32I = function(this1) {
	return this1.RGBA32I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB32I = function(this1) {
	return this1.RGB32I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA16I = function(this1) {
	return this1.RGBA16I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB16I = function(this1) {
	return this1.RGB16I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA8I = function(this1) {
	return this1.RGBA8I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB8I = function(this1) {
	return this1.RGB8I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RED_INTEGER = function(this1) {
	return this1.RED_INTEGER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB_INTEGER = function(this1) {
	return this1.RGB_INTEGER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA_INTEGER = function(this1) {
	return this1.RGBA_INTEGER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R8 = function(this1) {
	return this1.R8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG8 = function(this1) {
	return this1.RG8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R16F = function(this1) {
	return this1.R16F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R32F = function(this1) {
	return this1.R32F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG16F = function(this1) {
	return this1.RG16F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG32F = function(this1) {
	return this1.RG32F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R8I = function(this1) {
	return this1.R8I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R8UI = function(this1) {
	return this1.R8UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R16I = function(this1) {
	return this1.R16I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R16UI = function(this1) {
	return this1.R16UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R32I = function(this1) {
	return this1.R32I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R32UI = function(this1) {
	return this1.R32UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG8I = function(this1) {
	return this1.RG8I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG8UI = function(this1) {
	return this1.RG8UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG16I = function(this1) {
	return this1.RG16I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG16UI = function(this1) {
	return this1.RG16UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG32I = function(this1) {
	return this1.RG32I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG32UI = function(this1) {
	return this1.RG32UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R8_SNORM = function(this1) {
	return this1.R8_SNORM;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG8_SNORM = function(this1) {
	return this1.RG8_SNORM;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB8_SNORM = function(this1) {
	return this1.RGB8_SNORM;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA8_SNORM = function(this1) {
	return this1.RGBA8_SNORM;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB10_A2UI = function(this1) {
	return this1.RGB10_A2UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_IMMUTABLE_FORMAT = function(this1) {
	return this1.TEXTURE_IMMUTABLE_FORMAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_IMMUTABLE_LEVELS = function(this1) {
	return this1.TEXTURE_IMMUTABLE_LEVELS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_2_10_10_10_REV = function(this1) {
	return this1.UNSIGNED_INT_2_10_10_10_REV;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_10F_11F_11F_REV = function(this1) {
	return this1.UNSIGNED_INT_10F_11F_11F_REV;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_5_9_9_9_REV = function(this1) {
	return this1.UNSIGNED_INT_5_9_9_9_REV;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_32_UNSIGNED_INT_24_8_REV = function(this1) {
	return this1.FLOAT_32_UNSIGNED_INT_24_8_REV;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_24_8 = function(this1) {
	return this1.UNSIGNED_INT_24_8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_HALF_FLOAT = function(this1) {
	return this1.HALF_FLOAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG = function(this1) {
	return this1.RG;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG_INTEGER = function(this1) {
	return this1.RG_INTEGER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_2_10_10_10_REV = function(this1) {
	return this1.INT_2_10_10_10_REV;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CURRENT_QUERY = function(this1) {
	return this1.CURRENT_QUERY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_QUERY_RESULT = function(this1) {
	return this1.QUERY_RESULT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_QUERY_RESULT_AVAILABLE = function(this1) {
	return this1.QUERY_RESULT_AVAILABLE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ANY_SAMPLES_PASSED = function(this1) {
	return this1.ANY_SAMPLES_PASSED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ANY_SAMPLES_PASSED_CONSERVATIVE = function(this1) {
	return this1.ANY_SAMPLES_PASSED_CONSERVATIVE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_DRAW_BUFFERS = function(this1) {
	return this1.MAX_DRAW_BUFFERS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER0 = function(this1) {
	return this1.DRAW_BUFFER0;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER1 = function(this1) {
	return this1.DRAW_BUFFER1;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER2 = function(this1) {
	return this1.DRAW_BUFFER2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER3 = function(this1) {
	return this1.DRAW_BUFFER3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER4 = function(this1) {
	return this1.DRAW_BUFFER4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER5 = function(this1) {
	return this1.DRAW_BUFFER5;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER6 = function(this1) {
	return this1.DRAW_BUFFER6;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER7 = function(this1) {
	return this1.DRAW_BUFFER7;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER8 = function(this1) {
	return this1.DRAW_BUFFER8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER9 = function(this1) {
	return this1.DRAW_BUFFER9;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER10 = function(this1) {
	return this1.DRAW_BUFFER10;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER11 = function(this1) {
	return this1.DRAW_BUFFER11;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER12 = function(this1) {
	return this1.DRAW_BUFFER12;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER13 = function(this1) {
	return this1.DRAW_BUFFER13;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER14 = function(this1) {
	return this1.DRAW_BUFFER14;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER15 = function(this1) {
	return this1.DRAW_BUFFER15;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_COLOR_ATTACHMENTS = function(this1) {
	return this1.MAX_COLOR_ATTACHMENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT1 = function(this1) {
	return this1.COLOR_ATTACHMENT1;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT2 = function(this1) {
	return this1.COLOR_ATTACHMENT2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT3 = function(this1) {
	return this1.COLOR_ATTACHMENT3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT4 = function(this1) {
	return this1.COLOR_ATTACHMENT4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT5 = function(this1) {
	return this1.COLOR_ATTACHMENT5;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT6 = function(this1) {
	return this1.COLOR_ATTACHMENT6;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT7 = function(this1) {
	return this1.COLOR_ATTACHMENT7;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT8 = function(this1) {
	return this1.COLOR_ATTACHMENT8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT9 = function(this1) {
	return this1.COLOR_ATTACHMENT9;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT10 = function(this1) {
	return this1.COLOR_ATTACHMENT10;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT11 = function(this1) {
	return this1.COLOR_ATTACHMENT11;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT12 = function(this1) {
	return this1.COLOR_ATTACHMENT12;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT13 = function(this1) {
	return this1.COLOR_ATTACHMENT13;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT14 = function(this1) {
	return this1.COLOR_ATTACHMENT14;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT15 = function(this1) {
	return this1.COLOR_ATTACHMENT15;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_3D = function(this1) {
	return this1.SAMPLER_3D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_2D_SHADOW = function(this1) {
	return this1.SAMPLER_2D_SHADOW;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_2D_ARRAY = function(this1) {
	return this1.SAMPLER_2D_ARRAY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_2D_ARRAY_SHADOW = function(this1) {
	return this1.SAMPLER_2D_ARRAY_SHADOW;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_CUBE_SHADOW = function(this1) {
	return this1.SAMPLER_CUBE_SHADOW;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_SAMPLER_2D = function(this1) {
	return this1.INT_SAMPLER_2D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_SAMPLER_3D = function(this1) {
	return this1.INT_SAMPLER_3D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_SAMPLER_CUBE = function(this1) {
	return this1.INT_SAMPLER_CUBE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_SAMPLER_2D_ARRAY = function(this1) {
	return this1.INT_SAMPLER_2D_ARRAY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_2D = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_2D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_3D = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_3D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_CUBE = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_CUBE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_2D_ARRAY = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_2D_ARRAY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_SAMPLES = function(this1) {
	return this1.MAX_SAMPLES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_BINDING = function(this1) {
	return this1.SAMPLER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PIXEL_PACK_BUFFER = function(this1) {
	return this1.PIXEL_PACK_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PIXEL_UNPACK_BUFFER = function(this1) {
	return this1.PIXEL_UNPACK_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PIXEL_PACK_BUFFER_BINDING = function(this1) {
	return this1.PIXEL_PACK_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PIXEL_UNPACK_BUFFER_BINDING = function(this1) {
	return this1.PIXEL_UNPACK_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COPY_READ_BUFFER = function(this1) {
	return this1.COPY_READ_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COPY_WRITE_BUFFER = function(this1) {
	return this1.COPY_WRITE_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COPY_READ_BUFFER_BINDING = function(this1) {
	return this1.COPY_READ_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COPY_WRITE_BUFFER_BINDING = function(this1) {
	return this1.COPY_WRITE_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT2x3 = function(this1) {
	return this1.FLOAT_MAT2x3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT2x4 = function(this1) {
	return this1.FLOAT_MAT2x4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT3x2 = function(this1) {
	return this1.FLOAT_MAT3x2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT3x4 = function(this1) {
	return this1.FLOAT_MAT3x4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT4x2 = function(this1) {
	return this1.FLOAT_MAT4x2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT4x3 = function(this1) {
	return this1.FLOAT_MAT4x3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_VEC2 = function(this1) {
	return this1.UNSIGNED_INT_VEC2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_VEC3 = function(this1) {
	return this1.UNSIGNED_INT_VEC3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_VEC4 = function(this1) {
	return this1.UNSIGNED_INT_VEC4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_NORMALIZED = function(this1) {
	return this1.UNSIGNED_NORMALIZED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SIGNED_NORMALIZED = function(this1) {
	return this1.SIGNED_NORMALIZED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_INTEGER = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_INTEGER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_DIVISOR = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_DIVISOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_MODE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_MODE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_VARYINGS = function(this1) {
	return this1.TRANSFORM_FEEDBACK_VARYINGS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_START = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_START;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_SIZE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = function(this1) {
	return this1.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INTERLEAVED_ATTRIBS = function(this1) {
	return this1.INTERLEAVED_ATTRIBS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SEPARATE_ATTRIBS = function(this1) {
	return this1.SEPARATE_ATTRIBS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_BINDING = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK = function(this1) {
	return this1.TRANSFORM_FEEDBACK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_PAUSED = function(this1) {
	return this1.TRANSFORM_FEEDBACK_PAUSED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_ACTIVE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_ACTIVE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BINDING = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_RED_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_RED_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_DEFAULT = function(this1) {
	return this1.FRAMEBUFFER_DEFAULT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH24_STENCIL8 = function(this1) {
	return this1.DEPTH24_STENCIL8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_FRAMEBUFFER_BINDING = function(this1) {
	return this1.DRAW_FRAMEBUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_READ_FRAMEBUFFER = function(this1) {
	return this1.READ_FRAMEBUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_FRAMEBUFFER = function(this1) {
	return this1.DRAW_FRAMEBUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_READ_FRAMEBUFFER_BINDING = function(this1) {
	return this1.READ_FRAMEBUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_SAMPLES = function(this1) {
	return this1.RENDERBUFFER_SAMPLES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BUFFER = function(this1) {
	return this1.UNIFORM_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BUFFER_BINDING = function(this1) {
	return this1.UNIFORM_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BUFFER_START = function(this1) {
	return this1.UNIFORM_BUFFER_START;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BUFFER_SIZE = function(this1) {
	return this1.UNIFORM_BUFFER_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_BLOCKS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_BLOCKS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_COMBINED_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_COMBINED_UNIFORM_BLOCKS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_UNIFORM_BUFFER_BINDINGS = function(this1) {
	return this1.MAX_UNIFORM_BUFFER_BINDINGS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_UNIFORM_BLOCK_SIZE = function(this1) {
	return this1.MAX_UNIFORM_BLOCK_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BUFFER_OFFSET_ALIGNMENT = function(this1) {
	return this1.UNIFORM_BUFFER_OFFSET_ALIGNMENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ACTIVE_UNIFORM_BLOCKS = function(this1) {
	return this1.ACTIVE_UNIFORM_BLOCKS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_TYPE = function(this1) {
	return this1.UNIFORM_TYPE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_SIZE = function(this1) {
	return this1.UNIFORM_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_INDEX = function(this1) {
	return this1.UNIFORM_BLOCK_INDEX;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_OFFSET = function(this1) {
	return this1.UNIFORM_OFFSET;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_ARRAY_STRIDE = function(this1) {
	return this1.UNIFORM_ARRAY_STRIDE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_MATRIX_STRIDE = function(this1) {
	return this1.UNIFORM_MATRIX_STRIDE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_IS_ROW_MAJOR = function(this1) {
	return this1.UNIFORM_IS_ROW_MAJOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_BINDING = function(this1) {
	return this1.UNIFORM_BLOCK_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_DATA_SIZE = function(this1) {
	return this1.UNIFORM_BLOCK_DATA_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_ACTIVE_UNIFORMS = function(this1) {
	return this1.UNIFORM_BLOCK_ACTIVE_UNIFORMS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = function(this1) {
	return this1.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = function(this1) {
	return this1.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = function(this1) {
	return this1.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_OBJECT_TYPE = function(this1) {
	return this1.OBJECT_TYPE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_CONDITION = function(this1) {
	return this1.SYNC_CONDITION;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_STATUS = function(this1) {
	return this1.SYNC_STATUS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_FLAGS = function(this1) {
	return this1.SYNC_FLAGS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_FENCE = function(this1) {
	return this1.SYNC_FENCE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_GPU_COMMANDS_COMPLETE = function(this1) {
	return this1.SYNC_GPU_COMMANDS_COMPLETE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNALED = function(this1) {
	return this1.UNSIGNALED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SIGNALED = function(this1) {
	return this1.SIGNALED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALREADY_SIGNALED = function(this1) {
	return this1.ALREADY_SIGNALED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TIMEOUT_EXPIRED = function(this1) {
	return this1.TIMEOUT_EXPIRED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CONDITION_SATISFIED = function(this1) {
	return this1.CONDITION_SATISFIED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_WAIT_FAILED = function(this1) {
	return this1.WAIT_FAILED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_FLUSH_COMMANDS_BIT = function(this1) {
	return this1.SYNC_FLUSH_COMMANDS_BIT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR = function(this1) {
	return this1.COLOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH = function(this1) {
	return this1.DEPTH;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL = function(this1) {
	return this1.STENCIL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MIN = function(this1) {
	return this1.MIN;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX = function(this1) {
	return this1.MAX;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_COMPONENT24 = function(this1) {
	return this1.DEPTH_COMPONENT24;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STREAM_READ = function(this1) {
	return this1.STREAM_READ;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STREAM_COPY = function(this1) {
	return this1.STREAM_COPY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STATIC_READ = function(this1) {
	return this1.STATIC_READ;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STATIC_COPY = function(this1) {
	return this1.STATIC_COPY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DYNAMIC_READ = function(this1) {
	return this1.DYNAMIC_READ;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DYNAMIC_COPY = function(this1) {
	return this1.DYNAMIC_COPY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_COMPONENT32F = function(this1) {
	return this1.DEPTH_COMPONENT32F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH32F_STENCIL8 = function(this1) {
	return this1.DEPTH32F_STENCIL8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVALID_INDEX = function(this1) {
	return this1.INVALID_INDEX;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TIMEOUT_IGNORED = function(this1) {
	return this1.TIMEOUT_IGNORED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL = function(this1) {
	return this1.MAX_CLIENT_WAIT_TIMEOUT_WEBGL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.activeTexture = function(this1,texture) {
	this1.__context.activeTexture(texture);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.attachShader = function(this1,program,shader) {
	this1.__context.attachShader(program,shader);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.beginQuery = function(this1,target,query) {
	this1.__context.beginQuery(target,query);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.beginTransformFeedback = function(this1,primitiveNode) {
	this1.__context.beginTransformFeedback(primitiveNode);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindAttribLocation = function(this1,program,index,name) {
	this1.__context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindBuffer = function(this1,target,buffer) {
	this1.__context.bindBuffer(target,buffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindBufferBase = function(this1,target,index,buffer) {
	this1.__context.bindBufferBase(target,index,buffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindBufferRange = function(this1,target,index,buffer,offset,size) {
	this1.__context.bindBufferRange(target,index,buffer,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(size));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindFramebuffer = function(this1,target,framebuffer) {
	this1.__context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindRenderbuffer = function(this1,target,renderbuffer) {
	this1.__context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindSampler = function(this1,unit,sampler) {
	this1.__context.bindSampler(unit,sampler);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindTexture = function(this1,target,texture) {
	this1.__context.bindTexture(target,texture);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindTransformFeedback = function(this1,target,transformFeedback) {
	this1.__context.bindTransformFeedback(target,transformFeedback);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindVertexArray = function(this1,vertexArray) {
	this1.__context.bindVertexArray(vertexArray);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blendColor = function(this1,red,green,blue,alpha) {
	this1.__context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blendEquation = function(this1,mode) {
	this1.__context.blendEquation(mode);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blendEquationSeparate = function(this1,modeRGB,modeAlpha) {
	this1.__context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blendFunc = function(this1,sfactor,dfactor) {
	this1.__context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blendFuncSeparate = function(this1,srcRGB,dstRGB,srcAlpha,dstAlpha) {
	this1.__context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blitFramebuffer = function(this1,srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	this1.__context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bufferData = function(this1,target,srcData,usage,srcOffset,length) {
	this1.bufferDataWEBGL(target,srcData,usage,srcOffset,length);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bufferSubData = function(this1,target,offset,srcData,srcOffset,length) {
	this1.bufferSubDataWEBGL(target,offset,srcData,srcOffset,length);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.checkFramebufferStatus = function(this1,target) {
	return this1.__context.checkFramebufferStatus(target);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clear = function(this1,mask) {
	this1.__context.clear(mask);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearBufferfi = function(this1,buffer,drawbuffer,depth,stencil) {
	this1.__context.clearBufferfi(buffer,drawbuffer,depth,stencil);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearBufferfv = function(this1,buffer,drawbuffer,values,srcOffset) {
	this1.__context.clearBufferfv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearBufferiv = function(this1,buffer,drawbuffer,values,srcOffset) {
	this1.__context.clearBufferiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearBufferuiv = function(this1,buffer,drawbuffer,values,srcOffset) {
	this1.__context.clearBufferuiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearColor = function(this1,red,green,blue,alpha) {
	this1.__context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearDepth = function(this1,depth) {
	this1.__context.clearDepth(depth);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearStencil = function(this1,s) {
	this1.__context.clearStencil(s);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clientWaitSync = function(this1,sync,flags,timeout) {
	return this1.__context.clientWaitSync(sync,flags,timeout);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.colorMask = function(this1,red,green,blue,alpha) {
	this1.__context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.compileShader = function(this1,shader) {
	this1.__context.compileShader(shader);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	this1.compressedTexImage2DWEBGL(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.compressedTexImage3D = function(this1,target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride) {
	this1.__context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	this1.compressedTexSubImage2DWEBGL(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.compressedTexSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride) {
	this1.__context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.copyBufferSubData = function(this1,readTarget,writeTarget,readOffset,writeOffset,size) {
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.copyTexImage2D = function(this1,target,level,internalformat,x,y,width,height,border) {
	this1.__context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.copyTexSubImage2D = function(this1,target,level,xoffset,yoffset,x,y,width,height) {
	this1.__context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.copyTexSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,x,y,width,height) {
	this1.__context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createBuffer = function(this1) {
	return this1.__context.createBuffer();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createFramebuffer = function(this1) {
	return this1.__context.createFramebuffer();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createProgram = function(this1) {
	return this1.__context.createProgram();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createQuery = function(this1) {
	return this1.__context.createQuery();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createRenderbuffer = function(this1) {
	return this1.__context.createRenderbuffer();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createSampler = function(this1) {
	return this1.__context.createSampler();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createShader = function(this1,type) {
	return this1.__context.createShader(type);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createTexture = function(this1) {
	return this1.__context.createTexture();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createTransformFeedback = function(this1) {
	return this1.__context.createTransformFeedback();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createVertexArray = function(this1) {
	return this1.__context.createVertexArray();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.cullFace = function(this1,mode) {
	this1.__context.cullFace(mode);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteBuffer = function(this1,buffer) {
	this1.__context.deleteBuffer(buffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteFramebuffer = function(this1,framebuffer) {
	this1.__context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteProgram = function(this1,program) {
	this1.__context.deleteProgram(program);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteQuery = function(this1,query) {
	this1.__context.deleteQuery(query);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteRenderbuffer = function(this1,renderbuffer) {
	this1.__context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteSampler = function(this1,sampler) {
	this1.__context.deleteSampler(sampler);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteShader = function(this1,shader) {
	this1.__context.deleteShader(shader);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteSync = function(this1,sync) {
	this1.__context.deleteSync(sync);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteTexture = function(this1,texture) {
	this1.__context.deleteTexture(texture);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteTransformFeedback = function(this1,transformFeedback) {
	this1.__context.deleteTransformFeedback(transformFeedback);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteVertexArray = function(this1,vertexArray) {
	this1.__context.deleteVertexArray(vertexArray);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.depthFunc = function(this1,func) {
	this1.__context.depthFunc(func);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.depthMask = function(this1,flag) {
	this1.__context.depthMask(flag);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.depthRange = function(this1,zNear,zFar) {
	this1.__context.depthRange(zNear,zFar);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.detachShader = function(this1,program,shader) {
	this1.__context.detachShader(program,shader);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.disable = function(this1,cap) {
	this1.__context.disable(cap);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.disableVertexAttribArray = function(this1,index) {
	this1.__context.disableVertexAttribArray(index);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawArrays = function(this1,mode,first,count) {
	this1.__context.drawArrays(mode,first,count);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawArraysInstanced = function(this1,mode,first,count,instanceCount) {
	this1.__context.drawArraysInstanced(mode,first,count,instanceCount);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawBuffers = function(this1,buffers) {
	this1.__context.drawBuffers(buffers);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawElements = function(this1,mode,count,type,offset) {
	this1.__context.drawElements(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawElementsInstanced = function(this1,mode,count,type,offset,instanceCount) {
	this1.__context.drawElementsInstanced(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),instanceCount);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawRangeElements = function(this1,mode,start,end,count,type,offset) {
	this1.__context.drawRangeElements(mode,start,end,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.enable = function(this1,cap) {
	this1.__context.enable(cap);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.enableVertexAttribArray = function(this1,index) {
	this1.__context.enableVertexAttribArray(index);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.endQuery = function(this1,target) {
	this1.__context.endQuery(target);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.endTransformFeedback = function(this1) {
	this1.__context.endTransformFeedback();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.fenceSync = function(this1,condition,flags) {
	return this1.__context.fenceSync(condition,flags);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.finish = function(this1) {
	this1.__context.finish();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.flush = function(this1) {
	this1.__context.flush();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.framebufferRenderbuffer = function(this1,target,attachment,renderbuffertarget,renderbuffer) {
	this1.__context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.framebufferTexture2D = function(this1,target,attachment,textarget,texture,level) {
	this1.__context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.framebufferTextureLayer = function(this1,target,attachment,texture,level,layer) {
	this1.__context.framebufferTextureLayer(target,attachment,texture,level,layer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.frontFace = function(this1,mode) {
	this1.__context.frontFace(mode);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.generateMipmap = function(this1,target) {
	this1.__context.generateMipmap(target);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getActiveAttrib = function(this1,program,index) {
	return this1.__context.getActiveAttrib(program,index);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getActiveUniform = function(this1,program,index) {
	return this1.__context.getActiveUniform(program,index);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getActiveUniformBlockName = function(this1,program,uniformBlockIndex) {
	return this1.__context.getActiveUniformBlockName(program,uniformBlockIndex);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getActiveUniformBlockParameter = function(this1,program,uniformBlockIndex,pname) {
	return this1.__context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getActiveUniforms = function(this1,program,uniformIndices,pname) {
	return this1.__context.getActiveUniforms(program,uniformIndices,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getAttachedShaders = function(this1,program) {
	return this1.__context.getAttachedShaders(program);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getAttribLocation = function(this1,program,name) {
	return this1.__context.getAttribLocation(program,name);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getBufferParameter = function(this1,target,pname) {
	return this1.__context.getBufferParameter(target,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getBufferSubData = function(this1,target,srcByteOffset,dstData,srcOffset,length) {
	this1.getBufferSubDataWEBGL(target,srcByteOffset,dstData,srcOffset,length);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getContextAttributes = function(this1) {
	return this1.__context.getContextAttributes();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getError = function(this1) {
	return this1.__context.getError();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getExtension = function(this1,name) {
	return this1.__context.getExtension(name);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getFragDataLocation = function(this1,program,name) {
	return this1.__context.getFragDataLocation(program,name);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getFramebufferAttachmentParameter = function(this1,target,attachment,pname) {
	return this1.__context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getIndexedParameter = function(this1,target,index) {
	return this1.__context.getIndexedParameter(target,index);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getInternalformatParameter = function(this1,target,internalformat,pname) {
	return this1.__context.getInternalformatParameter(target,internalformat,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getParameter = function(this1,pname) {
	return this1.__context.getParameter(pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getProgramInfoLog = function(this1,program) {
	return this1.__context.getProgramInfoLog(program);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getProgramParameter = function(this1,program,pname) {
	return this1.__context.getProgramParameter(program,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getQuery = function(this1,target,pname) {
	return this1.__context.getQuery(target,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getQueryParameter = function(this1,query,pname) {
	return this1.__context.getQueryParameter(query,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getRenderbufferParameter = function(this1,target,pname) {
	return this1.__context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getSamplerParameter = function(this1,sampler,pname) {
	return this1.__context.getSamplerParameter(sampler,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getShaderInfoLog = function(this1,shader) {
	return this1.__context.getShaderInfoLog(shader);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getShaderParameter = function(this1,shader,pname) {
	return this1.__context.getShaderParameter(shader,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getShaderPrecisionFormat = function(this1,shadertype,precisiontype) {
	return this1.__context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getShaderSource = function(this1,shader) {
	return this1.__context.getShaderSource(shader);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getSupportedExtensions = function(this1) {
	return this1.__context.getSupportedExtensions();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getSyncParameter = function(this1,sync,pname) {
	return this1.__context.getSyncParameter(sync,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getTexParameter = function(this1,target,pname) {
	return this1.__context.getTexParameter(target,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getTransformFeedbackVarying = function(this1,program,index) {
	return this1.__context.getTransformFeedbackVarying(program,index);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getUniform = function(this1,program,location) {
	return this1.__context.getUniform(program,location);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getUniformBlockIndex = function(this1,program,uniformBlockName) {
	return this1.__context.getUniformBlockIndex(program,uniformBlockName);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getUniformIndices = function(this1,program,uniformNames) {
	return this1.__context.getUniformIndices(program,uniformNames);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getUniformLocation = function(this1,program,name) {
	return this1.__context.getUniformLocation(program,name);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getVertexAttrib = function(this1,index,pname) {
	return this1.__context.getVertexAttrib(index,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getVertexAttribOffset = function(this1,index,pname) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(this1.__context.getVertexAttribOffset(index,pname));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.hint = function(this1,target,mode) {
	this1.__context.hint(target,mode);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.invalidateFramebuffer = function(this1,target,attachments) {
	this1.__context.invalidateFramebuffer(target,attachments);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.invalidateSubFramebuffer = function(this1,target,attachments,x,y,width,height) {
	this1.__context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isBuffer = function(this1,buffer) {
	return this1.__context.isBuffer(buffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isContextLost = function(this1) {
	if(!this1.__contextLost) {
		return this1.__context.isContextLost();
	} else {
		return true;
	}
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isEnabled = function(this1,cap) {
	return this1.__context.isEnabled(cap);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isFramebuffer = function(this1,framebuffer) {
	return this1.__context.isFramebuffer(framebuffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isProgram = function(this1,program) {
	return this1.__context.isProgram(program);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isQuery = function(this1,query) {
	return this1.__context.isQuery(query);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isRenderbuffer = function(this1,renderbuffer) {
	return this1.__context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isSampler = function(this1,sampler) {
	return this1.__context.isSampler(sampler);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isShader = function(this1,shader) {
	return this1.__context.isShader(shader);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isTexture = function(this1,texture) {
	return this1.__context.isTexture(texture);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isTransformFeedback = function(this1,transformFeedback) {
	return this1.__context.isTransformFeedback(transformFeedback);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isVertexArray = function(this1,vertexArray) {
	return this1.__context.isVertexArray(vertexArray);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.lineWidth = function(this1,width) {
	this1.__context.lineWidth(width);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.linkProgram = function(this1,program) {
	this1.__context.linkProgram(program);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.pauseTransformFeedback = function(this1) {
	this1.__context.pauseTransformFeedback();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.pixelStorei = function(this1,pname,param) {
	this1.__context.pixelStorei(pname,param);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.polygonOffset = function(this1,factor,units) {
	this1.__context.polygonOffset(factor,units);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.readBuffer = function(this1,src) {
	this1.__context.readBuffer(src);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.readPixels = function(this1,x,y,width,height,format,type,pixels,dstOffset) {
	this1.readPixelsWEBGL(x,y,width,height,format,type,pixels,dstOffset);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.renderbufferStorage = function(this1,target,internalformat,width,height) {
	this1.__context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.renderbufferStorageMultisample = function(this1,target,samples,internalformat,width,height) {
	this1.__context.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.resumeTransformFeedback = function(this1) {
	this1.__context.resumeTransformFeedback();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.sampleCoverage = function(this1,value,invert) {
	this1.__context.sampleCoverage(value,invert);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.samplerParameterf = function(this1,sampler,pname,param) {
	this1.__context.samplerParameterf(sampler,pname,param);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.samplerParameteri = function(this1,sampler,pname,param) {
	this1.__context.samplerParameteri(sampler,pname,param);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.scissor = function(this1,x,y,width,height) {
	this1.__context.scissor(x,y,width,height);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.shaderSource = function(this1,shader,source) {
	this1.__context.shaderSource(shader,source);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilFunc = function(this1,func,ref,mask) {
	this1.__context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilFuncSeparate = function(this1,face,func,ref,mask) {
	this1.__context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilMask = function(this1,mask) {
	this1.__context.stencilMask(mask);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilMaskSeparate = function(this1,face,mask) {
	this1.__context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilOp = function(this1,fail,zfail,zpass) {
	this1.__context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilOpSeparate = function(this1,face,fail,zfail,zpass) {
	this1.__context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	this1.texImage2DWEBGL(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texImage3D = function(this1,target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset) {
	this1.__context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texStorage2D = function(this1,target,level,internalformat,width,height) {
	this1.__context.texStorage2D(target,level,internalformat,width,height);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texStorage3D = function(this1,target,level,internalformat,width,height,depth) {
	this1.__context.texStorage3D(target,level,internalformat,width,height,depth);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texParameterf = function(this1,target,pname,param) {
	this1.__context.texParameterf(target,pname,param);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texParameteri = function(this1,target,pname,param) {
	this1.__context.texParameteri(target,pname,param);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	this1.texSubImage2DWEBGL(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,srcData,srcOffset) {
	this1.__context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,srcData,srcOffset);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.transformFeedbackVaryings = function(this1,program,varyings,bufferMode) {
	this1.__context.transformFeedbackVaryings(program,varyings,bufferMode);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1f = function(this1,location,v0) {
	this1.__context.uniform1f(location,v0);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1fv = function(this1,location,v) {
	this1.uniform1fvWEBGL(location,v);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1i = function(this1,location,v0) {
	this1.__context.uniform1i(location,v0);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1iv = function(this1,location,v) {
	this1.uniform1ivWEBGL(location,v);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1ui = function(this1,location,v0) {
	this1.__context.uniform1ui(location,v0);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1uiv = function(this1,location,v) {
	this1.__context.uniform1uiv(location,v,null,null);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2f = function(this1,location,v0,v1) {
	this1.__context.uniform2f(location,v0,v1);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2fv = function(this1,location,v) {
	this1.uniform2fvWEBGL(location,v);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2i = function(this1,location,v0,v1) {
	this1.__context.uniform2i(location,v0,v1);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2iv = function(this1,location,v) {
	this1.uniform2fvWEBGL(location,v);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2ui = function(this1,location,v0,v1) {
	this1.__context.uniform2ui(location,v0,v1);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2uiv = function(this1,location,v) {
	this1.__context.uniform2uiv(location,v,null,null);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3f = function(this1,location,v0,v1,v2) {
	this1.__context.uniform3f(location,v0,v1,v2);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3fv = function(this1,location,v) {
	this1.uniform3fvWEBGL(location,v);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3i = function(this1,location,v0,v1,v2) {
	this1.__context.uniform3i(location,v0,v1,v2);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3iv = function(this1,location,v) {
	this1.uniform3ivWEBGL(location,v);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3ui = function(this1,location,v0,v1,v2) {
	this1.__context.uniform3ui(location,v0,v1,v2);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3uiv = function(this1,location,v) {
	this1.__context.uniform3uiv(location,v,null,null);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4f = function(this1,location,v0,v1,v2,v3) {
	this1.__context.uniform4f(location,v0,v1,v2,v3);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4fv = function(this1,location,v) {
	this1.uniform4fvWEBGL(location,v);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4i = function(this1,location,v0,v1,v2,v3) {
	this1.__context.uniform4i(location,v0,v1,v2,v3);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4iv = function(this1,location,v) {
	this1.uniform4ivWEBGL(location,v);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4ui = function(this1,location,v0,v1,v2,v3) {
	this1.__context.uniform4ui(location,v0,v1,v2,v3);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4uiv = function(this1,location,v) {
	this1.__context.uniform4uiv(location,v,null,null);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformBlockBinding = function(this1,program,uniformBlockIndex,uniformBlockBinding) {
	this1.__context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix2fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix2fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix2x3fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.__context.uniformMatrix2x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix2x4fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.__context.uniformMatrix2x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix3fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix3fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix3x2fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.__context.uniformMatrix3x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix3x4fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.__context.uniformMatrix3x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix4fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix4fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix4x2fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix4x2fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix4x3fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.__context.uniformMatrix4x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.useProgram = function(this1,program) {
	this1.__context.useProgram(program);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.validateProgram = function(this1,program) {
	this1.__context.validateProgram(program);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib1f = function(this1,indx,x) {
	this1.__context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib1fv = function(this1,indx,values) {
	var v = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values);
	this1.__context.vertexAttrib1fv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib2f = function(this1,indx,x,y) {
	this1.__context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib2fv = function(this1,indx,values) {
	var v = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values);
	this1.__context.vertexAttrib2fv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib3f = function(this1,indx,x,y,z) {
	this1.__context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib3fv = function(this1,indx,values) {
	var v = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values);
	this1.__context.vertexAttrib3fv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib4f = function(this1,indx,x,y,z,w) {
	this1.__context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib4fv = function(this1,indx,values) {
	var v = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values);
	this1.__context.vertexAttrib4fv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribDivisor = function(this1,index,divisor) {
	this1.__context.vertexAttribDivisor(index,divisor);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribI4i = function(this1,indx,x,y,z,w) {
	this1.__context.vertexAttribI4i(indx,x,y,z,w);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribI4iv = function(this1,indx,values) {
	var v = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values);
	this1.__context.vertexAttribI4iv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribI4ui = function(this1,indx,x,y,z,w) {
	this1.__context.vertexAttribI4ui(indx,x,y,z,w);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribI4uiv = function(this1,indx,values) {
	var v = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values);
	this1.__context.vertexAttribI4uiv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribPointer = function(this1,indx,size,type,normalized,stride,offset) {
	this1.__context.vertexAttribPointer(indx,size,type,normalized,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.viewport = function(this1,x,y,width,height) {
	this1.__context.viewport(x,y,width,height);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.waitSync = function(this1,sync,flags,timeout) {
	this1.__context.waitSync(sync,flags,timeout);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.fromGL = function(gl) {
	return lime_graphics_opengl_GL.context;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.fromGLES3Context = function(gl) {
	return gl;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.toWebGLContext = function(gl) {
	return gl;
};
var lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$ = {};
$hxClasses["lime.graphics.opengl._WebGLContext.WebGLContext_Impl_"] = lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$;
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.__name__ = ["lime","graphics","opengl","_WebGLContext","WebGLContext_Impl_"];
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.bufferData = function(this1,target,srcData,usage) {
	this1.bufferDataWEBGL(target,srcData,usage,null,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.bufferSubData = function(this1,target,offset,srcData) {
	this1.bufferSubDataWEBGL(target,offset,srcData,null,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData) {
	this1.compressedTexImage2DWEBGL(target,level,internalformat,width,height,border,srcData,null,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData) {
	this1.compressedTexSubImage2DWEBGL(target,level,xoffset,yoffset,width,height,format,srcData,null,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.readPixels = function(this1,x,y,width,height,format,type,pixels) {
	this1.readPixelsWEBGL(x,y,width,height,format,type,pixels,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData) {
	this1.texImage2DWEBGL(target,level,internalformat,width,height,border,format,type,srcData,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData) {
	this1.texSubImage2DWEBGL(target,level,xoffset,yoffset,width,height,format,type,srcData,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.uniformMatrix2fv = function(this1,location,transpose,v) {
	this1.uniformMatrix2fvWEBGL(location,transpose,v,null,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.uniformMatrix3fv = function(this1,location,transpose,v) {
	this1.uniformMatrix3fvWEBGL(location,transpose,v,null,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.uniformMatrix4fv = function(this1,location,transpose,v) {
	this1.uniformMatrix4fvWEBGL(location,transpose,v,null,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.fromGL = function(gl) {
	return lime_graphics_opengl_GL.context;
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.fromGLES2Context = function(gl) {
	return gl;
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.fromGLES3Context = function(gl) {
	return gl;
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else {
				this1 = null;
			}
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.msImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) {
			a = color >> 24 & 255;
		} else {
			a = 255;
		}
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) {
			a = color & 255;
		} else {
			a = 255;
		}
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	if(a < 255) {
		image.buffer.__srcContext.clearRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	if(a > 0) {
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel32(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
	buffer.__srcImageData = null;
	buffer.data = null;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) {
		return;
	}
	var copy = image.clone();
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(copy.get_src(),x,y);
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixels(image,rect,bytePointer,format,endian);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) {
		return;
	}
	if(image.type == lime_graphics_ImageType.CANVAS) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,clear);
	} else {
		lime_graphics_utils_ImageCanvasUtil.convertToData(image,clear);
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			offset = row + x * 4;
			switch(format) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(image.width == sourceImage.width && image.height == sourceImage.height && sourceRect.width == sourceImage.width && sourceRect.height == sourceImage.height && sourceRect.x == 0 && sourceRect.y == 0 && destPoint.x == 0 && destPoint.y == 0 && alphaImage == null && alphaPoint == null && mergeAlpha == false && image.get_format() == sourceImage.get_format()) {
		image.buffer.data.set(sourceImage.buffer.data);
	} else {
		var sourceData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		if(sourceData == null || destData == null) {
			return;
		}
		var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
		var destRect = new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height);
		var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,destRect);
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePosition;
		var destPosition;
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var sourcePixel;
		var destPixel;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourceBytesPerPixel = sourceImage.buffer.bitsPerPixel / 8 | 0;
		var destBytesPerPixel = image.buffer.bitsPerPixel / 8 | 0;
		var useAlphaImage = alphaImage != null && alphaImage.get_transparent();
		var blend = mergeAlpha || useAlphaImage && !image.get_transparent();
		if(!useAlphaImage) {
			if(blend) {
				var _g1 = 0;
				var _g = destView.height;
				while(_g1 < _g) {
					var y = _g1++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g3 = 0;
					var _g2 = destView.width;
					while(_g3 < _g2) {
						var x = _g3++;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(destPremultiplied) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						sourceAlpha = (sourcePixel & 255) / 255.0;
						destAlpha = (destPixel & 255) / 255.0;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if(blendAlpha == 0) {
							destPixel = 0;
						} else {
							var value = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
						}
						if(destPremultiplied) {
							if((destPixel & 255) == 0) {
								if(destPixel != 0) {
									destPixel = 0;
								}
							} else if((destPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
								destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destData[destPosition] = destPixel >>> 24 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 8 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						case 1:
							destData[destPosition] = destPixel & 255;
							destData[destPosition + 1] = destPixel >>> 24 & 255;
							destData[destPosition + 2] = destPixel >>> 16 & 255;
							destData[destPosition + 3] = destPixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = destPixel >>> 8 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 24 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			} else if(sourceFormat == destFormat && sourcePremultiplied == destPremultiplied && sourceBytesPerPixel == destBytesPerPixel) {
				var _g11 = 0;
				var _g4 = destView.height;
				while(_g11 < _g4) {
					var y1 = _g11++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y1;
					destPosition = destView.byteOffset + destView.stride * y1;
					destData.set(sourceData.subarray(sourcePosition,sourcePosition + destView.width * destBytesPerPixel),destPosition);
				}
			} else {
				var _g12 = 0;
				var _g5 = destView.height;
				while(_g12 < _g5) {
					var y2 = _g12++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y2;
					destPosition = destView.byteOffset + destView.stride * y2;
					var _g31 = 0;
					var _g21 = destView.width;
					while(_g31 < _g21) {
						var x1 = _g31++;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						if(destPremultiplied) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			}
		} else {
			if(alphaPoint == null) {
				alphaPoint = new lime_math_Vector2();
			}
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPosition;
			var alphaPixel;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,alphaImage.width,alphaImage.height));
			alphaView.offset(sourceView.x,sourceView.y);
			destView.clip(destPoint.x | 0,destPoint.y | 0,alphaView.width,alphaView.height);
			if(blend) {
				var _g13 = 0;
				var _g6 = destView.height;
				while(_g13 < _g6) {
					var y3 = _g13++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y3;
					destPosition = destView.byteOffset + destView.stride * y3;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y3;
					var _g32 = 0;
					var _g22 = destView.width;
					while(_g32 < _g22) {
						var x2 = _g32++;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(destPremultiplied) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(alphaFormat) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						sourceAlpha = (alphaPixel & 255) / 255.0 * ((sourcePixel & 255) / 255.0);
						if(sourceAlpha > 0) {
							destAlpha = (destPixel & 255) / 255.0;
							oneMinusSourceAlpha = 1 - sourceAlpha;
							blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
							var value4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value4 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value6 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
							var value7 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value7 & 255;
							if(destPremultiplied) {
								if((destPixel & 255) == 0) {
									if(destPixel != 0) {
										destPixel = 0;
									}
								} else if((destPixel & 255) != 255) {
									lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
									destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
								}
							}
							switch(destFormat) {
							case 0:
								destData[destPosition] = destPixel >>> 24 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 8 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 1:
								destData[destPosition] = destPixel & 255;
								destData[destPosition + 1] = destPixel >>> 24 & 255;
								destData[destPosition + 2] = destPixel >>> 16 & 255;
								destData[destPosition + 3] = destPixel >>> 8 & 255;
								break;
							case 2:
								destData[destPosition] = destPixel >>> 8 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 24 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							}
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			} else {
				var _g14 = 0;
				var _g7 = destView.height;
				while(_g14 < _g7) {
					var y4 = _g14++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y4;
					destPosition = destView.byteOffset + destView.stride * y4;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y4;
					var _g33 = 0;
					var _g23 = destView.width;
					while(_g33 < _g23) {
						var x3 = _g33++;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(alphaFormat) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						var value8 = Math.round((sourcePixel & 255) * ((alphaPixel & 255) / 255));
						sourcePixel = (sourcePixel >>> 24 & 255 & 255) << 24 | (sourcePixel >>> 16 & 255 & 255) << 16 | (sourcePixel >>> 8 & 255 & 255) << 8 | value8 & 255;
						if(destPremultiplied) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba1;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			var offset = row + x * 4;
			switch(format1) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	if(format == 1) {
		color = (color & 16777215) << 8 | color >> 24 & 255;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	switch(format1) {
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			hitColor = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
		hitColor = (hitColor >>> 24 & 255 & 255) << 24 | (hitColor >>> 16 & 255 & 255) << 16 | (hitColor >>> 8 & 255 & 255) << 8 | 255;
	}
	if(fillColor == hitColor) {
		return;
	}
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) {
				continue;
			}
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			switch(format1) {
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					readColor = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				switch(format1) {
				case 0:
					data[nextPointOffset] = fillColor >>> 24 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >>> 24 & 255;
					data[nextPointOffset + 2] = fillColor >>> 16 & 255;
					data[nextPointOffset + 3] = fillColor >>> 8 & 255;
					break;
				case 2:
					data[nextPointOffset] = fillColor >>> 8 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.gaussianBlur = function(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality,strength) {
	if(strength == null) {
		strength = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	var fromPreMult;
	if(image.buffer.premultiplied || sourceImage.buffer.premultiplied) {
		fromPreMult = function(col,alpha) {
			var col1 = col | 0;
			if(col1 < 0) {
				return 0;
			} else if(col1 > 255) {
				return 255;
			} else {
				return col1;
			}
		};
	} else {
		fromPreMult = function(col2,alpha1) {
			var col3 = col2 / alpha1 * 255 | 0;
			if(col3 < 0) {
				return 0;
			} else if(col3 > 255) {
				return 255;
			} else {
				return col3;
			}
		};
	}
	var boxesForGauss = function(sigma,n) {
		var wIdeal = Math.sqrt(12 * sigma * sigma / n + 1);
		var wl = Math.floor(wIdeal);
		if(wl % 2 == 0) {
			--wl;
		}
		var wu = wl + 2;
		var mIdeal = (12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4);
		var m = Math.round(mIdeal);
		var sizes = [];
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			sizes.push(i < m ? wl : wu);
		}
		return sizes;
	};
	var boxBlurH = function(imgA,imgB,w,h,r,off) {
		var iarr = 1 / (r + r + 1);
		var _g11 = 0;
		var _g2 = h;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var ti = i1 * w;
			var li = ti;
			var ri = ti + r;
			var fv = imgA[ti * 4 + off];
			var lv = imgA[(ti + w - 1) * 4 + off];
			var val = (r + 1) * fv;
			var _g3 = 0;
			var _g21 = r;
			while(_g3 < _g21) {
				var j = _g3++;
				val = val + imgA[(ti + j) * 4 + off];
			}
			var _g31 = 0;
			var _g22 = r + 1;
			while(_g31 < _g22) {
				var j1 = _g31++;
				val = val + (imgA[ri * 4 + off] - fv);
				imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
				++ri;
				++ti;
			}
			var _g32 = r + 1;
			var _g23 = w - r;
			while(_g32 < _g23) {
				var j2 = _g32++;
				val = val + (imgA[ri * 4 + off] - imgA[li * 4 + off]);
				imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
				++ri;
				++li;
				++ti;
			}
			var _g33 = w - r;
			var _g24 = w;
			while(_g33 < _g24) {
				var j3 = _g33++;
				val = val + (lv - imgA[li * 4 + off]);
				imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
				++li;
				++ti;
			}
		}
	};
	var boxBlurT = function(imgA1,imgB1,w1,h1,r1,off1) {
		var iarr1 = 1 / (r1 + r1 + 1);
		var ws = w1 * 4;
		var _g12 = 0;
		var _g4 = w1;
		while(_g12 < _g4) {
			var i2 = _g12++;
			var ti1 = i2 * 4 + off1;
			var li1 = ti1;
			var ri1 = ti1 + r1 * ws;
			var fv1 = imgA1[ti1];
			var lv1 = imgA1[ti1 + ws * (h1 - 1)];
			var val1 = (r1 + 1) * fv1;
			var _g34 = 0;
			var _g25 = r1;
			while(_g34 < _g25) {
				var j4 = _g34++;
				val1 = val1 + imgA1[ti1 + j4 * ws];
			}
			var _g35 = 0;
			var _g26 = r1 + 1;
			while(_g35 < _g26) {
				var j5 = _g35++;
				val1 = val1 + (imgA1[ri1] - fv1);
				imgB1[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
				ri1 += ws;
				ti1 += ws;
			}
			var _g36 = r1 + 1;
			var _g27 = h1 - r1;
			while(_g36 < _g27) {
				var j6 = _g36++;
				val1 = val1 + (imgA1[ri1] - imgA1[li1]);
				imgB1[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
				li1 += ws;
				ri1 += ws;
				ti1 += ws;
			}
			var _g37 = h1 - r1;
			var _g28 = h1;
			while(_g37 < _g28) {
				var j7 = _g37++;
				val1 = val1 + (lv1 - imgA1[li1]);
				imgB1[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
				li1 += ws;
				ti1 += ws;
			}
		}
	};
	var boxBlur = function(imgA2,imgB2,w2,h2,bx,by) {
		var _g13 = 0;
		var _g5 = imgA2.length;
		while(_g13 < _g5) {
			var i3 = _g13++;
			imgB2[i3] = imgA2[i3];
		}
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,0);
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,1);
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,2);
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,3);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,0);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,1);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,2);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,3);
	};
	var imgB3 = image.get_data();
	var imgA3 = sourceImage.get_data();
	var w3 = sourceRect.width | 0;
	var h3 = sourceRect.height | 0;
	var bx1 = blurX | 0;
	var by1 = blurY | 0;
	var oX = destPoint.x | 0;
	var oY = destPoint.y | 0;
	var n1 = quality * 2 - 1;
	var rng = Math.pow(2,quality) * 0.125;
	var bxs = boxesForGauss(bx1 * rng,n1);
	var bys = boxesForGauss(by1 * rng,n1);
	var offset = (w3 * oY + oX) * 4 | 0;
	boxBlur(imgA3,imgB3,w3,h3,(bxs[0] - 1) / 2,(bys[0] - 1) / 2);
	var bIndex = 1;
	var _g14 = 0;
	var _g6 = n1 / 2 | 0;
	while(_g14 < _g6) {
		var i4 = _g14++;
		boxBlur(imgB3,imgA3,w3,h3,(bxs[bIndex] - 1) / 2,(bys[bIndex] - 1) / 2);
		boxBlur(imgA3,imgB3,w3,h3,(bxs[bIndex + 1] - 1) / 2,(bys[bIndex + 1] - 1) / 2);
		bIndex += 2;
	}
	var i5 = 0;
	var a;
	if(offset < 0) {
		while(i5 < imgA3.length) {
			a = _$UInt_UInt_$Impl_$.toFloat(imgB3[i5 + 3]) * strength | 0;
			if(a < 0) {
				a = 0;
			} else if(a > 255) {
				a = 255;
			} else {
				a = a;
			}
			imgB3[i5] = fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[i5]),a);
			imgB3[i5 + 1] = fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[i5 + 1]),a);
			imgB3[i5 + 2] = fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[i5 + 2]),a);
			imgB3[i5 + 3] = a;
			i5 += 4;
		}
		var _g15 = imgA3.length - offset;
		var _g7 = imgA3.length;
		while(_g15 < _g7) {
			var i6 = _g15++;
			imgB3[i6] = 0;
		}
	} else {
		i5 = imgA3.length - 4;
		while(i5 >= 0) {
			a = _$UInt_UInt_$Impl_$.toFloat(imgB3[i5 + 3]) * strength | 0;
			if(a < 0) {
				a = 0;
			} else if(a > 255) {
				a = 255;
			} else {
				a = a;
			}
			imgB3[i5 + offset] = fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[i5]),a);
			imgB3[i5 + 1 + offset] = fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[i5 + 1]),a);
			imgB3[i5 + 2 + offset] = fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[i5 + 2]),a);
			imgB3[i5 + 3 + offset] = a;
			i5 -= 4;
		}
		var _g16 = 0;
		var _g8 = offset;
		while(_g16 < _g8) {
			var i7 = _g16++;
			imgB3[i7] = 0;
		}
	}
	image.dirty = true;
	image.version++;
	sourceImage.dirty = true;
	sourceImage.version++;
	if(imgB3 == image.get_data()) {
		return image;
	}
	return sourceImage;
};
lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	if(findColor == null) {
		findColor = true;
	}
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		break;
	case 2:
		var bgra = color;
		var this3 = 0;
		var rgba2 = this3;
		rgba2 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba2;
		var bgra1 = mask;
		var this4 = 0;
		var rgba3 = this4;
		rgba3 = (bgra1 >>> 8 & 255 & 255) << 24 | (bgra1 >>> 16 & 255 & 255) << 16 | (bgra1 >>> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba3;
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >>> 24 & 255 & 255) << 24 | (_color >>> 16 & 255 & 255) << 16 | (_color >>> 8 & 255 & 255) << 8 | 255;
		_mask = (_mask >>> 24 & 255 & 255) << 24 | (_mask >>> 16 & 255 & 255) << 16 | (_mask >>> 8 & 255 & 255) << 8 | 255;
	}
	var pixel;
	var hit;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var x = _g1++;
		hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			var y = _g3++;
			pixel = image.getPixel32(x,y,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(x < left) {
					left = x;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var ix;
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		var x1 = _g11++;
		ix = image.width - 1 - x1;
		hit = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			var y1 = _g31++;
			pixel = image.getPixel32(ix,y1,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(ix > right) {
					right = ix;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var y2 = _g12++;
		hit = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			var x2 = _g32++;
			pixel = image.getPixel32(x2,y2,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(y2 < top) {
					top = y2;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var iy;
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		var y3 = _g13++;
		iy = image.height - 1 - y3;
		hit = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			var x3 = _g33++;
			pixel = image.getPixel32(x3,iy,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(iy > bottom) {
					bottom = iy;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) {
		++w;
	}
	if(h > 0) {
		++h;
	}
	if(w < 0) {
		w = 0;
	}
	if(h < 0) {
		h = 0;
	}
	if(left == right) {
		w = 1;
	}
	if(top == bottom) {
		h = 1;
	}
	if(left > image.width) {
		left = 0;
	}
	if(top > image.height) {
		top = 0;
	}
	return new lime_math_Rectangle(left,top,w,h);
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var premultiplied = image.buffer.premultiplied;
	switch(image.buffer.format) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this2 = 0;
		var bgra = this2;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var premultiplied = image.buffer.premultiplied;
	switch(image.buffer.format) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this2 = 0;
		var bgra = this2;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) {
		return null;
	}
	var length = rect.width * rect.height | 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		position = dataView.byteOffset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				var this1 = 0;
				var argb1 = this1;
				argb1 = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
				argb = argb1;
				pixel = argb;
				break;
			case 2:
				var this2 = 0;
				var bgra1 = this2;
				bgra1 = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
				bgra = bgra1;
				pixel = bgra;
				break;
			default:
			}
			bytes.b[destPosition++] = pixel >>> 24 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 16 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 8 & 255 & 255;
			bytes.b[destPosition++] = pixel & 255 & 255;
			position += 4;
		}
	}
	return bytes;
};
lime_graphics_utils_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) {
		return;
	}
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		sourcePosition = sourceView.byteOffset + sourceView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			}
			if(sourcePremultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >>> 24 & 255) * redMultiplier + (destPixel >>> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value1 = ((sourcePixel >>> 16 & 255) * greenMultiplier + (destPixel >>> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value2 = ((sourcePixel >>> 8 & 255) * blueMultiplier + (destPixel >>> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) {
		return;
	}
	var elements = newWidth * newHeight * 4;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else {
		this1 = null;
	}
	var newBuffer = new lime_graphics_ImageBuffer(this1,newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g1 = 0;
	var _g = newHeight;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = newWidth;
		while(_g3 < _g2) {
			var x = _g3++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) {
				sourceIndexX = sourceIndex + 4;
			} else {
				sourceIndexX = sourceIndex;
			}
			if(sourceY < imageHeight - 1) {
				sourceIndexY = sourceIndex + imageWidth * 4;
			} else {
				sourceIndexY = sourceIndex;
			}
			if(sourceIndexX != sourceIndex) {
				sourceIndexXY = sourceIndexY + 4;
			} else {
				sourceIndexXY = sourceIndexY;
			}
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio | 0;
			newData[index + 1] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio | 0;
			newData[index + 2] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) {
				newData[index + 3] = 0;
			} else {
				newData[index + 3] = data[sourceIndex + 3];
			}
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var elements = newWidth * newHeight * 4;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else {
		this1 = null;
	}
	var newData = this1;
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g2 = 0;
	var _g1 = length;
	while(_g2 < _g1) {
		var i = _g2++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	var this3 = 0;
	var source = this3;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var premultiplied = image.buffer.premultiplied;
	switch(image.buffer.format) {
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
			source = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | value & 255;
	var data1 = image.buffer.data;
	var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 0:
		data1[offset1] = pixel >>> 24 & 255;
		data1[offset1 + 1] = pixel >>> 16 & 255;
		data1[offset1 + 2] = pixel >>> 8 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 1:
		data1[offset1] = pixel & 255;
		data1[offset1 + 1] = pixel >>> 24 & 255;
		data1[offset1 + 2] = pixel >>> 16 & 255;
		data1[offset1 + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data1[offset1] = pixel >>> 8 & 255;
		data1[offset1 + 1] = pixel >>> 16 & 255;
		data1[offset1 + 2] = pixel >>> 24 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	if(image.buffer.data == null) {
		return;
	}
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var bytes = bytePointer.bytes;
	var dataPosition = bytePointer.offset;
	var littleEndian = endian != lime_system_Endian.BIG_ENDIAN;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			if(littleEndian) {
				color = bytes.getInt32(dataPosition);
			} else {
				color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			}
			dataPosition += 4;
			switch(format) {
			case 1:
				var argb = color;
				var this1 = 0;
				var rgba = this1;
				rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
				pixel = rgba;
				break;
			case 2:
				var bgra = color;
				var this2 = 0;
				var rgba1 = this2;
				rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
				pixel = rgba1;
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
			}
			var offset = row + x * 4;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(sourceFormat) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		var argb2 = threshold;
		var this3 = 0;
		var rgba2 = this3;
		rgba2 = (argb2 >>> 16 & 255 & 255) << 24 | (argb2 >>> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >>> 24 & 255 & 255;
		_threshold = rgba2;
		break;
	case 2:
		var bgra = color;
		var this4 = 0;
		var rgba3 = this4;
		rgba3 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba3;
		var bgra1 = mask;
		var this5 = 0;
		var rgba4 = this5;
		rgba4 = (bgra1 >>> 8 & 255 & 255) << 24 | (bgra1 >>> 16 & 255 & 255) << 16 | (bgra1 >>> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba4;
		var bgra2 = threshold;
		var this6 = 0;
		var rgba5 = this6;
		rgba5 = (bgra2 >>> 8 & 255 & 255) << 24 | (bgra2 >>> 16 & 255 & 255) << 16 | (bgra2 >>> 24 & 255 & 255) << 8 | bgra2 & 255 & 255;
		_threshold = rgba5;
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case "==":
		_operation = 1;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) {
		return 0;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return 0;
	}
	var hits = 0;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var pixelMask;
	var test;
	var value;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			var tmp1;
			var tmp2;
			tmp1 = pixelMask >>> 24 & 255;
			tmp2 = _threshold >>> 24 & 255;
			if(tmp1 != tmp2) {
				if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
					value = 1;
				} else {
					value = -1;
				}
			} else {
				tmp1 = pixelMask >>> 16 & 255;
				tmp2 = _threshold >>> 16 & 255;
				if(tmp1 != tmp2) {
					if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
						value = 1;
					} else {
						value = -1;
					}
				} else {
					tmp1 = pixelMask >>> 8 & 255;
					tmp2 = _threshold >>> 8 & 255;
					if(tmp1 != tmp2) {
						if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
							value = 1;
						} else {
							value = -1;
						}
					} else {
						tmp1 = pixelMask & 255;
						tmp2 = _threshold & 255;
						if(tmp1 != tmp2) {
							if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
								value = 1;
							} else {
								value = -1;
							}
						} else {
							value = 0;
						}
					}
				}
			}
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				if(value != 0) {
					test = value == -1;
				} else {
					test = true;
				}
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				if(value != 0) {
					test = value == 1;
				} else {
					test = true;
				}
				break;
			default:
				test = false;
			}
			if(test) {
				if(destPremultiplied) {
					if((_color & 255) == 0) {
						if(_color != 0) {
							_color = 0;
						}
					} else if((_color & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[_color & 255];
						_color = ((_color >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((_color >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((_color >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = _color >>> 24 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >>> 24 & 255;
					destData[destPosition + 2] = _color >>> 16 & 255;
					destData[destPosition + 3] = _color >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = _color >>> 8 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				}
				++hits;
			} else if(copySource) {
				if(destPremultiplied) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) {
							srcPixel = 0;
						}
					} else if((srcPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((srcPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((srcPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = srcPixel >>> 24 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >>> 24 & 255;
					destData[destPosition + 2] = srcPixel >>> 16 & 255;
					destData[destPosition + 3] = srcPixel >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = srcPixel >>> 8 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
		image.version++;
	}
	return hits;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >>> 24 & 255;
	tmp2 = n2 >>> 24 & 255;
	if(tmp1 != tmp2) {
		if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
			return 1;
		} else {
			return -1;
		}
	} else {
		tmp1 = n1 >>> 16 & 255;
		tmp2 = n2 >>> 16 & 255;
		if(tmp1 != tmp2) {
			if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
				return 1;
			} else {
				return -1;
			}
		} else {
			tmp1 = n1 >>> 8 & 255;
			tmp2 = n2 >>> 8 & 255;
			if(tmp1 != tmp2) {
				if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
					return 1;
				} else {
					return -1;
				}
			} else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) {
					if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
						return 1;
					} else {
						return -1;
					}
				} else {
					return 0;
				}
			}
		}
	}
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.__update();
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime","graphics","utils","_ImageDataUtil","ImageDataView"];
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,byteOffset: null
	,image: null
	,rect: null
	,stride: null
	,clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.__update();
	}
	,hasRow: function(y) {
		if(y >= 0) {
			return y < this.height;
		} else {
			return false;
		}
	}
	,offset: function(x,y) {
		if(x < 0) {
			this.rect.x += x;
			if(this.rect.x < 0) {
				this.rect.x = 0;
			}
		} else {
			this.rect.x += x;
			this.rect.width -= x;
		}
		if(y < 0) {
			this.rect.y += y;
			if(this.rect.y < 0) {
				this.rect.y = 0;
			}
		} else {
			this.rect.y += y;
			this.rect.height -= y;
		}
		this.__update();
	}
	,row: function(y) {
		return this.byteOffset + this.stride * y;
	}
	,__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) {
		this1 = data;
	} else {
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		var this2;
		if(array != null) {
			this2 = new Float32Array(array);
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	var this2;
	if(this1 != null) {
		this2 = new Float32Array(this1);
	} else {
		this2 = null;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new(this2);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	var _g = this1;
	_g[0] += second[0];
	var _g1 = this1;
	_g1[6] += second[6];
	var _g2 = this1;
	_g2[12] += second[12];
	var _g3 = this1;
	_g3[18] += second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable == null) {
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable = this2;
	}
	var value;
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable == null) {
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable == null) {
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable == null) {
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		if(Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c) {
			return this.d == Matrix3.d;
		} else {
			return false;
		}
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime_math_Matrix3
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"};
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		var this2;
		if(array != null) {
			this2 = new Float32Array(array);
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var this2;
	if(array != null) {
		this2 = new Float32Array(array);
	} else {
		this2 = null;
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(this2));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] += x;
	this1[13] += y;
	this1[14] += z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	var this2;
	if(this1 != null) {
		this2 = new Float32Array(this1);
	} else {
		this2 = null;
	}
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(this2);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "Matrix4.hx", lineNumber : 139, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnFrom"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "Matrix4.hx", lineNumber : 180, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnTo"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) {
		transposeValues = false;
	}
	if(index == null) {
		index = 0;
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
	var l = array.length - index;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var c = _g1++;
		this1[c] = array[c + index];
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) {
		transposeValues = false;
	}
	if(index == null) {
		index = 0;
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
	var l = this1.length;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var c = _g1++;
		array[c + index] = this1[c];
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "Matrix4.hx", lineNumber : 258, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowFrom"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var array = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
	var this1;
	if(array != null) {
		this1 = new Float32Array(array);
	} else {
		this1 = null;
	}
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function(a,b,c,d,tx,ty,matrix) {
	if(matrix == null) {
		matrix = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,0,a);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,1,b);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,2,0);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,3,0);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,4,c);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,5,d);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,6,0);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,7,0);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,8,0);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,9,0);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,10,1);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,11,0);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,12,tx);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,13,ty);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,14,0);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,15,1);
	return matrix;
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var array = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2.0 * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
	var this1;
	if(array != null) {
		this1 = new Float32Array(array);
	} else {
		this1 = null;
	}
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "Matrix4.hx", lineNumber : 360, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowTo"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function(this1,other) {
	(js_Boot.__cast(other , Float32Array)).set(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] += (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) {
		at = new lime_math_Vector4(0,0,-1);
	}
	if(up == null) {
		up = new lime_math_Vector4(0,-1,0);
	}
	var dir = new lime_math_Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var right;
	var l = Math.sqrt(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z);
	if(l != 0) {
		dir.x /= l;
		dir.y /= l;
		dir.z /= l;
	}
	var l1 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
	if(l1 != 0) {
		vup.x /= l1;
		vup.y /= l1;
		vup.z /= l1;
	}
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	var s = vup.x * dir.x + vup.y * dir.y + vup.z * dir.z;
	dir2.x *= s;
	dir2.y *= s;
	dir2.z *= s;
	vup = new lime_math_Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) {
		var l2 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
		if(l2 != 0) {
			vup.x /= l2;
			vup.y /= l2;
			vup.z /= l2;
		}
	} else if(dir.x != 0) {
		vup = new lime_math_Vector4(-dir.y,dir.x,0);
	} else {
		vup = new lime_math_Vector4(1,0,0);
	}
	right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	var l3 = Math.sqrt(right.x * right.x + right.y * right.y + right.z * right.z);
	if(l3 != 0) {
		right.x /= l3;
		right.y /= l3;
		right.z /= l3;
	}
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var this2;
	if(array != null) {
		this2 = new Float32Array(array);
	} else {
		this2 = null;
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(this2));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	var x;
	var y;
	var z;
	while(i + 3 <= ain.length) {
		x = ain[i];
		y = ain[i + 1];
		z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var temp = this1[1];
	this1[1] = this1[4];
	this1[4] = temp;
	var temp1 = this1[2];
	this1[2] = this1[8];
	this1[8] = temp1;
	var temp2 = this1[3];
	this1[3] = this1[12];
	this1[12] = temp2;
	var temp3 = this1[6];
	this1[6] = this1[9];
	this1[9] = temp3;
	var temp4 = this1[7];
	this1[7] = this1[13];
	this1[13] = temp4;
	var temp5 = this1[11];
	this1[11] = this1[14];
	this1[14] = temp5;
};
lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation = function(this1,x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.__swap = function(this1,a,b) {
	var temp = this1[a];
	this1[a] = this1[b];
	this1[b] = temp;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return new lime_math_Rectangle();
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			return new lime_math_Rectangle();
		}
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		return new lime_math_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x ? toUnion.x : this.x;
		var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
		var y0 = this.y > toUnion.y ? toUnion.y : this.y;
		var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		if(this.x < x) {
			this.x = x;
		}
		if(this.y < y) {
			this.y = y;
		}
		if(this.get_right() > x + width) {
			this.width = x + width - this.x;
		}
		if(this.get_bottom() > y + height) {
			this.height = y + height - this.y;
		}
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
		}
		if(this.y > y) {
			this.y = y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f) {
	return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime_math_Vector2.polar = function(len,angle) {
	return new lime_math_Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime_math_Vector2.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new lime_math_Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime_math_Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"};
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	var l = Math.sqrt(a0.x * a0.x + a0.y * a0.y + a0.z * a0.z);
	if(l != 0) {
		a0.x /= l;
		a0.y /= l;
		a0.z /= l;
	}
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	var l1 = Math.sqrt(b0.x * b0.x + b0.y * b0.y + b0.z * b0.z);
	if(l1 != 0) {
		b0.x /= l1;
		b0.y /= l1;
		b0.z /= l1;
	}
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new lime_math_Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime_math_Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime_math_Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = ["lime","math","color","_ARGB","ARGB_Impl_"];
lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
lime_math_color__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) {
		argb = 0;
	}
	var this1 = argb;
	return this1;
};
lime_math_color__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var this1 = 0;
	var argb = this1;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) == 0) {
		this1 = 0;
	} else if((this1 >>> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >>> 24 & 255];
		this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >>> 24 & 255);
			this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255;
		}
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >>> 24 & 255);
		this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) == 0) {
			this1 = 0;
		} else if((this1 >>> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >>> 24 & 255];
			this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 16 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var this1 = 0;
	var argb = this1;
	argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var this1 = 0;
	var argb = this1;
	argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = ["lime","math","color","_BGRA","BGRA_Impl_"];
lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
lime_math_color__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) {
		bgra = 0;
	}
	var this1 = bgra;
	return this1;
};
lime_math_color__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var this1 = 0;
	var bgra = this1;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var this1 = 0;
	var bgra = this1;
	bgra = (argb & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb >>> 16 & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var this1 = 0;
	var bgra = this1;
	bgra = (rgba >>> 8 & 255 & 255) << 24 | (rgba >>> 16 & 255 & 255) << 16 | (rgba >>> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","color","_RGBA","RGBA_Impl_"];
lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
lime_math_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) {
		rgba = 0;
	}
	var this1 = rgba;
	return this1;
};
lime_math_color__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var this1 = 0;
	var rgba = this1;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) {
			this1 = 0;
		}
	} else if((this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) {
				this1 = 0;
			}
		} else if((this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 24 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 8 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var this1 = 0;
	var rgba = this1;
	rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var this1 = 0;
	var rgba = this1;
	rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_media_ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.media.ALAudioContext"] = lime_media_ALAudioContext;
lime_media_ALAudioContext.__name__ = ["lime","media","ALAudioContext"];
lime_media_ALAudioContext.prototype = {
	NONE: null
	,FALSE: null
	,TRUE: null
	,SOURCE_RELATIVE: null
	,CONE_INNER_ANGLE: null
	,CONE_OUTER_ANGLE: null
	,PITCH: null
	,POSITION: null
	,DIRECTION: null
	,VELOCITY: null
	,LOOPING: null
	,BUFFER: null
	,GAIN: null
	,MIN_GAIN: null
	,MAX_GAIN: null
	,ORIENTATION: null
	,SOURCE_STATE: null
	,INITIAL: null
	,PLAYING: null
	,PAUSED: null
	,STOPPED: null
	,BUFFERS_QUEUED: null
	,BUFFERS_PROCESSED: null
	,REFERENCE_DISTANCE: null
	,ROLLOFF_FACTOR: null
	,CONE_OUTER_GAIN: null
	,MAX_DISTANCE: null
	,SEC_OFFSET: null
	,SAMPLE_OFFSET: null
	,BYTE_OFFSET: null
	,SOURCE_TYPE: null
	,STATIC: null
	,STREAMING: null
	,UNDETERMINED: null
	,FORMAT_MONO8: null
	,FORMAT_MONO16: null
	,FORMAT_STEREO8: null
	,FORMAT_STEREO16: null
	,FREQUENCY: null
	,BITS: null
	,CHANNELS: null
	,SIZE: null
	,NO_ERROR: null
	,INVALID_NAME: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,VENDOR: null
	,VERSION: null
	,RENDERER: null
	,EXTENSIONS: null
	,DOPPLER_FACTOR: null
	,SPEED_OF_SOUND: null
	,DOPPLER_VELOCITY: null
	,DISTANCE_MODEL: null
	,INVERSE_DISTANCE: null
	,INVERSE_DISTANCE_CLAMPED: null
	,LINEAR_DISTANCE: null
	,LINEAR_DISTANCE_CLAMPED: null
	,EXPONENT_DISTANCE: null
	,EXPONENT_DISTANCE_CLAMPED: null
	,bufferData: function(buffer,format,data,size,freq) {
		lime_media_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_media_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_media_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_media_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_media_openal_AL.bufferiv(buffer,param,values);
	}
	,createSource: function() {
		return lime_media_openal_AL.createSource();
	}
	,createBuffer: function() {
		return lime_media_openal_AL.createBuffer();
	}
	,deleteBuffer: function(buffer) {
		lime_media_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_media_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_media_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_media_openal_AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime_media_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_media_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_media_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_media_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_media_openal_AL.enable(capability);
	}
	,genSource: function() {
		return this.createSource();
	}
	,genSources: function(n) {
		return lime_media_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return this.createBuffer();
	}
	,genBuffers: function(n) {
		return lime_media_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_media_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_media_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_media_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime_media_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_media_openal_AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime_media_openal_AL.getError();
	}
	,getErrorString: function() {
		return lime_media_openal_AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime_media_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_media_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime_media_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_media_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_media_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_media_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_media_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_media_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_media_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_media_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_media_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime_media_openal_AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime_media_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_media_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_media_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_media_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_media_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_media_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_media_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_media_openal_AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_media_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_media_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_media_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_media_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_media_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_media_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_media_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_media_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_media_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_media_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_media_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_media_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_media_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_media_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_media_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_media_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_media_openal_AL.speedOfSound(value);
	}
	,__class__: lime_media_ALAudioContext
};
var lime_media_ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.media.ALCAudioContext"] = lime_media_ALCAudioContext;
lime_media_ALCAudioContext.__name__ = ["lime","media","ALCAudioContext"];
lime_media_ALCAudioContext.prototype = {
	FALSE: null
	,TRUE: null
	,FREQUENCY: null
	,REFRESH: null
	,SYNC: null
	,MONO_SOURCES: null
	,STEREO_SOURCES: null
	,NO_ERROR: null
	,INVALID_DEVICE: null
	,INVALID_CONTEXT: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,OUT_OF_MEMORY: null
	,ATTRIBUTES_SIZE: null
	,ALL_ATTRIBUTES: null
	,DEFAULT_DEVICE_SPECIFIER: null
	,DEVICE_SPECIFIER: null
	,EXTENSIONS: null
	,ENUMERATE_ALL_EXT: null
	,DEFAULT_ALL_DEVICES_SPECIFIER: null
	,ALL_DEVICES_SPECIFIER: null
	,closeDevice: function(device) {
		return lime_media_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_media_openal_ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime_media_openal_ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime_media_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_media_openal_ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime_media_openal_ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime_media_openal_ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime_media_openal_ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime_media_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_media_openal_ALC.openDevice(deviceName);
	}
	,pauseDevice: function(device) {
		lime_media_openal_ALC.pauseDevice(device);
	}
	,processContext: function(context) {
		lime_media_openal_ALC.processContext(context);
	}
	,resumeDevice: function(device) {
		lime_media_openal_ALC.resumeDevice(device);
	}
	,suspendContext: function(context) {
		lime_media_openal_ALC.suspendContext(context);
	}
	,__class__: lime_media_ALCAudioContext
};
var lime_media_AudioBuffer = function() {
};
$hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
lime_media_AudioBuffer.__name__ = ["lime","media","AudioBuffer"];
lime_media_AudioBuffer.fromBase64 = function(base64String) {
	if(base64String == null) {
		return null;
	}
	if(base64String.indexOf(",") == -1) {
		base64String = "data:" + lime_media_AudioBuffer.__getCodec(haxe_crypto_Base64.decode(base64String)) + ";base64," + base64String;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : [base64String], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : ["data:" + lime_media_AudioBuffer.__getCodec(bytes) + ";base64," + haxe_crypto_Base64.encode(bytes)], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path], preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths, preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromVorbisFile = function(vorbisFile) {
	return null;
};
lime_media_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function(id,msg) {
				promise.error(msg);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.__getCodec = function(bytes) {
	var signature = bytes.getString(0,4);
	switch(signature) {
	case "OggS":
		return "audio/ogg";
	case "RIFF":
		if(bytes.getString(8,4) == "WAVE") {
			return "audio/wav";
		} else if(bytes.getString(0,3) == "ID3" || bytes.getString(0,2) == "ÿû") {
			return "audio/mp3";
		}
		break;
	case "fLaC":
		return "audio/flac";
	default:
		if(bytes.getString(0,3) == "ID3" || bytes.getString(0,2) == "ÿû") {
			return "audio/mp3";
		}
	}
	lime_utils_Log.error("Unsupported sound format",{ fileName : "AudioBuffer.hx", lineNumber : 480, className : "lime.media.AudioBuffer", methodName : "__getCodec"});
	return null;
};
lime_media_AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,sampleRate: null
	,__srcAudio: null
	,__srcBuffer: null
	,__srcCustom: null
	,__srcFMODSound: null
	,__srcHowl: null
	,__srcSound: null
	,__srcVorbisFile: null
	,dispose: function() {
		this.__srcHowl.unload();
	}
	,get_src: function() {
		return this.__srcHowl;
	}
	,set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_media_AudioBuffer
	,__properties__: {set_src:"set_src",get_src:"get_src"}
};
var lime_media_AudioContext = $hxClasses["lime.media.AudioContext"] = { __ename__ : ["lime","media","AudioContext"], __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_media_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
lime_media_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
lime_media_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
lime_media_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
lime_media_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
var lime_media_AudioManager = function() { };
$hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
lime_media_AudioManager.__name__ = ["lime","media","AudioManager"];
lime_media_AudioManager.init = function(context) {
	if(lime_media_AudioManager.context == null) {
		if(context == null) {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				lime_media_AudioManager.context = lime_media_AudioContext.WEB(new AudioContext ());
			} catch( e ) {
				haxe_CallStack.lastException = e;
				lime_media_AudioManager.context = lime_media_AudioContext.HTML5(new lime_media_HTML5AudioContext());
			}
		} else {
			lime_media_AudioManager.context = context;
		}
	}
};
lime_media_AudioManager.resume = function() {
	if(lime_media_AudioManager.context != null) {
		var _g = lime_media_AudioManager.context;
		if(_g[1] == 0) {
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.resumeDevice(device);
				alc.processContext(currentContext);
			}
		}
	}
};
lime_media_AudioManager.shutdown = function() {
	if(lime_media_AudioManager.context != null) {
		var _g = lime_media_AudioManager.context;
		if(_g[1] == 0) {
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				if(device != null) {
					alc.closeDevice(device);
				}
			}
		}
		lime_media_AudioManager.context = null;
	}
};
lime_media_AudioManager.suspend = function() {
	if(lime_media_AudioManager.context != null) {
		var _g = lime_media_AudioManager.context;
		if(_g[1] == 0) {
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				alc.suspendContext(currentContext);
				var device = alc.getContextsDevice(currentContext);
				alc.pauseDevice(device);
			}
		}
	}
};
var lime_media_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) {
		loops = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	this.backend = new lime__$backend_html5_HTML5AudioSource(this);
	if(length != null && length != 0) {
		this.set_length(length);
	}
	this.set_loops(loops);
	if(buffer != null) {
		this.init();
	}
};
$hxClasses["lime.media.AudioSource"] = lime_media_AudioSource;
lime_media_AudioSource.__name__ = ["lime","media","AudioSource"];
lime_media_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,offset: null
	,backend: null
	,dispose: function() {
		this.backend.dispose();
	}
	,init: function() {
		this.backend.init();
	}
	,play: function() {
		this.backend.play();
	}
	,pause: function() {
		this.backend.pause();
	}
	,stop: function() {
		this.backend.stop();
	}
	,get_currentTime: function() {
		return this.backend.getCurrentTime();
	}
	,set_currentTime: function(value) {
		return this.backend.setCurrentTime(value);
	}
	,get_gain: function() {
		return this.backend.getGain();
	}
	,set_gain: function(value) {
		return this.backend.setGain(value);
	}
	,get_length: function() {
		return this.backend.getLength();
	}
	,set_length: function(value) {
		return this.backend.setLength(value);
	}
	,get_loops: function() {
		return this.backend.getLoops();
	}
	,set_loops: function(value) {
		return this.backend.setLoops(value);
	}
	,get_position: function() {
		return this.backend.getPosition();
	}
	,set_position: function(value) {
		return this.backend.setPosition(value);
	}
	,__class__: lime_media_AudioSource
	,__properties__: {set_position:"set_position",get_position:"get_position",set_loops:"set_loops",get_loops:"get_loops",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_media_FlashAudioContext = function() {
};
$hxClasses["lime.media.FlashAudioContext"] = lime_media_FlashAudioContext;
lime_media_FlashAudioContext.__name__ = ["lime","media","FlashAudioContext"];
lime_media_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) {
			startPosition = -1;
		}
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0;
		}
		return null;
	}
	,__class__: lime_media_FlashAudioContext
};
var lime_media_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
lime_media_HTML5AudioContext.__name__ = ["lime","media","HTML5AudioContext"];
lime_media_HTML5AudioContext.prototype = {
	HAVE_CURRENT_DATA: null
	,HAVE_ENOUGH_DATA: null
	,HAVE_FUTURE_DATA: null
	,HAVE_METADATA: null
	,HAVE_NOTHING: null
	,NETWORK_EMPTY: null
	,NETWORK_IDLE: null
	,NETWORK_LOADING: null
	,NETWORK_NO_SOURCE: null
	,canPlayType: function(buffer,type) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.canPlayType(type);
		}
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_media_AudioBuffer();
		buffer.__srcAudio = new Audio();
		buffer.__srcAudio.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.autoplay;
		}
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.buffered;
		}
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentSrc;
		}
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentTime;
		}
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.defaultPlaybackRate;
		}
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.duration;
		}
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.ended;
		}
		return false;
	}
	,getError: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.error;
		}
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.loop;
		}
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.muted;
		}
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.networkState;
		}
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.paused;
		}
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.played;
		}
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.preload;
		}
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.readyState;
		}
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seekable;
		}
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seeking;
		}
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.src;
		}
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.volume;
		}
		return 1;
	}
	,load: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.load();
			return;
		}
	}
	,pause: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.pause();
			return;
		}
	}
	,play: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.play();
			return;
		}
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.autoplay = value;
		}
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.currentTime = value;
		}
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.defaultPlaybackRate = value;
		}
	}
	,setLoop: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.loop = value;
		}
	}
	,setMuted: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.muted = value;
		}
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.playbackRate = value;
		}
	}
	,setPreload: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.preload = value;
		}
	}
	,setSrc: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.src = value;
		}
	}
	,setVolume: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.volume = value;
		}
	}
	,__class__: lime_media_HTML5AudioContext
};
var lime_media_codecs_vorbis_VorbisComment = function() {
};
$hxClasses["lime.media.codecs.vorbis.VorbisComment"] = lime_media_codecs_vorbis_VorbisComment;
lime_media_codecs_vorbis_VorbisComment.__name__ = ["lime","media","codecs","vorbis","VorbisComment"];
lime_media_codecs_vorbis_VorbisComment.prototype = {
	userComments: null
	,vendor: null
	,__class__: lime_media_codecs_vorbis_VorbisComment
};
var lime_media_codecs_vorbis_VorbisFile = function(handle) {
	this.handle = handle;
};
$hxClasses["lime.media.codecs.vorbis.VorbisFile"] = lime_media_codecs_vorbis_VorbisFile;
lime_media_codecs_vorbis_VorbisFile.__name__ = ["lime","media","codecs","vorbis","VorbisFile"];
lime_media_codecs_vorbis_VorbisFile.fromBytes = function(bytes) {
	return null;
};
lime_media_codecs_vorbis_VorbisFile.fromFile = function(path) {
	return null;
};
lime_media_codecs_vorbis_VorbisFile.prototype = {
	bitstream: null
	,handle: null
	,bitrate: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,bitrateInstant: function() {
		return 0;
	}
	,clear: function() {
	}
	,comment: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return null;
	}
	,crosslap: function(other) {
		return 0;
	}
	,info: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return null;
	}
	,pcmSeek: function(pos) {
		return 0;
	}
	,pcmSeekLap: function(pos) {
		return 0;
	}
	,pcmSeekPage: function(pos) {
		return 0;
	}
	,pcmSeekPageLap: function(pos) {
		return 0;
	}
	,pcmTell: function() {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,pcmTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,rawSeek: function(pos) {
		return 0;
	}
	,rawSeekLap: function(pos) {
		return 0;
	}
	,rawTell: function() {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,rawTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,read: function(buffer,position,length,bigEndianPacking,wordSize,signed) {
		if(signed == null) {
			signed = true;
		}
		if(wordSize == null) {
			wordSize = 2;
		}
		if(bigEndianPacking == null) {
			bigEndianPacking = false;
		}
		if(length == null) {
			length = 4096;
		}
		return 0;
	}
	,readFloat: function(pcmChannels,samples) {
		return 0;
	}
	,seekable: function() {
		return false;
	}
	,serialNumber: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,streams: function() {
		return 0;
	}
	,timeSeek: function(s) {
		return 0;
	}
	,timeSeekLap: function(s) {
		return 0;
	}
	,timeSeekPage: function(s) {
		return 0;
	}
	,timeSeekPageLap: function(s) {
		return 0;
	}
	,timeTell: function() {
		return 0;
	}
	,timeTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,__class__: lime_media_codecs_vorbis_VorbisFile
};
var lime_media_codecs_vorbis_VorbisInfo = function() {
};
$hxClasses["lime.media.codecs.vorbis.VorbisInfo"] = lime_media_codecs_vorbis_VorbisInfo;
lime_media_codecs_vorbis_VorbisInfo.__name__ = ["lime","media","codecs","vorbis","VorbisInfo"];
lime_media_codecs_vorbis_VorbisInfo.prototype = {
	bitrateLower: null
	,bitrateNominal: null
	,bitrateUpper: null
	,channels: null
	,rate: null
	,version: null
	,__class__: lime_media_codecs_vorbis_VorbisInfo
};
var lime_media_openal_AL = function() { };
$hxClasses["lime.media.openal.AL"] = lime_media_openal_AL;
lime_media_openal_AL.__name__ = ["lime","media","openal","AL"];
lime_media_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_media_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.bufferf = function(buffer,param,value) {
};
lime_media_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_media_openal_AL.bufferi = function(buffer,param,value) {
};
lime_media_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_media_openal_AL.createBuffer = function() {
	return null;
};
lime_media_openal_AL.createSource = function() {
	return null;
};
lime_media_openal_AL.deleteBuffer = function(buffer) {
};
lime_media_openal_AL.deleteBuffers = function(buffers) {
};
lime_media_openal_AL.deleteSource = function(source) {
};
lime_media_openal_AL.deleteSources = function(sources) {
};
lime_media_openal_AL.disable = function(capability) {
};
lime_media_openal_AL.distanceModel = function(distanceModel) {
};
lime_media_openal_AL.dopplerFactor = function(value) {
};
lime_media_openal_AL.dopplerVelocity = function(value) {
};
lime_media_openal_AL.enable = function(capability) {
};
lime_media_openal_AL.genSource = function() {
	return null;
};
lime_media_openal_AL.genSources = function(n) {
	return null;
};
lime_media_openal_AL.genBuffer = function() {
	return null;
};
lime_media_openal_AL.genBuffers = function(n) {
	return null;
};
lime_media_openal_AL.getBoolean = function(param) {
	return false;
};
lime_media_openal_AL.getBooleanv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getDouble = function(param) {
	return 0;
};
lime_media_openal_AL.getDoublev = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_media_openal_AL.getError = function() {
	return 0;
};
lime_media_openal_AL.getErrorString = function() {
	var _g = lime_media_openal_AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_AL.getFloat = function(param) {
	return 0;
};
lime_media_openal_AL.getFloatv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getInteger = function(param) {
	return 0;
};
lime_media_openal_AL.getIntegerv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getListener3f = function(param) {
	return null;
};
lime_media_openal_AL.getListener3i = function(param) {
	return null;
};
lime_media_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_media_openal_AL.getListenerfv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_media_openal_AL.getListeneriv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getParameter = function(param) {
	return null;
};
lime_media_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_media_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getString = function(param) {
	return null;
};
lime_media_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_media_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_media_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_media_openal_AL.isSource = function(source) {
	return false;
};
lime_media_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listenerf = function(param,value) {
};
lime_media_openal_AL.listenerfv = function(param,values) {
};
lime_media_openal_AL.listeneri = function(param,value) {
};
lime_media_openal_AL.listeneriv = function(param,values) {
};
lime_media_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.sourcef = function(source,param,value) {
};
lime_media_openal_AL.sourcefv = function(source,param,values) {
};
lime_media_openal_AL.sourcei = function(source,param,value) {
};
lime_media_openal_AL.sourceiv = function(source,param,values) {
};
lime_media_openal_AL.sourcePlay = function(source) {
};
lime_media_openal_AL.sourcePlayv = function(sources) {
};
lime_media_openal_AL.sourceStop = function(source) {
};
lime_media_openal_AL.sourceStopv = function(sources) {
};
lime_media_openal_AL.sourceRewind = function(source) {
};
lime_media_openal_AL.sourceRewindv = function(sources) {
};
lime_media_openal_AL.sourcePause = function(source) {
};
lime_media_openal_AL.sourcePausev = function(sources) {
};
lime_media_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_media_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_media_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_media_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_media_openal_AL.speedOfSound = function(value) {
};
var lime_media_openal__$ALBuffer_ALBuffer_$Impl_$ = {};
$hxClasses["lime.media.openal._ALBuffer.ALBuffer_Impl_"] = lime_media_openal__$ALBuffer_ALBuffer_$Impl_$;
lime_media_openal__$ALBuffer_ALBuffer_$Impl_$.__name__ = ["lime","media","openal","_ALBuffer","ALBuffer_Impl_"];
lime_media_openal__$ALBuffer_ALBuffer_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALC = function() { };
$hxClasses["lime.media.openal.ALC"] = lime_media_openal_ALC;
lime_media_openal_ALC.__name__ = ["lime","media","openal","ALC"];
lime_media_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_media_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_media_openal_ALC.destroyContext = function(context) {
};
lime_media_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_media_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_media_openal_ALC.getError = function(device) {
	return 0;
};
lime_media_openal_ALC.getErrorString = function(device) {
	var _g = lime_media_openal_ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_media_openal_ALC.getString = function(device,param) {
	return null;
};
lime_media_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_media_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_media_openal_ALC.pauseDevice = function(device) {
};
lime_media_openal_ALC.processContext = function(context) {
};
lime_media_openal_ALC.resumeDevice = function(device) {
};
lime_media_openal_ALC.suspendContext = function(context) {
};
var lime_media_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.media.openal._ALContext.ALContext_Impl_"] = lime_media_openal__$ALContext_ALContext_$Impl_$;
lime_media_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime","media","openal","_ALContext","ALContext_Impl_"];
lime_media_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.media.openal._ALDevice.ALDevice_Impl_"] = lime_media_openal__$ALDevice_ALDevice_$Impl_$;
lime_media_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime","media","openal","_ALDevice","ALDevice_Impl_"];
lime_media_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALSource_ALSource_$Impl_$ = {};
$hxClasses["lime.media.openal._ALSource.ALSource_Impl_"] = lime_media_openal__$ALSource_ALSource_$Impl_$;
lime_media_openal__$ALSource_ALSource_$Impl_$.__name__ = ["lime","media","openal","_ALSource","ALSource_Impl_"];
lime_media_openal__$ALSource_ALSource_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = ["lime","net","_IHTTPRequest"];
lime_net__$IHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,cancel: null
	,__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
	this.backend = new lime__$backend_html5_HTML5HTTPRequest();
	this.backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = ["lime","net","_HTTPRequest","AbstractHTTPRequest"];
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseData: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,backend: null
	,cancel: function() {
		this.backend.cancel();
	}
	,load: function(uri) {
		return null;
	}
	,__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net_HTTPRequest = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = ["lime","net","HTTPRequest"];
lime_net_HTTPRequest.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net_HTTPRequest.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	__class__: lime_net_HTTPRequest
});
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = ["lime","net","_HTTPRequest_Bytes"];
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = ["lime","net","_HTTPRequest_String"];
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = ["lime","net","HTTPRequestHeader"];
lime_net_HTTPRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$text_$Font = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_text_Font"] = lime_net__$HTTPRequest_$lime_$text_$Font;
lime_net__$HTTPRequest_$lime_$text_$Font.__name__ = ["lime","net","_HTTPRequest_lime_text_Font"];
lime_net__$HTTPRequest_$lime_$text_$Font.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$text_$Font.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_text_Font.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$text_$Font
});
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = ["lime","net","_HTTPRequest_lime_utils_Bytes"];
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] = lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = ["lime","net","_HTTPRequest_openfl_utils_ByteArray"];
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray
});
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = ["lime","system","CFFI"];
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	if(!lime_system_CFFI.enabled) {
		return Reflect.makeVarArgs(function(__) {
			return { };
		});
	}
	var result = null;
	return result;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
$hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = ["lime","system","_CFFIPointer","CFFIPointer_Impl_"];
lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
	var tmp = this1 != null;
	return 0;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"};
lime_system_Clipboard.__update = function() {
	var cacheText = lime_system_Clipboard._text;
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
};
lime_system_Clipboard.get_text = function() {
	return lime_system_Clipboard._text;
};
lime_system_Clipboard.set_text = function(value) {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = value;
	var $window = lime_app_Application.current.__windows[0];
	if($window != null) {
		$window.backend.setClipboard(value);
	}
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
	return value;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = ["lime","system","Display"];
lime_system_Display.prototype = {
	bounds: null
	,currentMode: null
	,id: null
	,dpi: null
	,name: null
	,supportedModes: null
	,__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = ["lime","system","DisplayMode"];
lime_system_DisplayMode.prototype = {
	height: null
	,pixelFormat: null
	,refreshRate: null
	,width: null
	,__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : ["lime","system","Endian"], __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_numDisplays:"get_numDisplays",get_fontsDirectory:"get_fontsDirectory",get_endianness:"get_endianness",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory",set_allowScreenTimeout:"set_allowScreenTimeout",get_allowScreenTimeout:"get_allowScreenTimeout"};
lime_system_System.embed = $hx_exports["lime"]["embed"] = function(projectName,element,width,height,windowConfig) {
	if(lime_system_System.__applicationEntryPoint == null || lime_system_System.__applicationConfig == null) {
		return;
	}
	var _this = lime_system_System.__applicationEntryPoint;
	if(__map_reserved[projectName] != null ? _this.existsReserved(projectName) : _this.h.hasOwnProperty(projectName)) {
		var htmlElement = null;
		if(typeof(element) == "string") {
			htmlElement = window.document.getElementById(element);
		} else if(element == null) {
			htmlElement = window.document.createElement("div");
		} else {
			htmlElement = element;
		}
		if(htmlElement == null) {
			window.console.log("[lime.embed] ERROR: Cannot find target element: " + Std.string(element));
			return;
		}
		if(width == null) {
			width = 0;
		}
		if(height == null) {
			height = 0;
		}
		var _this1 = lime_system_System.__applicationConfig;
		var defaultConfig = __map_reserved[projectName] != null ? _this1.getReserved(projectName) : _this1.h[projectName];
		var config = { };
		lime_system_System.__copyMissingFields(config,defaultConfig);
		if(windowConfig != null) {
			config.windows = [];
			if((windowConfig instanceof Array) && windowConfig.__enum__ == null) {
				config.windows = windowConfig;
			} else {
				config.windows[0] = windowConfig;
			}
			var _g1 = 0;
			var _g = config.windows.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(i < defaultConfig.windows.length) {
					lime_system_System.__copyMissingFields(config.windows[i],defaultConfig.windows[i]);
				}
				lime_system_System.__copyMissingFields(config.windows[i].parameters,defaultConfig.windows[i].parameters);
				if(typeof(windowConfig.background) == "string") {
					var background = StringTools.replace(Std.string(windowConfig.background),"#","");
					if(background.indexOf("0x") > -1) {
						windowConfig.background = Std.parseInt(background);
					} else {
						windowConfig.background = Std.parseInt("0x" + background);
					}
				}
			}
		}
		if(Reflect.field(config.windows[0],"rootPath")) {
			config.rootPath = Reflect.field(config.windows[0],"rootPath");
			Reflect.deleteField(config.windows[0],"rootPath");
		}
		config.windows[0].element = htmlElement;
		config.windows[0].width = width;
		config.windows[0].height = height;
		var _this2 = lime_system_System.__applicationEntryPoint;
		(__map_reserved[projectName] != null ? _this2.getReserved(projectName) : _this2.h[projectName])(config);
	}
};
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.dpi = 96 * window.devicePixelRatio;
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return window.performance.now() | 0;
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.openFile = function(path) {
	if(path != null) {
		window.open(path,"_blank");
	}
};
lime_system_System.openURL = function(url,target) {
	if(target == null) {
		target = "_blank";
	}
	if(url != null) {
		window.open(url,target);
	}
};
lime_system_System.__copyMissingFields = function(target,source) {
	if(source == null || target == null) {
		return;
	}
	var _g = 0;
	var _g1 = Reflect.fields(source);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(target,field)) {
			target[field] = Reflect.field(source,field);
		}
	}
};
lime_system_System.__getDirectory = function(type) {
	return null;
};
lime_system_System.__registerEntryPoint = function(projectName,entryPoint,config) {
	if(lime_system_System.__applicationConfig == null) {
		lime_system_System.__applicationConfig = new haxe_ds_StringMap();
	}
	if(lime_system_System.__applicationEntryPoint == null) {
		lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap();
	}
	var _this = lime_system_System.__applicationEntryPoint;
	if(__map_reserved[projectName] != null) {
		_this.setReserved(projectName,entryPoint);
	} else {
		_this.h[projectName] = entryPoint;
	}
	var _this1 = lime_system_System.__applicationConfig;
	if(__map_reserved[projectName] != null) {
		_this1.setReserved(projectName,config);
	} else {
		_this1.h[projectName] = config;
	}
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	return lime_system_System.__getDirectory(0);
};
lime_system_System.get_applicationStorageDirectory = function() {
	return lime_system_System.__getDirectory(1);
};
lime_system_System.get_desktopDirectory = function() {
	return lime_system_System.__getDirectory(2);
};
lime_system_System.get_documentsDirectory = function() {
	return lime_system_System.__getDirectory(3);
};
lime_system_System.get_fontsDirectory = function() {
	return lime_system_System.__getDirectory(4);
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_userDirectory = function() {
	return lime_system_System.__getDirectory(5);
};
lime_system_System.get_endianness = function() {
	if(lime_system_System.endianness == null) {
		var arrayBuffer = new ArrayBuffer(2);
		var this1;
		if(arrayBuffer != null) {
			this1 = new Uint8Array(arrayBuffer,0);
		} else {
			this1 = null;
		}
		var uint8Array = this1;
		var this2;
		if(arrayBuffer != null) {
			this2 = new Uint16Array(arrayBuffer,0);
		} else {
			this2 = null;
		}
		var uint16array = this2;
		uint8Array[0] = 170;
		uint8Array[1] = 187;
		if(uint16array[0] == 43707) {
			lime_system_System.endianness = lime_system_Endian.BIG_ENDIAN;
		} else {
			lime_system_System.endianness = lime_system_Endian.LITTLE_ENDIAN;
		}
	}
	return lime_system_System.endianness;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onRun = new lime_app__$Event_$haxe_$Function_$Void();
	this.onProgress = new lime_app__$Event_$haxe_$Function_$Void();
	this.onError = new lime_app__$Event_$haxe_$Function_$Void();
	this.onComplete = new lime_app__$Event_$haxe_$Function_$Void();
	this.doWork = new lime_app__$Event_$haxe_$Function_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,onRun: null
	,queue: function(state) {
		this.runWork(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,runWork: function(state) {
		this.onRun.dispatch(state);
		this.doWork.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : ["lime","system","_ThreadPool","ThreadPoolMessageType"], __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"] };
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE",0];
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR",1];
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT",2];
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS",3];
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK",4];
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime","system","_ThreadPool","ThreadPoolMessage"];
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	state: null
	,type: null
	,__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	var this1 = i;
	return this1;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime_text_GlyphMetrics.prototype = {
	advance: null
	,height: null
	,horizontalBearing: null
	,verticalBearing: null
	,__class__: lime_text_GlyphMetrics
};
var lime_text_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) {
		this.offset = offset;
	} else {
		this.offset = new lime_math_Vector2();
	}
};
$hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
lime_text_GlyphPosition.__name__ = ["lime","text","GlyphPosition"];
lime_text_GlyphPosition.prototype = {
	advance: null
	,glyph: null
	,offset: null
	,__class__: lime_text_GlyphPosition
};
var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime_text__$TextDirection_TextDirection_$Impl_$;
lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = ["lime","text","_TextDirection","TextDirection_Impl_"];
lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"};
lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function(this1) {
	this1 ^= 1;
};
lime_text__$TextDirection_TextDirection_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var lime_text_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) {
		language = "en";
	}
	if(script == null) {
		script = "Zyyy";
	}
	if(direction == null) {
		direction = 4;
	}
	if(size == null) {
		size = 12;
	}
	if(text == null) {
		text = "";
	}
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
};
$hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
lime_text_TextLayout.__name__ = ["lime","text","TextLayout"];
lime_text_TextLayout.prototype = {
	font: null
	,glyphs: null
	,positions: null
	,size: null
	,text: null
	,__dirty: null
	,__buffer: null
	,__direction: null
	,__handle: null
	,__language: null
	,__script: null
	,__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) {
			return value;
		}
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) {
			return value;
		}
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) {
			return value;
		}
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) {
			return value;
		}
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) {
			return value;
		}
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) {
			return value;
		}
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: lime_text_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var lime_text__$TextScript_TextScript_$Impl_$ = {};
$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime_text__$TextScript_TextScript_$Impl_$;
lime_text__$TextScript_TextScript_$Impl_$.__name__ = ["lime","text","_TextScript","TextScript_Impl_"];
lime_text__$TextScript_TextScript_$Impl_$.__properties__ = {get_rightToLeft:"get_rightToLeft"};
lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Arab":case "Armi":case "Avst":case "Cprt":case "Hebr":case "Khar":case "Lydi":case "Mand":case "Nkoo":case "Orkh":case "Phli":case "Phlp":case "Phnx":case "Samr":case "Sarb":case "Syrc":case "Thaa":
		return true;
	default:
		return false;
	}
};
var lime_text__$UTF8String_UTF8String_$Impl_$ = {};
$hxClasses["lime.text._UTF8String.UTF8String_Impl_"] = lime_text__$UTF8String_UTF8String_$Impl_$;
lime_text__$UTF8String_UTF8String_$Impl_$.__name__ = ["lime","text","_UTF8String","UTF8String_Impl_"];
lime_text__$UTF8String_UTF8String_$Impl_$.__properties__ = {get_length:"get_length"};
lime_text__$UTF8String_UTF8String_$Impl_$._new = function(str) {
	var this1 = new String(str);
	return this1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.charAt = function(this1,index) {
	var this2 = this1;
	var this3 = this2;
	var this4 = this3;
	var i;
	if(index >= 0) {
		var index1 = 0;
		var len = this4.length;
		var i1 = 0;
		while(i1 < index && index1 < len) {
			var c = this4.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i1;
		}
		i = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -index && 0 < index2) {
			var c1 = this4.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		i = index2;
	}
	var this5 = this1;
	var this6 = this5;
	var this7 = this6;
	var c2 = this7.charCodeAt(i);
	var this8 = HxOverrides.substr(this7,i,!(55296 <= c2 && c2 <= 56319) ? 1 : 2);
	var this9 = this8;
	return this9;
};
lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt = function(this1,index) {
	var tmp;
	if(index >= 0) {
		var this2 = this1;
		var this3 = this2;
		tmp = index >= lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this3,0,this1.length);
	} else {
		tmp = true;
	}
	if(tmp) {
		return null;
	}
	var this4 = this1;
	var this5 = this4;
	var this6 = this5;
	var i;
	if(index >= 0) {
		var index1 = 0;
		var len = this6.length;
		var i1 = 0;
		while(i1 < index && index1 < len) {
			var c = this6.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i1;
		}
		i = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -index && 0 < index2) {
			var c1 = this6.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		i = index2;
	}
	var this7 = this1;
	var this8 = this7;
	return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this8,i);
};
lime_text__$UTF8String_UTF8String_$Impl_$.fromCharCode = function(code) {
	if(!(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343))) {
		throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodePoint(code));
	}
	var this1 = code;
	var this2 = this1;
	var this3;
	if(this2 <= 65535) {
		var this4 = String.fromCharCode(this2);
		var this5 = this4;
		this3 = this5;
	} else {
		var this6 = String.fromCharCode((this2 >> 10) + 55232) + String.fromCharCode(this2 & 1023 | 56320);
		var this7 = this6;
		this3 = this7;
	}
	return this3;
};
lime_text__$UTF8String_UTF8String_$Impl_$.fromCharCodes = function(codes) {
	var s = "";
	var _g = 0;
	while(_g < codes.length) {
		var code = codes[_g];
		++_g;
		if(!(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343))) {
			throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodePoint(code));
		}
		var this1 = code;
		var b = this1;
		var this2;
		if(b <= 65535) {
			var this3 = String.fromCharCode(b);
			var this4 = this3;
			this2 = this4;
		} else {
			var this5 = String.fromCharCode((b >> 10) + 55232) + String.fromCharCode(b & 1023 | 56320);
			var this6 = this5;
			this2 = this6;
		}
		s += this2;
	}
	return s;
};
lime_text__$UTF8String_UTF8String_$Impl_$.indexOf = function(this1,str,startIndex) {
	if(startIndex == null) {
		startIndex = 0;
	}
	var this2 = this1;
	var this3 = this2;
	var this4 = this3;
	var index;
	if(startIndex >= 0) {
		var index1 = 0;
		var len = this4.length;
		var i = 0;
		while(i < startIndex && index1 < len) {
			var c = this4.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		index = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -startIndex && 0 < index2) {
			var c1 = this4.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		index = index2;
	}
	var index3 = this1.indexOf(str,index);
	if(index3 >= 0) {
		var this5 = this1;
		var this6 = this5;
		return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this6,0,index3);
	} else {
		return -1;
	}
};
lime_text__$UTF8String_UTF8String_$Impl_$.lastIndexOf = function(this1,str,startIndex) {
	var startIndex1 = startIndex;
	if(startIndex1 == null) {
		startIndex1 = this1.length - 1;
	}
	var this2 = this1;
	var this3 = this2;
	var this4 = this3;
	var index;
	if(startIndex1 >= 0) {
		var index1 = 0;
		var len = this4.length;
		var i = 0;
		while(i < startIndex1 && index1 < len) {
			var c = this4.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		index = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -startIndex1 && 0 < index2) {
			var c1 = this4.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		index = index2;
	}
	var index3 = this1.lastIndexOf(str,index);
	if(index3 >= 0) {
		var this5 = this1;
		var this6 = this5;
		return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this6,0,index3);
	} else {
		return -1;
	}
};
lime_text__$UTF8String_UTF8String_$Impl_$.split = function(this1,delimiter) {
	if(delimiter.length == 0) {
		var _g = [];
		var _g1_string;
		var _g1_index;
		var _g1_i;
		var _g1_endIndex;
		_g1_i = 0;
		_g1_string = this1;
		_g1_index = 0;
		_g1_endIndex = this1.length;
		while(_g1_index < _g1_endIndex) {
			_g1_i = _g1_index;
			var this2 = _g1_string;
			var this3 = this2;
			var c = this3.charCodeAt(_g1_index);
			_g1_index += !(55296 <= c && c <= 56319) ? 1 : 2;
			var i = _g1_i;
			var this4 = this1;
			var this5 = this4;
			var this6 = this5;
			var c1 = this6.charCodeAt(i);
			var this7 = HxOverrides.substr(this6,i,!(55296 <= c1 && c1 <= 56319) ? 1 : 2);
			var this8 = this7;
			_g.push(this8);
		}
		return _g;
	} else {
		return this1.split(delimiter);
	}
};
lime_text__$UTF8String_UTF8String_$Impl_$.substr = function(this1,pos,len) {
	return HxOverrides.substr(this1,pos,len);
};
lime_text__$UTF8String_UTF8String_$Impl_$.substring = function(this1,startIndex,endIndex) {
	var si;
	if(startIndex < 0) {
		si = 0;
	} else {
		var this2 = this1;
		var this3 = this2;
		var this4 = this3;
		if(startIndex >= 0) {
			var index = 0;
			var len = this4.length;
			var i = 0;
			while(i < startIndex && index < len) {
				var c = this4.charCodeAt(index);
				index += !(55296 <= c && c <= 56319) ? 1 : 2;
				++i;
			}
			si = index;
		} else {
			var index1 = 0;
			var count = 0;
			while(count < -startIndex && 0 < index1) {
				var c1 = this4.charCodeAt(index1 - 1);
				index1 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
				++count;
			}
			si = index1;
		}
	}
	var ei;
	if(endIndex == null) {
		ei = this1.length;
	} else if(endIndex < 0) {
		ei = 0;
	} else {
		var this5 = this1;
		var this6 = this5;
		var this7 = this6;
		if(endIndex >= 0) {
			var index2 = 0;
			var len1 = this7.length;
			var i1 = 0;
			while(i1 < endIndex && index2 < len1) {
				var c2 = this7.charCodeAt(index2);
				index2 += !(55296 <= c2 && c2 <= 56319) ? 1 : 2;
				++i1;
			}
			ei = index2;
		} else {
			var index3 = 0;
			var count1 = 0;
			while(count1 < -endIndex && 0 < index3) {
				var c3 = this7.charCodeAt(index3 - 1);
				index3 -= !(56320 <= c3 && c3 <= 57343) ? 1 : 2;
				++count1;
			}
			ei = index3;
		}
	}
	return this1.substring(si,ei);
};
lime_text__$UTF8String_UTF8String_$Impl_$.toLowerCase = function(this1) {
	return this1.toLowerCase();
};
lime_text__$UTF8String_UTF8String_$Impl_$.toString = function(this1) {
	return this1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.toUpperCase = function(this1) {
	return this1.toUpperCase();
};
lime_text__$UTF8String_UTF8String_$Impl_$.equals = function(a,b) {
	if(a == null || b == null) {
		return a == b;
	}
	return lime_text_unifill_Unifill.uCompare(a,b) == 0;
};
lime_text__$UTF8String_UTF8String_$Impl_$.lt = function(a,b) {
	if(b == null) {
		return false;
	}
	if(a == null) {
		return true;
	}
	return lime_text_unifill_Unifill.uCompare(a,b) == -1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.gt = function(a,b) {
	if(a == null) {
		return false;
	}
	if(b == null) {
		return true;
	}
	return lime_text_unifill_Unifill.uCompare(a,b) == 1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.lteq = function(a,b) {
	if(b == null) {
		return a == null;
	}
	if(a == null) {
		return true;
	}
	return lime_text_unifill_Unifill.uCompare(a,b) != 1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.gteq = function(a,b) {
	if(a == null) {
		return b == null;
	}
	if(b == null) {
		return true;
	}
	return lime_text_unifill_Unifill.uCompare(a,b) != -1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.plus = function(a,b) {
	if(a == null && b == null) {
		return null;
	}
	if(a == null) {
		return b;
	}
	if(b == null) {
		return a;
	}
	var sb_b = "";
	sb_b += Std.string(lime_text__$UTF8String_UTF8String_$Impl_$.toString(a));
	sb_b += Std.string(lime_text__$UTF8String_UTF8String_$Impl_$.toString(b));
	return sb_b;
};
lime_text__$UTF8String_UTF8String_$Impl_$.fromDynamic = function(value) {
	return Std.string(value);
};
lime_text__$UTF8String_UTF8String_$Impl_$.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
var lime_text__$UTF8String_Utf8Ext = function() { };
$hxClasses["lime.text._UTF8String.Utf8Ext"] = lime_text__$UTF8String_Utf8Ext;
lime_text__$UTF8String_Utf8Ext.__name__ = ["lime","text","_UTF8String","Utf8Ext"];
lime_text__$UTF8String_Utf8Ext.fillUpperToLowerMap = function(map) {
	var i = 0;
	var _g = 0;
	while(_g < 26) {
		var i1 = _g++;
		var v = 97 + i1;
		map.h[65 + i1] = v;
	}
	var _g1 = 0;
	while(_g1 < 23) {
		var i2 = _g1++;
		var v1 = 224 + i2;
		map.h[192 + i2] = v1;
	}
	var _g2 = 0;
	while(_g2 < 7) {
		var i3 = _g2++;
		var v2 = 248 + i3;
		map.h[216 + i3] = v2;
	}
	while(i < 48) {
		var v3 = 257 + i;
		map.h[256 + i] = v3;
		i += 2;
	}
	i = 0;
	map.h[304] = 105;
	while(i < 6) {
		var v4 = 307 + i;
		map.h[306 + i] = v4;
		i += 2;
	}
	i = 0;
	while(i < 16) {
		var v5 = 314 + i;
		map.h[313 + i] = v5;
		i += 2;
	}
	i = 0;
	while(i < 46) {
		var v6 = 331 + i;
		map.h[330 + i] = v6;
		i += 2;
	}
	i = 0;
	map.h[376] = 255;
	while(i < 6) {
		var v7 = 378 + i;
		map.h[377 + i] = v7;
		i += 2;
	}
	i = 0;
	map.h[385] = 595;
	while(i < 4) {
		var v8 = 387 + i;
		map.h[386 + i] = v8;
		i += 2;
	}
	i = 0;
	map.h[390] = 596;
	map.h[391] = 392;
	var _g3 = 0;
	while(_g3 < 2) {
		var i4 = _g3++;
		var v9 = 598 + i4;
		map.h[393 + i4] = v9;
	}
	map.h[395] = 396;
	map.h[398] = 477;
	map.h[399] = 601;
	map.h[400] = 603;
	map.h[401] = 402;
	map.h[403] = 608;
	map.h[404] = 611;
	map.h[406] = 617;
	map.h[407] = 616;
	map.h[408] = 409;
	map.h[412] = 623;
	map.h[413] = 626;
	map.h[415] = 629;
	while(i < 6) {
		var v10 = 417 + i;
		map.h[416 + i] = v10;
		i += 2;
	}
	i = 0;
	map.h[422] = 640;
	map.h[423] = 424;
	map.h[425] = 643;
	map.h[428] = 429;
	map.h[430] = 648;
	map.h[431] = 432;
	var _g4 = 0;
	while(_g4 < 2) {
		var i5 = _g4++;
		var v11 = 650 + i5;
		map.h[433 + i5] = v11;
	}
	while(i < 4) {
		var v12 = 436 + i;
		map.h[435 + i] = v12;
		i += 2;
	}
	i = 0;
	map.h[439] = 658;
	map.h[440] = 441;
	map.h[444] = 445;
	map.h[452] = 454;
	map.h[455] = 457;
	map.h[458] = 460;
	while(i < 16) {
		var v13 = 462 + i;
		map.h[461 + i] = v13;
		i += 2;
	}
	i = 0;
	while(i < 18) {
		var v14 = 479 + i;
		map.h[478 + i] = v14;
		i += 2;
	}
	i = 0;
	map.h[497] = 499;
	map.h[500] = 501;
	map.h[502] = 405;
	map.h[503] = 447;
	while(i < 40) {
		var v15 = 505 + i;
		map.h[504 + i] = v15;
		i += 2;
	}
	i = 0;
	map.h[544] = 414;
	while(i < 18) {
		var v16 = 547 + i;
		map.h[546 + i] = v16;
		i += 2;
	}
	i = 0;
	map.h[570] = 11365;
	map.h[571] = 572;
	map.h[573] = 410;
	map.h[574] = 11366;
	map.h[577] = 578;
	map.h[579] = 384;
	map.h[580] = 649;
	map.h[581] = 652;
	while(i < 10) {
		var v17 = 583 + i;
		map.h[582 + i] = v17;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v18 = 881 + i;
		map.h[880 + i] = v18;
		i += 2;
	}
	i = 0;
	map.h[886] = 887;
	map.h[895] = 1011;
	map.h[902] = 940;
	var _g5 = 0;
	while(_g5 < 3) {
		var i6 = _g5++;
		var v19 = 941 + i6;
		map.h[904 + i6] = v19;
	}
	map.h[908] = 972;
	var _g6 = 0;
	while(_g6 < 2) {
		var i7 = _g6++;
		var v20 = 973 + i7;
		map.h[910 + i7] = v20;
	}
	var _g7 = 0;
	while(_g7 < 17) {
		var i8 = _g7++;
		var v21 = 945 + i8;
		map.h[913 + i8] = v21;
	}
	var _g8 = 0;
	while(_g8 < 9) {
		var i9 = _g8++;
		var v22 = 963 + i9;
		map.h[931 + i9] = v22;
	}
	map.h[975] = 983;
	while(i < 24) {
		var v23 = 985 + i;
		map.h[984 + i] = v23;
		i += 2;
	}
	i = 0;
	map.h[1012] = 952;
	map.h[1015] = 1016;
	map.h[1017] = 1010;
	map.h[1018] = 1019;
	var _g9 = 0;
	while(_g9 < 3) {
		var i10 = _g9++;
		var v24 = 891 + i10;
		map.h[1021 + i10] = v24;
	}
	var _g10 = 0;
	while(_g10 < 16) {
		var i11 = _g10++;
		var v25 = 1104 + i11;
		map.h[1024 + i11] = v25;
	}
	var _g11 = 0;
	while(_g11 < 32) {
		var i12 = _g11++;
		var v26 = 1072 + i12;
		map.h[1040 + i12] = v26;
	}
	while(i < 34) {
		var v27 = 1121 + i;
		map.h[1120 + i] = v27;
		i += 2;
	}
	i = 0;
	while(i < 54) {
		var v28 = 1163 + i;
		map.h[1162 + i] = v28;
		i += 2;
	}
	i = 0;
	map.h[1216] = 1231;
	while(i < 14) {
		var v29 = 1218 + i;
		map.h[1217 + i] = v29;
		i += 2;
	}
	i = 0;
	while(i < 96) {
		var v30 = 1233 + i;
		map.h[1232 + i] = v30;
		i += 2;
	}
	i = 0;
	var _g12 = 0;
	while(_g12 < 38) {
		var i13 = _g12++;
		var v31 = 1377 + i13;
		map.h[1329 + i13] = v31;
	}
	var _g13 = 0;
	while(_g13 < 38) {
		var i14 = _g13++;
		var v32 = 11520 + i14;
		map.h[4256 + i14] = v32;
	}
	map.h[4295] = 11559;
	map.h[4301] = 11565;
	var _g14 = 0;
	while(_g14 < 80) {
		var i15 = _g14++;
		var v33 = 43888 + i15;
		map.h[5024 + i15] = v33;
	}
	var _g15 = 0;
	while(_g15 < 6) {
		var i16 = _g15++;
		var v34 = 5112 + i16;
		map.h[5104 + i16] = v34;
	}
	while(i < 150) {
		var v35 = 7681 + i;
		map.h[7680 + i] = v35;
		i += 2;
	}
	i = 0;
	map.h[7838] = 223;
	while(i < 96) {
		var v36 = 7841 + i;
		map.h[7840 + i] = v36;
		i += 2;
	}
	i = 0;
	var _g16 = 0;
	while(_g16 < 8) {
		var i17 = _g16++;
		var v37 = 7936 + i17;
		map.h[7944 + i17] = v37;
	}
	var _g17 = 0;
	while(_g17 < 6) {
		var i18 = _g17++;
		var v38 = 7952 + i18;
		map.h[7960 + i18] = v38;
	}
	var _g18 = 0;
	while(_g18 < 8) {
		var i19 = _g18++;
		var v39 = 7968 + i19;
		map.h[7976 + i19] = v39;
	}
	var _g19 = 0;
	while(_g19 < 8) {
		var i20 = _g19++;
		var v40 = 7984 + i20;
		map.h[7992 + i20] = v40;
	}
	var _g20 = 0;
	while(_g20 < 6) {
		var i21 = _g20++;
		var v41 = 8000 + i21;
		map.h[8008 + i21] = v41;
	}
	while(i < 8) {
		var v42 = 8017 + i;
		map.h[8025 + i] = v42;
		i += 2;
	}
	i = 0;
	var _g21 = 0;
	while(_g21 < 8) {
		var i22 = _g21++;
		var v43 = 8032 + i22;
		map.h[8040 + i22] = v43;
	}
	var _g22 = 0;
	while(_g22 < 2) {
		var i23 = _g22++;
		var v44 = 8112 + i23;
		map.h[8120 + i23] = v44;
	}
	var _g23 = 0;
	while(_g23 < 2) {
		var i24 = _g23++;
		var v45 = 8048 + i24;
		map.h[8122 + i24] = v45;
	}
	var _g24 = 0;
	while(_g24 < 4) {
		var i25 = _g24++;
		var v46 = 8050 + i25;
		map.h[8136 + i25] = v46;
	}
	var _g25 = 0;
	while(_g25 < 2) {
		var i26 = _g25++;
		var v47 = 8144 + i26;
		map.h[8152 + i26] = v47;
	}
	var _g26 = 0;
	while(_g26 < 2) {
		var i27 = _g26++;
		var v48 = 8054 + i27;
		map.h[8154 + i27] = v48;
	}
	var _g27 = 0;
	while(_g27 < 2) {
		var i28 = _g27++;
		var v49 = 8160 + i28;
		map.h[8168 + i28] = v49;
	}
	var _g28 = 0;
	while(_g28 < 2) {
		var i29 = _g28++;
		var v50 = 8058 + i29;
		map.h[8170 + i29] = v50;
	}
	map.h[8172] = 8165;
	var _g29 = 0;
	while(_g29 < 2) {
		var i30 = _g29++;
		var v51 = 8056 + i30;
		map.h[8184 + i30] = v51;
	}
	var _g30 = 0;
	while(_g30 < 2) {
		var i31 = _g30++;
		var v52 = 8060 + i31;
		map.h[8186 + i31] = v52;
	}
	map.h[8486] = 969;
	map.h[8490] = 107;
	map.h[8491] = 229;
	map.h[8498] = 8526;
	map.h[8579] = 8580;
	var _g31 = 0;
	while(_g31 < 47) {
		var i32 = _g31++;
		var v53 = 11312 + i32;
		map.h[11264 + i32] = v53;
	}
	map.h[11360] = 11361;
	map.h[11362] = 619;
	map.h[11363] = 7549;
	map.h[11364] = 637;
	while(i < 6) {
		var v54 = 11368 + i;
		map.h[11367 + i] = v54;
		i += 2;
	}
	i = 0;
	map.h[11373] = 593;
	map.h[11374] = 625;
	map.h[11375] = 592;
	map.h[11376] = 594;
	map.h[11378] = 11379;
	map.h[11381] = 11382;
	var _g32 = 0;
	while(_g32 < 2) {
		var i33 = _g32++;
		var v55 = 575 + i33;
		map.h[11390 + i33] = v55;
	}
	while(i < 100) {
		var v56 = 11393 + i;
		map.h[11392 + i] = v56;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v57 = 11500 + i;
		map.h[11499 + i] = v57;
		i += 2;
	}
	i = 0;
	map.h[11506] = 11507;
	while(i < 46) {
		var v58 = 42561 + i;
		map.h[42560 + i] = v58;
		i += 2;
	}
	i = 0;
	while(i < 28) {
		var v59 = 42625 + i;
		map.h[42624 + i] = v59;
		i += 2;
	}
	i = 0;
	while(i < 14) {
		var v60 = 42787 + i;
		map.h[42786 + i] = v60;
		i += 2;
	}
	i = 0;
	while(i < 62) {
		var v61 = 42803 + i;
		map.h[42802 + i] = v61;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v62 = 42874 + i;
		map.h[42873 + i] = v62;
		i += 2;
	}
	i = 0;
	map.h[42877] = 7545;
	while(i < 10) {
		var v63 = 42879 + i;
		map.h[42878 + i] = v63;
		i += 2;
	}
	i = 0;
	map.h[42891] = 42892;
	map.h[42893] = 613;
	while(i < 4) {
		var v64 = 42897 + i;
		map.h[42896 + i] = v64;
		i += 2;
	}
	i = 0;
	while(i < 20) {
		var v65 = 42903 + i;
		map.h[42902 + i] = v65;
		i += 2;
	}
	i = 0;
	map.h[42922] = 614;
	map.h[42923] = 604;
	map.h[42924] = 609;
	map.h[42925] = 620;
	map.h[42926] = 618;
	map.h[42928] = 670;
	map.h[42929] = 647;
	map.h[42930] = 669;
	map.h[42931] = 43859;
	while(i < 4) {
		var v66 = 42933 + i;
		map.h[42932 + i] = v66;
		i += 2;
	}
	i = 0;
	var _g33 = 0;
	while(_g33 < 26) {
		var i34 = _g33++;
		var v67 = 65345 + i34;
		map.h[65313 + i34] = v67;
	}
	var _g34 = 0;
	while(_g34 < 40) {
		var i35 = _g34++;
		var v68 = 66600 + i35;
		map.h[66560 + i35] = v68;
	}
	var _g35 = 0;
	while(_g35 < 36) {
		var i36 = _g35++;
		var v69 = 66776 + i36;
		map.h[66736 + i36] = v69;
	}
	var _g36 = 0;
	while(_g36 < 51) {
		var i37 = _g36++;
		var v70 = 68800 + i37;
		map.h[68736 + i37] = v70;
	}
	var _g37 = 0;
	while(_g37 < 32) {
		var i38 = _g37++;
		var v71 = 71872 + i38;
		map.h[71840 + i38] = v71;
	}
	var _g38 = 0;
	while(_g38 < 34) {
		var i39 = _g38++;
		var v72 = 125218 + i39;
		map.h[125184 + i39] = v72;
	}
};
lime_text__$UTF8String_Utf8Ext.fillLowerToUpperMap = function(map) {
	var i = 0;
	var _g = 0;
	while(_g < 26) {
		var i1 = _g++;
		var v = 65 + i1;
		map.h[97 + i1] = v;
	}
	map.h[181] = 924;
	var _g1 = 0;
	while(_g1 < 23) {
		var i2 = _g1++;
		var v1 = 192 + i2;
		map.h[224 + i2] = v1;
	}
	var _g2 = 0;
	while(_g2 < 7) {
		var i3 = _g2++;
		var v2 = 216 + i3;
		map.h[248 + i3] = v2;
	}
	map.h[255] = 376;
	while(i < 48) {
		var v3 = 256 + i;
		map.h[257 + i] = v3;
		i += 2;
	}
	i = 0;
	map.h[305] = 73;
	while(i < 6) {
		var v4 = 306 + i;
		map.h[307 + i] = v4;
		i += 2;
	}
	i = 0;
	while(i < 16) {
		var v5 = 313 + i;
		map.h[314 + i] = v5;
		i += 2;
	}
	i = 0;
	while(i < 46) {
		var v6 = 330 + i;
		map.h[331 + i] = v6;
		i += 2;
	}
	i = 0;
	while(i < 6) {
		var v7 = 377 + i;
		map.h[378 + i] = v7;
		i += 2;
	}
	i = 0;
	map.h[383] = 83;
	map.h[384] = 579;
	while(i < 4) {
		var v8 = 386 + i;
		map.h[387 + i] = v8;
		i += 2;
	}
	i = 0;
	map.h[392] = 391;
	map.h[396] = 395;
	map.h[402] = 401;
	map.h[405] = 502;
	map.h[409] = 408;
	map.h[410] = 573;
	map.h[414] = 544;
	while(i < 6) {
		var v9 = 416 + i;
		map.h[417 + i] = v9;
		i += 2;
	}
	i = 0;
	map.h[424] = 423;
	map.h[429] = 428;
	map.h[432] = 431;
	while(i < 4) {
		var v10 = 435 + i;
		map.h[436 + i] = v10;
		i += 2;
	}
	i = 0;
	map.h[441] = 440;
	map.h[445] = 444;
	map.h[447] = 503;
	map.h[454] = 452;
	map.h[457] = 455;
	map.h[460] = 458;
	while(i < 16) {
		var v11 = 461 + i;
		map.h[462 + i] = v11;
		i += 2;
	}
	i = 0;
	map.h[477] = 398;
	while(i < 18) {
		var v12 = 478 + i;
		map.h[479 + i] = v12;
		i += 2;
	}
	i = 0;
	map.h[496] = 74;
	map.h[499] = 497;
	map.h[501] = 500;
	while(i < 40) {
		var v13 = 504 + i;
		map.h[505 + i] = v13;
		i += 2;
	}
	i = 0;
	while(i < 18) {
		var v14 = 546 + i;
		map.h[547 + i] = v14;
		i += 2;
	}
	i = 0;
	map.h[572] = 571;
	var _g3 = 0;
	while(_g3 < 2) {
		var i4 = _g3++;
		var v15 = 11390 + i4;
		map.h[575 + i4] = v15;
	}
	map.h[578] = 577;
	while(i < 10) {
		var v16 = 582 + i;
		map.h[583 + i] = v16;
		i += 2;
	}
	i = 0;
	map.h[592] = 11375;
	map.h[593] = 11373;
	map.h[594] = 11376;
	map.h[595] = 385;
	map.h[596] = 390;
	var _g4 = 0;
	while(_g4 < 2) {
		var i5 = _g4++;
		var v17 = 393 + i5;
		map.h[598 + i5] = v17;
	}
	map.h[601] = 399;
	map.h[603] = 400;
	map.h[604] = 42923;
	map.h[608] = 403;
	map.h[609] = 42924;
	map.h[611] = 404;
	map.h[613] = 42893;
	map.h[614] = 42922;
	map.h[616] = 407;
	map.h[617] = 406;
	map.h[618] = 42926;
	map.h[619] = 11362;
	map.h[620] = 42925;
	map.h[623] = 412;
	map.h[625] = 11374;
	map.h[626] = 413;
	map.h[629] = 415;
	map.h[637] = 11364;
	map.h[640] = 422;
	map.h[643] = 425;
	map.h[647] = 42929;
	map.h[648] = 430;
	map.h[649] = 580;
	var _g5 = 0;
	while(_g5 < 2) {
		var i6 = _g5++;
		var v18 = 433 + i6;
		map.h[650 + i6] = v18;
	}
	map.h[652] = 581;
	map.h[658] = 439;
	map.h[669] = 42930;
	map.h[670] = 42928;
	while(i < 4) {
		var v19 = 880 + i;
		map.h[881 + i] = v19;
		i += 2;
	}
	i = 0;
	map.h[887] = 886;
	var _g6 = 0;
	while(_g6 < 3) {
		var i7 = _g6++;
		var v20 = 1021 + i7;
		map.h[891 + i7] = v20;
	}
	map.h[912] = 938;
	map.h[940] = 902;
	var _g7 = 0;
	while(_g7 < 3) {
		var i8 = _g7++;
		var v21 = 904 + i8;
		map.h[941 + i8] = v21;
	}
	map.h[944] = 939;
	var _g8 = 0;
	while(_g8 < 17) {
		var i9 = _g8++;
		var v22 = 913 + i9;
		map.h[945 + i9] = v22;
	}
	map.h[962] = 931;
	var _g9 = 0;
	while(_g9 < 9) {
		var i10 = _g9++;
		var v23 = 931 + i10;
		map.h[963 + i10] = v23;
	}
	map.h[972] = 908;
	var _g10 = 0;
	while(_g10 < 2) {
		var i11 = _g10++;
		var v24 = 910 + i11;
		map.h[973 + i11] = v24;
	}
	map.h[976] = 914;
	map.h[977] = 920;
	map.h[981] = 934;
	map.h[982] = 928;
	map.h[983] = 975;
	while(i < 24) {
		var v25 = 984 + i;
		map.h[985 + i] = v25;
		i += 2;
	}
	i = 0;
	map.h[1008] = 922;
	map.h[1009] = 929;
	map.h[1010] = 1017;
	map.h[1011] = 895;
	map.h[1013] = 917;
	map.h[1016] = 1015;
	map.h[1019] = 1018;
	var _g11 = 0;
	while(_g11 < 32) {
		var i12 = _g11++;
		var v26 = 1040 + i12;
		map.h[1072 + i12] = v26;
	}
	var _g12 = 0;
	while(_g12 < 16) {
		var i13 = _g12++;
		var v27 = 1024 + i13;
		map.h[1104 + i13] = v27;
	}
	while(i < 34) {
		var v28 = 1120 + i;
		map.h[1121 + i] = v28;
		i += 2;
	}
	i = 0;
	while(i < 54) {
		var v29 = 1162 + i;
		map.h[1163 + i] = v29;
		i += 2;
	}
	i = 0;
	while(i < 14) {
		var v30 = 1217 + i;
		map.h[1218 + i] = v30;
		i += 2;
	}
	i = 0;
	map.h[1231] = 1216;
	while(i < 96) {
		var v31 = 1232 + i;
		map.h[1233 + i] = v31;
		i += 2;
	}
	i = 0;
	var _g13 = 0;
	while(_g13 < 38) {
		var i14 = _g13++;
		var v32 = 1329 + i14;
		map.h[1377 + i14] = v32;
	}
	var _g14 = 0;
	while(_g14 < 6) {
		var i15 = _g14++;
		var v33 = 5104 + i15;
		map.h[5112 + i15] = v33;
	}
	map.h[7296] = 1042;
	map.h[7297] = 1044;
	map.h[7298] = 1054;
	var _g15 = 0;
	while(_g15 < 2) {
		var i16 = _g15++;
		var v34 = 1057 + i16;
		map.h[7299 + i16] = v34;
	}
	map.h[7301] = 1058;
	map.h[7302] = 1066;
	map.h[7303] = 1122;
	map.h[7304] = 42570;
	map.h[7545] = 42877;
	map.h[7549] = 11363;
	while(i < 150) {
		var v35 = 7680 + i;
		map.h[7681 + i] = v35;
		i += 2;
	}
	i = 0;
	map.h[7830] = 72;
	map.h[7831] = 84;
	map.h[7832] = 87;
	map.h[7833] = 89;
	map.h[7835] = 7776;
	while(i < 96) {
		var v36 = 7840 + i;
		map.h[7841 + i] = v36;
		i += 2;
	}
	i = 0;
	var _g16 = 0;
	while(_g16 < 8) {
		var i17 = _g16++;
		var v37 = 7944 + i17;
		map.h[7936 + i17] = v37;
	}
	var _g17 = 0;
	while(_g17 < 6) {
		var i18 = _g17++;
		var v38 = 7960 + i18;
		map.h[7952 + i18] = v38;
	}
	var _g18 = 0;
	while(_g18 < 8) {
		var i19 = _g18++;
		var v39 = 7976 + i19;
		map.h[7968 + i19] = v39;
	}
	var _g19 = 0;
	while(_g19 < 8) {
		var i20 = _g19++;
		var v40 = 7992 + i20;
		map.h[7984 + i20] = v40;
	}
	var _g20 = 0;
	while(_g20 < 6) {
		var i21 = _g20++;
		var v41 = 8008 + i21;
		map.h[8000 + i21] = v41;
	}
	map.h[8016] = 933;
	map.h[8017] = 8025;
	map.h[8018] = 933;
	map.h[8019] = 8027;
	map.h[8020] = 933;
	map.h[8021] = 8029;
	map.h[8022] = 933;
	map.h[8023] = 8031;
	var _g21 = 0;
	while(_g21 < 8) {
		var i22 = _g21++;
		var v42 = 8040 + i22;
		map.h[8032 + i22] = v42;
	}
	var _g22 = 0;
	while(_g22 < 2) {
		var i23 = _g22++;
		var v43 = 8122 + i23;
		map.h[8048 + i23] = v43;
	}
	var _g23 = 0;
	while(_g23 < 4) {
		var i24 = _g23++;
		var v44 = 8136 + i24;
		map.h[8050 + i24] = v44;
	}
	var _g24 = 0;
	while(_g24 < 2) {
		var i25 = _g24++;
		var v45 = 8154 + i25;
		map.h[8054 + i25] = v45;
	}
	var _g25 = 0;
	while(_g25 < 2) {
		var i26 = _g25++;
		var v46 = 8184 + i26;
		map.h[8056 + i26] = v46;
	}
	var _g26 = 0;
	while(_g26 < 2) {
		var i27 = _g26++;
		var v47 = 8170 + i27;
		map.h[8058 + i27] = v47;
	}
	var _g27 = 0;
	while(_g27 < 2) {
		var i28 = _g27++;
		var v48 = 8186 + i28;
		map.h[8060 + i28] = v48;
	}
	var _g28 = 0;
	while(_g28 < 8) {
		var i29 = _g28++;
		var v49 = 8072 + i29;
		map.h[8064 + i29] = v49;
	}
	var _g29 = 0;
	while(_g29 < 8) {
		var i30 = _g29++;
		var v50 = 8088 + i30;
		map.h[8080 + i30] = v50;
	}
	var _g30 = 0;
	while(_g30 < 8) {
		var i31 = _g30++;
		var v51 = 8104 + i31;
		map.h[8096 + i31] = v51;
	}
	var _g31 = 0;
	while(_g31 < 3) {
		var i32 = _g31++;
		var v52 = 8120 + i32;
		map.h[8112 + i32] = v52;
	}
	map.h[8115] = 8124;
	map.h[8116] = 902;
	map.h[8118] = 913;
	map.h[8119] = 913;
	map.h[8126] = 921;
	map.h[8130] = 8138;
	map.h[8131] = 8140;
	map.h[8132] = 905;
	map.h[8134] = 919;
	map.h[8135] = 919;
	var _g32 = 0;
	while(_g32 < 2) {
		var i33 = _g32++;
		var v53 = 8152 + i33;
		map.h[8144 + i33] = v53;
	}
	map.h[8146] = 938;
	map.h[8147] = 938;
	map.h[8150] = 921;
	map.h[8151] = 938;
	var _g33 = 0;
	while(_g33 < 2) {
		var i34 = _g33++;
		var v54 = 8168 + i34;
		map.h[8160 + i34] = v54;
	}
	map.h[8162] = 939;
	map.h[8163] = 939;
	map.h[8164] = 929;
	map.h[8165] = 8172;
	map.h[8166] = 933;
	map.h[8167] = 939;
	map.h[8178] = 8186;
	map.h[8179] = 8188;
	map.h[8180] = 911;
	map.h[8182] = 937;
	map.h[8183] = 937;
	map.h[8526] = 8498;
	map.h[8580] = 8579;
	var _g34 = 0;
	while(_g34 < 47) {
		var i35 = _g34++;
		var v55 = 11264 + i35;
		map.h[11312 + i35] = v55;
	}
	map.h[11361] = 11360;
	map.h[11365] = 570;
	map.h[11366] = 574;
	while(i < 6) {
		var v56 = 11367 + i;
		map.h[11368 + i] = v56;
		i += 2;
	}
	i = 0;
	map.h[11379] = 11378;
	map.h[11382] = 11381;
	while(i < 100) {
		var v57 = 11392 + i;
		map.h[11393 + i] = v57;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v58 = 11499 + i;
		map.h[11500 + i] = v58;
		i += 2;
	}
	i = 0;
	map.h[11507] = 11506;
	var _g35 = 0;
	while(_g35 < 38) {
		var i36 = _g35++;
		var v59 = 4256 + i36;
		map.h[11520 + i36] = v59;
	}
	map.h[11559] = 4295;
	map.h[11565] = 4301;
	while(i < 46) {
		var v60 = 42560 + i;
		map.h[42561 + i] = v60;
		i += 2;
	}
	i = 0;
	while(i < 28) {
		var v61 = 42624 + i;
		map.h[42625 + i] = v61;
		i += 2;
	}
	i = 0;
	while(i < 14) {
		var v62 = 42786 + i;
		map.h[42787 + i] = v62;
		i += 2;
	}
	i = 0;
	while(i < 62) {
		var v63 = 42802 + i;
		map.h[42803 + i] = v63;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v64 = 42873 + i;
		map.h[42874 + i] = v64;
		i += 2;
	}
	i = 0;
	while(i < 10) {
		var v65 = 42878 + i;
		map.h[42879 + i] = v65;
		i += 2;
	}
	i = 0;
	map.h[42892] = 42891;
	while(i < 4) {
		var v66 = 42896 + i;
		map.h[42897 + i] = v66;
		i += 2;
	}
	i = 0;
	while(i < 20) {
		var v67 = 42902 + i;
		map.h[42903 + i] = v67;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v68 = 42932 + i;
		map.h[42933 + i] = v68;
		i += 2;
	}
	i = 0;
	map.h[43859] = 42931;
	var _g36 = 0;
	while(_g36 < 80) {
		var i37 = _g36++;
		var v69 = 5024 + i37;
		map.h[43888 + i37] = v69;
	}
	var _g37 = 0;
	while(_g37 < 26) {
		var i38 = _g37++;
		var v70 = 65313 + i38;
		map.h[65345 + i38] = v70;
	}
	var _g38 = 0;
	while(_g38 < 40) {
		var i39 = _g38++;
		var v71 = 66560 + i39;
		map.h[66600 + i39] = v71;
	}
	var _g39 = 0;
	while(_g39 < 36) {
		var i40 = _g39++;
		var v72 = 66736 + i40;
		map.h[66776 + i40] = v72;
	}
	var _g40 = 0;
	while(_g40 < 51) {
		var i41 = _g40++;
		var v73 = 68736 + i41;
		map.h[68800 + i41] = v73;
	}
	var _g41 = 0;
	while(_g41 < 32) {
		var i42 = _g41++;
		var v74 = 71840 + i42;
		map.h[71872 + i42] = v74;
	}
	var _g42 = 0;
	while(_g42 < 34) {
		var i43 = _g42++;
		var v75 = 125184 + i43;
		map.h[125218 + i43] = v75;
	}
};
var lime_text_unifill__$CodePoint_CodePoint_$Impl_$ = {};
$hxClasses["lime.text.unifill._CodePoint.CodePoint_Impl_"] = lime_text_unifill__$CodePoint_CodePoint_$Impl_$;
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.__name__ = ["lime","text","unifill","_CodePoint","CodePoint_Impl_"];
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.fromInt = function(code) {
	if(!(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343))) {
		throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodePoint(code));
	}
	var this1 = code;
	return this1;
};
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.cons = function(a,b) {
	var this1;
	if(a <= 65535) {
		var this2 = String.fromCharCode(a);
		var this3 = this2;
		this1 = this3;
	} else {
		var this4 = String.fromCharCode((a >> 10) + 55232) + String.fromCharCode(a & 1023 | 56320);
		var this5 = this4;
		this1 = this5;
	}
	return this1 + b;
};
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.snoc = function(a,b) {
	var this1;
	if(b <= 65535) {
		var this2 = String.fromCharCode(b);
		var this3 = this2;
		this1 = this3;
	} else {
		var this4 = String.fromCharCode((b >> 10) + 55232) + String.fromCharCode(b & 1023 | 56320);
		var this5 = this4;
		this1 = this5;
	}
	return a + this1;
};
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.addInt = function(a,b) {
	var code = a + b;
	if(!(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343))) {
		throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodePoint(code));
	}
	var this1 = code;
	return this1;
};
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.sub = function(a,b) {
	return a - b;
};
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.subInt = function(a,b) {
	var code = a - b;
	if(!(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343))) {
		throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodePoint(code));
	}
	var this1 = code;
	return this1;
};
lime_text_unifill__$CodePoint_CodePoint_$Impl_$._new = function(code) {
	var this1 = code;
	return this1;
};
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.toString = function(this1) {
	var this2;
	if(this1 <= 65535) {
		var this3 = String.fromCharCode(this1);
		var this4 = this3;
		this2 = this4;
	} else {
		var this5 = String.fromCharCode((this1 >> 10) + 55232) + String.fromCharCode(this1 & 1023 | 56320);
		var this6 = this5;
		this2 = this6;
	}
	return this2;
};
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.toInt = function(this1) {
	return this1;
};
var lime_text_unifill_CodePointIter = function(s) {
	this.i = 0;
	this.string = s;
	this.index = 0;
	this.endIndex = s.length;
};
$hxClasses["lime.text.unifill.CodePointIter"] = lime_text_unifill_CodePointIter;
lime_text_unifill_CodePointIter.__name__ = ["lime","text","unifill","CodePointIter"];
lime_text_unifill_CodePointIter.prototype = {
	string: null
	,index: null
	,endIndex: null
	,hasNext: function() {
		return this.index < this.endIndex;
	}
	,i: null
	,next: function() {
		this.i = this.index;
		var tmp = this;
		var tmp1 = tmp.index;
		var this1 = this.string;
		var this2 = this1;
		var c = this2.charCodeAt(this.index);
		tmp.index = tmp1 + (!(55296 <= c && c <= 56319) ? 1 : 2);
		var this3 = this.string;
		var this4 = this3;
		return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this4,this.i);
	}
	,__class__: lime_text_unifill_CodePointIter
};
var lime_text_unifill_Exception = function() {
};
$hxClasses["lime.text.unifill.Exception"] = lime_text_unifill_Exception;
lime_text_unifill_Exception.__name__ = ["lime","text","unifill","Exception"];
lime_text_unifill_Exception.prototype = {
	toString: function() {
		throw new js__$Boot_HaxeError(null);
	}
	,__class__: lime_text_unifill_Exception
};
var lime_text_unifill_InvalidCodePoint = function(code) {
	lime_text_unifill_Exception.call(this);
	this.code = code;
};
$hxClasses["lime.text.unifill.InvalidCodePoint"] = lime_text_unifill_InvalidCodePoint;
lime_text_unifill_InvalidCodePoint.__name__ = ["lime","text","unifill","InvalidCodePoint"];
lime_text_unifill_InvalidCodePoint.__super__ = lime_text_unifill_Exception;
lime_text_unifill_InvalidCodePoint.prototype = $extend(lime_text_unifill_Exception.prototype,{
	code: null
	,toString: function() {
		return "InvalidCodePoint(code: " + this.code + ")";
	}
	,__class__: lime_text_unifill_InvalidCodePoint
});
var lime_text_unifill_InvalidCodeUnitSequence = function(index) {
	lime_text_unifill_Exception.call(this);
	this.index = index;
};
$hxClasses["lime.text.unifill.InvalidCodeUnitSequence"] = lime_text_unifill_InvalidCodeUnitSequence;
lime_text_unifill_InvalidCodeUnitSequence.__name__ = ["lime","text","unifill","InvalidCodeUnitSequence"];
lime_text_unifill_InvalidCodeUnitSequence.__super__ = lime_text_unifill_Exception;
lime_text_unifill_InvalidCodeUnitSequence.prototype = $extend(lime_text_unifill_Exception.prototype,{
	index: null
	,toString: function() {
		return "InvalidCodeUnitSequence(index: " + this.index + ")";
	}
	,__class__: lime_text_unifill_InvalidCodeUnitSequence
});
var lime_text_unifill_InternalEncoding = function() { };
$hxClasses["lime.text.unifill.InternalEncoding"] = lime_text_unifill_InternalEncoding;
lime_text_unifill_InternalEncoding.__name__ = ["lime","text","unifill","InternalEncoding"];
lime_text_unifill_InternalEncoding.__properties__ = {get_internalEncoding:"get_internalEncoding"};
lime_text_unifill_InternalEncoding.get_internalEncoding = function() {
	return "UTF-16";
};
lime_text_unifill_InternalEncoding.codeUnitAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	return this2.charCodeAt(index);
};
lime_text_unifill_InternalEncoding.codePointAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this2,index);
};
lime_text_unifill_InternalEncoding.charAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var c = this3.charCodeAt(index);
	var this4 = HxOverrides.substr(this3,index,!(55296 <= c && c <= 56319) ? 1 : 2);
	var this5 = this4;
	return this5;
};
lime_text_unifill_InternalEncoding.codePointCount = function(s,beginIndex,endIndex) {
	var this1 = s;
	var this2 = this1;
	return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this2,beginIndex,endIndex);
};
lime_text_unifill_InternalEncoding.codePointWidthAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	var c = this2.charCodeAt(index);
	if(!(55296 <= c && c <= 56319)) {
		return 1;
	} else {
		return 2;
	}
};
lime_text_unifill_InternalEncoding.codePointWidthBefore = function(s,index) {
	var this1 = s;
	var this2 = this1;
	var c = this2.charCodeAt(index - 1);
	if(!(56320 <= c && c <= 57343)) {
		return 1;
	} else {
		return 2;
	}
};
lime_text_unifill_InternalEncoding.offsetByCodePoints = function(s,index,codePointOffset) {
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	if(codePointOffset >= 0) {
		var index1 = index;
		var len = this3.length;
		var i = 0;
		while(i < codePointOffset && index1 < len) {
			var c = this3.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		return index1;
	} else {
		var index2 = index;
		var count = 0;
		while(count < -codePointOffset && 0 < index2) {
			var c1 = this3.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		return index2;
	}
};
lime_text_unifill_InternalEncoding.backwardOffsetByCodePoints = function(s,index,codePointOffset) {
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var codePointOffset1 = -codePointOffset;
	if(codePointOffset1 >= 0) {
		var index1 = index;
		var len = this3.length;
		var i = 0;
		while(i < codePointOffset1 && index1 < len) {
			var c = this3.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		return index1;
	} else {
		var index2 = index;
		var count = 0;
		while(count < -codePointOffset1 && 0 < index2) {
			var c1 = this3.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		return index2;
	}
};
lime_text_unifill_InternalEncoding.fromCodePoint = function(codePoint) {
	var this1;
	if(codePoint <= 65535) {
		var this2 = String.fromCharCode(codePoint);
		var this3 = this2;
		this1 = this3;
	} else {
		var this4 = String.fromCharCode((codePoint >> 10) + 55232) + String.fromCharCode(codePoint & 1023 | 56320);
		var this5 = this4;
		this1 = this5;
	}
	return this1;
};
lime_text_unifill_InternalEncoding.fromCodePoints = function(codePoints) {
	var this1 = new StringBuf();
	var buf = this1;
	var c = $iterator(codePoints)();
	while(c.hasNext()) {
		var c1 = c.next();
		if(c1 <= 65535) {
			buf.b += String.fromCharCode(c1);
		} else {
			buf.b += String.fromCharCode((c1 >> 10) + 55232);
			buf.b += String.fromCharCode(c1 & 1023 | 56320);
		}
	}
	var this2 = buf.b;
	var this3 = this2;
	return this3;
};
lime_text_unifill_InternalEncoding.validate = function(s) {
	var this1 = s;
	var this2 = this1;
	lime_text_unifill__$Utf16_Utf16_$Impl_$.validate(this2);
};
lime_text_unifill_InternalEncoding.isValidString = function(s) {
	try {
		var this1 = s;
		var this2 = this1;
		lime_text_unifill__$Utf16_Utf16_$Impl_$.validate(this2);
		return true;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,lime_text_unifill_InvalidCodeUnitSequence) ) {
			return false;
		} else throw(e);
	}
};
lime_text_unifill_InternalEncoding.encodeWith = function(f,c) {
	if(c <= 65535) {
		f(c);
	} else {
		f((c >> 10) + 55232);
		f(c & 1023 | 56320);
	}
};
var lime_text_unifill_InternalEncodingIter = function(s,beginIndex,endIndex) {
	this.i = 0;
	this.string = s;
	this.index = beginIndex;
	this.endIndex = endIndex;
};
$hxClasses["lime.text.unifill.InternalEncodingIter"] = lime_text_unifill_InternalEncodingIter;
lime_text_unifill_InternalEncodingIter.__name__ = ["lime","text","unifill","InternalEncodingIter"];
lime_text_unifill_InternalEncodingIter.prototype = {
	string: null
	,index: null
	,endIndex: null
	,hasNext: function() {
		return this.index < this.endIndex;
	}
	,i: null
	,next: function() {
		this.i = this.index;
		var tmp = this;
		var tmp1 = tmp.index;
		var this1 = this.string;
		var this2 = this1;
		var c = this2.charCodeAt(this.index);
		tmp.index = tmp1 + (!(55296 <= c && c <= 56319) ? 1 : 2);
		return this.i;
	}
	,__class__: lime_text_unifill_InternalEncodingIter
};
var lime_text_unifill_Unicode = function() { };
$hxClasses["lime.text.unifill.Unicode"] = lime_text_unifill_Unicode;
lime_text_unifill_Unicode.__name__ = ["lime","text","unifill","Unicode"];
lime_text_unifill_Unicode.decodeSurrogate = function(hi,lo) {
	return hi - 55232 << 10 | lo & 1023;
};
lime_text_unifill_Unicode.encodeHighSurrogate = function(c) {
	return (c >> 10) + 55232;
};
lime_text_unifill_Unicode.encodeLowSurrogate = function(c) {
	return c & 1023 | 56320;
};
lime_text_unifill_Unicode.isScalar = function(code) {
	if(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319)) {
		return !(56320 <= code && code <= 57343);
	} else {
		return false;
	}
};
lime_text_unifill_Unicode.isHighSurrogate = function(code) {
	if(55296 <= code) {
		return code <= 56319;
	} else {
		return false;
	}
};
lime_text_unifill_Unicode.isLowSurrogate = function(code) {
	if(56320 <= code) {
		return code <= 57343;
	} else {
		return false;
	}
};
var lime_text_unifill_Unifill = function() { };
$hxClasses["lime.text.unifill.Unifill"] = lime_text_unifill_Unifill;
lime_text_unifill_Unifill.__name__ = ["lime","text","unifill","Unifill"];
lime_text_unifill_Unifill.uLength = function(s) {
	var this1 = s;
	var this2 = this1;
	return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this2,0,s.length);
};
lime_text_unifill_Unifill.uCharAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var i;
	if(index >= 0) {
		var index1 = 0;
		var len = this3.length;
		var i1 = 0;
		while(i1 < index && index1 < len) {
			var c = this3.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i1;
		}
		i = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -index && 0 < index2) {
			var c1 = this3.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		i = index2;
	}
	var this4 = s;
	var this5 = this4;
	var this6 = this5;
	var c2 = this6.charCodeAt(i);
	var this7 = HxOverrides.substr(this6,i,!(55296 <= c2 && c2 <= 56319) ? 1 : 2);
	var this8 = this7;
	return this8;
};
lime_text_unifill_Unifill.uCharCodeAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var i;
	if(index >= 0) {
		var index1 = 0;
		var len = this3.length;
		var i1 = 0;
		while(i1 < index && index1 < len) {
			var c = this3.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i1;
		}
		i = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -index && 0 < index2) {
			var c1 = this3.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		i = index2;
	}
	var this4 = s;
	var this5 = this4;
	return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this5,i);
};
lime_text_unifill_Unifill.uCodePointAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var i;
	if(index >= 0) {
		var index1 = 0;
		var len = this3.length;
		var i1 = 0;
		while(i1 < index && index1 < len) {
			var c = this3.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i1;
		}
		i = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -index && 0 < index2) {
			var c1 = this3.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		i = index2;
	}
	var this4 = s;
	var this5 = this4;
	return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this5,i);
};
lime_text_unifill_Unifill.uIndexOf = function(s,value,startIndex) {
	if(startIndex == null) {
		startIndex = 0;
	}
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var index;
	if(startIndex >= 0) {
		var index1 = 0;
		var len = this3.length;
		var i = 0;
		while(i < startIndex && index1 < len) {
			var c = this3.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		index = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -startIndex && 0 < index2) {
			var c1 = this3.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		index = index2;
	}
	var index3 = s.indexOf(value,index);
	if(index3 >= 0) {
		var this4 = s;
		var this5 = this4;
		return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this5,0,index3);
	} else {
		return -1;
	}
};
lime_text_unifill_Unifill.uLastIndexOf = function(s,value,startIndex) {
	if(startIndex == null) {
		startIndex = s.length - 1;
	}
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var index;
	if(startIndex >= 0) {
		var index1 = 0;
		var len = this3.length;
		var i = 0;
		while(i < startIndex && index1 < len) {
			var c = this3.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		index = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -startIndex && 0 < index2) {
			var c1 = this3.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		index = index2;
	}
	var index3 = s.lastIndexOf(value,index);
	if(index3 >= 0) {
		var this4 = s;
		var this5 = this4;
		return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this5,0,index3);
	} else {
		return -1;
	}
};
lime_text_unifill_Unifill.uSplit = function(s,delimiter) {
	if(delimiter.length == 0) {
		var _g = [];
		var _g1_string;
		var _g1_index;
		var _g1_i;
		var _g1_endIndex;
		_g1_i = 0;
		_g1_string = s;
		_g1_index = 0;
		_g1_endIndex = s.length;
		while(_g1_index < _g1_endIndex) {
			_g1_i = _g1_index;
			var this1 = _g1_string;
			var this2 = this1;
			var c = this2.charCodeAt(_g1_index);
			_g1_index += !(55296 <= c && c <= 56319) ? 1 : 2;
			var i = _g1_i;
			var this3 = s;
			var this4 = this3;
			var this5 = this4;
			var c1 = this5.charCodeAt(i);
			var this6 = HxOverrides.substr(this5,i,!(55296 <= c1 && c1 <= 56319) ? 1 : 2);
			var this7 = this6;
			_g.push(this7);
		}
		return _g;
	} else {
		return s.split(delimiter);
	}
};
lime_text_unifill_Unifill.uSubstr = function(s,startIndex,length) {
	var index = startIndex >= 0 ? 0 : s.length;
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var si;
	if(startIndex >= 0) {
		var index1 = index;
		var len = this3.length;
		var i = 0;
		while(i < startIndex && index1 < len) {
			var c = this3.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		si = index1;
	} else {
		var index2 = index;
		var count = 0;
		while(count < -startIndex && 0 < index2) {
			var c1 = this3.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		si = index2;
	}
	var ei;
	if(length == null) {
		ei = s.length;
	} else if(length < 0) {
		ei = si;
	} else {
		var this4 = s;
		var this5 = this4;
		var this6 = this5;
		if(length >= 0) {
			var index3 = si;
			var len1 = this6.length;
			var i1 = 0;
			while(i1 < length && index3 < len1) {
				var c2 = this6.charCodeAt(index3);
				index3 += !(55296 <= c2 && c2 <= 56319) ? 1 : 2;
				++i1;
			}
			ei = index3;
		} else {
			var index4 = si;
			var count1 = 0;
			while(count1 < -length && 0 < index4) {
				var c3 = this6.charCodeAt(index4 - 1);
				index4 -= !(56320 <= c3 && c3 <= 57343) ? 1 : 2;
				++count1;
			}
			ei = index4;
		}
	}
	return s.substring(si,ei);
};
lime_text_unifill_Unifill.uSubstring = function(s,startIndex,endIndex) {
	var si;
	if(startIndex < 0) {
		si = 0;
	} else {
		var this1 = s;
		var this2 = this1;
		var this3 = this2;
		if(startIndex >= 0) {
			var index = 0;
			var len = this3.length;
			var i = 0;
			while(i < startIndex && index < len) {
				var c = this3.charCodeAt(index);
				index += !(55296 <= c && c <= 56319) ? 1 : 2;
				++i;
			}
			si = index;
		} else {
			var index1 = 0;
			var count = 0;
			while(count < -startIndex && 0 < index1) {
				var c1 = this3.charCodeAt(index1 - 1);
				index1 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
				++count;
			}
			si = index1;
		}
	}
	var ei;
	if(endIndex == null) {
		ei = s.length;
	} else if(endIndex < 0) {
		ei = 0;
	} else {
		var this4 = s;
		var this5 = this4;
		var this6 = this5;
		if(endIndex >= 0) {
			var index2 = 0;
			var len1 = this6.length;
			var i1 = 0;
			while(i1 < endIndex && index2 < len1) {
				var c2 = this6.charCodeAt(index2);
				index2 += !(55296 <= c2 && c2 <= 56319) ? 1 : 2;
				++i1;
			}
			ei = index2;
		} else {
			var index3 = 0;
			var count1 = 0;
			while(count1 < -endIndex && 0 < index3) {
				var c3 = this6.charCodeAt(index3 - 1);
				index3 -= !(56320 <= c3 && c3 <= 57343) ? 1 : 2;
				++count1;
			}
			ei = index3;
		}
	}
	return s.substring(si,ei);
};
lime_text_unifill_Unifill.uIterator = function(s) {
	return new lime_text_unifill_CodePointIter(s);
};
lime_text_unifill_Unifill.uCompare = function(a,b) {
	var aiter_string;
	var aiter_index;
	var aiter_i;
	var aiter_endIndex;
	aiter_i = 0;
	aiter_string = a;
	aiter_index = 0;
	aiter_endIndex = a.length;
	var biter_string;
	var biter_index;
	var biter_i;
	var biter_endIndex;
	biter_i = 0;
	biter_string = b;
	biter_index = 0;
	biter_endIndex = b.length;
	while(aiter_index < aiter_endIndex && biter_index < biter_endIndex) {
		aiter_i = aiter_index;
		var this1 = aiter_string;
		var this2 = this1;
		var c = this2.charCodeAt(aiter_index);
		aiter_index += !(55296 <= c && c <= 56319) ? 1 : 2;
		var this3 = a;
		var this4 = this3;
		var acode = lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this4,aiter_i);
		biter_i = biter_index;
		var this5 = biter_string;
		var this6 = this5;
		var c1 = this6.charCodeAt(biter_index);
		biter_index += !(55296 <= c1 && c1 <= 56319) ? 1 : 2;
		var this7 = b;
		var this8 = this7;
		var bcode = lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this8,biter_i);
		if(acode < bcode) {
			return -1;
		}
		if(acode > bcode) {
			return 1;
		}
	}
	if(biter_index < biter_endIndex) {
		return -1;
	}
	if(aiter_index < aiter_endIndex) {
		return 1;
	}
	return 0;
};
lime_text_unifill_Unifill.uToString = function(codePoints) {
	var this1 = new StringBuf();
	var buf = this1;
	var c = $iterator(codePoints)();
	while(c.hasNext()) {
		var c1 = c.next();
		if(c1 <= 65535) {
			buf.b += String.fromCharCode(c1);
		} else {
			buf.b += String.fromCharCode((c1 >> 10) + 55232);
			buf.b += String.fromCharCode(c1 & 1023 | 56320);
		}
	}
	var this2 = buf.b;
	var this3 = this2;
	return this3;
};
lime_text_unifill_Unifill.uAddChar = function(sb,c) {
	var c1 = c;
	if(c1 <= 65535) {
		sb.b += String.fromCharCode(c1);
	} else {
		sb.b += String.fromCharCode((c1 >> 10) + 55232);
		sb.b += String.fromCharCode(c1 & 1023 | 56320);
	}
};
var lime_text_unifill__$Utf16_Utf16_$Impl_$ = {};
$hxClasses["lime.text.unifill._Utf16.Utf16_Impl_"] = lime_text_unifill__$Utf16_Utf16_$Impl_$;
lime_text_unifill__$Utf16_Utf16_$Impl_$.__name__ = ["lime","text","unifill","_Utf16","Utf16_Impl_"];
lime_text_unifill__$Utf16_Utf16_$Impl_$.__properties__ = {get_length:"get_length"};
lime_text_unifill__$Utf16_Utf16_$Impl_$.fromCodePoint = function(codePoint) {
	if(codePoint <= 65535) {
		var this1 = String.fromCharCode(codePoint);
		var this2 = this1;
		return this2;
	} else {
		var this3 = String.fromCharCode((codePoint >> 10) + 55232) + String.fromCharCode(codePoint & 1023 | 56320);
		var this4 = this3;
		return this4;
	}
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.fromCodePoints = function(codePoints) {
	var this1 = new StringBuf();
	var buf = this1;
	var c = $iterator(codePoints)();
	while(c.hasNext()) {
		var c1 = c.next();
		if(c1 <= 65535) {
			buf.b += String.fromCharCode(c1);
		} else {
			buf.b += String.fromCharCode((c1 >> 10) + 55232);
			buf.b += String.fromCharCode(c1 & 1023 | 56320);
		}
	}
	var this2 = buf.b;
	var this3 = this2;
	return this3;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.fromString = function(s) {
	var this1 = s;
	var this2 = this1;
	return this2;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.fromArray = function(a) {
	var buf_b = "";
	var _g = 0;
	while(_g < a.length) {
		var x = a[_g];
		++_g;
		buf_b += String.fromCharCode(x);
	}
	var this1 = buf_b;
	var this2 = this1;
	return this2;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.encodeWith = function(f,c) {
	if(c <= 65535) {
		f(c);
	} else {
		f((c >> 10) + 55232);
		f(c & 1023 | 56320);
	}
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.codeUnitAt = function(this1,index) {
	return this1.charCodeAt(index);
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt = function(this1,index) {
	return lime_text_unifill__$Utf16_Utf16Impl.decode_code_point(this1.length,function(i) {
		return this1.charCodeAt(i);
	},index);
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.charAt = function(this1,index) {
	var c = this1.charCodeAt(index);
	var this2 = HxOverrides.substr(this1,index,!(55296 <= c && c <= 56319) ? 1 : 2);
	var this3 = this2;
	return this3;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount = function(this1,beginIndex,endIndex) {
	var index = beginIndex;
	var i = 0;
	while(index < endIndex) {
		var c = this1.charCodeAt(index);
		index += !(55296 <= c && c <= 56319) ? 1 : 2;
		++i;
	}
	return i;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointWidthAt = function(this1,index) {
	var c = this1.charCodeAt(index);
	if(!(55296 <= c && c <= 56319)) {
		return 1;
	} else {
		return 2;
	}
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointWidthBefore = function(this1,index) {
	var c = this1.charCodeAt(index - 1);
	if(!(56320 <= c && c <= 57343)) {
		return 1;
	} else {
		return 2;
	}
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.offsetByCodePoints = function(this1,index,codePointOffset) {
	if(codePointOffset >= 0) {
		var index1 = index;
		var len = this1.length;
		var i = 0;
		while(i < codePointOffset && index1 < len) {
			var c = this1.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		return index1;
	} else {
		var index2 = index;
		var count = 0;
		while(count < -codePointOffset && 0 < index2) {
			var c1 = this1.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		return index2;
	}
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.substr = function(this1,index,len) {
	var this2 = HxOverrides.substr(this1,index,len);
	var this3 = this2;
	return this3;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.validate = function(this1) {
	var len = this1.length;
	var accessor = function(i) {
		return this1.charCodeAt(i);
	};
	var i1 = 0;
	while(i1 < len) {
		lime_text_unifill__$Utf16_Utf16Impl.decode_code_point(len,accessor,i1);
		var c = this1.charCodeAt(i1);
		i1 += !(55296 <= c && c <= 56319) ? 1 : 2;
	}
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.toString = function(this1) {
	return this1;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.toArray = function(this1) {
	var i = 0;
	var len = this1.length;
	var _g = [];
	while(i < len) _g.push(this1.charCodeAt(i++));
	return _g;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$._new = function(s) {
	var this1 = s;
	return this1;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.get_length = function(this1) {
	return this1.length;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.forward_offset_by_code_points = function(this1,index,codePointOffset) {
	var len = this1.length;
	var i = 0;
	while(i < codePointOffset && index < len) {
		var c = this1.charCodeAt(index);
		index += !(55296 <= c && c <= 56319) ? 1 : 2;
		++i;
	}
	return index;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.backward_offset_by_code_points = function(this1,index,codePointOffset) {
	var count = 0;
	while(count < codePointOffset && 0 < index) {
		var c = this1.charCodeAt(index - 1);
		index -= !(56320 <= c && c <= 57343) ? 1 : 2;
		++count;
	}
	return index;
};
var lime_text_unifill__$Utf16_Utf16Impl = function() { };
$hxClasses["lime.text.unifill._Utf16.Utf16Impl"] = lime_text_unifill__$Utf16_Utf16Impl;
lime_text_unifill__$Utf16_Utf16Impl.__name__ = ["lime","text","unifill","_Utf16","Utf16Impl"];
lime_text_unifill__$Utf16_Utf16Impl.code_point_width = function(c) {
	if(!(55296 <= c && c <= 56319)) {
		return 1;
	} else {
		return 2;
	}
};
lime_text_unifill__$Utf16_Utf16Impl.find_prev_code_point = function(accessor,index) {
	var c = accessor(index - 1);
	if(!(56320 <= c && c <= 57343)) {
		return 1;
	} else {
		return 2;
	}
};
lime_text_unifill__$Utf16_Utf16Impl.encode_code_point = function(addUnit,codePoint) {
	if(codePoint <= 65535) {
		addUnit(codePoint);
	} else {
		addUnit((codePoint >> 10) + 55232);
		addUnit(codePoint & 1023 | 56320);
	}
};
lime_text_unifill__$Utf16_Utf16Impl.decode_code_point = function(len,accessor,index) {
	if(index < 0 || len <= index) {
		throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
	}
	var hi = accessor(index);
	if(55296 <= hi && hi <= 56319) {
		if(index + 1 < 0 || len <= index + 1) {
			throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
		}
		var lo = accessor(index + 1);
		if(56320 <= lo && lo <= 57343) {
			return hi - 55232 << 10 | lo & 1023;
		} else {
			throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
		}
	} else if(56320 <= hi && hi <= 57343) {
		throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
	} else {
		return hi;
	}
};
var lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$ = {};
$hxClasses["lime.text.unifill._Utf16.StringU16Buffer_Impl_"] = lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$;
lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$.__name__ = ["lime","text","unifill","_Utf16","StringU16Buffer_Impl_"];
lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$._new = function() {
	var this1 = new StringBuf();
	return this1;
};
lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$.addUnit = function(this1,unit) {
	this1.b += String.fromCharCode(unit);
};
lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$.getStringU16 = function(this1) {
	var this2 = this1.b;
	return this2;
};
var lime_text_unifill__$Utf16_StringU16_$Impl_$ = {};
$hxClasses["lime.text.unifill._Utf16.StringU16_Impl_"] = lime_text_unifill__$Utf16_StringU16_$Impl_$;
lime_text_unifill__$Utf16_StringU16_$Impl_$.__name__ = ["lime","text","unifill","_Utf16","StringU16_Impl_"];
lime_text_unifill__$Utf16_StringU16_$Impl_$.__properties__ = {get_length:"get_length"};
lime_text_unifill__$Utf16_StringU16_$Impl_$.fromString = function(s) {
	var this1 = s;
	return this1;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.fromCodeUnit = function(u) {
	var this1 = String.fromCharCode(u);
	return this1;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.fromTwoCodeUnits = function(u0,u1) {
	var this1 = String.fromCharCode(u0) + String.fromCharCode(u1);
	return this1;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.ofArray = function(a) {
	var buf_b = "";
	var _g = 0;
	while(_g < a.length) {
		var x = a[_g];
		++_g;
		buf_b += String.fromCharCode(x);
	}
	var this1 = buf_b;
	return this1;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.fromArray = function(a) {
	var buf_b = "";
	var _g = 0;
	while(_g < a.length) {
		var x = a[_g];
		++_g;
		buf_b += String.fromCharCode(x);
	}
	var this1 = buf_b;
	return this1;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.codeUnitAt = function(this1,index) {
	return this1.charCodeAt(index);
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.substr = function(this1,index,len) {
	var this2 = HxOverrides.substr(this1,index,len);
	return this2;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.toString = function(this1) {
	return this1;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.toArray = function(this1) {
	var i = 0;
	var len = this1.length;
	var _g = [];
	while(i < len) _g.push(this1.charCodeAt(i++));
	return _g;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$._new = function(s) {
	var this1 = s;
	return this1;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.get_length = function(this1) {
	return this1.length;
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_numAxes: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].axes.length;
	}
	,get_numButtons: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
	,__properties__: {get_numTrackballs:"get_numTrackballs",get_numHats:"get_numHats",get_numButtons:"get_numButtons",get_numAxes:"get_numAxes",get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
$hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = ["lime","ui","_JoystickHatPosition","JoystickHatPosition_Impl_"];
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
	return this1 == 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1,value) {
	if(value) {
		this1 = 0;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1,value) {
	if(value) {
		this1 |= 4;
	} else {
		this1 &= 268435455 - 4;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1,value) {
	if(value) {
		this1 |= 8;
	} else {
		this1 &= 268435455 - 8;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1,value) {
	if(value) {
		this1 |= 2;
	} else {
		this1 &= 268435455 - 2;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1,value) {
	if(value) {
		this1 |= 1;
	} else {
		this1 &= 268435455 - 1;
	}
	return value;
};
var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime_ui__$KeyCode_KeyCode_$Impl_$.fromScanCode = function(scanCode) {
	return 0;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.toScanCode = function(keyCode) {
	return 0;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) {
		this1 |= 768;
	} else {
		this1 &= 268435455 - 768;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	if((this1 & 8192) <= 0) {
		return (this1 & 8192) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) {
		this1 |= 8192;
	} else {
		this1 &= 268435455 - 8192;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) {
		this1 |= 192;
	} else {
		this1 &= 268435455 - 192;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) {
		this1 |= 3072;
	} else {
		this1 &= 268435455 - 3072;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	if((this1 & 4096) <= 0) {
		return (this1 & 4096) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) {
		this1 |= 4096;
	} else {
		this1 &= 268435455 - 4096;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) {
		this1 |= 3;
	} else {
		this1 &= 268435455 - 3;
	}
	return value;
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.__properties__ = {set_lock:"set_lock",get_lock:"get_lock",set_cursor:"set_cursor",get_cursor:"get_cursor"};
lime_ui_Mouse.hide = function() {
	lime__$backend_html5_HTML5Mouse.hide();
};
lime_ui_Mouse.show = function() {
	lime__$backend_html5_HTML5Mouse.show();
};
lime_ui_Mouse.warp = function(x,y,window) {
	lime__$backend_html5_HTML5Mouse.warp(x,y,window);
};
lime_ui_Mouse.get_cursor = function() {
	return lime__$backend_html5_HTML5Mouse.get_cursor();
};
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
lime_ui_Mouse.get_lock = function() {
	return lime__$backend_html5_HTML5Mouse.get_lock();
};
lime_ui_Mouse.set_lock = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_lock(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui__$ScanCode_ScanCode_$Impl_$ = {};
$hxClasses["lime.ui._ScanCode.ScanCode_Impl_"] = lime_ui__$ScanCode_ScanCode_$Impl_$;
lime_ui__$ScanCode_ScanCode_$Impl_$.__name__ = ["lime","ui","_ScanCode","ScanCode_Impl_"];
lime_ui__$ScanCode_ScanCode_$Impl_$.fromKeyCode = function(keyCode) {
	return lime_ui__$KeyCode_KeyCode_$Impl_$.toScanCode(keyCode);
};
lime_ui__$ScanCode_ScanCode_$Impl_$.toKeyCode = function(scanCode) {
	return lime_ui__$KeyCode_KeyCode_$Impl_$.fromScanCode(scanCode);
};
lime_ui__$ScanCode_ScanCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(config) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onCreate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) {
			this.__width = config.width;
		}
		if(Object.prototype.hasOwnProperty.call(config,"height")) {
			this.__height = config.height;
		}
		if(Object.prototype.hasOwnProperty.call(config,"x")) {
			this.__x = config.x;
		}
		if(Object.prototype.hasOwnProperty.call(config,"y")) {
			this.__y = config.y;
		}
		if(Object.prototype.hasOwnProperty.call(config,"borderless")) {
			this.__borderless = config.borderless;
		}
		if(Object.prototype.hasOwnProperty.call(config,"resizable")) {
			this.__resizable = config.resizable;
		}
		if(Object.prototype.hasOwnProperty.call(config,"title")) {
			this.__title = config.title;
		}
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	application: null
	,config: null
	,display: null
	,id: null
	,onActivate: null
	,onClose: null
	,onCreate: null
	,onDeactivate: null
	,onDropFile: null
	,onEnter: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onResize: null
	,onRestore: null
	,onTextEdit: null
	,onTextInput: null
	,renderer: null
	,scale: null
	,stage: null
	,backend: null
	,__borderless: null
	,__fullscreen: null
	,__height: null
	,__maximized: null
	,__minimized: null
	,__resizable: null
	,__scale: null
	,__title: null
	,__width: null
	,__x: null
	,__y: null
	,alert: function(message,title) {
		this.backend.alert(message,title);
	}
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		this.backend.create(application);
		if(this.renderer != null) {
			this.renderer.create();
		}
	}
	,focus: function() {
		this.backend.focus();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) {
			return;
		}
		this.backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,get_display: function() {
		return this.backend.getDisplay();
	}
	,get_displayMode: function() {
		return this.backend.getDisplayMode();
	}
	,set_displayMode: function(value) {
		return this.backend.setDisplayMode(value);
	}
	,get_borderless: function() {
		return this.__borderless;
	}
	,set_borderless: function(value) {
		return this.__borderless = this.backend.setBorderless(value);
	}
	,get_enableTextEvents: function() {
		return this.backend.getEnableTextEvents();
	}
	,set_enableTextEvents: function(value) {
		return this.backend.setEnableTextEvents(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_maximized: function() {
		return this.__maximized;
	}
	,set_maximized: function(value) {
		this.__minimized = false;
		return this.__maximized = this.backend.setMaximized(value);
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		this.__maximized = false;
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_resizable: function() {
		return this.__resizable;
	}
	,set_resizable: function(value) {
		this.__resizable = this.backend.setResizable(value);
		return this.__resizable;
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.backend.setTitle(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_title:"set_title",get_title:"get_title",get_scale:"get_scale",set_resizable:"set_resizable",get_resizable:"get_resizable",set_minimized:"set_minimized",get_minimized:"get_minimized",set_maximized:"set_maximized",get_maximized:"get_maximized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_enableTextEvents:"set_enableTextEvents",get_enableTextEvents:"get_enableTextEvents",set_displayMode:"set_displayMode",get_displayMode:"get_displayMode",get_display:"get_display",set_borderless:"set_borderless",get_borderless:"get_borderless"}
};
var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = { __ename__ : ["lime","utils","TAError"], __constructs__ : ["RangeError"] };
lime_utils_TAError.RangeError = ["RangeError",0];
lime_utils_TAError.RangeError.toString = $estr;
lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 725915;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = ["lime","utils","AssetCache"];
lime_utils_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			var _this = this.image;
			if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			var _this1 = this.font;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			var _this2 = this.audio;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				return true;
			}
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			this.font.set(id,asset);
			break;
		case "IMAGE":
			if(!js_Boot.__instanceof(asset,lime_graphics_Image)) {
				throw new js__$Boot_HaxeError("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			}
			this.image.set(id,asset);
			break;
		case "MUSIC":case "SOUND":
			if(!js_Boot.__instanceof(asset,lime_media_AudioBuffer)) {
				throw new js__$Boot_HaxeError("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			}
			this.audio.set(id,asset);
			break;
		default:
			throw new js__$Boot_HaxeError(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.audio.remove(key1);
				}
			}
			var keys1 = this.font.keys();
			var key2 = keys1;
			while(key2.hasNext()) {
				var key3 = key2.next();
				if(StringTools.startsWith(key3,prefix)) {
					this.font.remove(key3);
				}
			}
			var keys2 = this.image.keys();
			var key4 = keys2;
			while(key4.hasNext()) {
				var key5 = key4.next();
				if(StringTools.startsWith(key5,prefix)) {
					this.image.remove(key5);
				}
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.sizes = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.pathGroups = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = ["lime","utils","AssetLibrary"];
lime_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	if(manifest == null) {
		return null;
	}
	var library = null;
	if(manifest.libraryType == null) {
		library = new lime_utils_AssetLibrary();
	} else {
		var libraryClass = Type.resolveClass(manifest.libraryType);
		if(libraryClass != null) {
			library = Type.createInstance(libraryClass,manifest.libraryArgs);
		} else {
			lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "AssetLibrary.hx", lineNumber : 138, className : "lime.utils.AssetLibrary", methodName : "fromManifest"});
			return null;
		}
	}
	library.__fromManifest(manifest);
	return library;
};
lime_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(bytes,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		return library.load();
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
lime_utils_AssetLibrary.prototype = {
	onChange: null
	,assetsLoaded: null
	,assetsTotal: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesTotal: null
	,cachedAudioBuffers: null
	,cachedBytes: null
	,cachedFonts: null
	,cachedImages: null
	,cachedText: null
	,classTypes: null
	,loaded: null
	,pathGroups: null
	,paths: null
	,preload: null
	,promise: null
	,sizes: null
	,types: null
	,exists: function(id,type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var _this = this.types;
		var assetType = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		case "TEXT":
			return this.getText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , haxe_io_Bytes));
			} else {
				var _this4 = this.paths;
				return lime_media_AudioBuffer.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.cachedText;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.cachedText;
				var bytes = lime_utils__$Bytes_Bytes_$Impl_$.ofString(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id]);
				var _this4 = this.cachedBytes;
				if(__map_reserved[id] != null) {
					_this4.setReserved(id,bytes);
				} else {
					_this4.h[id] = bytes;
				}
				return bytes;
			} else {
				var _this5 = this.classTypes;
				if(__map_reserved[id] != null ? _this5.existsReserved(id) : _this5.h.hasOwnProperty(id)) {
					var _this6 = this.classTypes;
					return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this6.getReserved(id) : _this6.h[id],[]) , haxe_io_Bytes);
				} else {
					var _this7 = this.paths;
					return lime_utils__$Bytes_Bytes_$Impl_$.fromFile(__map_reserved[id] != null ? _this7.getReserved(id) : _this7.h[id]);
				}
			}
		}
	}
	,getFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , lime_text_Font);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getImage: function(id) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , lime_graphics_Image);
			} else {
				var _this4 = this.paths;
				return lime_graphics_Image.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getPath: function(id) {
		var _this = this.paths;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,getText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return null;
			} else {
				return bytes.getString(0,bytes.length);
			}
		}
	}
	,isLocal: function(id,type) {
		var _this = this.classTypes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			return true;
		}
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		switch(requestedType) {
		case "IMAGE":
			return this.cachedImages.exists(id);
		case "MUSIC":case "SOUND":
			return this.cachedAudioBuffers.exists(id);
		default:
			if(!this.cachedBytes.exists(id)) {
				return this.cachedText.exists(id);
			} else {
				return true;
			}
		}
	}
	,list: function(type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var items = [];
		var id = this.types.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			if(requestedType == null || this.exists(id1,type)) {
				items.push(id1);
			}
		}
		return items;
	}
	,loadAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.loadBytes(id);
		case "FONT":
			return this.loadFont(id);
		case "IMAGE":
			return this.loadImage(id);
		case "MUSIC":case "SOUND":
			return this.loadAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to load template: " + id);
			break;
		case "TEXT":
			return this.loadText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,load: function() {
		if(this.loaded) {
			return lime_app_Future.withValue(this);
		}
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.bytesLoadedCache = new haxe_ds_StringMap();
			this.assetsLoaded = 0;
			this.assetsTotal = 1;
			var id = this.preload.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				var _this = this.preload;
				if(!(__map_reserved[id1] != null ? _this.getReserved(id1) : _this.h[id1])) {
					continue;
				}
				var _this1 = this.types;
				lime_utils_Log.verbose("Preloading asset: " + id1 + " [" + (__map_reserved[id1] != null ? _this1.getReserved(id1) : _this1.h[id1]) + "]",{ fileName : "AssetLibrary.hx", lineNumber : 434, className : "lime.utils.AssetLibrary", methodName : "load"});
				var _g = this.types.get(id1);
				if(_g != null) {
					switch(_g) {
					case "BINARY":
						this.assetsTotal++;
						var future = this.loadBytes(id1);
						future.onProgress((function(id2,f) {
							return function(a1,a2) {
								f[0](id2[0],a1,a2);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future.onError((function(id3,f1) {
							return function(a11) {
								f1[0](id3[0],a11);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future.onComplete((function(id4,f2) {
							return function(a12) {
								f2[0](id4[0],a12);
							};
						})([id1],[$bind(this,this.loadBytes_onComplete)]));
						break;
					case "FONT":
						this.assetsTotal++;
						var future1 = this.loadFont(id1);
						future1.onProgress((function(id5,f3) {
							return function(a13,a21) {
								f3[0](id5[0],a13,a21);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future1.onError((function(id6,f4) {
							return function(a14) {
								f4[0](id6[0],a14);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future1.onComplete((function(id7,f5) {
							return function(a15) {
								f5[0](id7[0],a15);
							};
						})([id1],[$bind(this,this.loadFont_onComplete)]));
						break;
					case "IMAGE":
						this.assetsTotal++;
						var future2 = this.loadImage(id1);
						future2.onProgress((function(id8,f6) {
							return function(a16,a22) {
								f6[0](id8[0],a16,a22);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future2.onError((function(id9,f7) {
							return function(a17) {
								f7[0](id9[0],a17);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future2.onComplete((function(id10,f8) {
							return function(a18) {
								f8[0](id10[0],a18);
							};
						})([id1],[$bind(this,this.loadImage_onComplete)]));
						break;
					case "MUSIC":case "SOUND":
						this.assetsTotal++;
						var future3 = this.loadAudioBuffer(id1);
						future3.onProgress((function(id11,f9) {
							return function(a19,a23) {
								f9[0](id11[0],a19,a23);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future3.onError((function(id12,f10) {
							return function(a110) {
								f10[0](id12[0],a110);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future3.onComplete((function(id13,f11) {
							return function(a111) {
								f11[0](id13[0],a111);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onComplete)]));
						break;
					case "TEXT":
						this.assetsTotal++;
						var future4 = this.loadText(id1);
						future4.onProgress((function(id14,f12) {
							return function(a112,a24) {
								f12[0](id14[0],a112,a24);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future4.onError((function(id15,f13) {
							return function(a113) {
								f13[0](id15[0],a113);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future4.onComplete((function(id16,f14) {
							return function(a114) {
								f14[0](id16[0],a114);
							};
						})([id1],[$bind(this,this.loadText_onComplete)]));
						break;
					default:
					}
				}
			}
			this.__assetLoaded(null);
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.pathGroups;
				if(__map_reserved[id] != null ? _this4.existsReserved(id) : _this4.h.hasOwnProperty(id)) {
					var _this5 = this.pathGroups;
					return lime_media_AudioBuffer.loadFromFiles(__map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]);
				} else {
					var _this6 = this.paths;
					return lime_media_AudioBuffer.loadFromFile(__map_reserved[id] != null ? _this6.getReserved(id) : _this6.h[id]);
				}
			}
		}
	}
	,loadBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				var font = Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]);
				return lime_text_Font.loadFromName(font.name);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.loadFromName(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadImage: function(id) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_graphics_Image.loadFromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var tmp;
			var _this2 = this.cachedBytes;
			if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
				var _this3 = this.classTypes;
				if(__map_reserved[id] != null) {
					tmp = _this3.existsReserved(id);
				} else {
					tmp = _this3.h.hasOwnProperty(id);
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				var bytes = this.getBytes(id);
				if(bytes == null) {
					return lime_app_Future.withValue(null);
				} else {
					var text = bytes.getString(0,bytes.length);
					var _this4 = this.cachedText;
					if(__map_reserved[id] != null) {
						_this4.setReserved(id,text);
					} else {
						_this4.h[id] = text;
					}
					return lime_app_Future.withValue(text);
				}
			} else {
				var request = new lime_net__$HTTPRequest_$String();
				var _this5 = this.paths;
				return request.load(__map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]);
			}
		}
	}
	,unload: function() {
	}
	,__assetLoaded: function(id) {
		this.assetsLoaded++;
		if(id != null) {
			var _this = this.types;
			lime_utils_Log.verbose("Loaded asset: " + id + " [" + (__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]) + "] (" + (this.assetsLoaded - 1) + "/" + (this.assetsTotal - 1) + ")",{ fileName : "AssetLibrary.hx", lineNumber : 680, className : "lime.utils.AssetLibrary", methodName : "__assetLoaded"});
		}
		if(id != null) {
			var _this1 = this.sizes;
			var size = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
			var _this2 = this.bytesLoadedCache;
			if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
				this.bytesLoaded += size;
			} else {
				var _this3 = this.bytesLoadedCache;
				var cache = __map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id];
				if(cache < size) {
					this.bytesLoaded += size - cache;
				}
			}
			var _this4 = this.bytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this4.setReserved(id,size);
			} else {
				_this4.h[id] = size;
			}
		}
		if(this.assetsLoaded < this.assetsTotal) {
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		} else {
			this.loaded = true;
			this.promise.progress(this.bytesTotal,this.bytesTotal);
			this.promise.complete(this);
		}
	}
	,__cacheBreak: function(path) {
		if(path.indexOf("?") > -1) {
			path += "&" + lime_utils_Assets.cache.version;
		} else {
			path += "?" + lime_utils_Assets.cache.version;
		}
		return path;
	}
	,__fromManifest: function(manifest) {
		var hasSize = manifest.version >= 2;
		var size;
		var id;
		var pathGroup;
		var classRef;
		var basePath = manifest.rootPath;
		if(basePath == null) {
			basePath = "";
		}
		if(basePath != "") {
			basePath += "/";
		}
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			if(hasSize) {
				size = asset.size;
			} else {
				size = 100;
			}
			id = asset.id;
			if(Object.prototype.hasOwnProperty.call(asset,"path")) {
				var this1 = this.paths;
				var value = this.__cacheBreak(basePath + Std.string(Reflect.field(asset,"path")));
				var _this = this1;
				if(__map_reserved[id] != null) {
					_this.setReserved(id,value);
				} else {
					_this.h[id] = value;
				}
			}
			if(Object.prototype.hasOwnProperty.call(asset,"pathGroup")) {
				pathGroup = Reflect.field(asset,"pathGroup");
				var _g3 = 0;
				var _g2 = pathGroup.length;
				while(_g3 < _g2) {
					var i = _g3++;
					pathGroup[i] = this.__cacheBreak(basePath + pathGroup[i]);
				}
				var _this1 = this.pathGroups;
				if(__map_reserved[id] != null) {
					_this1.setReserved(id,pathGroup);
				} else {
					_this1.h[id] = pathGroup;
				}
			}
			var _this2 = this.sizes;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,size);
			} else {
				_this2.h[id] = size;
			}
			var value1 = asset.type;
			var _this3 = this.types;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,value1);
			} else {
				_this3.h[id] = value1;
			}
			if(Object.prototype.hasOwnProperty.call(asset,"preload")) {
				var this2 = this.preload;
				var value2 = Reflect.field(asset,"preload");
				var _this4 = this2;
				if(__map_reserved[id] != null) {
					_this4.setReserved(id,value2);
				} else {
					_this4.h[id] = value2;
				}
			}
			if(Object.prototype.hasOwnProperty.call(asset,"className")) {
				classRef = Type.resolveClass(Reflect.field(asset,"className"));
				var _this5 = this.classTypes;
				if(__map_reserved[id] != null) {
					_this5.setReserved(id,classRef);
				} else {
					_this5.h[id] = classRef;
				}
			}
		}
		this.bytesTotal = 0;
		var _g4 = 0;
		var _g11 = manifest.assets;
		while(_g4 < _g11.length) {
			var asset1 = _g11[_g4];
			++_g4;
			id = asset1.id;
			var tmp;
			var _this6 = this.preload;
			if(__map_reserved[id] != null ? _this6.existsReserved(id) : _this6.h.hasOwnProperty(id)) {
				var _this7 = this.preload;
				if(__map_reserved[id] != null) {
					tmp = _this7.getReserved(id);
				} else {
					tmp = _this7.h[id];
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this8 = this.sizes;
				this.bytesTotal += __map_reserved[id] != null ? _this8.getReserved(id) : _this8.h[id];
			}
		}
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,audioBuffer);
		} else {
			_this.h[id] = audioBuffer;
		}
		var _this1 = this.pathGroups;
		if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
			var _this2 = this.pathGroups;
			var pathGroup = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
			var otherID = this.pathGroups.keys();
			while(otherID.hasNext()) {
				var otherID1 = otherID.next();
				if(otherID1 == id) {
					continue;
				}
				var _g = 0;
				while(_g < pathGroup.length) {
					var path = pathGroup[_g];
					++_g;
					var _this3 = this.pathGroups;
					if((__map_reserved[otherID1] != null ? _this3.getReserved(otherID1) : _this3.h[otherID1]).indexOf(path) > -1) {
						var _this4 = this.cachedAudioBuffers;
						if(__map_reserved[otherID1] != null) {
							_this4.setReserved(otherID1,audioBuffer);
						} else {
							_this4.h[otherID1] = audioBuffer;
						}
						break;
					}
				}
			}
		}
		this.__assetLoaded(id);
	}
	,loadBytes_onComplete: function(id,bytes) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bytes);
		} else {
			_this.h[id] = bytes;
		}
		this.__assetLoaded(id);
	}
	,loadFont_onComplete: function(id,font) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,font);
		} else {
			_this.h[id] = font;
		}
		this.__assetLoaded(id);
	}
	,loadImage_onComplete: function(id,image) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,image);
		} else {
			_this.h[id] = image;
		}
		this.__assetLoaded(id);
	}
	,loadText_onComplete: function(id,text) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,text);
		} else {
			_this.h[id] = text;
		}
		this.__assetLoaded(id);
	}
	,load_onError: function(id,message) {
		if(message != null && message != "") {
			this.promise.error("Error loading asset \"" + id + "\": " + Std.string(message));
		} else {
			this.promise.error("Error loading asset \"" + id + "\"");
		}
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		if(bytesLoaded > 0) {
			var _this = this.sizes;
			var size = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			var percent;
			if(bytesTotal > 0) {
				percent = bytesLoaded / bytesTotal;
				if(percent > 1) {
					percent = 1;
				}
				bytesLoaded = Math.floor(percent * size);
			} else if(bytesLoaded > size) {
				bytesLoaded = size;
			}
			var _this1 = this.bytesLoadedCache;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				var _this2 = this.bytesLoadedCache;
				var cache = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
				if(bytesLoaded != cache) {
					this.bytesLoaded += bytesLoaded - cache;
				}
			} else {
				this.bytesLoaded += bytesLoaded;
			}
			var _this3 = this.bytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,bytesLoaded);
			} else {
				_this3.h[id] = bytesLoaded;
			}
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 2;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = ["lime","utils","AssetManifest"];
lime_utils_AssetManifest.fromBytes = function(bytes,rootPath) {
	if(bytes != null) {
		return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length),rootPath);
	} else {
		return null;
	}
};
lime_utils_AssetManifest.fromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_AssetManifest.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path),rootPath);
};
lime_utils_AssetManifest.loadFromBytes = function(bytes,rootPath) {
	return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetManifest.loadFromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
	});
};
lime_utils_AssetManifest.parse = function(data,rootPath) {
	if(data == null || data == "") {
		return null;
	}
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	manifest.name = manifestData.name;
	manifest.libraryType = manifestData.libraryType;
	manifest.libraryArgs = manifestData.libraryArgs;
	manifest.assets = haxe_Unserializer.run(manifestData.assets);
	if(rootPath != null) {
		manifest.rootPath = rootPath;
	}
	return manifest;
};
lime_utils_AssetManifest.__resolvePath = function(path) {
	if(path == null) {
		return null;
	}
	var queryIndex = path.indexOf("?");
	var basePath;
	if(queryIndex > -1) {
		basePath = HxOverrides.substr(path,0,queryIndex);
	} else {
		basePath = path;
	}
	StringTools.replace(basePath,"\\","/");
	while(StringTools.endsWith(basePath,"/")) basePath = HxOverrides.substr(basePath,0,basePath.length - 1);
	if(StringTools.endsWith(basePath,".bundle")) {
		if(queryIndex > -1) {
			return basePath + "/library.json" + HxOverrides.substr(path,queryIndex,null);
		} else {
			return basePath + "/library.json";
		}
	} else {
		return path;
	}
};
lime_utils_AssetManifest.__resolveRootPath = function(rootPath,path) {
	if(rootPath != null) {
		return rootPath;
	}
	var queryIndex = path.indexOf("?");
	if(queryIndex > -1) {
		rootPath = HxOverrides.substr(path,0,queryIndex);
	} else {
		rootPath = path;
	}
	StringTools.replace(rootPath,"\\","/");
	while(StringTools.endsWith(rootPath,"/")) {
		if(rootPath == "/") {
			return rootPath;
		}
		rootPath = HxOverrides.substr(rootPath,0,rootPath.length - 1);
	}
	if(StringTools.endsWith(rootPath,".bundle")) {
		return rootPath;
	} else {
		return haxe_io_Path.directory(rootPath);
	}
};
lime_utils_AssetManifest.prototype = {
	assets: null
	,libraryArgs: null
	,libraryType: null
	,name: null
	,rootPath: null
	,version: null
	,serialize: function() {
		var manifestData = { };
		manifestData.version = this.version;
		manifestData.libraryType = this.libraryType;
		manifestData.libraryArgs = this.libraryArgs;
		manifestData.name = this.name;
		manifestData.assets = haxe_Serializer.run(this.assets);
		return JSON.stringify(manifestData);
	}
	,__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = ["lime","utils","Assets"];
lime_utils_Assets.exists = function(id,type) {
	if(type == null) {
		type = "BINARY";
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.exists(symbol_symbolName,type);
	}
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.get(id);
			if(font != null) {
				return font;
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.get(id);
			if(lime_utils_Assets.isValidImage(image)) {
				return image;
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.get(id);
			if(lime_utils_Assets.isValidAudio(audio)) {
				return audio;
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		default:
			return null;
		}
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			if(symbol_library.isLocal(symbol_symbolName,type)) {
				var asset = symbol_library.getAsset(symbol_symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) {
					lime_utils_Assets.cache.set(id,type,asset);
				}
				return asset;
			} else {
				lime_utils_Log.error(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 160, className : "lime.utils.Assets", methodName : "getAsset"});
			}
		} else {
			lime_utils_Log.error("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 166, className : "lime.utils.Assets", methodName : "getAsset"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "Assets.hx", lineNumber : 172, className : "lime.utils.Assets", methodName : "getAsset"});
	}
	return null;
};
lime_utils_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"SOUND",useCache);
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"FONT",useCache);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
lime_utils_Assets.getPath = function(id) {
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,null)) {
			return symbol_library.getPath(symbol_symbolName);
		} else {
			lime_utils_Log.error("There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 269, className : "lime.utils.Assets", methodName : "getPath"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "Assets.hx", lineNumber : 275, className : "lime.utils.Assets", methodName : "getPath"});
	}
	return null;
};
lime_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getAsset(id,"TEXT",false);
};
lime_utils_Assets.hasLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		return _this.existsReserved(name);
	} else {
		return _this.h.hasOwnProperty(name);
	}
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) {
			return true;
		}
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.isLocal(symbol_symbolName,type);
	} else {
		return false;
	}
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(image) {
	if(image != null) {
		return image.buffer != null;
	} else {
		return false;
	}
};
lime_utils_Assets.list = function(type) {
	var items = [];
	var _this = lime_utils_Assets.libraries;
	var library = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(library.hasNext()) {
		var library1 = library.next();
		var libraryItems = library1.list(type);
		if(libraryItems != null) {
			items = items.concat(libraryItems);
		}
	}
	return items;
};
lime_utils_Assets.loadAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.get(id);
			if(font != null) {
				return lime_app_Future.withValue(font);
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.get(id);
			if(lime_utils_Assets.isValidImage(image)) {
				return lime_app_Future.withValue(image);
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.get(id);
			if(lime_utils_Assets.isValidAudio(audio)) {
				return lime_app_Future.withValue(audio);
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		default:
			return null;
		}
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			var future = symbol_library.loadAsset(symbol_symbolName,type);
			if(useCache && lime_utils_Assets.cache.enabled) {
				future.onComplete(function(asset) {
					lime_utils_Assets.cache.set(id,type,asset);
				});
			}
			return future;
		} else {
			return lime_app_Future.withError("There is no " + type + " asset with an ID of \"" + id + "\"");
		}
	} else {
		return lime_app_Future.withError(lime_utils_Assets.__libraryNotFound(symbol_libraryName));
	}
};
lime_utils_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"SOUND",useCache);
};
lime_utils_Assets.loadBytes = function(id) {
	return lime_utils_Assets.loadAsset(id,"BINARY",false);
};
lime_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"FONT",useCache);
};
lime_utils_Assets.loadImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.loadLibrary = function(id) {
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return library.load();
	}
	var path = id;
	var rootPath = null;
	var _this = lime_utils_Assets.libraryPaths;
	if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
		var _this1 = lime_utils_Assets.libraryPaths;
		if(__map_reserved[id] != null) {
			path = _this1.getReserved(id);
		} else {
			path = _this1.h[id];
		}
		rootPath = lime_utils_Assets.defaultRootPath;
	} else if(StringTools.endsWith(path,".bundle")) {
		path += "/library.json";
	}
	lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
		if(manifest == null) {
			promise.error("Cannot parse asset manifest for library \"" + id + "\"");
			return;
		}
		var library1 = lime_utils_AssetLibrary.fromManifest(manifest);
		if(library1 == null) {
			promise.error("Cannot open library \"" + id + "\"");
		} else {
			var _this2 = lime_utils_Assets.libraries;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,library1);
			} else {
				_this2.h[id] = library1;
			}
			library1.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
			var tmp = library1.load();
			promise.completeWith(tmp);
		}
	}).onError(function(_) {
		promise.error("There is no asset library with an ID of \"" + id + "\"");
	});
	return promise.future;
};
lime_utils_Assets.loadText = function(id) {
	return lime_utils_Assets.loadAsset(id,"TEXT",false);
};
lime_utils_Assets.registerLibrary = function(name,library) {
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		var _this1 = lime_utils_Assets.libraries;
		if((__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]) == library) {
			return;
		} else {
			lime_utils_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_utils_Assets.library_onChange);
	}
	var _this2 = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		_this2.setReserved(name,library);
	} else {
		_this2.h[name] = library;
	}
};
lime_utils_Assets.unloadLibrary = function(name) {
	var _this = lime_utils_Assets.libraries;
	var library = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	lime_utils_Assets.libraries.remove(name);
};
lime_utils_Assets.__libraryNotFound = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	if(lime_app_Application.current != null && lime_app_Application.current.__preloader != null && !lime_app_Application.current.__preloader.complete) {
		return "There is no asset library named \"" + name + "\", or it is not yet preloaded";
	} else {
		return "There is no asset library named \"" + name + "\"";
	}
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils__$Assets_LibrarySymbol = function(id) {
	var colonIndex = id.indexOf(":");
	this.libraryName = id.substring(0,colonIndex);
	this.symbolName = id.substring(colonIndex + 1);
	this.library = lime_utils_Assets.getLibrary(this.libraryName);
};
$hxClasses["lime.utils._Assets.LibrarySymbol"] = lime_utils__$Assets_LibrarySymbol;
lime_utils__$Assets_LibrarySymbol.__name__ = ["lime","utils","_Assets","LibrarySymbol"];
lime_utils__$Assets_LibrarySymbol.prototype = {
	library: null
	,libraryName: null
	,symbolName: null
	,isLocal: function(type) {
		return this.library.isLocal(this.symbolName,type);
	}
	,exists: function(type) {
		return this.library.exists(this.symbolName,type);
	}
	,__class__: lime_utils__$Assets_LibrarySymbol
};
var lime_utils__$BytePointer_BytePointer_$Impl_$ = {};
$hxClasses["lime.utils._BytePointer.BytePointer_Impl_"] = lime_utils__$BytePointer_BytePointer_$Impl_$;
lime_utils__$BytePointer_BytePointer_$Impl_$.__name__ = ["lime","utils","_BytePointer","BytePointer_Impl_"];
lime_utils__$BytePointer_BytePointer_$Impl_$._new = function(bytes,offset) {
	if(offset == null) {
		offset = 0;
	}
	var this1 = new lime_utils_BytePointerData(bytes,offset);
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.set = function(this1,bytes,bufferView,buffer,offset) {
	if(buffer != null) {
		bytes = haxe_io_Bytes.ofData(buffer);
	}
	if(bytes != null || bufferView == null) {
		this1.bytes = bytes;
		this1.offset = offset != null ? offset : 0;
	} else {
		this1.bytes = haxe_io_Bytes.ofData(bufferView.buffer);
		this1.offset = offset != null ? bufferView.byteOffset + offset : bufferView.byteOffset;
	}
};
lime_utils__$BytePointer_BytePointer_$Impl_$.__arrayGet = function(this1,index) {
	if(this1.bytes != null) {
		return this1.bytes.b[index + this1.offset];
	} else {
		return 0;
	}
};
lime_utils__$BytePointer_BytePointer_$Impl_$.__arraySet = function(this1,index,value) {
	if(this1.bytes == null) {
		this1.bytes.b[index + this1.offset] = value & 255;
	}
	return value;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromArrayBufferView = function(arrayBufferView) {
	if(arrayBufferView == null) {
		return null;
	}
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(arrayBufferView.buffer),arrayBufferView.byteOffset);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(buffer),0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return new lime_utils_BytePointerData(null,0);
	} else {
		return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(bytesData),0);
	}
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromFile = function(path) {
	return new lime_utils_BytePointerData(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path),0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromLimeBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt8Array = function(bytePointer) {
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Uint8Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt8ClampedArray = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Uint8ClampedArray(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toInt8Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Int8Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Uint16Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Int16Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Uint32Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Int32Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toFloat32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Float32Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toFloat64Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 64 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Float64Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
var lime_utils__$Bytes_Bytes_$Impl_$ = {};
$hxClasses["lime.utils._Bytes.Bytes_Impl_"] = lime_utils__$Bytes_Bytes_$Impl_$;
lime_utils__$Bytes_Bytes_$Impl_$.__name__ = ["lime","utils","_Bytes","Bytes_Impl_"];
lime_utils__$Bytes_Bytes_$Impl_$._new = function(length,bytesData) {
	var this1 = new haxe_io_Bytes(bytesData);
	return this1;
};
lime_utils__$Bytes_Bytes_$Impl_$.alloc = function(length) {
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils__$Bytes_Bytes_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.fromFile = function(path) {
	return null;
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes));
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
	return request.load(path);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
var lime_utils__$DataPointer_DataPointer_$Impl_$ = {};
$hxClasses["lime.utils._DataPointer.DataPointer_Impl_"] = lime_utils__$DataPointer_DataPointer_$Impl_$;
lime_utils__$DataPointer_DataPointer_$Impl_$.__name__ = ["lime","utils","_DataPointer","DataPointer_Impl_"];
lime_utils__$DataPointer_DataPointer_$Impl_$._new = function(data) {
	var this1 = data;
	return this1;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt = function(value) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(null,null,value));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat = function(value) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(null,null,value | 0));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytesPointer = function(pointer) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(null,pointer.bytes.b.bufferValue,pointer.offset));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView = function(arrayBufferView) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(arrayBufferView));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBuffer = function(buffer) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(null,buffer));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytes = function(bytes) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBuffer(bytes.b.bufferValue);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytesData = function(bytesData) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBuffer(bytesData);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromLimeBytes = function(bytes) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytes(bytes);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromCFFIPointer = function(pointer) {
	return null;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromFile = function(path) {
	return null;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferOrBufferView = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		if(data.offset == 0 && length == data.buffer.byteLength) {
			return data.buffer;
		} else {
			var buffer = data.buffer;
			var byteoffset = data.offset;
			var this2;
			if(buffer != null) {
				if(length == null) {
					this2 = new Uint8Array(buffer,byteoffset);
				} else {
					this2 = new Uint8Array(buffer,byteoffset,length);
				}
			} else {
				this2 = null;
			}
			return this2;
		}
		break;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var this3;
			if(buffer1 != null) {
				if(length == null) {
					this3 = new Uint8Array(buffer1,byteoffset1);
				} else {
					this3 = new Uint8Array(buffer1,byteoffset1,length);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var this2;
		if(buffer != null) {
			if(length == null) {
				this2 = new Uint8Array(buffer,byteoffset);
			} else {
				this2 = new Uint8Array(buffer,byteoffset,length);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var this3;
			if(buffer1 != null) {
				if(length == null) {
					this3 = new Uint8Array(buffer1,byteoffset1);
				} else {
					this3 = new Uint8Array(buffer1,byteoffset1,length);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var len = length / 4 | 0;
		var this2;
		if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,byteoffset);
			} else {
				this2 = new Float32Array(buffer,byteoffset,len);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Float32Array) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var len1 = length / 4 | 0;
			var this3;
			if(buffer1 != null) {
				if(len1 == null) {
					this3 = new Float32Array(buffer1,byteoffset1);
				} else {
					this3 = new Float32Array(buffer1,byteoffset1,len1);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var len = length / 4 | 0;
		var this2;
		if(buffer != null) {
			if(len == null) {
				this2 = new Int32Array(buffer,byteoffset);
			} else {
				this2 = new Int32Array(buffer,byteoffset,len);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Int32Array) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var len1 = length / 4 | 0;
			var this3;
			if(buffer1 != null) {
				if(len1 == null) {
					this3 = new Int32Array(buffer1,byteoffset1);
				} else {
					this3 = new Int32Array(buffer1,byteoffset1,len1);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt8Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var this2;
		if(buffer != null) {
			if(length == null) {
				this2 = new Uint8Array(buffer,byteoffset);
			} else {
				this2 = new Uint8Array(buffer,byteoffset,length);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Uint8Array) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var this3;
			if(buffer1 != null) {
				if(length == null) {
					this3 = new Uint8Array(buffer1,byteoffset1);
				} else {
					this3 = new Uint8Array(buffer1,byteoffset1,length);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var len = length / 4 | 0;
		var this2;
		if(buffer != null) {
			if(len == null) {
				this2 = new Uint32Array(buffer,byteoffset);
			} else {
				this2 = new Uint32Array(buffer,byteoffset,len);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Uint32Array) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var len1 = length / 4 | 0;
			var this3;
			if(buffer1 != null) {
				if(len1 == null) {
					this3 = new Uint32Array(buffer1,byteoffset1);
				} else {
					this3 = new Uint32Array(buffer1,byteoffset1,len1);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toValue = function(this1) {
	var data = this1;
	if (!data) return 0;
	if (typeof data === 'number') return data;
	var _g = data.type;
	if(_g[1] == 2) {
		return data.offset;
	} else {
		return 0;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset = function(data,offset) {
	return null;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.equals = function(a,b) {
	return a == b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.equalsPointer = function(a,b) {
	return a == b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThan = function(a,b) {
	return a > b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return a >= b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThan = function(a,b) {
	return a < b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return a <= b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.notEquals = function(a,b) {
	return a != b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return a != b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.plus = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.plusPointer = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,b | 0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.minus = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,-b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.minusPointer = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,-(b | 0));
};
var lime_utils_DataPointerObject = function(bufferView,buffer,offset) {
	if(offset == null) {
		offset = 0;
	}
	if(bufferView != null) {
		this.bufferView = bufferView;
		this.type = lime_utils_DataPointerObjectType.BUFFER_VIEW;
	} else if(buffer != null) {
		this.buffer = buffer;
		this.type = lime_utils_DataPointerObjectType.BUFFER;
	} else {
		this.type = lime_utils_DataPointerObjectType.VALUE;
	}
	this.offset = offset;
};
$hxClasses["lime.utils.DataPointerObject"] = lime_utils_DataPointerObject;
lime_utils_DataPointerObject.__name__ = ["lime","utils","DataPointerObject"];
lime_utils_DataPointerObject.prototype = {
	buffer: null
	,bufferView: null
	,offset: null
	,type: null
	,__class__: lime_utils_DataPointerObject
};
var lime_utils_DataPointerObjectType = $hxClasses["lime.utils.DataPointerObjectType"] = { __ename__ : ["lime","utils","DataPointerObjectType"], __constructs__ : ["BUFFER","BUFFER_VIEW","VALUE"] };
lime_utils_DataPointerObjectType.BUFFER = ["BUFFER",0];
lime_utils_DataPointerObjectType.BUFFER.toString = $estr;
lime_utils_DataPointerObjectType.BUFFER.__enum__ = lime_utils_DataPointerObjectType;
lime_utils_DataPointerObjectType.BUFFER_VIEW = ["BUFFER_VIEW",1];
lime_utils_DataPointerObjectType.BUFFER_VIEW.toString = $estr;
lime_utils_DataPointerObjectType.BUFFER_VIEW.__enum__ = lime_utils_DataPointerObjectType;
lime_utils_DataPointerObjectType.VALUE = ["VALUE",2];
lime_utils_DataPointerObjectType.VALUE.toString = $estr;
lime_utils_DataPointerObjectType.VALUE.__enum__ = lime_utils_DataPointerObjectType;
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = ["lime","utils","_Float32Array","Float32Array_Impl_"];
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Float64Array_Float64Array_$Impl_$ = {};
$hxClasses["lime.utils._Float64Array.Float64Array_Impl_"] = lime_utils__$Float64Array_Float64Array_$Impl_$;
lime_utils__$Float64Array_Float64Array_$Impl_$.__name__ = ["lime","utils","_Float64Array","Float64Array_Impl_"];
lime_utils__$Float64Array_Float64Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float64Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float64Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float64Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float64Array_Float64Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float64Array_Float64Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Float64Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
lime_utils_GLUtils.__name__ = ["lime","utils","GLUtils"];
lime_utils_GLUtils.compileShader = function(source,type) {
	var shader = lime_graphics_opengl_GL.context.__context.createShader(type);
	lime_graphics_opengl_GL.context.__context.shaderSource(shader,source);
	lime_graphics_opengl_GL.context.__context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.__context.getShaderParameter(shader,35713) == 0) {
		var message;
		switch(type) {
		case 35632:
			message = "Error compiling fragment shader";
			break;
		case 35633:
			message = "Error compiling vertex shader";
			break;
		default:
			message = "Error compiling unknown shader type";
		}
		message += "\n" + lime_graphics_opengl_GL.context.__context.getShaderInfoLog(shader);
		lime_utils_Log.error(message,{ fileName : "GLUtils.hx", lineNumber : 35, className : "lime.utils.GLUtils", methodName : "compileShader"});
	}
	return shader;
};
lime_utils_GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime_utils_GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource,35632);
	var program = lime_graphics_opengl_GL.context.__context.createProgram();
	lime_graphics_opengl_GL.context.__context.attachShader(program,vertexShader);
	lime_graphics_opengl_GL.context.__context.attachShader(program,fragmentShader);
	lime_graphics_opengl_GL.context.__context.linkProgram(program);
	if(lime_graphics_opengl_GL.context.__context.getProgramParameter(program,35714) == 0) {
		var message = "Unable to initialize the shader program";
		message += "\n" + lime_graphics_opengl_GL.context.__context.getProgramInfoLog(program);
		lime_utils_Log.error(message,{ fileName : "GLUtils.hx", lineNumber : 58, className : "lime.utils.GLUtils", methodName : "createProgram"});
	}
	return program;
};
var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = ["lime","utils","_Int16Array","Int16Array_Impl_"];
lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = ["lime","utils","_Int32Array","Int32Array_Impl_"];
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Int8Array_Int8Array_$Impl_$ = {};
$hxClasses["lime.utils._Int8Array.Int8Array_Impl_"] = lime_utils__$Int8Array_Int8Array_$Impl_$;
lime_utils__$Int8Array_Int8Array_$Impl_$.__name__ = ["lime","utils","_Int8Array","Int8Array_Impl_"];
lime_utils__$Int8Array_Int8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	return new Int8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int8Array_Int8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int8Array_Int8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = ["lime","utils","Log"];
lime_utils_Log.debug = function(message,info) {
	if(lime_utils_Log.level >= 4) {
		console.debug("[" + info.className + "] " + message);
	}
};
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		var message1 = "[" + info.className + "] ERROR: " + message;
		if(lime_utils_Log.throwErrors) {
			throw new js__$Boot_HaxeError(message1);
		} else {
			console.error(message1);
		}
	}
};
lime_utils_Log.info = function(message,info) {
	if(lime_utils_Log.level >= 3) {
		console.info("[" + info.className + "] " + message);
	}
};
lime_utils_Log.print = function(message) {
	console.log(message);
};
lime_utils_Log.println = function(message) {
	console.log(message);
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		console.log("[" + info.className + "] " + message);
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.warn("[" + info.className + "] WARNING: " + message);
	}
};
var lime_utils__$Log_LogLevel_$Impl_$ = {};
$hxClasses["lime.utils._Log.LogLevel_Impl_"] = lime_utils__$Log_LogLevel_$Impl_$;
lime_utils__$Log_LogLevel_$Impl_$.__name__ = ["lime","utils","_Log","LogLevel_Impl_"];
lime_utils__$Log_LogLevel_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_utils__$Log_LogLevel_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_utils__$Log_LogLevel_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_utils__$Log_LogLevel_$Impl_$.lte = function(a,b) {
	return a <= b;
};
var lime_utils_ObjectPool = function(create,clean,size) {
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new List();
};
$hxClasses["lime.utils.ObjectPool"] = lime_utils_ObjectPool;
lime_utils_ObjectPool.__name__ = ["lime","utils","ObjectPool"];
lime_utils_ObjectPool.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			this.__pool.set(object,false);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.__pool.set(object1,true);
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		if(!this.__pool.exists(object)) {
			lime_utils_Log.error("Object is not a member of the pool",{ fileName : "ObjectPool.hx", lineNumber : 130, className : "lime.utils.ObjectPool", methodName : "release"});
		} else if(!this.__pool.get(object)) {
			lime_utils_Log.error("Object has already been released",{ fileName : "ObjectPool.hx", lineNumber : 134, className : "lime.utils.ObjectPool", methodName : "release"});
		}
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			this.__pool.set(object,false);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,__addInactive: function(object) {
		this.__pool.set(object,false);
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.__pool.set(object,true);
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var object = val;
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var lime_utils_ObjectPool_$openfl_$geom_$Matrix = function(create,clean,size) {
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new List();
};
$hxClasses["lime.utils.ObjectPool_openfl_geom_Matrix"] = lime_utils_ObjectPool_$openfl_$geom_$Matrix;
lime_utils_ObjectPool_$openfl_$geom_$Matrix.__name__ = ["lime","utils","ObjectPool_openfl_geom_Matrix"];
lime_utils_ObjectPool_$openfl_$geom_$Matrix.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			this.__pool.set(object,false);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.__pool.set(object1,true);
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		if(!this.__pool.exists(object)) {
			lime_utils_Log.error("Object is not a member of the pool",{ fileName : "ObjectPool.hx", lineNumber : 130, className : "lime.utils.ObjectPool", methodName : "release"});
		} else if(!this.__pool.get(object)) {
			lime_utils_Log.error("Object has already been released",{ fileName : "ObjectPool.hx", lineNumber : 134, className : "lime.utils.ObjectPool", methodName : "release"});
		}
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			this.__pool.set(object,false);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,__addInactive: function(object) {
		this.__pool.set(object,false);
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.__pool.set(object,true);
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var object = val;
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool_$openfl_$geom_$Matrix
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var lime_utils_ObjectPool_$openfl_$geom_$Rectangle = function(create,clean,size) {
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new List();
};
$hxClasses["lime.utils.ObjectPool_openfl_geom_Rectangle"] = lime_utils_ObjectPool_$openfl_$geom_$Rectangle;
lime_utils_ObjectPool_$openfl_$geom_$Rectangle.__name__ = ["lime","utils","ObjectPool_openfl_geom_Rectangle"];
lime_utils_ObjectPool_$openfl_$geom_$Rectangle.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			this.__pool.set(object,false);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.__pool.set(object1,true);
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		if(!this.__pool.exists(object)) {
			lime_utils_Log.error("Object is not a member of the pool",{ fileName : "ObjectPool.hx", lineNumber : 130, className : "lime.utils.ObjectPool", methodName : "release"});
		} else if(!this.__pool.get(object)) {
			lime_utils_Log.error("Object has already been released",{ fileName : "ObjectPool.hx", lineNumber : 134, className : "lime.utils.ObjectPool", methodName : "release"});
		}
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			this.__pool.set(object,false);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,__addInactive: function(object) {
		this.__pool.set(object,false);
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.__pool.set(object,true);
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var object = val;
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool_$openfl_$geom_$Rectangle
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var lime_utils_ObjectPool_$openfl_$utils_$TouchData = function(create,clean,size) {
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new List();
};
$hxClasses["lime.utils.ObjectPool_openfl_utils_TouchData"] = lime_utils_ObjectPool_$openfl_$utils_$TouchData;
lime_utils_ObjectPool_$openfl_$utils_$TouchData.__name__ = ["lime","utils","ObjectPool_openfl_utils_TouchData"];
lime_utils_ObjectPool_$openfl_$utils_$TouchData.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			this.__pool.set(object,false);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.__pool.set(object1,true);
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		if(!this.__pool.exists(object)) {
			lime_utils_Log.error("Object is not a member of the pool",{ fileName : "ObjectPool.hx", lineNumber : 130, className : "lime.utils.ObjectPool", methodName : "release"});
		} else if(!this.__pool.get(object)) {
			lime_utils_Log.error("Object has already been released",{ fileName : "ObjectPool.hx", lineNumber : 134, className : "lime.utils.ObjectPool", methodName : "release"});
		}
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			this.__pool.set(object,false);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,__addInactive: function(object) {
		this.__pool.set(object,false);
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.__pool.set(object,true);
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var object = val;
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool_$openfl_$utils_$TouchData
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var lime_utils__$UInt16Array_UInt16Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt16Array.UInt16Array_Impl_"] = lime_utils__$UInt16Array_UInt16Array_$Impl_$;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__name__ = ["lime","utils","_UInt16Array","UInt16Array_Impl_"];
lime_utils__$UInt16Array_UInt16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = ["lime","utils","_UInt32Array","UInt32Array_Impl_"];
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = ["lime","utils","_UInt8Array","UInt8Array_Impl_"];
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$ = {};
$hxClasses["lime.utils._UInt8ClampedArray.UInt8ClampedArray_Impl_"] = lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$;
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.__name__ = ["lime","utils","_UInt8ClampedArray","UInt8ClampedArray_Impl_"];
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint8ClampedArray(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt8ClampedArray [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$._clamp = function(_in) {
	var _out = _in | 0;
	if(_out > 255) {
		_out = 255;
	} else {
		_out = _out;
	}
	if(_out < 0) {
		return 0;
	} else {
		return _out;
	}
};
var lime_utils_compress_Deflate = function() { };
$hxClasses["lime.utils.compress.Deflate"] = lime_utils_compress_Deflate;
lime_utils_compress_Deflate.__name__ = ["lime","utils","compress","Deflate"];
lime_utils_compress_Deflate.compress = function(bytes) {
	var data = pako.deflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime_utils_compress_Deflate.decompress = function(bytes) {
	var data = pako.inflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime_utils_compress_LZMA = function() { };
$hxClasses["lime.utils.compress.LZMA"] = lime_utils_compress_LZMA;
lime_utils_compress_LZMA.__name__ = ["lime","utils","compress","LZMA"];
lime_utils_compress_LZMA.compress = function(bytes) {
	return null;
};
lime_utils_compress_LZMA.decompress = function(bytes) {
	return null;
};
var lime_utils_compress_Zlib = function() { };
$hxClasses["lime.utils.compress.Zlib"] = lime_utils_compress_Zlib;
lime_utils_compress_Zlib.__name__ = ["lime","utils","compress","Zlib"];
lime_utils_compress_Zlib.compress = function(bytes) {
	var data = pako.deflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime_utils_compress_Zlib.decompress = function(bytes) {
	var data = pako.inflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib.__properties__ = {get_current:"get_current",get_application:"get_application"};
openfl_Lib["as"] = function(v,c) {
	if(js_Boot.__instanceof(v,c)) {
		return v;
	} else {
		return null;
	}
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	if(target == null) {
		target = "_blank";
	}
	lime_system_System.openURL(request.url,target);
};
openfl_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	var _this = openfl_Lib.__sentWarnings;
	if(!(__map_reserved[api] != null ? _this.existsReserved(api) : _this.h.hasOwnProperty(api))) {
		var _this1 = openfl_Lib.__sentWarnings;
		if(__map_reserved[api] != null) {
			_this1.setReserved(api,true);
		} else {
			_this1.h[api] = true;
		}
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 147, className : "openfl.Lib", methodName : "trace"});
};
openfl_Lib.get_application = function() {
	return openfl__$internal_Lib.application;
};
openfl_Lib.get_current = function() {
	if(openfl__$internal_Lib.current == null) {
		openfl__$internal_Lib.current = new openfl_display_MovieClip();
	}
	return openfl__$internal_Lib.current;
};
var openfl__$Vector_AbstractVector = function(data,array) {
	this.data = data;
	if(array != null) {
		var cacheFixed = data.fixed;
		data.fixed = false;
		var _g1 = 0;
		var _g = array.length;
		while(_g1 < _g) {
			var i = _g1++;
			data.set(i,array[i]);
		}
		data.fixed = cacheFixed;
	}
};
$hxClasses["openfl._Vector.AbstractVector"] = openfl__$Vector_AbstractVector;
openfl__$Vector_AbstractVector.__name__ = ["openfl","_Vector","AbstractVector"];
openfl__$Vector_AbstractVector.prototype = {
	data: null
	,toJSON: function() {
		return this.data.toJSON();
	}
	,__class__: openfl__$Vector_AbstractVector
};
var openfl__$Vector_IVector = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = ["openfl","_Vector","IVector"];
openfl__$Vector_IVector.prototype = {
	get_length: null
	,set_length: null
	,fixed: null
	,concat: null
	,copy: null
	,get: null
	,indexOf: null
	,insertAt: null
	,iterator: null
	,join: null
	,lastIndexOf: null
	,pop: null
	,push: null
	,removeAt: null
	,reverse: null
	,set: null
	,shift: null
	,slice: null
	,sort: null
	,splice: null
	,toString: null
	,unshift: null
	,toJSON: null
	,__class__: openfl__$Vector_IVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_BoolVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = ["openfl","_Vector","BoolVector"];
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_BoolVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_BoolVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_BoolVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_BoolVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return false;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return false;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_BoolVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_BoolVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = false;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FloatVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = ["openfl","_Vector","FloatVector"];
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FloatVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_FloatVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_FloatVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_FloatVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_FloatVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FloatVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FunctionVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = ["openfl","_Vector","FunctionVector"];
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FunctionVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_FunctionVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_FunctionVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_FunctionVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return null;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_FunctionVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FunctionVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = null;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_IntVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = ["openfl","_Vector","IntVector"];
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_IntVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_IntVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_IntVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_IntVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_IntVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_IntVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_ObjectVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = ["openfl","_Vector","ObjectVector"];
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_ObjectVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_ObjectVector)).__array));
		}
	}
	,copy: function() {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array.push(null);
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$internal_Lib = function() { };
$hxClasses["openfl._internal.Lib"] = openfl__$internal_Lib;
openfl__$internal_Lib.__name__ = ["openfl","_internal","Lib"];
openfl__$internal_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	var _this = openfl__$internal_Lib.__sentWarnings;
	if(!(__map_reserved[api] != null ? _this.existsReserved(api) : _this.h.hasOwnProperty(api))) {
		var _this1 = openfl__$internal_Lib.__sentWarnings;
		if(__map_reserved[api] != null) {
			_this1.setReserved(api,true);
		} else {
			_this1.h[api] = true;
		}
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
var openfl__$internal_renderer_AbstractBlendModeManager = function() {
};
$hxClasses["openfl._internal.renderer.AbstractBlendModeManager"] = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_AbstractBlendModeManager.__name__ = ["openfl","_internal","renderer","AbstractBlendModeManager"];
openfl__$internal_renderer_AbstractBlendModeManager.prototype = {
	setBlendMode: function(blendMode) {
	}
	,__class__: openfl__$internal_renderer_AbstractBlendModeManager
};
var openfl__$internal_renderer_AbstractFilterManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractFilterManager"] = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_AbstractFilterManager.__name__ = ["openfl","_internal","renderer","AbstractFilterManager"];
openfl__$internal_renderer_AbstractFilterManager.prototype = {
	renderSession: null
	,pushObject: function(object) {
		return null;
	}
	,popObject: function(object) {
	}
	,__class__: openfl__$internal_renderer_AbstractFilterManager
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,popRect: function() {
	}
	,saveState: function() {
	}
	,restoreState: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(stage) {
	this.stage = stage;
	this.width = stage.stageWidth;
	this.height = stage.stageHeight;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	height: null
	,width: null
	,transparent: null
	,viewport: null
	,renderSession: null
	,stage: null
	,clear: function() {
	}
	,render: function() {
	}
	,renderStage3D: function() {
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_AbstractShaderManager = function() {
};
$hxClasses["openfl._internal.renderer.AbstractShaderManager"] = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_AbstractShaderManager.__name__ = ["openfl","_internal","renderer","AbstractShaderManager"];
openfl__$internal_renderer_AbstractShaderManager.prototype = {
	currentShader: null
	,defaultShader: null
	,initShader: function(shader) {
		return shader;
	}
	,setShader: function(shader) {
	}
	,updateShader: function(shader) {
	}
	,__class__: openfl__$internal_renderer_AbstractShaderManager
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	if(openfl__$internal_renderer_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else {
		this.clear();
	}
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,copyOnWrite: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,append: function(other) {
		if(this.get_length() == 0) {
			this.types = other.types;
			this.b = other.b;
			this.i = other.i;
			this.f = other.f;
			this.o = other.o;
			this.ff = other.ff;
			this.ii = other.ii;
			this.copyOnWrite = other.copyOnWrite = true;
			return other;
		}
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var _g2 = data.prev;
				switch(_g2[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				var this1 = data;
				var c = this1;
				this.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				break;
			case 1:
				var _g3 = data.prev;
				switch(_g3[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				var this2 = data;
				var c1 = this2;
				this.beginFill(c1.buffer.i[c1.iPos],c1.buffer.f[c1.fPos]);
				break;
			case 2:
				var _g4 = data.prev;
				switch(_g4[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				var this3 = data;
				var c2 = this3;
				this.beginGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				break;
			case 3:
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this4 = data;
				var c3 = this4;
				this.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 4:
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this5 = data;
				var c4 = this5;
				this.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 5:
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this6 = data;
				var c5 = this6;
				this.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 6:
				var _g8 = data.prev;
				switch(_g8[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this7 = data;
				var c6 = this7;
				this.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 7:
				var _g9 = data.prev;
				switch(_g9[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this8 = data;
				var c7 = this8;
				this.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				var _g10 = data.prev;
				switch(_g10[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this9 = data;
				var c8 = this9;
				this.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				break;
			case 10:
				var _g11 = data.prev;
				switch(_g11[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				var this10 = data;
				var c9 = this10;
				this.drawTriangles(c9.buffer.o[c9.oPos],c9.buffer.o[c9.oPos + 1],c9.buffer.o[c9.oPos + 2],c9.buffer.o[c9.oPos + 3]);
				break;
			case 11:
				var _g12 = data.prev;
				switch(_g12[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				var this11 = data;
				var c10 = this11;
				this.endFill();
				break;
			case 12:
				var _g13 = data.prev;
				switch(_g13[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this12 = data;
				var c11 = this12;
				this.lineBitmapStyle(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.b[c11.bPos],c11.buffer.b[c11.bPos + 1]);
				break;
			case 13:
				var _g14 = data.prev;
				switch(_g14[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this13 = data;
				var c12 = this13;
				this.lineGradientStyle(c12.buffer.o[c12.oPos],c12.buffer.ii[c12.iiPos],c12.buffer.ff[c12.ffPos],c12.buffer.ii[c12.iiPos + 1],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos]);
				break;
			case 14:
				var _g15 = data.prev;
				switch(_g15[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this14 = data;
				var c13 = this14;
				this.lineStyle(c13.buffer.o[c13.oPos],c13.buffer.i[c13.iPos],c13.buffer.f[c13.fPos],c13.buffer.b[c13.bPos],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos + 1]);
				break;
			case 15:
				var _g16 = data.prev;
				switch(_g16[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this15 = data;
				var c14 = this15;
				this.lineTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				break;
			case 16:
				var _g17 = data.prev;
				switch(_g17[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this16 = data;
				var c15 = this16;
				this.moveTo(c15.buffer.f[c15.fPos],c15.buffer.f[c15.fPos + 1]);
				break;
			case 17:
				var _g18 = data.prev;
				switch(_g18[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				var this17 = data;
				var c16 = this17;
				this.overrideMatrix(c16.buffer.o[c16.oPos]);
				break;
			case 18:
				var _g19 = data.prev;
				switch(_g19[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
				var this18 = data;
				var c17 = this18;
				this.windingEvenOdd();
				break;
			case 19:
				var _g20 = data.prev;
				switch(_g20[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
				var this19 = data;
				var c18 = this19;
				this.windingNonZero();
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,clear: function() {
		this.types = openfl__$internal_renderer_DrawCommandBuffer.empty.types;
		this.b = openfl__$internal_renderer_DrawCommandBuffer.empty.b;
		this.i = openfl__$internal_renderer_DrawCommandBuffer.empty.i;
		this.f = openfl__$internal_renderer_DrawCommandBuffer.empty.f;
		this.o = openfl__$internal_renderer_DrawCommandBuffer.empty.o;
		this.ff = openfl__$internal_renderer_DrawCommandBuffer.empty.ff;
		this.ii = openfl__$internal_renderer_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,overrideMatrix: function(matrix) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,windingEvenOdd: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD);
	}
	,windingNonZero: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,'float': function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,'int': function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginFill: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginGradientFill: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		var this1 = this;
		return this1;
	}
	,readCubicCurveTo: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		var this1 = this;
		return this1;
	}
	,readCurveTo: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		var this1 = this;
		return this1;
	}
	,readDrawCircle: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		var this1 = this;
		return this1;
	}
	,readDrawEllipse: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		var this1 = this;
		return this1;
	}
	,readDrawRect: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		var this1 = this;
		return this1;
	}
	,readDrawRoundRect: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		var this1 = this;
		return this1;
	}
	,readDrawTriangles: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		var this1 = this;
		return this1;
	}
	,readEndFill: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		var this1 = this;
		return this1;
	}
	,readLineBitmapStyle: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineGradientStyle: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineStyle: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineTo: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		var this1 = this;
		return this1;
	}
	,readMoveTo: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		var this1 = this;
		return this1;
	}
	,readOverrideMatrix: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		var this1 = this;
		return this1;
	}
	,readWindingEvenOdd: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
		var this1 = this;
		return this1;
	}
	,readWindingNonZero: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
		var this1 = this;
		return this1;
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = type;
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginBitmapFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginGradientFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CubicCurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 5];
};
var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawCircleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawEllipseView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRoundRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = {get_ellipseHeight:"get_ellipseHeight",get_ellipseWidth:"get_ellipseWidth",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTrianglesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = {get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","EndFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineBitmapStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineGradientStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","MoveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","OverrideMatrixView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = {get_matrix:"get_matrix"};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.WindingEvenOddView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","WindingEvenOddView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.WindingNonZeroView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","WindingNonZeroView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : ["openfl","_internal","renderer","DrawCommandType"], __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","WINDING_EVEN_ODD","WINDING_NON_ZERO","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",3];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",5];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",7];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",8];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",9];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",10];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",11];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",12];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",13];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",15];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",16];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",17];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD = ["WINDING_EVEN_ODD",18];
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD.toString = $estr;
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO = ["WINDING_NON_ZERO",19];
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",20];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
var openfl__$internal_renderer_RenderSession = function() {
	this.activeTextures = 0;
	this.allowSmoothing = true;
	this.clearRenderDirty = false;
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	allowSmoothing: null
	,cairo: null
	,clearRenderDirty: null
	,context: null
	,element: null
	,gl: null
	,renderer: null
	,roundPixels: null
	,transformProperty: null
	,transformOriginProperty: null
	,upscaled: null
	,vendorPrefix: null
	,projectionMatrix: null
	,z: null
	,drawCount: null
	,currentBlendMode: null
	,activeTextures: null
	,blendModeManager: null
	,filterManager: null
	,maskManager: null
	,shaderManager: null
	,__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	var cairo = renderSession.cairo;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
		renderSession.maskManager.pushObject(bitmap);
		var transform = bitmap.__renderTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else {
			cairo.set_matrix(transform.__toMatrix3());
		}
		var surface = bitmap.bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,renderSession.allowSmoothing && bitmap.smoothing ? 1 : 3);
			cairo.set_source(pattern);
			if(bitmap.__worldAlpha == 1) {
				cairo.paint();
			} else {
				cairo.paintWithAlpha(bitmap.__worldAlpha);
			}
		}
		renderSession.maskManager.popObject(bitmap);
	}
};
var openfl__$internal_renderer_cairo_CairoDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoDisplayObject"] = openfl__$internal_renderer_cairo_CairoDisplayObject;
openfl__$internal_renderer_cairo_CairoDisplayObject.__name__ = ["openfl","_internal","renderer","cairo","CairoDisplayObject"];
openfl__$internal_renderer_cairo_CairoDisplayObject.render = function(displayObject,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) {
		return;
	}
	if(!strokeBefore) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	}
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
	if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
	}
	if(strokeBefore) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	}
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
};
openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var pattern = null;
	var point = null;
	var point2 = null;
	var releaseMatrix = false;
	if(matrix == null) {
		matrix = openfl_geom_Matrix.__pool.get();
		releaseMatrix = true;
	}
	switch(type) {
	case 0:
		point = openfl_geom_Point.__pool.get();
		point.setTo(-819.2,0);
		var px = point.x;
		var py = point.y;
		point.x = px * matrix.a + py * matrix.c + matrix.tx;
		point.y = px * matrix.b + py * matrix.d + matrix.ty;
		point2 = openfl_geom_Point.__pool.get();
		point2.setTo(819.2,0);
		var px1 = point2.x;
		var py1 = point2.y;
		point2.x = px1 * matrix.a + py1 * matrix.c + matrix.tx;
		point2.y = px1 * matrix.b + py1 * matrix.d + matrix.ty;
		point.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point2.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		point2.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear(point.x,point.y,point2.x,point2.y);
		break;
	case 1:
		point = openfl_geom_Point.__pool.get();
		point.setTo(1638.4,0);
		var px2 = point.x;
		var py2 = point.y;
		point.x = px2 * matrix.a + py2 * matrix.c + matrix.tx;
		point.y = px2 * matrix.b + py2 * matrix.d + matrix.ty;
		var x = matrix.tx + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		var y = matrix.ty + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial(x,y,0,x,y,Math.abs((point.x - matrix.tx) / 2));
		break;
	}
	var rgb;
	var alpha;
	var r;
	var g;
	var b;
	var ratio;
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		rgb = colors[i];
		alpha = alphas[i];
		r = ((rgb & 16711680) >>> 16) / 255;
		g = ((rgb & 65280) >>> 8) / 255;
		b = (rgb & 255) / 255;
		ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA(pattern,ratio,r,g,b,alpha);
	}
	if(point != null) {
		openfl_geom_Point.__pool.release(point);
	}
	if(point2 != null) {
		openfl_geom_Point.__pool.release(point2);
	}
	if(releaseMatrix) {
		openfl_geom_Matrix.__pool.release(matrix);
	}
	var mat = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix(pattern);
	mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern,mat);
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function(bitmapFill,matrix,bitmapRepeat,smooth) {
	var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(bitmapFill.getSurface());
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,smooth && openfl__$internal_renderer_cairo_CairoGraphics.allowSmoothing ? 1 : 3);
	if(bitmapRepeat) {
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend(pattern,1);
	}
	openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_cairo_CairoGraphics.endFill = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.fillCommands,false);
	openfl__$internal_renderer_cairo_CairoGraphics.fillCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands,true);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.data.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.data.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		var x = uvt.data.get(t1 - 1);
		result.data.push(x);
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	if(commands.get_length() == 0) {
		return;
	}
	openfl__$internal_renderer_cairo_CairoGraphics.bounds = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var setStart = false;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(3);
	var hasPath = false;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var x;
	var y;
	var width;
	var height;
	var kappa = .5522848;
	var ox;
	var oy;
	var xe;
	var ye;
	var xm;
	var ym;
	var r;
	var g;
	var b;
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var _g2 = data.prev;
				switch(_g2[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				var this1 = data;
				var c = this1;
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = c.buffer.o[c.oPos];
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = c.buffer.b[c.bPos];
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				break;
			case 1:
				var _g3 = data.prev;
				switch(_g3[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				var this2 = data;
				var c1 = this2;
				if(c1.buffer.f[c1.fPos] < 0.005) {
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false;
				} else {
					if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) {
						openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(((c1.buffer.i[c1.iPos] & 16711680) >>> 16) / 255,((c1.buffer.i[c1.iPos] & 65280) >>> 8) / 255,(c1.buffer.i[c1.iPos] & 255) / 255,c1.buffer.f[c1.fPos]);
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 2:
				var _g4 = data.prev;
				switch(_g4[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				var this3 = data;
				var c2 = this3;
				if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) {
					openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 3:
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this4 = data;
				var c3 = this4;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(c3.buffer.f[c3.fPos] - offsetX,c3.buffer.f[c3.fPos + 1] - offsetY,c3.buffer.f[c3.fPos + 2] - offsetX,c3.buffer.f[c3.fPos + 3] - offsetY,c3.buffer.f[c3.fPos + 4] - offsetX,c3.buffer.f[c3.fPos + 5] - offsetY);
				break;
			case 4:
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this5 = data;
				var c4 = this5;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2] - offsetX,c4.buffer.f[c4.fPos + 3] - offsetY);
				break;
			case 5:
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this6 = data;
				var c5 = this6;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(c5.buffer.f[c5.fPos] - offsetX + c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 1] - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.arc(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],0,Math.PI * 2);
				break;
			case 6:
				var _g8 = data.prev;
				switch(_g8[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this7 = data;
				var c6 = this7;
				hasPath = true;
				x = c6.buffer.f[c6.fPos];
				y = c6.buffer.f[c6.fPos + 1];
				width = c6.buffer.f[c6.fPos + 2];
				height = c6.buffer.f[c6.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var _g9 = data.prev;
				switch(_g9[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this8 = data;
				var c7 = this8;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.rectangle(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY,c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				var _g10 = data.prev;
				switch(_g10[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this9 = data;
				var c8 = this9;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c8.buffer.f[c8.fPos] - offsetX,c8.buffer.f[c8.fPos + 1] - offsetY,c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				break;
			case 10:
				var _g11 = data.prev;
				switch(_g11[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				var this10 = data;
				var c9 = this10;
				var v = c9.buffer.o[c9.oPos];
				var ind = c9.buffer.o[c9.oPos + 1];
				var uvt = c9.buffer.o[c9.oPos + 2];
				var colorFill = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
				if(colorFill && uvt != null) {
					throw "__break__";
				}
				var width1 = 0;
				var height1 = 0;
				var currentMatrix = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__renderTransform.__toMatrix3();
				if(!colorFill) {
					if(uvt == null) {
						uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
						var _g31 = 0;
						var _g21 = v.data.get_length() / 2 | 0;
						while(_g31 < _g21) {
							var i = _g31++;
							var x1 = v.data.get(i * 2);
							uvt.data.push(x1 - offsetX / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width);
							var x2 = v.data.get(i * 2 + 1);
							uvt.data.push(x2 - offsetY / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height);
						}
					}
					var skipT = c9.buffer.o[c9.oPos + 2].data.get_length() != v.data.get_length();
					var normalizedUVT = openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(uvt,skipT);
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.width | 0;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.height | 0;
					} else {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
					}
				}
				var i1 = 0;
				var l = ind.data.get_length();
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x11;
				var y1;
				var x21;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				var matrix = new lime_math_Matrix3();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(1);
				while(i1 < l) {
					a_ = i1;
					b_ = i1 + 1;
					c_ = i1 + 2;
					iax = ind.data.get(a_) * 2;
					iay = ind.data.get(a_) * 2 + 1;
					ibx = ind.data.get(b_) * 2;
					iby = ind.data.get(b_) * 2 + 1;
					icx = ind.data.get(c_) * 2;
					icy = ind.data.get(c_) * 2 + 1;
					x11 = v.data.get(iax) - offsetX;
					y1 = v.data.get(iay) - offsetY;
					x21 = v.data.get(ibx) - offsetX;
					y2 = v.data.get(iby) - offsetY;
					x3 = v.data.get(icx) - offsetX;
					y3 = v.data.get(icy) - offsetY;
					var _g22 = c9.buffer.o[c9.oPos + 3];
					switch(_g22) {
					case 0:
						if((x21 - x11) * (y3 - y1) - (y2 - y1) * (x3 - x11) < 0) {
							i1 += 3;
							continue;
						}
						break;
					case 2:
						if(!((x21 - x11) * (y3 - y1) - (y2 - y1) * (x3 - x11) < 0)) {
							i1 += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x11,y1);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x21,y2);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
						if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
						}
						i1 += 3;
						continue;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.graphics.__renderTransform.__toMatrix3());
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x11,y1);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x21,y2);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
					uvx1 = uvt.data.get(iax) * width1;
					uvx2 = uvt.data.get(ibx) * width1;
					uvx3 = uvt.data.get(icx) * width1;
					uvy1 = uvt.data.get(iay) * height1;
					uvy2 = uvt.data.get(iby) * height1;
					uvy3 = uvt.data.get(icy) * height1;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i1 += 3;
						continue;
					}
					x11 *= currentMatrix.a;
					x21 *= currentMatrix.a;
					x3 *= currentMatrix.a;
					y1 *= currentMatrix.d;
					y2 *= currentMatrix.d;
					y3 *= currentMatrix.d;
					t1 = -(uvy1 * (x3 - x21) - uvy2 * x3 + uvy3 * x21 + (uvy2 - uvy3) * x11) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x21) - uvx2 * x3 + uvx3 * x21 + (uvx2 - uvx3) * x11) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x21 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x21) + (uvx3 * uvy2 - uvx2 * uvy3) * x11) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					matrix.setTo(t1,t2,t3,t4,dx,dy);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
					if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.fill();
					}
					i1 += 3;
				}
				break;
			case 12:
				var _g12 = data.prev;
				switch(_g12[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this11 = data;
				var c10 = this11;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
					openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 13:
				var _g13 = data.prev;
				switch(_g13[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this12 = data;
				var c11 = this12;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
					openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(c11.buffer.o[c11.oPos],c11.buffer.ii[c11.iiPos],c11.buffer.ff[c11.ffPos],c11.buffer.ii[c11.iiPos + 1],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 14:
				var _g14 = data.prev;
				switch(_g14[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this13 = data;
				var c12 = this13;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
					openfl__$internal_renderer_cairo_CairoGraphics.closePath(true);
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				if(c12.buffer.o[c12.oPos] == null) {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false;
				} else {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineWidth(c12.buffer.o[c12.oPos] > 0 ? c12.buffer.o[c12.oPos] : 1);
					if(c12.buffer.o[c12.oPos + 3] == null) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(1);
					} else {
						var _g23 = c12.buffer.o[c12.oPos + 3];
						var tmp;
						switch(_g23) {
						case 0:
							tmp = 2;
							break;
						case 1:
							tmp = 0;
							break;
						default:
							tmp = 1;
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(tmp);
					}
					if(c12.buffer.o[c12.oPos + 2] == null) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(1);
					} else {
						var _g24 = c12.buffer.o[c12.oPos + 2];
						var tmp1;
						switch(_g24) {
						case 0:
							tmp1 = 0;
							break;
						case 2:
							tmp1 = 2;
							break;
						default:
							tmp1 = 1;
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(tmp1);
					}
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_miterLimit(c12.buffer.f[c12.fPos + 1]);
					r = ((c12.buffer.i[c12.iPos] & 16711680) >>> 16) / 255;
					g = ((c12.buffer.i[c12.iPos] & 65280) >>> 8) / 255;
					b = (c12.buffer.i[c12.iPos] & 255) / 255;
					if(c12.buffer.f[c12.fPos] == 1) {
						openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB(r,g,b);
					} else {
						openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(r,g,b,c12.buffer.f[c12.fPos]);
					}
				}
				break;
			case 15:
				var _g15 = data.prev;
				switch(_g15[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this14 = data;
				var c13 = this14;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(c13.buffer.f[c13.fPos] - offsetX,c13.buffer.f[c13.fPos + 1] - offsetY);
				positionX = c13.buffer.f[c13.fPos];
				positionY = c13.buffer.f[c13.fPos + 1];
				if(positionX == startX && positionY == startY) {
					closeGap = true;
				}
				break;
			case 16:
				var _g16 = data.prev;
				switch(_g16[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this15 = data;
				var c14 = this15;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(c14.buffer.f[c14.fPos] - offsetX,c14.buffer.f[c14.fPos + 1] - offsetY);
				positionX = c14.buffer.f[c14.fPos];
				positionY = c14.buffer.f[c14.fPos + 1];
				if(setStart) {
					closeGap = true;
				}
				startX = c14.buffer.f[c14.fPos];
				startY = c14.buffer.f[c14.fPos + 1];
				setStart = true;
				break;
			case 18:
				var _g17 = data.prev;
				switch(_g17[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
				var this16 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
				break;
			case 19:
				var _g18 = data.prev;
				switch(_g18[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
				var this17 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(0);
				break;
			default:
				var _g19 = data.prev;
				switch(_g19[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = type;
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	data.destroy();
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
			if(openfl__$internal_renderer_cairo_CairoGraphics.hasFill && closeGap) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(startX - offsetX,startY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.closePath(false);
			} else if(closeGap && positionX == startX && positionY == startY) {
				openfl__$internal_renderer_cairo_CairoGraphics.closePath(false);
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
			if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
			}
		}
		if(!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(-openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,-openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			if(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix != null) {
				var matrix1 = openfl_geom_Matrix.__pool.get();
				matrix1.copyFrom(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix);
				matrix1.invert();
				if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
					matrix1.concat(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix);
				}
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern,matrix1.__toMatrix3());
				openfl_geom_Matrix.__pool.release(matrix1);
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
			if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3());
				if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3());
			} else if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
		}
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx,cy);
		current = new lime_math_Vector2(cx,cy);
	} else {
		current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	}
	var cx1 = current.x + 0.66666666666666663 * (cx - current.x);
	var cy1 = current.y + 0.66666666666666663 * (cy - current.y);
	var cx2 = x + 0.66666666666666663 * (cx - x);
	var cy2 = y + 0.66666666666666663 * (cy - y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(cx1,cy1,cx2,cy2,x,y);
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderSession,parentTransform) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		var cairo = renderSession.cairo;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var x;
		var y;
		var width;
		var height;
		var kappa = .5522848;
		var ox;
		var oy;
		var xe;
		var ye;
		var xm;
		var ym;
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var _g2 = data.prev;
				switch(_g2[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this1 = data;
				var c = this1;
				cairo.curveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 4];
				break;
			case 4:
				var _g3 = data.prev;
				switch(_g3[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this2 = data;
				var c1 = this2;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 5:
				var _g4 = data.prev;
				switch(_g4[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this3 = data;
				var c2 = this3;
				cairo.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2);
				break;
			case 6:
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this4 = data;
				var c3 = this4;
				x = c3.buffer.f[c3.fPos];
				y = c3.buffer.f[c3.fPos + 1];
				width = c3.buffer.f[c3.fPos + 2];
				height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				cairo.moveTo(x,ym);
				cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this5 = data;
				var c4 = this5;
				cairo.rectangle(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 8:
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this6 = data;
				var c5 = this6;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 15:
				var _g8 = data.prev;
				switch(_g8[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this7 = data;
				var c6 = this7;
				cairo.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 16:
				var _g9 = data.prev;
				switch(_g9[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this8 = data;
				var c7 = this8;
				cairo.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				var _g10 = data.prev;
				switch(_g10[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = type;
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_cairo_CairoRenderer = function(stage,cairo) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	cairo: null
	,clear: function() {
		this.cairo.identityMatrix();
		if(this.stage.__clearBeforeRender) {
			this.cairo.setSourceRGB(this.stage.__colorSplit[0],this.stage.__colorSplit[1],this.stage.__colorSplit[2]);
			this.cairo.paint();
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.stage.__renderCairo(this.renderSession);
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderCairo(this.stage,this.renderSession);
		}
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl","_internal","renderer","cairo","CairoTextField"];
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderSession,transform) {
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid && bitmap.bitmapData.readable) {
		renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
		renderSession.maskManager.pushObject(bitmap,false);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.bitmapData.image);
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.__scrollRect;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(bitmap.bitmapData.image.get_src(),0,0);
		} else {
			context.drawImage(bitmap.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.msImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		renderSession.maskManager.popObject(bitmap,false);
	}
};
var openfl__$internal_renderer_canvas_CanvasBlendModeManager = function(renderSession) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.canvas.CanvasBlendModeManager"] = openfl__$internal_renderer_canvas_CanvasBlendModeManager;
openfl__$internal_renderer_canvas_CanvasBlendModeManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasBlendModeManager"];
openfl__$internal_renderer_canvas_CanvasBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_canvas_CanvasBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,renderSession: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.renderSession.context.globalCompositeOperation = "lighter";
			break;
		case 1:
			this.renderSession.context.globalCompositeOperation = "destination-in";
			break;
		case 2:
			this.renderSession.context.globalCompositeOperation = "darken";
			break;
		case 3:
			this.renderSession.context.globalCompositeOperation = "difference";
			break;
		case 4:
			this.renderSession.context.globalCompositeOperation = "destination-out";
			break;
		case 5:
			this.renderSession.context.globalCompositeOperation = "hard-light";
			break;
		case 7:
			this.renderSession.context.globalCompositeOperation = "source-over";
			break;
		case 8:
			this.renderSession.context.globalCompositeOperation = "lighten";
			break;
		case 9:
			this.renderSession.context.globalCompositeOperation = "multiply";
			break;
		case 11:
			this.renderSession.context.globalCompositeOperation = "overlay";
			break;
		case 12:
			this.renderSession.context.globalCompositeOperation = "screen";
			break;
		default:
			this.renderSession.context.globalCompositeOperation = "source-over";
		}
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasBlendModeManager
});
var openfl__$internal_renderer_canvas_CanvasDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasDisplayObject"] = openfl__$internal_renderer_canvas_CanvasDisplayObject;
openfl__$internal_renderer_canvas_CanvasDisplayObject.__name__ = ["openfl","_internal","renderer","canvas","CanvasDisplayObject"];
openfl__$internal_renderer_canvas_CanvasDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__cacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderSession.blendModeManager.setBlendMode(displayObject.__worldBlendMode);
		renderSession.maskManager.pushObject(displayObject);
		var context = renderSession.context;
		var transform = displayObject.__renderTransform;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		var color = displayObject.opaqueBackground;
		context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
		context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
		renderSession.maskManager.popObject(displayObject);
	}
	if(displayObject.__graphics != null) {
		if(!(!displayObject.__renderable || displayObject.__worldAlpha <= 0)) {
			var graphics = displayObject.__graphics;
			if(graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,displayObject.__renderTransform);
				var bounds = graphics.__bounds;
				var width = graphics.__width;
				var height = graphics.__height;
				if(graphics.__canvas != null) {
					var context1 = renderSession.context;
					var scrollRect = displayObject.__scrollRect;
					if(width > 0 && height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
						renderSession.blendModeManager.setBlendMode(displayObject.__worldBlendMode);
						renderSession.maskManager.pushObject(displayObject);
						context1.globalAlpha = displayObject.__worldAlpha;
						var transform1 = graphics.__worldTransform;
						if(renderSession.roundPixels) {
							context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
						} else {
							context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
						}
						context1.drawImage(graphics.__canvas,0,0);
						renderSession.maskManager.popObject(displayObject);
					}
				}
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	if(!strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	if(strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(smooth);
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat ? "repeat" : "no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	var point = null;
	var point2 = null;
	var releaseMatrix = false;
	if(matrix == null) {
		matrix = openfl_geom_Matrix.__pool.get();
		releaseMatrix = true;
	}
	switch(type) {
	case 0:
		point = openfl_geom_Point.__pool.get();
		point.setTo(-819.2,0);
		var px = point.x;
		var py = point.y;
		point.x = px * matrix.a + py * matrix.c + matrix.tx;
		point.y = px * matrix.b + py * matrix.d + matrix.ty;
		point2 = openfl_geom_Point.__pool.get();
		point2.setTo(819.2,0);
		var px1 = point2.x;
		var py1 = point2.y;
		point2.x = px1 * matrix.a + py1 * matrix.c + matrix.tx;
		point2.y = px1 * matrix.b + py1 * matrix.d + matrix.ty;
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point.x,point.y,point2.x,point2.y);
		break;
	case 1:
		point = openfl_geom_Point.__pool.get();
		point.setTo(1638.4,0);
		var px2 = point.x;
		var py2 = point.y;
		point.x = px2 * matrix.a + py2 * matrix.c + matrix.tx;
		point.y = px2 * matrix.b + py2 * matrix.d + matrix.ty;
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,Math.abs((point.x - matrix.tx) / 2));
		break;
	}
	var rgb;
	var alpha;
	var r;
	var g;
	var b;
	var ratio;
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		rgb = colors[i];
		alpha = alphas[i];
		r = (rgb & 16711680) >>> 16;
		g = (rgb & 65280) >>> 8;
		b = rgb & 255;
		ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	if(point != null) {
		openfl_geom_Point.__pool.release(point);
	}
	if(point2 != null) {
		openfl_geom_Point.__pool.release(point2);
	}
	if(releaseMatrix) {
		openfl_geom_Matrix.__pool.release(matrix);
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	var tmp = bitmap.image.get_src();
	context.fillStyle = context.createPattern(tmp,repeat ? "repeat" : "no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
		context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
	}
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
	openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		var transform = graphics.__renderTransform;
		var px = x * transform.a + y * transform.c + transform.tx;
		var py = x * transform.b + y * transform.d + transform.ty;
		x = px;
		y = py;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.a + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.c + transform.tx;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.b + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.d + transform.ty;
		var cacheCanvas = graphics.__canvas;
		var cacheContext = graphics.__context;
		graphics.__canvas = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas;
		graphics.__context = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext;
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var _g2 = data.prev;
					switch(_g2[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					var this1 = data;
					var c = this1;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var _g3 = data.prev;
					switch(_g3[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
					var this2 = data;
					var c1 = this2;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
				} else {
					var _g4 = data.prev;
					switch(_g4[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					var this3 = data;
					var c2 = this3;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c2.buffer.i[c2.iPos],1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c2.buffer.i[c2.iPos],1);
				}
				break;
			case 3:
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this4 = data;
				var c3 = this4;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 4:
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this5 = data;
				var c4 = this5;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 5:
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this6 = data;
				var c5 = this6;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 6:
				var _g8 = data.prev;
				switch(_g8[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this7 = data;
				var c6 = this7;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 7:
				var _g9 = data.prev;
				switch(_g9[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this8 = data;
				var c7 = this8;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				var _g10 = data.prev;
				switch(_g10[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this9 = data;
				var c8 = this9;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				break;
			case 11:
				var _g11 = data.prev;
				switch(_g11[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				var this10 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 12:
				var _g12 = data.prev;
				switch(_g12[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this11 = data;
				var c9 = this11;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c9.buffer.o[c9.oPos],c9.buffer.o[c9.oPos + 1],c9.buffer.b[c9.bPos],c9.buffer.b[c9.bPos + 1]);
				break;
			case 13:
				var _g13 = data.prev;
				switch(_g13[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this12 = data;
				var c10 = this12;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c10.buffer.o[c10.oPos],c10.buffer.ii[c10.iiPos],c10.buffer.ff[c10.ffPos],c10.buffer.ii[c10.iiPos + 1],c10.buffer.o[c10.oPos + 1],c10.buffer.o[c10.oPos + 2],c10.buffer.o[c10.oPos + 3],c10.buffer.f[c10.fPos]);
				break;
			case 14:
				var _g14 = data.prev;
				switch(_g14[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this13 = data;
				var c11 = this13;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c11.buffer.o[c11.oPos],c11.buffer.i[c11.iPos],1,c11.buffer.b[c11.bPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos + 1]);
				break;
			case 15:
				var _g15 = data.prev;
				switch(_g15[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this14 = data;
				var c12 = this14;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1]);
				break;
			case 16:
				var _g16 = data.prev;
				switch(_g16[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this15 = data;
				var c13 = this15;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			case 18:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
				break;
			case 19:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				var _g17 = data.prev;
				switch(_g17[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = type;
			}
		}
		var hitTest = false;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
			hitTest = true;
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
			hitTest = true;
		}
		data.destroy();
		graphics.__canvas = cacheCanvas;
		graphics.__context = cacheContext;
		return hitTest;
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.data.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.data.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		var x = uvt.data.get(t1 - 1);
		result.data.push(x);
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var setStart = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var x;
	var y;
	var width;
	var height;
	var kappa = .5522848;
	var ox;
	var oy;
	var xe;
	var ye;
	var xm;
	var ym;
	var r;
	var g;
	var b;
	var optimizationUsed;
	var canOptimizeMatrix;
	var st;
	var sr;
	var sb;
	var sl;
	var stl = null;
	var sbr = null;
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var _g2 = data.prev;
				switch(_g2[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				var this1 = data;
				var c = this1;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = c.buffer.o[c.oPos];
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c.buffer.o[c.oPos],true,c.buffer.b[c.bPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				if(c.buffer.o[c.oPos + 1] != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = c.buffer.o[c.oPos + 1];
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = c.buffer.o[c.oPos + 1].clone();
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
				}
				break;
			case 1:
				var _g3 = data.prev;
				switch(_g3[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				var this2 = data;
				var c1 = this2;
				if(c1.buffer.f[c1.fPos] < 0.005) {
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				} else {
					if(c1.buffer.f[c1.fPos] == 1) {
						var tmp = StringTools.hex(c1.buffer.i[c1.iPos] & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + tmp;
					} else {
						r = (c1.buffer.i[c1.iPos] & 16711680) >>> 16;
						g = (c1.buffer.i[c1.iPos] & 65280) >>> 8;
						b = c1.buffer.i[c1.iPos] & 255;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c1.buffer.f[c1.fPos] + ")";
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				}
				break;
			case 2:
				var _g4 = data.prev;
				switch(_g4[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				var this3 = data;
				var c2 = this3;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				break;
			case 3:
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this4 = data;
				var c3 = this4;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c3.buffer.f[c3.fPos] - offsetX,c3.buffer.f[c3.fPos + 1] - offsetY,c3.buffer.f[c3.fPos + 2] - offsetX,c3.buffer.f[c3.fPos + 3] - offsetY,c3.buffer.f[c3.fPos + 4] - offsetX,c3.buffer.f[c3.fPos + 5] - offsetY);
				break;
			case 4:
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this5 = data;
				var c4 = this5;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2] - offsetX,c4.buffer.f[c4.fPos + 3] - offsetY);
				break;
			case 5:
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this6 = data;
				var c5 = this6;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c5.buffer.f[c5.fPos] - offsetX + c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 1] - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],0,Math.PI * 2,true);
				break;
			case 6:
				var _g8 = data.prev;
				switch(_g8[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this7 = data;
				var c6 = this7;
				x = c6.buffer.f[c6.fPos];
				y = c6.buffer.f[c6.fPos + 1];
				width = c6.buffer.f[c6.fPos + 2];
				height = c6.buffer.f[c6.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var _g9 = data.prev;
				switch(_g9[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this8 = data;
				var c7 = this8;
				optimizationUsed = false;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null && !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					st = 0;
					sr = 0;
					sb = 0;
					sl = 0;
					canOptimizeMatrix = true;
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
						if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) {
							canOptimizeMatrix = false;
						} else {
							if(stl == null) {
								stl = openfl_geom_Point.__pool.get();
							}
							if(sbr == null) {
								sbr = openfl_geom_Point.__pool.get();
							}
							stl.setTo(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1]);
							var _this = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix;
							var px = stl.x;
							var py = stl.y;
							stl.x = px * _this.a + py * _this.c + _this.tx;
							stl.y = px * _this.b + py * _this.d + _this.ty;
							sbr.setTo(c7.buffer.f[c7.fPos] + c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 1] + c7.buffer.f[c7.fPos + 3]);
							var _this1 = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix;
							var px1 = sbr.x;
							var py1 = sbr.y;
							sbr.x = px1 * _this1.a + py1 * _this1.c + _this1.tx;
							sbr.y = px1 * _this1.b + py1 * _this1.d + _this1.ty;
							st = stl.y;
							sl = stl.x;
							sb = sbr.y;
							sr = sbr.x;
						}
					} else {
						st = c7.buffer.f[c7.fPos + 1];
						sl = c7.buffer.f[c7.fPos];
						sb = c7.buffer.f[c7.fPos + 1] + c7.buffer.f[c7.fPos + 3];
						sr = c7.buffer.f[c7.fPos] + c7.buffer.f[c7.fPos + 2];
					}
					if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
						optimizationUsed = true;
						if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY,c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
						}
					}
				}
				if(!optimizationUsed) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY,c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				}
				break;
			case 8:
				var _g10 = data.prev;
				switch(_g10[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this9 = data;
				var c8 = this9;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c8.buffer.f[c8.fPos] - offsetX,c8.buffer.f[c8.fPos + 1] - offsetY,c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				break;
			case 10:
				var _g11 = data.prev;
				switch(_g11[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				var this10 = data;
				var c9 = this10;
				var v = c9.buffer.o[c9.oPos];
				var ind = c9.buffer.o[c9.oPos + 1];
				var uvt = c9.buffer.o[c9.oPos + 2];
				var pattern = null;
				var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
				if(colorFill && uvt != null) {
					throw "__break__";
				}
				if(!colorFill) {
					if(uvt == null) {
						uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
						var _g31 = 0;
						var _g21 = v.data.get_length() / 2 | 0;
						while(_g31 < _g21) {
							var i = _g31++;
							var x1 = v.data.get(i * 2);
							uvt.data.push(x1 - offsetX / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width);
							var x2 = v.data.get(i * 2 + 1);
							uvt.data.push(x2 - offsetY / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
						}
					}
					var skipT = uvt.data.get_length() != v.data.get_length();
					var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,skipT);
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) {
						pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0);
					} else {
						pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
					}
				}
				var i1 = 0;
				var l = ind.data.get_length();
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x11;
				var y1;
				var x21;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				while(i1 < l) {
					a_ = i1;
					b_ = i1 + 1;
					c_ = i1 + 2;
					iax = ind.data.get(a_) * 2;
					iay = ind.data.get(a_) * 2 + 1;
					ibx = ind.data.get(b_) * 2;
					iby = ind.data.get(b_) * 2 + 1;
					icx = ind.data.get(c_) * 2;
					icy = ind.data.get(c_) * 2 + 1;
					x11 = v.data.get(iax) - offsetX;
					y1 = v.data.get(iay) - offsetY;
					x21 = v.data.get(ibx) - offsetX;
					y2 = v.data.get(iby) - offsetY;
					x3 = v.data.get(icx) - offsetX;
					y3 = v.data.get(icy) - offsetY;
					var _g22 = c9.buffer.o[c9.oPos + 3];
					switch(_g22) {
					case 0:
						if((x21 - x11) * (y3 - y1) - (y2 - y1) * (x3 - x11) < 0) {
							i1 += 3;
							continue;
						}
						break;
					case 2:
						if(!((x21 - x11) * (y3 - y1) - (y2 - y1) * (x3 - x11) < 0)) {
							i1 += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x11,y1);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x21,y2);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
						if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
							openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
						}
						i1 += 3;
						continue;
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x11,y1);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x21,y2);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
					uvx1 = uvt.data.get(iax) * pattern.width;
					uvx2 = uvt.data.get(ibx) * pattern.width;
					uvx3 = uvt.data.get(icx) * pattern.width;
					uvy1 = uvt.data.get(iay) * pattern.height;
					uvy2 = uvt.data.get(iby) * pattern.height;
					uvy3 = uvt.data.get(icy) * pattern.height;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i1 += 3;
						continue;
					}
					t1 = -(uvy1 * (x3 - x21) - uvy2 * x3 + uvy3 * x21 + (uvy2 - uvy3) * x11) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x21) - uvx2 * x3 + uvx3 * x21 + (uvx2 - uvx3) * x11) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x21 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x21) + (uvx3 * uvy2 - uvx2 * uvy3) * x11) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
					i1 += 3;
				}
				break;
			case 12:
				var _g12 = data.prev;
				switch(_g12[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this11 = data;
				var c10 = this11;
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
					openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c10.buffer.o[c10.oPos],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				break;
			case 13:
				var _g13 = data.prev;
				switch(_g13[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this12 = data;
				var c11 = this12;
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
					openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c11.buffer.o[c11.oPos],c11.buffer.ii[c11.iiPos],c11.buffer.ff[c11.ffPos],c11.buffer.ii[c11.iiPos + 1],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				break;
			case 14:
				var _g14 = data.prev;
				switch(_g14[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this13 = data;
				var c12 = this13;
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
					openfl__$internal_renderer_canvas_CanvasGraphics.closePath(true);
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				if(c12.buffer.o[c12.oPos] == null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = c12.buffer.o[c12.oPos] > 0 ? c12.buffer.o[c12.oPos] : 1;
					var tmp1 = c12.buffer.o[c12.oPos + 3] == null ? "round" : openfl_display__$JointStyle_JointStyle_$Impl_$.toString(c12.buffer.o[c12.oPos + 3]).toLowerCase();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = tmp1;
					var tmp2;
					if(c12.buffer.o[c12.oPos + 2] == null) {
						tmp2 = "round";
					} else {
						var _g23 = c12.buffer.o[c12.oPos + 2];
						if(_g23 == 0) {
							tmp2 = "butt";
						} else {
							tmp2 = openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(c12.buffer.o[c12.oPos + 2]).toLowerCase();
						}
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = tmp2;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = c12.buffer.f[c12.fPos + 1];
					if(c12.buffer.f[c12.fPos] == 1) {
						var tmp3 = StringTools.hex(c12.buffer.i[c12.iPos] & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + tmp3;
					} else {
						r = (c12.buffer.i[c12.iPos] & 16711680) >>> 16;
						g = (c12.buffer.i[c12.iPos] & 65280) >>> 8;
						b = c12.buffer.i[c12.iPos] & 255;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c12.buffer.f[c12.fPos] + ")";
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				}
				break;
			case 15:
				var _g15 = data.prev;
				switch(_g15[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this14 = data;
				var c13 = this14;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c13.buffer.f[c13.fPos] - offsetX,c13.buffer.f[c13.fPos + 1] - offsetY);
				positionX = c13.buffer.f[c13.fPos];
				positionY = c13.buffer.f[c13.fPos + 1];
				if(positionX == startX && positionY == startY) {
					closeGap = true;
				}
				break;
			case 16:
				var _g16 = data.prev;
				switch(_g16[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this15 = data;
				var c14 = this15;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c14.buffer.f[c14.fPos] - offsetX,c14.buffer.f[c14.fPos + 1] - offsetY);
				positionX = c14.buffer.f[c14.fPos];
				positionY = c14.buffer.f[c14.fPos + 1];
				if(setStart) {
					closeGap = true;
				}
				startX = c14.buffer.f[c14.fPos];
				startY = c14.buffer.f[c14.fPos + 1];
				setStart = true;
				break;
			case 18:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
				break;
			case 19:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				var _g17 = data.prev;
				switch(_g17[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = type;
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	if(stl != null) {
		openfl_geom_Point.__pool.release(stl);
	}
	if(sbr != null) {
		openfl_geom_Point.__pool.release(sbr);
	}
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
		} else if(closeGap && positionX == startX && positionY == startY) {
			openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
		}
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
		}
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession,parentTransform) {
	graphics.__update();
	if(graphics.__dirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing = renderSession.allowSmoothing;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			var transform = graphics.__renderTransform;
			var canvas = graphics.__canvas;
			var scale = openfl__$internal_renderer_canvas_CanvasRenderer.scale;
			var scaledWidth = width * scale | 0;
			var scaledHeight = height * scale | 0;
			if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
			} else {
				canvas.width = width;
				canvas.height = height;
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var hasLineStyle = false;
			var initStrokeX = 0.0;
			var initStrokeY = 0.0;
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type[1]) {
				case 0:case 1:case 2:
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
						var _g2 = data.prev;
						switch(_g2[1]) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.fPos += 6;
							break;
						case 4:
							data.fPos += 4;
							break;
						case 5:
							data.fPos += 3;
							break;
						case 6:
							data.fPos += 4;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 10:
							data.oPos += 4;
							break;
						case 11:
							break;
						case 12:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 13:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 14:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 15:
							data.fPos += 2;
							break;
						case 16:
							data.fPos += 2;
							break;
						case 17:
							data.oPos += 1;
							break;
						case 18:case 19:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
						var this1 = data;
						var c = this1;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
						var _g3 = data.prev;
						switch(_g3[1]) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.fPos += 6;
							break;
						case 4:
							data.fPos += 4;
							break;
						case 5:
							data.fPos += 3;
							break;
						case 6:
							data.fPos += 4;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 10:
							data.oPos += 4;
							break;
						case 11:
							break;
						case 12:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 13:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 14:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 15:
							data.fPos += 2;
							break;
						case 16:
							data.fPos += 2;
							break;
						case 17:
							data.oPos += 1;
							break;
						case 18:case 19:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
						var this2 = data;
						var c1 = this2;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					} else {
						var _g4 = data.prev;
						switch(_g4[1]) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.fPos += 6;
							break;
						case 4:
							data.fPos += 4;
							break;
						case 5:
							data.fPos += 3;
							break;
						case 6:
							data.fPos += 4;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 10:
							data.oPos += 4;
							break;
						case 11:
							break;
						case 12:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 13:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 14:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 15:
							data.fPos += 2;
							break;
						case 16:
							data.fPos += 2;
							break;
						case 17:
							data.oPos += 1;
							break;
						case 18:case 19:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
						var this3 = data;
						var c2 = this3;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c2.buffer.i[c2.iPos],c2.buffer.f[c2.fPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c2.buffer.i[c2.iPos],c2.buffer.f[c2.fPos]);
					}
					break;
				case 3:
					var _g5 = data.prev;
					switch(_g5[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
					var this4 = data;
					var c3 = this4;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
					} else {
						initStrokeX = c3.buffer.f[c3.fPos + 4];
						initStrokeY = c3.buffer.f[c3.fPos + 5];
					}
					break;
				case 4:
					var _g6 = data.prev;
					switch(_g6[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
					var this5 = data;
					var c4 = this5;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
					} else {
						initStrokeX = c4.buffer.f[c4.fPos + 2];
						initStrokeY = c4.buffer.f[c4.fPos + 3];
					}
					break;
				case 5:
					var _g7 = data.prev;
					switch(_g7[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
					var this6 = data;
					var c5 = this6;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
					}
					break;
				case 6:
					var _g8 = data.prev;
					switch(_g8[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
					var this7 = data;
					var c6 = this7;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
					}
					break;
				case 7:
					var _g9 = data.prev;
					switch(_g9[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
					var this8 = data;
					var c7 = this8;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					}
					break;
				case 8:
					var _g10 = data.prev;
					switch(_g10[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
					var this9 = data;
					var c8 = this9;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
					}
					break;
				case 10:
					var _g11 = data.prev;
					switch(_g11[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
					var this10 = data;
					var c9 = this10;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawTriangles(c9.buffer.o[c9.oPos],c9.buffer.o[c9.oPos + 1],c9.buffer.o[c9.oPos + 2],c9.buffer.o[c9.oPos + 3]);
					break;
				case 11:
					var _g12 = data.prev;
					switch(_g12[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
					var this11 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
					hasLineStyle = false;
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					initStrokeX = 0;
					initStrokeY = 0;
					break;
				case 12:
					var _g13 = data.prev;
					switch(_g13[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
					var this12 = data;
					var c10 = this12;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
					break;
				case 13:
					var _g14 = data.prev;
					switch(_g14[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
					var this13 = data;
					var c11 = this13;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c11.buffer.o[c11.oPos],c11.buffer.ii[c11.iiPos],c11.buffer.ff[c11.ffPos],c11.buffer.ii[c11.iiPos + 1],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos]);
					break;
				case 14:
					var _g15 = data.prev;
					switch(_g15[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
					var this14 = data;
					var c12 = this14;
					if(!hasLineStyle && c12.buffer.o[c12.oPos] != null) {
						if(initStrokeX != 0 || initStrokeY != 0) {
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
							initStrokeX = 0;
							initStrokeY = 0;
						}
					}
					hasLineStyle = c12.buffer.o[c12.oPos] != null;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c12.buffer.o[c12.oPos],c12.buffer.i[c12.iPos],c12.buffer.f[c12.fPos],c12.buffer.b[c12.bPos],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos + 1]);
					break;
				case 15:
					var _g16 = data.prev;
					switch(_g16[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
					var this15 = data;
					var c13 = this15;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
					} else {
						initStrokeX = c13.buffer.f[c13.fPos];
						initStrokeY = c13.buffer.f[c13.fPos + 1];
					}
					break;
				case 16:
					var _g17 = data.prev;
					switch(_g17[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
					var this16 = data;
					var c14 = this16;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
					} else {
						initStrokeX = c14.buffer.f[c14.fPos];
						initStrokeY = c14.buffer.f[c14.fPos + 1];
					}
					break;
				case 18:
					var _g18 = data.prev;
					switch(_g18[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
					var this17 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingEvenOdd();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
					break;
				case 19:
					var _g19 = data.prev;
					switch(_g19[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
					var this18 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingNonZero();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
					break;
				default:
					var _g20 = data.prev;
					switch(_g20[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = type;
				}
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var x;
		var y;
		var width;
		var height;
		var kappa = .5522848;
		var ox;
		var oy;
		var xe;
		var ye;
		var xm;
		var ym;
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var _g2 = data.prev;
				switch(_g2[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this1 = data;
				var c = this1;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 5];
				break;
			case 4:
				var _g3 = data.prev;
				switch(_g3[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this2 = data;
				var c1 = this2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 5:
				var _g4 = data.prev;
				switch(_g4[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this3 = data;
				var c2 = this3;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 6:
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this4 = data;
				var c3 = this4;
				x = c3.buffer.f[c3.fPos];
				y = c3.buffer.f[c3.fPos + 1];
				width = c3.buffer.f[c3.fPos + 2];
				height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this5 = data;
				var c4 = this5;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 8:
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this6 = data;
				var c5 = this6;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 15:
				var _g8 = data.prev;
				switch(_g8[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this7 = data;
				var c6 = this7;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 16:
				var _g9 = data.prev;
				switch(_g9[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this8 = data;
				var c7 = this8;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				var _g10 = data.prev;
				switch(_g10[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = type;
			}
		}
		data.destroy();
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing = function(smooth) {
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing) {
		smooth = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled != smooth) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.mozImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.msImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = smooth;
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getRenderTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__cacheBitmapRender && object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__cacheBitmapRender && object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(stage,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.clearRenderDirty = true;
	this.renderSession.context = context;
	this.renderSession.renderer = this;
	this.renderSession.blendModeManager = new openfl__$internal_renderer_canvas_CanvasBlendModeManager(this.renderSession);
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
	var config = stage.window.config;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"allowHighDPI") && config.allowHighDPI) {
		openfl__$internal_renderer_canvas_CanvasRenderer.scale = window.devicePixelRatio || 1;
	}
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	context: null
	,clear: function() {
		this.renderSession.blendModeManager.setBlendMode(10);
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.fillStyle = this.stage.__colorString;
			this.context.fillRect(0,0,this.stage.stageWidth * this.stage.window.__scale,this.stage.stageHeight * this.stage.window.__scale);
		} else if(this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.clearRect(0,0,this.stage.stageWidth * this.stage.window.__scale,this.stage.stageHeight * this.stage.window.__scale);
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.stage.__renderCanvas(this.renderSession);
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderCanvas(this.stage,this.renderSession);
		}
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		var bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(graphics.__canvas != null) {
			var context = renderSession.context;
			var scrollRect = shape.__scrollRect;
			if(width > 0 && height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
				renderSession.blendModeManager.setBlendMode(shape.__worldBlendMode);
				renderSession.maskManager.pushObject(shape);
				context.globalAlpha = shape.__worldAlpha;
				var transform = graphics.__worldTransform;
				if(renderSession.roundPixels) {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
				} else {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				context.drawImage(graphics.__canvas,0,0);
				renderSession.maskManager.popObject(shape);
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderSession,transform) {
	var textEngine = textField.__textEngine;
	var bounds = textEngine.bounds;
	var graphics = textField.__graphics;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update();
	if(textField.__dirty || graphics.__dirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			var transform1 = graphics.__renderTransform;
			graphics.__canvas.width = width;
			graphics.__canvas.height = height;
			openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
				openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
				openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.mozImageSmoothingEnabled = false;
					graphics.__context.msImageSmoothingEnabled = false;
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.mozImageSmoothingEnabled = true;
					graphics.__context.msImageSmoothingEnabled = true;
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g1 = 0;
				var _g = textField.get_scrollV() - 1;
				while(_g1 < _g) {
					var i = _g1++;
					scrollY -= textEngine.lineHeights.data.get(i);
				}
				var advance;
				var offsetY = 0.0;
				var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
				var _g2 = 0;
				var _g11 = textEngine.layoutGroups;
				while(_g2 < _g11.data.get_length()) {
					var group = _g11.data.get(_g2);
					++_g2;
					if(group.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) {
						break;
					}
					if(group.format.underline) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#000000";
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = .5;
						var x = group.offsetX + scrollX;
						var y = group.offsetY + offsetY + scrollY + group.ascent;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
					var tmp2 = StringTools.hex(group.format.color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp2;
					if(applyHack) {
						offsetY = group.format.size * 0.185;
					}
					if(textField.__filters != null && textField.__filters.length > 0) {
						if(js_Boot.__instanceof(textField.__filters[0],openfl_filters_GlowFilter)) {
							var glowFilter = textField.__filters[0];
							var cacheAlpha = openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha;
							openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha * glowFilter.alpha;
							var tmp3 = StringTools.hex(glowFilter.color & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp3;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = Math.max(glowFilter.blurX,glowFilter.blurY);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = null;
							openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha;
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g3 = 0;
								var _g21 = textField.__caretIndex - group.startIndex;
								while(_g3 < _g21) {
									var i1 = _g3++;
									if(group.positions.length <= i1) {
										break;
									}
									advance += group.positions[i1];
								}
								var scrollY1 = 0.0;
								var _g31 = 0;
								var _g22 = textField.get_scrollV() - 1;
								while(_g31 < _g22) {
									var i2 = _g31++;
									scrollY1 -= textEngine.lineHeights.data.get(i2);
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance - textField.get_scrollH(),scrollY1 + 2,1,openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
							}
						} else if(group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex || group.startIndex > textField.__caretIndex && group.endIndex < textField.__selectionIndex || group.startIndex > textField.__selectionIndex && group.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group.startIndex > selectionStart) {
								selectionStart = group.startIndex;
							}
							if(group.endIndex < selectionEnd) {
								selectionEnd = group.endIndex;
							}
							var start;
							var end;
							start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text)) {
								end = textField.getCharBoundaries(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text) - 1);
								end.x += end.width + 2;
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
							}
						}
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp4 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp4;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						var tmp5 = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp5;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX1 = -textField.get_scrollH();
					var scrollY2 = 0.0;
					var _g12 = 0;
					var _g4 = textField.get_scrollV() - 1;
					while(_g12 < _g4) {
						var i3 = _g12++;
						scrollY2 -= textEngine.lineHeights.data.get(i3);
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
					var tmp6 = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp6;
					openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_console_ConsoleRenderer = function(stage,ctx) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	throw new js__$Boot_HaxeError("ConsoleRenderer not supported");
};
$hxClasses["openfl._internal.renderer.console.ConsoleRenderer"] = openfl__$internal_renderer_console_ConsoleRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.__name__ = ["openfl","_internal","renderer","console","ConsoleRenderer"];
openfl__$internal_renderer_console_ConsoleRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function() {
	}
	,__class__: openfl__$internal_renderer_console_ConsoleRenderer
});
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.clear = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
		bitmap.__style = null;
	}
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
		bitmap.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid && bitmap.bitmapData.readable) {
		renderSession.maskManager.pushObject(bitmap);
		if(bitmap.bitmapData.image.buffer.__srcImage != null) {
			openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession);
		} else {
			openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
		}
		renderSession.maskManager.popObject(bitmap);
	} else {
		openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderSession);
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		bitmap.__imageVersion = -1;
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.msImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	if(bitmap.__imageVersion != bitmap.bitmapData.image.version) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.bitmapData.image);
		bitmap.__canvas.width = bitmap.bitmapData.width + 1;
		bitmap.__canvas.width = bitmap.bitmapData.width;
		bitmap.__canvas.height = bitmap.bitmapData.height;
		bitmap.__context.drawImage(bitmap.bitmapData.image.buffer.__srcCanvas,0,0);
		bitmap.__imageVersion = bitmap.bitmapData.image.version;
	}
	openfl__$internal_renderer_dom_DOMRenderer.updateClip(bitmap,renderSession);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.crossOrigin = "Anonymous";
		bitmap.__image.src = bitmap.bitmapData.image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.updateClip(bitmap,renderSession);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMDisplayObject"] = openfl__$internal_renderer_dom_DOMDisplayObject;
openfl__$internal_renderer_dom_DOMDisplayObject.__name__ = ["openfl","_internal","renderer","dom","DOMDisplayObject"];
openfl__$internal_renderer_dom_DOMDisplayObject.clear = function(displayObject,renderSession) {
	openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderSession);
};
openfl__$internal_renderer_dom_DOMDisplayObject.render = function(displayObject,renderSession) {
	var tmp = displayObject.opaqueBackground != null && !displayObject.__cacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	var graphics = displayObject.__graphics;
	if(displayObject.stage != null && displayObject.__worldVisible && displayObject.__renderable && graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,displayObject.__renderTransform);
		if(graphics.__dirty || displayObject.__worldAlphaChanged || displayObject.__canvas != graphics.__canvas) {
			if(graphics.__canvas != null) {
				if(displayObject.__canvas != graphics.__canvas) {
					if(displayObject.__canvas != null) {
						renderSession.element.removeChild(displayObject.__canvas);
					}
					displayObject.__canvas = graphics.__canvas;
					displayObject.__context = graphics.__context;
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(displayObject,displayObject.__canvas,renderSession);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderSession);
			}
		}
		if(displayObject.__canvas != null) {
			renderSession.maskManager.pushObject(displayObject);
			var cacheTransform = displayObject.__renderTransform;
			displayObject.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				displayObject.__renderTransformChanged = true;
			}
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(displayObject,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(displayObject,renderSession,true,true,true);
			displayObject.__renderTransform = cacheTransform;
			renderSession.maskManager.popObject(displayObject);
		}
	} else {
		openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderSession);
	}
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.clipRects = [];
	this.numClipRects = 0;
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	currentClipRect: null
	,clipRects: null
	,numClipRects: null
	,pushMask: function(mask) {
		this.pushRect(mask.getBounds(mask),mask.__getRenderTransform());
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) {
			this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.currentClipRect = clipRect;
		this.numClipRects++;
	}
	,popMask: function() {
		this.popRect();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) {
				this.currentClipRect = this.clipRects[this.numClipRects - 1];
			} else {
				this.currentClipRect = null;
			}
		}
	}
	,updateClip: function(displayObject) {
		if(this.currentClipRect == null) {
			displayObject.__worldClipChanged = displayObject.__worldClip != null;
			displayObject.__worldClip = null;
		} else {
			if(displayObject.__worldClip == null) {
				displayObject.__worldClip = new openfl_geom_Rectangle();
			}
			var clip = openfl_geom_Rectangle.__pool.get();
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.copyFrom(displayObject.__renderTransform);
			matrix.invert();
			this.currentClipRect.__transform(clip,matrix);
			if(clip.equals(displayObject.__worldClip)) {
				displayObject.__worldClipChanged = false;
			} else {
				displayObject.__worldClip.copyFrom(clip);
				displayObject.__worldClipChanged = true;
			}
			openfl_geom_Rectangle.__pool.release(clip);
			openfl_geom_Matrix.__pool.release(matrix);
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(stage,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__renderTransformChanged) {
		var _this = displayObject.__renderTransform;
		style.setProperty(renderSession.transformProperty,renderSession.roundPixels ? "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + (_this.tx | 0) + ", " + (_this.ty | 0) + ", 0, 1)" : "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + _this.tx + ", " + _this.ty + ", 0, 1)",null);
	}
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null ? "null" : "" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) {
			style.setProperty("opacity",displayObject.__worldAlpha == null ? "null" : "" + displayObject.__worldAlpha,null);
		} else {
			style.removeProperty("opacity");
		}
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) {
			style.removeProperty("clip");
		} else {
			var clip = displayObject.__worldClip;
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__renderTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldClip = null;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.updateClip = function(displayObject,renderSession) {
	var maskManager = renderSession.maskManager;
	maskManager.updateClip(displayObject);
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	element: null
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		if(!this.stage.__transparent) {
			this.element.style.background = this.stage.__colorString;
		} else {
			this.element.style.background = "none";
		}
		this.renderSession.z = 1;
		this.stage.__renderDOM(this.renderSession);
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderDOM(this.stage,this.renderSession);
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.clear = function(shape,renderSession) {
	if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas != graphics.__canvas) {
			if(graphics.__canvas != null) {
				if(shape.__canvas != graphics.__canvas) {
					if(shape.__canvas != null) {
						renderSession.element.removeChild(shape.__canvas);
					}
					shape.__canvas = graphics.__canvas;
					shape.__context = graphics.__context;
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(shape,renderSession);
			}
		}
		if(shape.__canvas != null) {
			renderSession.maskManager.pushObject(shape);
			var cacheTransform = shape.__renderTransform;
			shape.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				shape.__renderTransformChanged = true;
			}
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(shape,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape,renderSession,true,true,true);
			shape.__renderTransform = cacheTransform;
			renderSession.maskManager.popObject(shape);
		}
	} else {
		openfl__$internal_renderer_dom_DOMShape.clear(shape,renderSession);
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.clear = function(textField,renderSession) {
	if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		var _this_r = new RegExp("\n","g".split("u").join(""));
		div.innerHTML = textEngine.text.replace(_this_r,"<br>");
		div.style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) {
		div.style.width = Std.string(textEngine.width - 4) + "px";
	}
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) {
		window.document.body.removeChild(div);
	}
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderSession) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__renderTransformChanged || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							var textField1 = textField.__displayAsPassword;
							textField.__dirty = false;
						}
					},true);
				}
				if(!textEngine.wordWrap) {
					textField.__style.setProperty("white-space","nowrap",null);
				} else {
					textField.__style.setProperty("word-wrap","break-word",null);
				}
				textField.__style.setProperty("overflow","hidden",null);
				if(textEngine.selectable) {
					textField.__style.setProperty("cursor","text",null);
					textField.__style.setProperty("-webkit-user-select","text",null);
					textField.__style.setProperty("-moz-user-select","text",null);
					textField.__style.setProperty("-ms-user-select","text",null);
					textField.__style.setProperty("-o-user-select","text",null);
				} else {
					textField.__style.setProperty("cursor","inherit",null);
				}
				textField.__div.contentEditable = textEngine.type == 1;
				var style = textField.__style;
				if(textEngine.background) {
					style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor & 16777215,6),null);
				} else {
					style.removeProperty("background-color");
				}
				var w = textEngine.width;
				var h = textEngine.height;
				var scale = 1;
				var unscaledSize = textField.__textFormat.size;
				var scaledSize = unscaledSize;
				var t = textField.__renderTransform;
				if(t.a != 1.0 || t.d != 1.0) {
					if(t.a == t.d) {
						scale = t.a;
						t.a = t.d = 1.0;
					} else if(t.a > t.d) {
						scale = t.a;
						t.d /= t.a;
						t.a = 1.0;
					} else {
						scale = t.d;
						t.a /= t.d;
						t.d = 1.0;
					}
					scaledSize *= scale;
					w = Math.ceil(w * scale);
					h = Math.ceil(h * scale);
				}
				textField.__textFormat.size = scaledSize;
				var text = textEngine.text;
				var adjustment = 0;
				if(!textField.__isHTML) {
					text = StringTools.htmlEscape(text);
				} else {
					var matchText = text;
					while(openfl__$internal_renderer_dom_DOMTextField.__regexFont.match(matchText)) {
						var fontText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matched(0);
						var style1 = "";
						if(openfl__$internal_renderer_dom_DOMTextField.__regexFace.match(fontText)) {
							style1 += "font-family:'" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexFace) + "';";
						}
						if(openfl__$internal_renderer_dom_DOMTextField.__regexColor.match(fontText)) {
							style1 += "color:#" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexColor) + ";";
						}
						if(openfl__$internal_renderer_dom_DOMTextField.__regexSize.match(fontText)) {
							var sizeAttr = openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							var size;
							adjustment = parseFloat(sizeAttr) * scale;
							if(firstChar == 43 || firstChar == 45) {
								size = scaledSize + adjustment;
							} else {
								size = adjustment;
							}
							style1 += "font-size:" + size + "px;";
						}
						text = StringTools.replace(text,fontText,"<span style='" + style1 + "'>");
						matchText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matchedRight();
					}
					text = text.replace(openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont.r,"</span>");
				}
				text = StringTools.replace(text,"<p ","<p style='margin-top:0; margin-bottom:0;' ");
				var unscaledLeading = textField.__textFormat.leading;
				textField.__textFormat.leading += adjustment | 0;
				var _this_r = new RegExp("\r\n","g".split("u").join(""));
				var tmp = text.replace(_this_r,"<br>");
				textField.__div.innerHTML = tmp;
				var _this_r1 = new RegExp("\n","g".split("u").join(""));
				var tmp1 = textField.__div.innerHTML.replace(_this_r1,"<br>");
				textField.__div.innerHTML = tmp1;
				var _this_r2 = new RegExp("\r","g".split("u").join(""));
				var tmp2 = textField.__div.innerHTML.replace(_this_r2,"<br>");
				textField.__div.innerHTML = tmp2;
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				textField.__textFormat.size = unscaledSize;
				textField.__textFormat.leading = unscaledLeading;
				style.setProperty("top","3px",null);
				if(textEngine.border) {
					style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor & 16777215,6),null);
					textField.__renderTransform.translate(-1,-1);
					textField.__renderTransformChanged = true;
					textField.__transformDirty = true;
				} else if(style.border != "") {
					style.removeProperty("border");
					textField.__renderTransformChanged = true;
				}
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color & 16777215,6),null);
				style.setProperty("width",w + "px",null);
				style.setProperty("height",h + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g) {
				case 0:
					style.setProperty("text-align","center",null);
					break;
				case 4:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) {
			var old = renderSession.roundPixels;
			renderSession.roundPixels = true;
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(textField,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,true);
			renderSession.roundPixels = old;
		}
	} else {
		openfl__$internal_renderer_dom_DOMTextField.clear(textField,renderSession);
	}
};
openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_renderer_opengl_GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
		renderSession.maskManager.pushObject(bitmap);
		renderSession.filterManager.pushObject(bitmap);
		var shader = renderSession.shaderManager.initShader(bitmap.shader);
		renderSession.shaderManager.setShader(shader);
		shader.get_data().uImage0.input = bitmap.bitmapData;
		var tmp = renderSession.allowSmoothing && (bitmap.smoothing || renderSession.upscaled);
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = renderer.getMatrix(bitmap.__renderTransform);
		var useColorTransform = !bitmap.__worldColorTransform.__isDefault();
		if(shader.get_data().uColorTransform.value == null) {
			shader.get_data().uColorTransform.value = [];
		}
		shader.get_data().uColorTransform.value[0] = useColorTransform;
		renderSession.shaderManager.updateShader(shader);
		var target = gl.ARRAY_BUFFER;
		var buffer = bitmap.bitmapData.getBuffer(gl,bitmap.__worldAlpha,bitmap.__worldColorTransform);
		gl.__context.bindBuffer(target,buffer);
		var index = shader.get_data().aPosition.index;
		var type = gl.FLOAT;
		var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
		gl.__context.vertexAttribPointer(index,3,type,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
		var index1 = shader.get_data().aTexCoord.index;
		var type1 = gl.FLOAT;
		var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
		gl.__context.vertexAttribPointer(index1,2,type1,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
		var index2 = shader.get_data().aAlpha.index;
		var type2 = gl.FLOAT;
		var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
		gl.__context.vertexAttribPointer(index2,1,type2,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset2));
		var index3 = shader.get_data().aColorMultipliers.index;
		var type3 = gl.FLOAT;
		var offset3 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(24);
		gl.__context.vertexAttribPointer(index3,4,type3,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset3));
		var index4 = shader.get_data().aColorMultipliers.index + 1;
		var type4 = gl.FLOAT;
		var offset4 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(40);
		gl.__context.vertexAttribPointer(index4,4,type4,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset4));
		var index5 = shader.get_data().aColorMultipliers.index + 2;
		var type5 = gl.FLOAT;
		var offset5 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(56);
		gl.__context.vertexAttribPointer(index5,4,type5,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset5));
		var index6 = shader.get_data().aColorMultipliers.index + 3;
		var type6 = gl.FLOAT;
		var offset6 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(72);
		gl.__context.vertexAttribPointer(index6,4,type6,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset6));
		var index7 = shader.get_data().aColorOffsets.index;
		var type7 = gl.FLOAT;
		var offset7 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(88);
		gl.__context.vertexAttribPointer(index7,4,type7,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset7));
		gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
		renderSession.filterManager.popObject(bitmap);
		renderSession.maskManager.popObject(bitmap);
	}
};
openfl__$internal_renderer_opengl_GLBitmap.renderMask = function(bitmap,renderSession) {
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
		renderSession.shaderManager.setShader(shader);
		shader.get_data().uImage0.input = bitmap.bitmapData;
		var tmp = renderSession.allowSmoothing && (bitmap.smoothing || renderSession.upscaled);
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = renderer.getMatrix(bitmap.__renderTransform);
		renderSession.shaderManager.updateShader(shader);
		var target = gl.ARRAY_BUFFER;
		var buffer = bitmap.bitmapData.getBuffer(gl,bitmap.__worldAlpha,bitmap.__worldColorTransform);
		gl.__context.bindBuffer(target,buffer);
		var index = shader.get_data().aPosition.index;
		var type = gl.FLOAT;
		var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
		gl.__context.vertexAttribPointer(index,3,type,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
		var index1 = shader.get_data().aTexCoord.index;
		var type1 = gl.FLOAT;
		var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
		gl.__context.vertexAttribPointer(index1,2,type1,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
		gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
};
var openfl__$internal_renderer_opengl_GLBlendModeManager = function(gl) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.gl = gl;
	this.setBlendMode(10);
	gl.__context.enable(gl.BLEND);
};
$hxClasses["openfl._internal.renderer.opengl.GLBlendModeManager"] = openfl__$internal_renderer_opengl_GLBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","GLBlendModeManager"];
openfl__$internal_renderer_opengl_GLBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,gl: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.gl.__context.blendEquation(this.gl.FUNC_ADD);
			this.gl.__context.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		case 9:
			this.gl.__context.blendEquation(this.gl.FUNC_ADD);
			this.gl.__context.blendFunc(this.gl.DST_COLOR,this.gl.ONE_MINUS_SRC_ALPHA);
			break;
		case 12:
			this.gl.__context.blendEquation(this.gl.FUNC_ADD);
			this.gl.__context.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_COLOR);
			break;
		case 14:
			this.gl.__context.blendEquation(this.gl.FUNC_REVERSE_SUBTRACT);
			this.gl.__context.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		default:
			this.gl.__context.blendEquation(this.gl.FUNC_ADD);
			this.gl.__context.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLBlendModeManager
});
var openfl__$internal_renderer_opengl_GLDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLDisplayObject"] = openfl__$internal_renderer_opengl_GLDisplayObject;
openfl__$internal_renderer_opengl_GLDisplayObject.__name__ = ["openfl","_internal","renderer","opengl","GLDisplayObject"];
openfl__$internal_renderer_opengl_GLDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__cacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderSession.blendModeManager.setBlendMode(displayObject.__worldBlendMode);
		renderSession.maskManager.pushObject(displayObject);
		var gl = renderSession.gl;
		var rect = openfl_geom_Rectangle.__pool.get();
		rect.setTo(0,0,displayObject.get_width(),displayObject.get_height());
		renderSession.maskManager.pushRect(rect,displayObject.__renderTransform);
		var color = displayObject.opaqueBackground;
		gl.__context.clearColor((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1);
		gl.__context.clear(gl.COLOR_BUFFER_BIT);
		renderSession.maskManager.popRect();
		renderSession.maskManager.popObject(displayObject);
		openfl_geom_Rectangle.__pool.release(rect);
	}
	if(displayObject.__graphics != null) {
		if(!(!displayObject.__renderable || displayObject.__worldAlpha <= 0)) {
			var graphics = displayObject.__graphics;
			if(graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,displayObject.__renderTransform);
				var bounds = graphics.__bounds;
				if(graphics.__bitmap != null && graphics.__visible) {
					var renderer = renderSession.renderer;
					var gl1 = renderSession.gl;
					renderSession.blendModeManager.setBlendMode(displayObject.__worldBlendMode);
					renderSession.maskManager.pushObject(displayObject);
					var shader = renderSession.filterManager.pushObject(displayObject);
					renderSession.shaderManager.setShader(shader);
					shader.get_data().uImage0.input = graphics.__bitmap;
					shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
					shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
					var useColorTransform = !displayObject.__worldColorTransform.__isDefault();
					if(shader.get_data().uColorTransform.value == null) {
						shader.get_data().uColorTransform.value = [];
					}
					shader.get_data().uColorTransform.value[0] = useColorTransform;
					renderSession.shaderManager.updateShader(shader);
					var target = gl1.ARRAY_BUFFER;
					var buffer = graphics.__bitmap.getBuffer(gl1,displayObject.__worldAlpha,displayObject.__worldColorTransform);
					gl1.__context.bindBuffer(target,buffer);
					var index = shader.get_data().aPosition.index;
					var type = gl1.FLOAT;
					var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
					gl1.__context.vertexAttribPointer(index,3,type,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
					var index1 = shader.get_data().aTexCoord.index;
					var type1 = gl1.FLOAT;
					var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
					gl1.__context.vertexAttribPointer(index1,2,type1,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
					var index2 = shader.get_data().aAlpha.index;
					var type2 = gl1.FLOAT;
					var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
					gl1.__context.vertexAttribPointer(index2,1,type2,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset2));
					var index3 = shader.get_data().aColorMultipliers.index;
					var type3 = gl1.FLOAT;
					var offset3 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(24);
					gl1.__context.vertexAttribPointer(index3,4,type3,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset3));
					var index4 = shader.get_data().aColorMultipliers.index + 1;
					var type4 = gl1.FLOAT;
					var offset4 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(40);
					gl1.__context.vertexAttribPointer(index4,4,type4,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset4));
					var index5 = shader.get_data().aColorMultipliers.index + 2;
					var type5 = gl1.FLOAT;
					var offset5 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(56);
					gl1.__context.vertexAttribPointer(index5,4,type5,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset5));
					var index6 = shader.get_data().aColorMultipliers.index + 3;
					var type6 = gl1.FLOAT;
					var offset6 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(72);
					gl1.__context.vertexAttribPointer(index6,4,type6,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset6));
					var index7 = shader.get_data().aColorOffsets.index;
					var type7 = gl1.FLOAT;
					var offset7 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(88);
					gl1.__context.vertexAttribPointer(index7,4,type7,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset7));
					gl1.__context.drawArrays(gl1.TRIANGLE_STRIP,0,4);
					renderSession.filterManager.popObject(displayObject);
					renderSession.maskManager.popObject(displayObject);
				}
			}
		}
	}
};
openfl__$internal_renderer_opengl_GLDisplayObject.renderMask = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__cacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		var gl = renderSession.gl;
	}
	if(displayObject.__graphics != null) {
		var graphics = displayObject.__graphics;
		if(graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,displayObject.__renderTransform);
			var bounds = graphics.__bounds;
			if(graphics.__bitmap != null) {
				var renderer = renderSession.renderer;
				var gl1 = renderSession.gl;
				var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
				renderSession.shaderManager.setShader(shader);
				shader.get_data().uImage0.input = graphics.__bitmap;
				shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
				shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
				renderSession.shaderManager.updateShader(shader);
				var target = gl1.ARRAY_BUFFER;
				var buffer = graphics.__bitmap.getBuffer(gl1,displayObject.__worldAlpha,displayObject.__worldColorTransform);
				gl1.__context.bindBuffer(target,buffer);
				var index = shader.get_data().aPosition.index;
				var type = gl1.FLOAT;
				var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
				gl1.__context.vertexAttribPointer(index,3,type,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
				var index1 = shader.get_data().aTexCoord.index;
				var type1 = gl1.FLOAT;
				var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
				gl1.__context.vertexAttribPointer(index1,2,type1,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
				gl1.__context.drawArrays(gl1.TRIANGLE_STRIP,0,4);
			}
		}
	}
};
var openfl__$internal_renderer_opengl_GLFilterManager = function(renderer,renderSession) {
	openfl__$internal_renderer_AbstractFilterManager.call(this,renderSession);
	this.renderer = renderer;
	this.gl = renderSession.gl;
	this.filterDepth = 0;
	this.matrix = new openfl_geom_Matrix();
};
$hxClasses["openfl._internal.renderer.opengl.GLFilterManager"] = openfl__$internal_renderer_opengl_GLFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.__name__ = ["openfl","_internal","renderer","opengl","GLFilterManager"];
openfl__$internal_renderer_opengl_GLFilterManager.__super__ = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.prototype = $extend(openfl__$internal_renderer_AbstractFilterManager.prototype,{
	filterDepth: null
	,gl: null
	,matrix: null
	,renderer: null
	,pushObject: function(object) {
		return this.renderSession.shaderManager.defaultShader;
	}
	,popObject: function(object) {
		return;
	}
	,renderPass: function(target,shader) {
		if(target == null || shader == null) {
			return;
		}
		shader.get_data().uImage0.input = target;
		var tmp = this.renderSession.allowSmoothing && this.renderSession.upscaled;
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = this.renderer.getMatrix(this.matrix);
		if(shader.get_data().uColorTransform != null) {
			if(shader.get_data().uColorTransform.value == null) {
				shader.get_data().uColorTransform.value = [];
			}
			shader.get_data().uColorTransform.value[0] = false;
		}
		this.renderSession.shaderManager.setShader(shader);
		var _this = this.gl;
		var target1 = this.gl.ARRAY_BUFFER;
		var buffer = target.getBuffer(this.gl,1,null);
		_this.__context.bindBuffer(target1,buffer);
		var _this1 = this.gl;
		var index = shader.get_data().aPosition.index;
		var type = this.gl.FLOAT;
		var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
		_this1.__context.vertexAttribPointer(index,3,type,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
		var _this2 = this.gl;
		var index1 = shader.get_data().aTexCoord.index;
		var type1 = this.gl.FLOAT;
		var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
		_this2.__context.vertexAttribPointer(index1,2,type1,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
		var _this3 = this.gl;
		var index2 = shader.get_data().aAlpha.index;
		var type2 = this.gl.FLOAT;
		var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
		_this3.__context.vertexAttribPointer(index2,1,type2,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset2));
		this.gl.__context.drawArrays(this.gl.TRIANGLE_STRIP,0,4);
	}
	,__class__: openfl__$internal_renderer_opengl_GLFilterManager
});
var openfl_display_Shader = function(code) {
	this.__data = new openfl_display_ShaderData(null);
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying mat4 vColorMultipliers;\n\t\tvarying vec4 vColorOffsets;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform bool uColorTransform;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else if (uColorTransform) {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tcolor = vColorOffsets + (color * vColorMultipliers);\n\t\t\t\t\n\t\t\t\tif (color.a > 0.0) {\n\t\t\t\t\t\n\t\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color * vAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute mat4 aColorMultipliers;\n\t\tattribute vec4 aColorOffsets;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying mat4 vColorMultipliers;\n\t\tvarying vec4 vColorOffsets;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\tuniform bool uColorTransform;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\t\n\t\t\tif (uColorTransform) {\n\t\t\t\t\n\t\t\t\tvColorMultipliers = aColorMultipliers;\n\t\t\t\tvColorOffsets = aColorOffsets;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	}
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,gl: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__isUniform: null
	,__inputBitmapData: null
	,__numPasses: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__uniformMatrix2: null
	,__uniformMatrix3: null
	,__uniformMatrix4: null
	,__disable: function() {
		if(this.glProgram != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		if(this.get_data().uImage0 != null) {
			this.get_data().uImage0.input = null;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			this.gl.__context.disableVertexAttribArray(parameter.index);
		}
		var _g2 = 0;
		var _g11 = this.__paramFloat;
		while(_g2 < _g11.length) {
			var parameter1 = _g11[_g2];
			++_g2;
			this.gl.__context.disableVertexAttribArray(parameter1.index);
		}
		var _g3 = 0;
		var _g12 = this.__paramInt;
		while(_g3 < _g12.length) {
			var parameter2 = _g12[_g3];
			++_g3;
			this.gl.__context.disableVertexAttribArray(parameter2.index);
		}
		this.gl.__context.bindBuffer(this.gl.ARRAY_BUFFER,null);
		this.gl.__context.bindTexture(this.gl.TEXTURE_2D,null);
		if(this.gl.type == lime_graphics_opengl_GLContextType.OPENGL) {
			this.gl.__context.disable(this.gl.TEXTURE_2D);
		}
	}
	,__enable: function() {
		this.__init();
		if(this.glProgram != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			this.gl.__context.uniform1i(input.index,textureCount);
			++textureCount;
		}
		if(this.gl.type == lime_graphics_opengl_GLContextType.OPENGL && textureCount > 0) {
			this.gl.__context.enable(this.gl.TEXTURE_2D);
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = new openfl_display_ShaderData(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.glProgram == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__isUniform == null) {
			this.__glSourceDirty = false;
			this.glProgram = null;
			this.__isUniform = new haxe_ds_StringMap();
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			var this1 = new Float32Array(4);
			this.__uniformMatrix2 = this1;
			var this2 = new Float32Array(9);
			this.__uniformMatrix3 = this2;
			var this3 = new Float32Array(16);
			this.__uniformMatrix4 = this3;
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.gl != null && this.glProgram == null) {
			var fragment = "#ifdef GL_ES\n\t\t\t\tprecision " + (this.precisionHint == 1 ? "mediump" : "lowp") + " float;\n\t\t\t\t#endif\n\t\t\t\t" + this.get_glFragmentSource();
			this.glProgram = lime_utils_GLUtils.createProgram(this.get_glVertexSource(),fragment);
			if(this.glProgram != null) {
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					var key = input.name;
					var _this = this.__isUniform;
					if(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]) {
						input.index = this.gl.__context.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = this.gl.__context.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g2 = 0;
				var _g11 = this.__paramBool;
				while(_g2 < _g11.length) {
					var parameter = _g11[_g2];
					++_g2;
					var key1 = parameter.name;
					var _this1 = this.__isUniform;
					if(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]) {
						parameter.index = this.gl.__context.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = this.gl.__context.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g3 = 0;
				var _g12 = this.__paramFloat;
				while(_g3 < _g12.length) {
					var parameter1 = _g12[_g3];
					++_g3;
					var key2 = parameter1.name;
					var _this2 = this.__isUniform;
					if(__map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2]) {
						parameter1.index = this.gl.__context.getUniformLocation(this.glProgram,parameter1.name);
					} else {
						parameter1.index = this.gl.__context.getAttribLocation(this.glProgram,parameter1.name);
					}
				}
				var _g4 = 0;
				var _g13 = this.__paramInt;
				while(_g4 < _g13.length) {
					var parameter2 = _g13[_g4];
					++_g4;
					var key3 = parameter2.name;
					var _this3 = this.__isUniform;
					if(__map_reserved[key3] != null ? _this3.getReserved(key3) : _this3.h[key3]) {
						parameter2.index = this.gl.__context.getUniformLocation(this.glProgram,parameter2.name);
					} else {
						parameter2.index = this.gl.__context.getAttribLocation(this.glProgram,parameter2.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				this.__inputBitmapData.push(input);
				this.get_data()[name] = input;
			} else {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.name = name;
					parameter.type = parameterType;
					this.__paramBool.push(parameter);
					this.get_data()[name] = parameter;
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.name = name;
					parameter1.type = parameterType;
					this.__paramInt.push(parameter1);
					this.get_data()[name] = parameter1;
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.name = name;
					parameter2.type = parameterType;
					this.__paramFloat.push(parameter2);
					this.get_data()[name] = parameter2;
				}
			}
			var _this = this.__isUniform;
			var value = storageType == "uniform";
			if(__map_reserved[name] != null) {
				_this.setReserved(name,value);
			} else {
				_this.h[name] = value;
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.glProgram != null) {
			this.__updateGL();
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(input.input != null) {
				this.gl.__context.activeTexture(this.gl.TEXTURE0 + textureCount);
				var _this = this.gl;
				var target = this.gl.TEXTURE_2D;
				var texture = input.input.getTexture(this.gl);
				_this.__context.bindTexture(target,texture);
				if(input.smoothing) {
					this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
					this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
				} else {
					this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
					this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
				}
			}
			++textureCount;
		}
		var value;
		var index;
		var _g2 = 0;
		var _g11 = this.__paramBool;
		while(_g2 < _g11.length) {
			var parameter = _g11[_g2];
			++_g2;
			value = parameter.value;
			index = parameter.index;
			if(value != null) {
				var _g21 = parameter.type;
				switch(_g21) {
				case 0:
					this.gl.__context.uniform1i(index,value[0] ? 1 : 0);
					break;
				case 1:
					this.gl.__context.uniform2i(index,value[0] ? 1 : 0,value[1] ? 1 : 0);
					break;
				case 2:
					this.gl.__context.uniform3i(index,value[0] ? 1 : 0,value[1] ? 1 : 0,value[2] ? 1 : 0);
					break;
				case 3:
					this.gl.__context.uniform4i(index,value[0] ? 1 : 0,value[1] ? 1 : 0,value[2] ? 1 : 0,value[3] ? 1 : 0);
					break;
				default:
				}
			} else {
				var key = parameter.name;
				var _this1 = this.__isUniform;
				if(!(__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key])) {
					this.gl.__context.enableVertexAttribArray(parameter.index);
				}
			}
		}
		var value1;
		var index1;
		var _g3 = 0;
		var _g12 = this.__paramFloat;
		while(_g3 < _g12.length) {
			var parameter1 = _g12[_g3];
			++_g3;
			value1 = parameter1.value;
			index1 = parameter1.index;
			if(value1 != null) {
				var _g22 = parameter1.type;
				switch(_g22) {
				case 4:
					this.gl.__context.uniform1f(index1,value1[0]);
					break;
				case 5:
					this.gl.__context.uniform2f(index1,value1[0],value1[1]);
					break;
				case 6:
					this.gl.__context.uniform3f(index1,value1[0],value1[1],value1[2]);
					break;
				case 7:
					this.gl.__context.uniform4f(index1,value1[0],value1[1],value1[2],value1[3]);
					break;
				case 12:
					var _g23 = 0;
					while(_g23 < 4) {
						var i = _g23++;
						this.__uniformMatrix2[i] = value1[i];
					}
					var _this2 = this.gl;
					var v = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.__uniformMatrix2);
					_this2.__context.uniformMatrix2fv(index1,false,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,16));
					break;
				case 16:
					var _g24 = 0;
					while(_g24 < 9) {
						var i1 = _g24++;
						this.__uniformMatrix3[i1] = value1[i1];
					}
					var _this3 = this.gl;
					var v1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.__uniformMatrix3);
					_this3.__context.uniformMatrix3fv(index1,false,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v1,36));
					break;
				case 20:
					var _g25 = 0;
					while(_g25 < 16) {
						var i2 = _g25++;
						this.__uniformMatrix4[i2] = value1[i2];
					}
					var _this4 = this.gl;
					var v2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.__uniformMatrix4);
					_this4.__context.uniformMatrix4fv(index1,false,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v2,64));
					break;
				default:
				}
			} else {
				var key1 = parameter1.name;
				var _this5 = this.__isUniform;
				if(!(__map_reserved[key1] != null ? _this5.getReserved(key1) : _this5.h[key1])) {
					this.gl.__context.enableVertexAttribArray(parameter1.index);
					var _g26 = parameter1.type;
					switch(_g26) {
					case 12:
						this.gl.__context.enableVertexAttribArray(parameter1.index + 1);
						break;
					case 16:
						this.gl.__context.enableVertexAttribArray(parameter1.index + 1);
						this.gl.__context.enableVertexAttribArray(parameter1.index + 2);
						break;
					case 20:
						this.gl.__context.enableVertexAttribArray(parameter1.index + 1);
						this.gl.__context.enableVertexAttribArray(parameter1.index + 2);
						this.gl.__context.enableVertexAttribArray(parameter1.index + 3);
						break;
					default:
					}
				}
			}
		}
		var value2;
		var index2;
		var _g4 = 0;
		var _g13 = this.__paramInt;
		while(_g4 < _g13.length) {
			var parameter2 = _g13[_g4];
			++_g4;
			value2 = parameter2.value;
			index2 = parameter2.index;
			if(value2 != null) {
				var _g27 = parameter2.type;
				switch(_g27) {
				case 8:
					this.gl.__context.uniform1i(index2,value2[0]);
					break;
				case 9:
					this.gl.__context.uniform2i(index2,value2[0],value2[1]);
					break;
				case 10:
					this.gl.__context.uniform3i(index2,value2[0],value2[1],value2[2]);
					break;
				case 11:
					this.gl.__context.uniform4i(index2,value2[0],value2[1],value2[2],value2[3]);
					break;
				default:
				}
			} else {
				var key2 = parameter2.name;
				var _this6 = this.__isUniform;
				if(!(__map_reserved[key2] != null ? _this6.getReserved(key2) : _this6.h[key2])) {
					this.gl.__context.enableVertexAttribArray(parameter2.index);
				}
			}
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) {
			this.__init();
		}
		return this.__data;
	}
	,set_data: function(value) {
		return this.__data = value;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,set_glFragmentSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,set_glVertexSource: function(value) {
		if(value != this.__glVertexSource) {
			this.__glSourceDirty = true;
		}
		return this.__glVertexSource = value;
	}
	,__class__: openfl_display_Shader
	,__properties__: {set_glVertexSource:"set_glVertexSource",get_glVertexSource:"get_glVertexSource",set_glFragmentSource:"set_glFragmentSource",get_glFragmentSource:"get_glFragmentSource",set_data:"set_data",get_data:"get_data"}
};
var openfl__$internal_renderer_opengl_GLMaskShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 vTexCoord;\n\t\t\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tdiscard;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvTexCoord = aTexCoord;\n\t\t\t\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
};
$hxClasses["openfl._internal.renderer.opengl.GLMaskShader"] = openfl__$internal_renderer_opengl_GLMaskShader;
openfl__$internal_renderer_opengl_GLMaskShader.__name__ = ["openfl","_internal","renderer","opengl","GLMaskShader"];
openfl__$internal_renderer_opengl_GLMaskShader.__super__ = openfl_display_Shader;
openfl__$internal_renderer_opengl_GLMaskShader.prototype = $extend(openfl_display_Shader.prototype,{
	__class__: openfl__$internal_renderer_opengl_GLMaskShader
});
var openfl__$internal_renderer_opengl_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.gl = renderSession.gl;
	this.clipRects = [];
	this.maskObjects = [];
	this.numClipRects = 0;
	this.stencilReference = 0;
	this.tempRect = new openfl_geom_Rectangle();
};
$hxClasses["openfl._internal.renderer.opengl.GLMaskManager"] = openfl__$internal_renderer_opengl_GLMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","GLMaskManager"];
openfl__$internal_renderer_opengl_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	clipRects: null
	,gl: null
	,maskObjects: null
	,numClipRects: null
	,stencilReference: null
	,tempRect: null
	,pushMask: function(mask) {
		if(this.stencilReference == 0) {
			this.gl.__context.enable(this.gl.STENCIL_TEST);
			this.gl.__context.stencilMask(255);
			this.gl.__context.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.gl.__context.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
		this.gl.__context.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
		this.gl.__context.colorMask(false,false,false,false);
		mask.__renderGLMask(this.renderSession);
		this.maskObjects.push(mask);
		this.stencilReference++;
		this.gl.__context.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.__context.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
		this.gl.__context.colorMask(true,true,true,true);
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) {
			this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.scissorRect(clipRect);
		this.numClipRects++;
	}
	,popMask: function() {
		if(this.stencilReference == 0) {
			return;
		}
		if(this.stencilReference > 1) {
			this.gl.__context.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			this.gl.__context.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
			this.gl.__context.colorMask(false,false,false,false);
			var mask = this.maskObjects.pop();
			mask.__renderGLMask(this.renderSession);
			this.stencilReference--;
			this.gl.__context.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.__context.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
			this.gl.__context.colorMask(true,true,true,true);
		} else {
			this.stencilReference = 0;
			this.gl.__context.disable(this.gl.STENCIL_TEST);
		}
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) {
				this.scissorRect(this.clipRects[this.numClipRects - 1]);
			} else {
				this.scissorRect();
			}
		}
	}
	,scissorRect: function(rect) {
		if(rect != null) {
			var renderer = this.renderSession.renderer;
			this.gl.__context.enable(this.gl.SCISSOR_TEST);
			var clipRect = this.tempRect;
			rect.__transform(clipRect,renderer.displayMatrix);
			var x = Math.floor(clipRect.x);
			var y = Math.floor(renderer.height - clipRect.y - clipRect.height);
			var width = Math.ceil(clipRect.width);
			var height = Math.ceil(clipRect.height);
			if(width < 0) {
				width = 0;
			}
			if(height < 0) {
				height = 0;
			}
			this.gl.__context.scissor(x,y,width,height);
		} else {
			this.gl.__context.disable(this.gl.SCISSOR_TEST);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLMaskManager
});
var openfl__$internal_renderer_opengl_GLRenderer = function(stage,gl,defaultRenderTarget) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.gl = gl;
	this.defaultRenderTarget = defaultRenderTarget;
	this.flipped = defaultRenderTarget == null;
	if(openfl_display_Graphics.maxTextureWidth == null) {
		openfl_display_Graphics.maxTextureWidth = openfl_display_Graphics.maxTextureHeight = gl.__context.getParameter(gl.MAX_TEXTURE_SIZE);
	}
	this.matrix = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	this.values = [];
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.clearRenderDirty = true;
	this.renderSession.gl = gl;
	this.renderSession.renderer = this;
	this.renderSession.blendModeManager = new openfl__$internal_renderer_opengl_GLBlendModeManager(gl);
	this.renderSession.filterManager = new openfl__$internal_renderer_opengl_GLFilterManager(this,this.renderSession);
	this.renderSession.shaderManager = new openfl__$internal_renderer_opengl_GLShaderManager(gl);
	this.renderSession.maskManager = new openfl__$internal_renderer_opengl_GLMaskManager(this.renderSession);
	if(stage.window != null) {
		if(stage.stage3Ds.data.get(0).context3D == null) {
			stage.stage3Ds.data.get(0).__createContext(stage,this.renderSession);
		}
		var width = defaultRenderTarget != null ? defaultRenderTarget.width : Math.ceil(stage.window.__width * stage.window.__scale);
		var height = defaultRenderTarget != null ? defaultRenderTarget.height : Math.ceil(stage.window.__height * stage.window.__scale);
		this.resize(width,height);
	}
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	projection: null
	,projectionFlipped: null
	,defaultRenderTarget: null
	,currentRenderTarget: null
	,displayHeight: null
	,displayMatrix: null
	,displayWidth: null
	,flipped: null
	,gl: null
	,matrix: null
	,renderTargetA: null
	,renderTargetB: null
	,offsetX: null
	,offsetY: null
	,values: null
	,clear: function() {
		if(this.stage.__transparent) {
			this.gl.__context.clearColor(0,0,0,0);
		} else {
			this.gl.__context.clearColor(this.stage.__colorSplit[0],this.stage.__colorSplit[1],this.stage.__colorSplit[2],1);
		}
		this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
	}
	,getCacheObject: function() {
	}
	,getMatrix: function(transform) {
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.displayMatrix);
		if(this.renderSession.roundPixels) {
			_matrix.tx = Math.round(_matrix.tx);
			_matrix.ty = Math.round(_matrix.ty);
		}
		lime_math__$Matrix4_Matrix4_$Impl_$.identity(this.matrix);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,0,_matrix.a);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,1,_matrix.b);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,4,_matrix.c);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,5,_matrix.d);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,12,_matrix.tx);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,13,_matrix.ty);
		lime_math__$Matrix4_Matrix4_$Impl_$.append(this.matrix,this.flipped ? this.projectionFlipped : this.projection);
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.values[i] = lime_math__$Matrix4_Matrix4_$Impl_$.get(this.matrix,i);
		}
		openfl_geom_Matrix.__pool.release(_matrix);
		return this.values;
	}
	,getRenderTarget: function(framebuffer) {
		if(framebuffer) {
			if(this.renderTargetA == null) {
				this.renderTargetA = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.data.get(0).context3D.createRectangleTexture(this.width,this.height,1,true));
				var _this = this.gl;
				var target = this.gl.TEXTURE_2D;
				var texture = this.renderTargetA.getTexture(this.gl);
				_this.__context.bindTexture(target,texture);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.renderTargetB == null) {
				this.renderTargetB = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.data.get(0).context3D.createRectangleTexture(this.width,this.height,1,true));
				var _this1 = this.gl;
				var target1 = this.gl.TEXTURE_2D;
				var texture1 = this.renderTargetB.getTexture(this.gl);
				_this1.__context.bindTexture(target1,texture1);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.currentRenderTarget == this.renderTargetA) {
				this.currentRenderTarget = this.renderTargetB;
			} else {
				this.currentRenderTarget = this.renderTargetA;
			}
			var _this2 = this.gl;
			var target2 = this.gl.FRAMEBUFFER;
			var framebuffer1 = this.currentRenderTarget.__getFramebuffer(this.gl);
			_this2.__context.bindFramebuffer(target2,framebuffer1);
			this.gl.__context.viewport(0,0,this.width,this.height);
			this.gl.__context.clearColor(0,0,0,0);
			this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
			this.flipped = false;
		} else {
			this.currentRenderTarget = this.defaultRenderTarget;
			var frameBuffer = this.currentRenderTarget != null ? this.currentRenderTarget.__getFramebuffer(this.gl) : null;
			this.gl.__context.bindFramebuffer(this.gl.FRAMEBUFFER,frameBuffer);
			this.flipped = this.currentRenderTarget == null;
		}
	}
	,render: function() {
		this.gl.__context.viewport(this.offsetX,this.offsetY,this.displayWidth,this.displayHeight);
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.renderSession.upscaled = this.displayMatrix.a != 1 || this.displayMatrix.d != 1;
		this.stage.__renderGL(this.renderSession);
		if(this.offsetX > 0 || this.offsetY > 0) {
			this.gl.__context.clearColor(0,0,0,1);
			this.gl.__context.enable(this.gl.SCISSOR_TEST);
			if(this.offsetX > 0) {
				this.gl.__context.scissor(0,0,this.offsetX,this.height);
				this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.__context.scissor(this.offsetX + this.displayWidth,0,this.width,this.height);
				this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
			}
			if(this.offsetY > 0) {
				this.gl.__context.scissor(0,0,this.width,this.offsetY);
				this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.__context.scissor(0,this.offsetY + this.displayHeight,this.width,this.height);
				this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
			}
			this.gl.__context.disable(this.gl.SCISSOR_TEST);
		}
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderGL(this.stage,this.renderSession);
		}
	}
	,resize: function(width,height) {
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		if(width > 0 && height > 0) {
			if(this.renderTargetA != null && (this.renderTargetA.width != width || this.renderTargetA.height != height)) {
				this.renderTargetA = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.data.get(0).context3D.createRectangleTexture(width,height,1,true));
				var _this = this.gl;
				var target = this.gl.TEXTURE_2D;
				var texture = this.renderTargetA.getTexture(this.gl);
				_this.__context.bindTexture(target,texture);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.renderTargetB != null && (this.renderTargetB.width != width || this.renderTargetB.height != height)) {
				this.renderTargetB = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.data.get(0).context3D.createRectangleTexture(width,height,1,true));
				var _this1 = this.gl;
				var target1 = this.gl.TEXTURE_2D;
				var texture1 = this.renderTargetB.getTexture(this.gl);
				_this1.__context.bindTexture(target1,texture1);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
		}
		this.displayMatrix = this.defaultRenderTarget == null ? this.stage.__displayMatrix : new openfl_geom_Matrix();
		var w = this.defaultRenderTarget == null ? this.stage.stageWidth : this.defaultRenderTarget.width;
		var h = this.defaultRenderTarget == null ? this.stage.stageHeight : this.defaultRenderTarget.height;
		var _this2 = this.displayMatrix;
		this.offsetX = Math.round(0 * _this2.a + 0 * _this2.c + _this2.tx);
		var _this3 = this.displayMatrix;
		this.offsetY = Math.round(0 * _this3.b + 0 * _this3.d + _this3.ty);
		var _this4 = this.displayMatrix;
		this.displayWidth = Math.round(w * _this4.a + 0 * _this4.c + _this4.tx - this.offsetX);
		var _this5 = this.displayMatrix;
		this.displayHeight = Math.round(0 * _this5.b + h * _this5.d + _this5.ty - this.offsetY);
		this.projection = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.offsetY,this.displayHeight + this.offsetY,-1000,1000);
		this.projectionFlipped = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.displayHeight + this.offsetY,this.offsetY,-1000,1000);
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_GLShaderManager = function(gl) {
	openfl__$internal_renderer_AbstractShaderManager.call(this);
	this.gl = gl;
	this.defaultShader = new openfl_display_Shader();
	this.initShader(this.defaultShader);
};
$hxClasses["openfl._internal.renderer.opengl.GLShaderManager"] = openfl__$internal_renderer_opengl_GLShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.__name__ = ["openfl","_internal","renderer","opengl","GLShaderManager"];
openfl__$internal_renderer_opengl_GLShaderManager.__super__ = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.prototype = $extend(openfl__$internal_renderer_AbstractShaderManager.prototype,{
	gl: null
	,initShader: function(shader) {
		if(shader != null) {
			if(shader.gl == null) {
				shader.gl = this.gl;
				shader.__init();
			}
			return shader;
		}
		return this.defaultShader;
	}
	,setShader: function(shader) {
		if(this.currentShader == shader) {
			return;
		}
		if(this.currentShader != null) {
			this.currentShader.__disable();
		}
		if(shader == null) {
			this.currentShader = null;
			this.gl.__context.useProgram(null);
			return;
		} else {
			this.currentShader = shader;
			this.initShader(shader);
			this.gl.__context.useProgram(shader.glProgram);
			this.currentShader.__enable();
		}
	}
	,updateShader: function(shader) {
		if(this.currentShader != null) {
			this.currentShader.__update();
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLShaderManager
});
var openfl__$internal_renderer_opengl_GLShape = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLShape"] = openfl__$internal_renderer_opengl_GLShape;
openfl__$internal_renderer_opengl_GLShape.__name__ = ["openfl","_internal","renderer","opengl","GLShape"];
openfl__$internal_renderer_opengl_GLShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		var bounds = graphics.__bounds;
		if(graphics.__bitmap != null && graphics.__visible) {
			var renderer = renderSession.renderer;
			var gl = renderSession.gl;
			renderSession.blendModeManager.setBlendMode(shape.__worldBlendMode);
			renderSession.maskManager.pushObject(shape);
			var shader = renderSession.filterManager.pushObject(shape);
			renderSession.shaderManager.setShader(shader);
			shader.get_data().uImage0.input = graphics.__bitmap;
			shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
			shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
			var useColorTransform = !shape.__worldColorTransform.__isDefault();
			if(shader.get_data().uColorTransform.value == null) {
				shader.get_data().uColorTransform.value = [];
			}
			shader.get_data().uColorTransform.value[0] = useColorTransform;
			renderSession.shaderManager.updateShader(shader);
			var target = gl.ARRAY_BUFFER;
			var buffer = graphics.__bitmap.getBuffer(gl,shape.__worldAlpha,shape.__worldColorTransform);
			gl.__context.bindBuffer(target,buffer);
			var index = shader.get_data().aPosition.index;
			var type = gl.FLOAT;
			var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
			gl.__context.vertexAttribPointer(index,3,type,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
			var index1 = shader.get_data().aTexCoord.index;
			var type1 = gl.FLOAT;
			var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
			gl.__context.vertexAttribPointer(index1,2,type1,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
			var index2 = shader.get_data().aAlpha.index;
			var type2 = gl.FLOAT;
			var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
			gl.__context.vertexAttribPointer(index2,1,type2,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset2));
			var index3 = shader.get_data().aColorMultipliers.index;
			var type3 = gl.FLOAT;
			var offset3 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(24);
			gl.__context.vertexAttribPointer(index3,4,type3,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset3));
			var index4 = shader.get_data().aColorMultipliers.index + 1;
			var type4 = gl.FLOAT;
			var offset4 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(40);
			gl.__context.vertexAttribPointer(index4,4,type4,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset4));
			var index5 = shader.get_data().aColorMultipliers.index + 2;
			var type5 = gl.FLOAT;
			var offset5 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(56);
			gl.__context.vertexAttribPointer(index5,4,type5,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset5));
			var index6 = shader.get_data().aColorMultipliers.index + 3;
			var type6 = gl.FLOAT;
			var offset6 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(72);
			gl.__context.vertexAttribPointer(index6,4,type6,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset6));
			var index7 = shader.get_data().aColorOffsets.index;
			var type7 = gl.FLOAT;
			var offset7 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(88);
			gl.__context.vertexAttribPointer(index7,4,type7,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset7));
			gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
			renderSession.filterManager.popObject(shape);
			renderSession.maskManager.popObject(shape);
		}
	}
};
openfl__$internal_renderer_opengl_GLShape.renderMask = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		var bounds = graphics.__bounds;
		if(graphics.__bitmap != null) {
			var renderer = renderSession.renderer;
			var gl = renderSession.gl;
			var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
			renderSession.shaderManager.setShader(shader);
			shader.get_data().uImage0.input = graphics.__bitmap;
			shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
			shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
			renderSession.shaderManager.updateShader(shader);
			var target = gl.ARRAY_BUFFER;
			var buffer = graphics.__bitmap.getBuffer(gl,shape.__worldAlpha,shape.__worldColorTransform);
			gl.__context.bindBuffer(target,buffer);
			var index = shader.get_data().aPosition.index;
			var type = gl.FLOAT;
			var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
			gl.__context.vertexAttribPointer(index,3,type,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
			var index1 = shader.get_data().aTexCoord.index;
			var type1 = gl.FLOAT;
			var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
			gl.__context.vertexAttribPointer(index1,2,type1,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
			gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
		}
	}
};
var openfl__$internal_stage3D_AGALConverter = function() { };
$hxClasses["openfl._internal.stage3D.AGALConverter"] = openfl__$internal_stage3D_AGALConverter;
openfl__$internal_stage3D_AGALConverter.__name__ = ["openfl","_internal","stage3D","AGALConverter"];
openfl__$internal_stage3D_AGALConverter.prefixFromType = function(regType,programType) {
	switch(regType) {
	case 0:
		return "va";
	case 1:
		if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
			return "vc";
		} else {
			return "fc";
		}
		break;
	case 2:
		if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
			return "vt";
		} else {
			return "ft";
		}
		break;
	case 3:
		return "output_";
	case 4:
		return "v";
	case 5:
		return "sampler";
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Invalid data!"));
	}
};
openfl__$internal_stage3D_AGALConverter.readUInt64 = function(byteArray) {
	var low = byteArray.readInt();
	var high = byteArray.readInt();
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
openfl__$internal_stage3D_AGALConverter.convertToGLSL = function(agal,samplerState) {
	agal.position = 0;
	agal.__endian = 1;
	var magic = agal.readByte() & 255;
	if(magic == 176) {
		return agal.readUTF();
	}
	if(magic != 160) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Magic value must be 0xA0, may not be AGAL"));
	}
	var version = agal.readInt();
	if(version != 1) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Version must be 1"));
	}
	var shaderTypeID = agal.readByte() & 255;
	if(shaderTypeID != 161) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Shader type ID must be 0xA1"));
	}
	var programType = (agal.readByte() & 255) == 0 ? openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX : openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT;
	var map = new openfl__$internal_stage3D_RegisterMap();
	var sb_b = "";
	while(agal.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(agal)) {
		var opcode = agal.readInt();
		var dest = agal.readUnsignedInt();
		var source1 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
		var source2 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
		var dr = openfl__$internal_stage3D__$AGALConverter_DestRegister.parse(dest,programType);
		var sr1 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(source1,programType,dr.mask);
		var sr2 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(source2,programType,dr.mask);
		sb_b += "\t";
		switch(opcode) {
		case 0:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + "; // mov");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 1:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " + " + sr2.toGLSL() + "; // add");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 2:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " - " + sr2.toGLSL() + "; // sub");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 3:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL() + "; // mul");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 4:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " / " + sr2.toGLSL() + "; // div");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 5:
			var sr = sr1.toGLSL();
			if(sr.indexOf(".") > -1) {
				sb_b += Std.string(dr.toGLSL() + " = 1.0 / " + sr1.toGLSL() + "; // rcp");
			} else {
				sb_b += Std.string(dr.toGLSL() + " = vec4(1) / " + sr1.toGLSL() + "; // rcp");
			}
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 6:
			sb_b += Std.string(dr.toGLSL() + " = min(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // min");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 7:
			sb_b += Std.string(dr.toGLSL() + " = max(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // max");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 8:
			sb_b += Std.string(dr.toGLSL() + " = fract(" + sr1.toGLSL() + "); // frc");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 9:
			sb_b += Std.string(dr.toGLSL() + " = sqrt(" + sr1.toGLSL() + "); // sqrt");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 10:
			sb_b += Std.string(dr.toGLSL() + " = inversesqrt(" + sr1.toGLSL() + "); // rsq");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 11:
			sb_b += Std.string(dr.toGLSL() + " = pow(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // pow");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 12:
			sb_b += Std.string(dr.toGLSL() + " = log2(" + sr1.toGLSL() + "); // log");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 13:
			sb_b += Std.string(dr.toGLSL() + " = exp2(" + sr1.toGLSL() + "); // exp");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 14:
			sb_b += Std.string(dr.toGLSL() + " = normalize(" + sr1.toGLSL() + "); // normalize");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 15:
			sb_b += Std.string(dr.toGLSL() + " = sin(" + sr1.toGLSL() + "); // sin");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 16:
			sb_b += Std.string(dr.toGLSL() + " = cos(" + sr1.toGLSL() + "); // cos");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 17:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = cross(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")); // crs");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 18:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp3");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 19:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec4(" + sr1.toGLSL() + "), vec4(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp4");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 20:
			sb_b += Std.string(dr.toGLSL() + " = abs(" + sr1.toGLSL() + "); // abs");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 21:
			sb_b += Std.string(dr.toGLSL() + " = -" + sr1.toGLSL() + "; // neg");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 22:
			sb_b += Std.string(dr.toGLSL() + " = clamp(" + sr1.toGLSL() + ", 0.0, 1.0); // saturate");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 23:
			var existingUsage = map.getRegisterUsage(sr2);
			if(existingUsage != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * mat3(" + sr2.toGLSL(false) + "); // m33");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 7;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m33");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 24:
			var existingUsage1 = map.getRegisterUsage(sr2);
			if(existingUsage1 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage1 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m44");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec4(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,3) + ")); // m44");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,3);
			}
			break;
		case 25:
			dr.mask &= 7;
			var existingUsage2 = map.getRegisterUsage(sr2);
			if(existingUsage2 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage2 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m34");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m34");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 39:
			sr1.sourceMask = 15;
			sb_b += Std.string("if (any(lessThan(" + sr1.toGLSL() + ", vec4(0)))) discard;");
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 40:
			var sampler = openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse(source2,programType);
			var _g = sampler.d;
			switch(_g) {
			case 0:
				sr1.sourceMask = 3;
				map.addSaR(sampler,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D);
				sb_b += Std.string(dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				break;
			case 1:
				sr1.sourceMask = 7;
				sb_b += Std.string(dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				map.addSaR(sampler,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE);
				break;
			}
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			if(samplerState != null) {
				samplerState[sampler.n] = sampler.toSamplerState();
			}
			break;
		case 41:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(greaterThanEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // ste");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 42:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(lessThan(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // slt");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 44:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(equal(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // seq");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 45:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(notEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // sne");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Opcode " + opcode));
		}
		sb_b += "\n";
	}
	if(openfl__$internal_stage3D_AGALConverter.limitedProfile == null) {
		var version1 = lime_graphics_opengl_GL.context.__context.getParameter(7938);
		openfl__$internal_stage3D_AGALConverter.limitedProfile = version1.indexOf("OpenGL ES") > -1 || version1.indexOf("WebGL") > -1;
	}
	var glsl_b = "";
	glsl_b += Std.string("// AGAL " + (programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX ? "vertex" : "fragment") + " shader\n");
	if(openfl__$internal_stage3D_AGALConverter.limitedProfile) {
		glsl_b += "#version 100\n";
		glsl_b += "precision highp float;\n";
	} else {
		glsl_b += "#version 120\n";
	}
	glsl_b += Std.string(map.toGLSL(false));
	if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "uniform vec4 vcPositionScale;\n";
	}
	glsl_b += "void main() {\n";
	glsl_b += Std.string(map.toGLSL(true));
	glsl_b += Std.string(sb_b);
	if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "\tgl_Position *= vcPositionScale;\n";
	}
	glsl_b += "}\n";
	return glsl_b;
};
var openfl__$internal_stage3D__$AGALConverter_DestRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.DestRegister"] = openfl__$internal_stage3D__$AGALConverter_DestRegister;
openfl__$internal_stage3D__$AGALConverter_DestRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","DestRegister"];
openfl__$internal_stage3D__$AGALConverter_DestRegister.parse = function(v,programType) {
	var dr = new openfl__$internal_stage3D__$AGALConverter_DestRegister();
	dr.programType = programType;
	dr.type = v >>> 24 & 15;
	dr.mask = v >>> 16 & 15;
	dr.n = v & 65535;
	return dr;
};
openfl__$internal_stage3D__$AGALConverter_DestRegister.prototype = {
	mask: null
	,n: null
	,programType: null
	,type: null
	,getWriteMask: function() {
		var str = ".";
		if((this.mask & 1) != 0) {
			str += "x";
		}
		if((this.mask & 2) != 0) {
			str += "y";
		}
		if((this.mask & 4) != 0) {
			str += "z";
		}
		if((this.mask & 8) != 0) {
			str += "w";
		}
		return str;
	}
	,toGLSL: function(useMask) {
		if(useMask == null) {
			useMask = true;
		}
		var str;
		if(this.type == 3) {
			if(this.programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
				str = "gl_Position";
			} else {
				str = "gl_FragColor";
			}
		} else {
			str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		}
		if(useMask && this.mask != 15) {
			str += this.getWriteMask();
		}
		return str;
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_DestRegister
};
var openfl__$internal_stage3D__$AGALConverter_ProgramType = $hxClasses["openfl._internal.stage3D._AGALConverter.ProgramType"] = { __ename__ : ["openfl","_internal","stage3D","_AGALConverter","ProgramType"], __constructs__ : ["VERTEX","FRAGMENT"] };
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX = ["VERTEX",0];
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX.__enum__ = openfl__$internal_stage3D__$AGALConverter_ProgramType;
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT = ["FRAGMENT",1];
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT.__enum__ = openfl__$internal_stage3D__$AGALConverter_ProgramType;
var openfl__$internal_stage3D_RegisterMap = function() {
	this.mEntries = [];
};
$hxClasses["openfl._internal.stage3D.RegisterMap"] = openfl__$internal_stage3D_RegisterMap;
openfl__$internal_stage3D_RegisterMap.__name__ = ["openfl","_internal","stage3D","RegisterMap"];
openfl__$internal_stage3D_RegisterMap.prototype = {
	mEntries: null
	,add: function(type,name,number,usage) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				if(entry.usage != usage) {
					throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot use register in multiple ways yet (mat4/vec4)"));
				}
				return;
			}
		}
		var entry1 = new openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry();
		entry1.type = type;
		entry1.name = name;
		entry1.number = number;
		entry1.usage = usage;
		this.mEntries.push(entry1);
	}
	,addDR: function(dr,usage) {
		this.add(dr.type,dr.toGLSL(false),dr.n,usage);
	}
	,addSaR: function(sr,usage) {
		this.add(sr.type,sr.toGLSL(),sr.n,usage);
	}
	,addSR: function(sr,usage,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(sr.d != 0) {
			this.add(sr.itype,openfl__$internal_stage3D_AGALConverter.prefixFromType(sr.itype,sr.programType) + sr.n,sr.n,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			this.add(sr.type,openfl__$internal_stage3D_AGALConverter.prefixFromType(sr.type,sr.programType) + sr.o,sr.o,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY);
			return;
		}
		this.add(sr.type,sr.toGLSL(false,offset),sr.n + offset,usage);
	}
	,getRegisterUsage: function(sr) {
		if(sr.d != 0) {
			return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY;
		}
		return this.getUsage(sr.type,sr.toGLSL(false),sr.n);
	}
	,getUsage: function(type,name,number) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				return entry.usage;
			}
		}
		return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED;
	}
	,toGLSL: function(tempRegistersOnly) {
		this.mEntries.sort(function(a,b) {
			return a.number - b.number;
		});
		var arrayCount = new haxe_ds_ObjectMap();
		var entry;
		var _g1 = 0;
		var _g = this.mEntries.length;
		while(_g1 < _g) {
			var i = _g1++;
			entry = this.mEntries[i];
			if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				if(i < this.mEntries.length - 1) {
					var v = this.mEntries[i + 1].number - entry.number;
					arrayCount.set(entry,v);
				} else {
					arrayCount.set(entry,128);
				}
			}
		}
		this.mEntries.sort(function(a1,b1) {
			return js_Boot.__cast(a1.type , Int) - js_Boot.__cast(b1.type , Int);
		});
		var sb_b = "";
		var _g11 = 0;
		var _g2 = this.mEntries.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			entry = this.mEntries[i1];
			if(tempRegistersOnly && entry.type != 2 || !tempRegistersOnly && entry.type == 2) {
				continue;
			}
			if(entry.type == 3) {
				continue;
			}
			var _g21 = entry.type;
			switch(_g21) {
			case 0:
				sb_b += "attribute ";
				break;
			case 1:
				sb_b += "uniform ";
				break;
			case 2:
				sb_b += "\t";
				break;
			case 3:
				break;
			case 4:
				sb_b += "varying ";
				break;
			case 5:
				sb_b += "uniform ";
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
			var _g3 = entry.usage;
			switch(_g3[1]) {
			case 0:
				haxe_Log.trace("Missing switch patten: RegisterUsage.UNUSED",{ fileName : "AGALConverter.hx", lineNumber : 811, className : "openfl._internal.stage3D.RegisterMap", methodName : "toGLSL"});
				break;
			case 1:
				sb_b += "vec4 ";
				break;
			case 2:
				sb_b += "mat4 ";
				break;
			case 3:
				sb_b += "sampler2D ";
				break;
			case 4:
				haxe_Log.trace("Missing switch patten: RegisterUsage.SAMPLER_2D_ALPHA",{ fileName : "AGALConverter.hx", lineNumber : 815, className : "openfl._internal.stage3D.RegisterMap", methodName : "toGLSL"});
				break;
			case 5:
				sb_b += "samplerCube ";
				break;
			case 6:
				sb_b += "vec4 ";
				break;
			}
			if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA) {
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
			} else if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(entry.name + "[" + arrayCount.h[entry.__id__] + "]");
				sb_b += ";\n";
			} else {
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
			}
		}
		return sb_b;
	}
	,__class__: openfl__$internal_stage3D_RegisterMap
};
var openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.RegisterMapEntry"] = openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry;
openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.__name__ = ["openfl","_internal","stage3D","_AGALConverter","RegisterMapEntry"];
openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.prototype = {
	name: null
	,number: null
	,type: null
	,usage: null
	,__class__: openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry
};
var openfl__$internal_stage3D__$AGALConverter_RegisterUsage = $hxClasses["openfl._internal.stage3D._AGALConverter.RegisterUsage"] = { __ename__ : ["openfl","_internal","stage3D","_AGALConverter","RegisterUsage"], __constructs__ : ["UNUSED","VECTOR_4","MATRIX_4_4","SAMPLER_2D","SAMPLER_2D_ALPHA","SAMPLER_CUBE","VECTOR_4_ARRAY"] };
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED = ["UNUSED",0];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 = ["VECTOR_4",1];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4 = ["MATRIX_4_4",2];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D = ["SAMPLER_2D",3];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA = ["SAMPLER_2D_ALPHA",4];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE = ["SAMPLER_CUBE",5];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY = ["VECTOR_4_ARRAY",6];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
var openfl__$internal_stage3D__$AGALConverter_SamplerRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.SamplerRegister"] = openfl__$internal_stage3D__$AGALConverter_SamplerRegister;
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","SamplerRegister"];
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse = function(v,programType) {
	var sr = new openfl__$internal_stage3D__$AGALConverter_SamplerRegister();
	sr.programType = programType;
	var b = 60;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this2 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this2;
	} else {
		var this3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this3;
	}
	var this4 = new haxe__$Int64__$_$_$Int64(0,15);
	var b1 = this4;
	var this5 = new haxe__$Int64__$_$_$Int64(a.high & b1.high,a.low & b1.low);
	sr.f = this5.low;
	var b2 = 56;
	b2 &= 63;
	var a1;
	if(b2 == 0) {
		var this6 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a1 = this6;
	} else if(b2 < 32) {
		var this7 = new haxe__$Int64__$_$_$Int64(v.high >> b2,v.high << 32 - b2 | v.low >>> b2);
		a1 = this7;
	} else {
		var this8 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b2 - 32);
		a1 = this8;
	}
	var this9 = new haxe__$Int64__$_$_$Int64(0,15);
	var b3 = this9;
	var this10 = new haxe__$Int64__$_$_$Int64(a1.high & b3.high,a1.low & b3.low);
	sr.m = this10.low;
	var b4 = 52;
	b4 &= 63;
	var a2;
	if(b4 == 0) {
		var this11 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a2 = this11;
	} else if(b4 < 32) {
		var this12 = new haxe__$Int64__$_$_$Int64(v.high >> b4,v.high << 32 - b4 | v.low >>> b4);
		a2 = this12;
	} else {
		var this13 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b4 - 32);
		a2 = this13;
	}
	var this14 = new haxe__$Int64__$_$_$Int64(0,15);
	var b5 = this14;
	var this15 = new haxe__$Int64__$_$_$Int64(a2.high & b5.high,a2.low & b5.low);
	sr.w = this15.low;
	var b6 = 48;
	b6 &= 63;
	var a3;
	if(b6 == 0) {
		var this16 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a3 = this16;
	} else if(b6 < 32) {
		var this17 = new haxe__$Int64__$_$_$Int64(v.high >> b6,v.high << 32 - b6 | v.low >>> b6);
		a3 = this17;
	} else {
		var this18 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b6 - 32);
		a3 = this18;
	}
	var this19 = new haxe__$Int64__$_$_$Int64(0,15);
	var b7 = this19;
	var this20 = new haxe__$Int64__$_$_$Int64(a3.high & b7.high,a3.low & b7.low);
	sr.s = this20.low;
	var b8 = 44;
	b8 &= 63;
	var a4;
	if(b8 == 0) {
		var this21 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a4 = this21;
	} else if(b8 < 32) {
		var this22 = new haxe__$Int64__$_$_$Int64(v.high >> b8,v.high << 32 - b8 | v.low >>> b8);
		a4 = this22;
	} else {
		var this23 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b8 - 32);
		a4 = this23;
	}
	var this24 = new haxe__$Int64__$_$_$Int64(0,15);
	var b9 = this24;
	var this25 = new haxe__$Int64__$_$_$Int64(a4.high & b9.high,a4.low & b9.low);
	sr.d = this25.low;
	var b10 = 40;
	b10 &= 63;
	var a5;
	if(b10 == 0) {
		var this26 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a5 = this26;
	} else if(b10 < 32) {
		var this27 = new haxe__$Int64__$_$_$Int64(v.high >> b10,v.high << 32 - b10 | v.low >>> b10);
		a5 = this27;
	} else {
		var this28 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b10 - 32);
		a5 = this28;
	}
	var this29 = new haxe__$Int64__$_$_$Int64(0,15);
	var b11 = this29;
	var this30 = new haxe__$Int64__$_$_$Int64(a5.high & b11.high,a5.low & b11.low);
	sr.t = this30.low;
	var b12 = 32;
	b12 &= 63;
	var a6;
	if(b12 == 0) {
		var this31 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a6 = this31;
	} else if(b12 < 32) {
		var this32 = new haxe__$Int64__$_$_$Int64(v.high >> b12,v.high << 32 - b12 | v.low >>> b12);
		a6 = this32;
	} else {
		var this33 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b12 - 32);
		a6 = this33;
	}
	var this34 = new haxe__$Int64__$_$_$Int64(0,15);
	var b13 = this34;
	var this35 = new haxe__$Int64__$_$_$Int64(a6.high & b13.high,a6.low & b13.low);
	sr.type = this35.low;
	var b14 = 16;
	b14 &= 63;
	var a7;
	if(b14 == 0) {
		var this36 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a7 = this36;
	} else if(b14 < 32) {
		var this37 = new haxe__$Int64__$_$_$Int64(v.high >> b14,v.high << 32 - b14 | v.low >>> b14);
		a7 = this37;
	} else {
		var this38 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b14 - 32);
		a7 = this38;
	}
	var this39 = new haxe__$Int64__$_$_$Int64(0,255);
	var b15 = this39;
	var this40 = new haxe__$Int64__$_$_$Int64(a7.high & b15.high,a7.low & b15.low);
	sr.b = this40.low;
	var this41 = new haxe__$Int64__$_$_$Int64(0,65535);
	var b16 = this41;
	var this42 = new haxe__$Int64__$_$_$Int64(v.high & b16.high,v.low & b16.low);
	sr.n = this42.low;
	return sr;
};
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.prototype = {
	b: null
	,d: null
	,f: null
	,m: null
	,n: null
	,programType: null
	,s: null
	,t: null
	,type: null
	,w: null
	,toGLSL: function() {
		var str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		return str;
	}
	,toSamplerState: function() {
		var magFilter = 0;
		var minFilter = 0;
		var wrapModeS = 0;
		var wrapModeT = 0;
		var _g = this.f;
		switch(_g) {
		case 0:
			magFilter = 9728;
			break;
		case 1:
			magFilter = 9729;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var _g1 = this.m;
		switch(_g1) {
		case 0:
			if(this.f != 0) {
				minFilter = 9729;
			} else {
				minFilter = 9728;
			}
			break;
		case 1:
			if(this.f != 0) {
				minFilter = 9985;
			} else {
				minFilter = 9984;
			}
			break;
		case 2:
			if(this.f != 0) {
				minFilter = 9987;
			} else {
				minFilter = 9986;
			}
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var _g2 = this.w;
		switch(_g2) {
		case 0:
			wrapModeS = 33071;
			wrapModeT = 33071;
			break;
		case 1:
			wrapModeS = 10497;
			wrapModeT = 10497;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var ignoreSampler = (this.s & 4) == 4;
		var centroid = (this.s & 1) == 1;
		var lodBias = (this.b << 24 >> 24) / 8.0;
		var maxAniso = 0.0;
		return new openfl__$internal_stage3D_SamplerState(minFilter,magFilter,wrapModeS,wrapModeT,lodBias,maxAniso,ignoreSampler,centroid);
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_SamplerRegister
};
var openfl__$internal_stage3D__$AGALConverter_SourceRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.SourceRegister"] = openfl__$internal_stage3D__$AGALConverter_SourceRegister;
openfl__$internal_stage3D__$AGALConverter_SourceRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","SourceRegister"];
openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse = function(v,programType,sourceMask) {
	var sr = new openfl__$internal_stage3D__$AGALConverter_SourceRegister();
	sr.programType = programType;
	var b = 63;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this2 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this2;
	} else {
		var this3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this3;
	}
	var this4 = new haxe__$Int64__$_$_$Int64(0,1);
	var b1 = this4;
	var this5 = new haxe__$Int64__$_$_$Int64(a.high & b1.high,a.low & b1.low);
	sr.d = this5.low;
	var b2 = 48;
	b2 &= 63;
	var a1;
	if(b2 == 0) {
		var this6 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a1 = this6;
	} else if(b2 < 32) {
		var this7 = new haxe__$Int64__$_$_$Int64(v.high >> b2,v.high << 32 - b2 | v.low >>> b2);
		a1 = this7;
	} else {
		var this8 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b2 - 32);
		a1 = this8;
	}
	var this9 = new haxe__$Int64__$_$_$Int64(0,3);
	var b3 = this9;
	var this10 = new haxe__$Int64__$_$_$Int64(a1.high & b3.high,a1.low & b3.low);
	sr.q = this10.low;
	var b4 = 40;
	b4 &= 63;
	var a2;
	if(b4 == 0) {
		var this11 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a2 = this11;
	} else if(b4 < 32) {
		var this12 = new haxe__$Int64__$_$_$Int64(v.high >> b4,v.high << 32 - b4 | v.low >>> b4);
		a2 = this12;
	} else {
		var this13 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b4 - 32);
		a2 = this13;
	}
	var this14 = new haxe__$Int64__$_$_$Int64(0,15);
	var b5 = this14;
	var this15 = new haxe__$Int64__$_$_$Int64(a2.high & b5.high,a2.low & b5.low);
	sr.itype = this15.low;
	var b6 = 32;
	b6 &= 63;
	var a3;
	if(b6 == 0) {
		var this16 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a3 = this16;
	} else if(b6 < 32) {
		var this17 = new haxe__$Int64__$_$_$Int64(v.high >> b6,v.high << 32 - b6 | v.low >>> b6);
		a3 = this17;
	} else {
		var this18 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b6 - 32);
		a3 = this18;
	}
	var this19 = new haxe__$Int64__$_$_$Int64(0,15);
	var b7 = this19;
	var this20 = new haxe__$Int64__$_$_$Int64(a3.high & b7.high,a3.low & b7.low);
	sr.type = this20.low;
	var b8 = 24;
	b8 &= 63;
	var a4;
	if(b8 == 0) {
		var this21 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a4 = this21;
	} else if(b8 < 32) {
		var this22 = new haxe__$Int64__$_$_$Int64(v.high >> b8,v.high << 32 - b8 | v.low >>> b8);
		a4 = this22;
	} else {
		var this23 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b8 - 32);
		a4 = this23;
	}
	var this24 = new haxe__$Int64__$_$_$Int64(0,255);
	var b9 = this24;
	var this25 = new haxe__$Int64__$_$_$Int64(a4.high & b9.high,a4.low & b9.low);
	sr.s = this25.low;
	var b10 = 16;
	b10 &= 63;
	var a5;
	if(b10 == 0) {
		var this26 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a5 = this26;
	} else if(b10 < 32) {
		var this27 = new haxe__$Int64__$_$_$Int64(v.high >> b10,v.high << 32 - b10 | v.low >>> b10);
		a5 = this27;
	} else {
		var this28 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b10 - 32);
		a5 = this28;
	}
	var this29 = new haxe__$Int64__$_$_$Int64(0,255);
	var b11 = this29;
	var this30 = new haxe__$Int64__$_$_$Int64(a5.high & b11.high,a5.low & b11.low);
	sr.o = this30.low;
	var this31 = new haxe__$Int64__$_$_$Int64(0,65535);
	var b12 = this31;
	var this32 = new haxe__$Int64__$_$_$Int64(v.high & b12.high,v.low & b12.low);
	sr.n = this32.low;
	sr.sourceMask = sourceMask;
	return sr;
};
openfl__$internal_stage3D__$AGALConverter_SourceRegister.prototype = {
	d: null
	,itype: null
	,n: null
	,o: null
	,programType: null
	,q: null
	,s: null
	,sourceMask: null
	,type: null
	,toGLSL: function(emitSwizzle,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(emitSwizzle == null) {
			emitSwizzle = true;
		}
		if(this.type == 3) {
			if(this.programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
				return "gl_Position";
			} else {
				return "gl_FragColor";
			}
		}
		var fullxyzw = this.s == 228 && this.sourceMask == 15;
		var swizzle = "";
		if(this.type != 5 && !fullxyzw) {
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				if((this.sourceMask & 1 << i) != 0) {
					var _g1 = this.s >> i * 2 & 3;
					switch(_g1) {
					case 0:
						swizzle += "x";
						break;
					case 1:
						swizzle += "y";
						break;
					case 2:
						swizzle += "z";
						break;
					case 3:
						swizzle += "w";
						break;
					}
				}
			}
		}
		var str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType);
		if(this.d == 0) {
			str += this.n + offset;
		} else {
			str += this.o;
			var indexComponent = String.fromCharCode(HxOverrides.cca("x",0) + this.q);
			var indexRegister = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.itype,this.programType) + this.n + "." + indexComponent;
			str += "[ int(" + indexRegister + ") +" + offset + "]";
		}
		if(emitSwizzle && swizzle != "") {
			str += "." + swizzle;
		}
		return str;
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_SourceRegister
};
var openfl__$internal_stage3D_Context3DStateCache = function() {
	this._registers = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,4096);
	this.clearSettings();
};
$hxClasses["openfl._internal.stage3D.Context3DStateCache"] = openfl__$internal_stage3D_Context3DStateCache;
openfl__$internal_stage3D_Context3DStateCache.__name__ = ["openfl","_internal","stage3D","Context3DStateCache"];
openfl__$internal_stage3D_Context3DStateCache.prototype = {
	_activeTexture: null
	,_activeVertexArray: null
	,_cullingMode: null
	,_depthTestCompareMode: null
	,_depthTestEnabled: null
	,_depthTestMask: null
	,_destBlendFactor: null
	,_program: null
	,_registers: null
	,_srcBlendFactor: null
	,_viewportHeight: null
	,_viewportOriginX: null
	,_viewportOriginY: null
	,_viewportWidth: null
	,clearRegisters: function() {
		var numFloats = 4096;
		var _g1 = 0;
		var _g = numFloats;
		while(_g1 < _g) {
			var c = _g1++;
			this._registers.data.set(c,-999999999.0);
		}
	}
	,clearSettings: function() {
		this._srcBlendFactor = null;
		this._destBlendFactor = null;
		this._depthTestEnabled = false;
		this._depthTestMask = false;
		this._depthTestCompareMode = null;
		this._program = null;
		this._cullingMode = null;
		this._activeTexture = -1;
		this._activeVertexArray = -1;
		this._viewportOriginX = -1;
		this._viewportOriginY = -1;
		this._viewportWidth = -1;
		this._viewportHeight = -1;
		this.clearRegisters();
	}
	,updateActiveTextureSample: function(texture) {
		this._activeTexture = texture;
		return true;
	}
	,updateActiveVertexArray: function(vertexArray) {
		this._activeVertexArray = vertexArray;
		return true;
	}
	,updateBlendDestFactor: function(factor) {
		this._destBlendFactor = factor;
		return true;
	}
	,updateBlendSrcFactor: function(factor) {
		this._srcBlendFactor = factor;
		return true;
	}
	,updateCullingMode: function(cullMode) {
		this._cullingMode = cullMode;
		return true;
	}
	,updateDepthCompareMode: function(mode) {
		this._depthTestCompareMode = mode;
		return true;
	}
	,updateDepthTestEnabled: function(test) {
		this._depthTestEnabled = test;
		return true;
	}
	,updateDepthTestMask: function(mask) {
		this._depthTestMask = mask;
		return true;
	}
	,updateProgram3D: function(program3d) {
		this._program = program3d;
		return true;
	}
	,updateRegisters: function(mTemp,startRegister,numRegisters) {
		return true;
	}
	,updateViewport: function(originX,originY,width,height) {
		this._viewportOriginX = originX;
		this._viewportOriginY = originY;
		this._viewportWidth = width;
		this._viewportHeight = height;
		return true;
	}
	,__class__: openfl__$internal_stage3D_Context3DStateCache
};
var openfl__$internal_stage3D_GLCompressedTextureFormats = function(gl) {
	this.__formatMapAlpha = new haxe_ds_IntMap();
	this.__formatMap = new haxe_ds_IntMap();
	this.checkDXT(gl);
	this.checkETC1(gl);
	this.checkPVRTC(gl);
};
$hxClasses["openfl._internal.stage3D.GLCompressedTextureFormats"] = openfl__$internal_stage3D_GLCompressedTextureFormats;
openfl__$internal_stage3D_GLCompressedTextureFormats.__name__ = ["openfl","_internal","stage3D","GLCompressedTextureFormats"];
openfl__$internal_stage3D_GLCompressedTextureFormats.prototype = {
	__formatMap: null
	,__formatMapAlpha: null
	,checkDXT: function(gl) {
		var compressedExtension = gl.__context.getExtension("WEBGL_compressed_texture_s3tc");
		if(compressedExtension != null) {
			var v = compressedExtension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
			this.__formatMap.h[0] = v;
			var v1 = compressedExtension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
			this.__formatMapAlpha.h[0] = v1;
		}
	}
	,checkETC1: function(gl) {
		var compressedExtension = gl.__context.getExtension("WEBGL_compressed_texture_etc1");
		if(compressedExtension != null) {
			var v = compressedExtension.COMPRESSED_RGB_ETC1_WEBGL;
			this.__formatMap.h[2] = v;
		}
	}
	,checkPVRTC: function(gl) {
		var compressedExtension = gl.__context.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
		if(compressedExtension != null) {
			var v = compressedExtension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
			this.__formatMap.h[1] = v;
			var v1 = compressedExtension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
			this.__formatMapAlpha.h[1] = v1;
		}
	}
	,toTextureFormat: function(alpha,gpuFormat) {
		if(alpha) {
			return this.__formatMap.h[gpuFormat];
		} else {
			return this.__formatMapAlpha.h[gpuFormat];
		}
	}
	,__class__: openfl__$internal_stage3D_GLCompressedTextureFormats
};
var openfl__$internal_stage3D_GLUtils = function() { };
$hxClasses["openfl._internal.stage3D.GLUtils"] = openfl__$internal_stage3D_GLUtils;
openfl__$internal_stage3D_GLUtils.__name__ = ["openfl","_internal","stage3D","GLUtils"];
openfl__$internal_stage3D_GLUtils.CheckGLError = function() {
	if(!openfl__$internal_stage3D_GLUtils.debug) {
		return;
	}
	var error = lime_graphics_opengl_GL.context.__context.getError();
	if(error != 0) {
		var errorText;
		switch(error) {
		case 0:
			errorText = "GL_NO_ERROR";
			break;
		case 1280:
			errorText = "GL_INVALID_ENUM";
			break;
		case 1281:
			errorText = "GL_INVALID_VALUE";
			break;
		case 1282:
			errorText = "GL_INVALID_OPERATION";
			break;
		case 1285:
			errorText = "GL_OUT_OF_MEMORY";
			break;
		case 1286:
			errorText = "GL_INVALID_FRAMEBUFFER_OPERATION";
			break;
		default:
			if(error == null) {
				errorText = "null";
			} else {
				errorText = "" + error;
			}
		}
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Error calling openGL api. Error: " + errorText + "\n"));
	}
};
var openfl__$internal_stage3D_SamplerState = function(minFilter,magFilter,wrapModeS,wrapModeT,lodBias,maxAniso,ignoreSampler,centroid,mipmapGenerated) {
	if(mipmapGenerated == null) {
		mipmapGenerated = false;
	}
	if(centroid == null) {
		centroid = false;
	}
	if(ignoreSampler == null) {
		ignoreSampler = false;
	}
	if(maxAniso == null) {
		maxAniso = 0.0;
	}
	if(lodBias == null) {
		lodBias = 0.0;
	}
	this.set_minFilter(minFilter);
	this.set_magFilter(magFilter);
	this.set_wrapModeS(wrapModeS);
	this.set_wrapModeT(wrapModeT);
	this.set_lodBias(lodBias);
	this.set_maxAniso(maxAniso);
	this.ignoreSampler = ignoreSampler;
	this.centroid = centroid;
	this.mipmapGenerated = mipmapGenerated;
	this.__samplerDirty = true;
};
$hxClasses["openfl._internal.stage3D.SamplerState"] = openfl__$internal_stage3D_SamplerState;
openfl__$internal_stage3D_SamplerState.__name__ = ["openfl","_internal","stage3D","SamplerState"];
openfl__$internal_stage3D_SamplerState.prototype = {
	lodBias: null
	,magFilter: null
	,maxAniso: null
	,minFilter: null
	,wrapModeS: null
	,wrapModeT: null
	,centroid: null
	,ignoreSampler: null
	,mipmapGenerated: null
	,__samplerDirty: null
	,copyFrom: function(other) {
		if(other == null || other.ignoreSampler) {
			return;
		}
		this.set_minFilter(other.minFilter);
		this.set_magFilter(other.magFilter);
		this.set_wrapModeS(other.wrapModeS);
		this.set_wrapModeT(other.wrapModeT);
		this.set_lodBias(other.lodBias);
		this.set_maxAniso(other.maxAniso);
		this.centroid = other.centroid;
		this.mipmapGenerated = other.mipmapGenerated;
	}
	,equals: function(other) {
		if(this == other) {
			return !this.__samplerDirty;
		}
		if(other == null) {
			return false;
		}
		if(this.minFilter == other.minFilter && this.magFilter == other.magFilter && this.wrapModeS == other.wrapModeS && this.wrapModeT == other.wrapModeT && this.lodBias == other.lodBias && this.maxAniso == other.maxAniso) {
			return this.mipmapGenerated == other.mipmapGenerated;
		} else {
			return false;
		}
	}
	,set_lodBias: function(value) {
		if(this.lodBias != value) {
			this.__samplerDirty = true;
		}
		return this.lodBias = value;
	}
	,set_magFilter: function(value) {
		if(this.magFilter != value) {
			this.__samplerDirty = true;
		}
		return this.magFilter = value;
	}
	,set_maxAniso: function(value) {
		if(this.maxAniso != value) {
			this.__samplerDirty = true;
		}
		return this.maxAniso = value;
	}
	,set_minFilter: function(value) {
		if(this.minFilter != value) {
			this.__samplerDirty = true;
		}
		return this.minFilter = value;
	}
	,set_wrapModeS: function(value) {
		if(this.wrapModeS != value) {
			this.__samplerDirty = true;
		}
		return this.wrapModeS = value;
	}
	,set_wrapModeT: function(value) {
		if(this.wrapModeT != value) {
			this.__samplerDirty = true;
		}
		return this.wrapModeT = value;
	}
	,__class__: openfl__$internal_stage3D_SamplerState
	,__properties__: {set_wrapModeT:"set_wrapModeT",set_wrapModeS:"set_wrapModeS",set_minFilter:"set_minFilter",set_maxAniso:"set_maxAniso",set_magFilter:"set_magFilter",set_lodBias:"set_lodBias"}
};
var openfl__$internal_stage3D_atf_ATFReader = function(data,byteArrayOffset) {
	this.version = 0;
	data.position = byteArrayOffset;
	var signature = data.readUTFBytes(3);
	data.position = byteArrayOffset;
	if(signature != "ATF") {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF signature not found"));
	}
	var length = 0;
	if(data.b[byteArrayOffset + 6] == 255) {
		this.version = data.b[byteArrayOffset + 7];
		data.position = byteArrayOffset + 8;
		length = this.__readUInt32(data);
	} else {
		this.version = 0;
		data.position = byteArrayOffset + 3;
		length = this.__readUInt24(data);
	}
	if(js_Boot.__cast(byteArrayOffset + length , Int) > openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF length exceeds byte array length"));
	}
	this.data = data;
};
$hxClasses["openfl._internal.stage3D.atf.ATFReader"] = openfl__$internal_stage3D_atf_ATFReader;
openfl__$internal_stage3D_atf_ATFReader.__name__ = ["openfl","_internal","stage3D","atf","ATFReader"];
openfl__$internal_stage3D_atf_ATFReader.prototype = {
	data: null
	,version: null
	,cubeMap: null
	,width: null
	,height: null
	,mipCount: null
	,readHeader: function(__width,__height,cubeMap) {
		var tdata = this.data.readUnsignedByte();
		var type = tdata >> 7;
		if(!cubeMap && type != 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF Cube map not expected"));
		}
		if(cubeMap && type != 1) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF Cube map expected"));
		}
		this.cubeMap = cubeMap;
		var atfFormat = tdata & 127;
		if(atfFormat != 3 && atfFormat != 5) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Only ATF block compressed textures without JPEG-XR+LZMA are supported"));
		}
		this.width = 1 << this.data.readUnsignedByte();
		this.height = 1 << this.data.readUnsignedByte();
		if(this.width != __width || this.height != __height) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF width and height dont match"));
		}
		this.mipCount = this.data.readUnsignedByte();
		return atfFormat == 3;
	}
	,readTextures: function(uploadCallback) {
		var gpuFormats = this.version < 3 ? 3 : 4;
		var sideCount = this.cubeMap ? 6 : 1;
		var _g1 = 0;
		var _g = sideCount;
		while(_g1 < _g) {
			var side = _g1++;
			var _g3 = 0;
			var _g2 = this.mipCount;
			while(_g3 < _g2) {
				var level = _g3++;
				var _g5 = 0;
				var _g4 = gpuFormats;
				while(_g5 < _g4) {
					var gpuFormat = _g5++;
					var blockLength = this.version == 0 ? this.__readUInt24(this.data) : this.__readUInt32(this.data);
					if(_$UInt_UInt_$Impl_$.gt(this.data.position + blockLength,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.data))) {
						throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Block length exceeds ATF file length"));
					}
					if(_$UInt_UInt_$Impl_$.gt(blockLength,0)) {
						var bytes = new haxe_io_Bytes(new ArrayBuffer(blockLength));
						this.data.readBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes),0,blockLength);
						uploadCallback(side,level,gpuFormat,this.width >> level,this.height >> level,blockLength,lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytes(bytes));
					}
				}
			}
		}
	}
	,__readUInt24: function(data) {
		var value = data.readUnsignedByte() << 16;
		value = value | data.readUnsignedByte() << 8;
		value = value | data.readUnsignedByte();
		return value;
	}
	,__readUInt32: function(data) {
		var value = data.readUnsignedByte() << 24;
		value = value | data.readUnsignedByte() << 16;
		value = value | data.readUnsignedByte() << 8;
		value = value | data.readUnsignedByte();
		return value;
	}
	,__class__: openfl__$internal_stage3D_atf_ATFReader
};
var openfl__$internal_stage3D_opengl_GLContext3D = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLContext3D"] = openfl__$internal_stage3D_opengl_GLContext3D;
openfl__$internal_stage3D_opengl_GLContext3D.__name__ = ["openfl","_internal","stage3D","opengl","GLContext3D"];
openfl__$internal_stage3D_opengl_GLContext3D.create = function(context) {
	var gl = context.__renderSession.gl;
	var this1 = new Float32Array(512);
	context.__vertexConstants = this1;
	var this2 = new Float32Array(512);
	context.__fragmentConstants = this2;
	var array = [1.0,1.0,1.0,1.0];
	var this3;
	if(array != null) {
		this3 = new Float32Array(array);
	} else {
		this3 = null;
	}
	context.__positionScale = this3;
	context.__samplerDirty = 0;
	context.__samplerTextures = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	context.__samplerStates = [];
	var _g = 0;
	while(_g < 8) {
		var i = _g++;
		context.__samplerStates[i] = new openfl__$internal_stage3D_SamplerState(gl.LINEAR,gl.LINEAR,gl.CLAMP_TO_EDGE,gl.CLAMP_TO_EDGE);
	}
	context.maxBackBufferHeight = context.maxBackBufferWidth = gl.__context.getParameter(gl.MAX_VIEWPORT_DIMS);
	context.__backBufferAntiAlias = 0;
	context.__backBufferEnableDepthAndStencil = true;
	context.__backBufferWantsBestResolution = false;
	context.__frameCount = 0;
	context.__rttDepthAndStencil = false;
	context.__samplerDirty = 0;
	context.__stencilCompareMode = 0;
	context.__stencilRef = 0;
	context.__stencilReadMask = 255;
	var anisoExtension = gl.__context.getExtension("EXT_texture_filter_anisotropic");
	if(anisoExtension == null || !Object.prototype.hasOwnProperty.call(anisoExtension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
		anisoExtension = gl.__context.getExtension("MOZ_EXT_texture_filter_anisotropic");
	}
	if(anisoExtension == null || !Object.prototype.hasOwnProperty.call(anisoExtension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
		anisoExtension = gl.__context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
	}
	context.__supportsPackedDepthStencil = true;
	openfl_display3D_Context3D.DEPTH_STENCIL = gl.DEPTH_STENCIL;
	context.__supportsAnisotropicFiltering = anisoExtension != null;
	if(context.__supportsAnisotropicFiltering) {
		openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = anisoExtension.TEXTURE_MAX_ANISOTROPY_EXT;
		var maxAnisotropy = gl.__context.getParameter(anisoExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
		context.__maxAnisotropyTexture2D = maxAnisotropy;
		context.__maxAnisotropyTexture2D = maxAnisotropy;
	}
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var vendor = gl.__context.getParameter(gl.VENDOR);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var version = gl.__context.getParameter(gl.VERSION);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var renderer = gl.__context.getParameter(gl.RENDERER);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var glslVersion = gl.__context.getParameter(gl.SHADING_LANGUAGE_VERSION);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	context.driverInfo = "OpenGL" + " Vendor=" + vendor + " Version=" + version + " Renderer=" + renderer + " GLSL=" + glslVersion;
};
openfl__$internal_stage3D_opengl_GLContext3D.clear = function(context,red,green,blue,alpha,depth,stencil,mask) {
	if(mask == null) {
		mask = 7;
	}
	if(stencil == null) {
		stencil = 0;
	}
	if(depth == null) {
		depth = 1;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(blue == null) {
		blue = 0;
	}
	if(green == null) {
		green = 0;
	}
	if(red == null) {
		red = 0;
	}
	var gl = context.__renderSession.gl;
	var clearMask = 0;
	if((mask & 1) != 0) {
		clearMask |= gl.COLOR_BUFFER_BIT;
		gl.__context.clearColor(red,green,blue,alpha);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	if((mask & 2) != 0) {
		clearMask |= gl.DEPTH_BUFFER_BIT;
		gl.__context.depthMask(true);
		gl.__context.clearDepth(depth);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	if((mask & 4) != 0) {
		clearMask |= gl.STENCIL_BUFFER_BIT;
		gl.__context.clearStencil(stencil);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	gl.__context.clear(clearMask);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLContext3D.configureBackBuffer = function(context,width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
	if(wantsBestResolutionOnBrowserZoom == null) {
		wantsBestResolutionOnBrowserZoom = false;
	}
	if(wantsBestResolution == null) {
		wantsBestResolution = false;
	}
	if(enableDepthAndStencil == null) {
		enableDepthAndStencil = true;
	}
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewport();
	context.backBufferWidth = width;
	context.backBufferHeight = height;
	context.__backBufferAntiAlias = antiAlias;
	context.__backBufferEnableDepthAndStencil = enableDepthAndStencil;
	context.__backBufferWantsBestResolution = wantsBestResolution;
	openfl_display3D_Context3D.__stateCache.clearSettings();
};
openfl__$internal_stage3D_opengl_GLContext3D.dispose = function(context,recreate) {
	if(recreate == null) {
		recreate = true;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.drawToBitmapData = function(context,destination) {
	var $window = context.__stage3D.__stage.window;
	if($window != null) {
		var image = $window.renderer.readPixels();
		var heightOffset = image.height - context.backBufferHeight;
		destination.image.copyPixels(image,new lime_math_Rectangle(context.__stage3D.x | 0,context.__stage3D.y + heightOffset | 0,context.backBufferWidth,context.backBufferHeight),new lime_math_Vector2());
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.drawTriangles = function(context,indexBuffer,firstIndex,numTriangles) {
	if(numTriangles == null) {
		numTriangles = -1;
	}
	if(firstIndex == null) {
		firstIndex = 0;
	}
	if(context.__program == null) {
		return;
	}
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	openfl__$internal_stage3D_opengl_GLContext3D.__flushSamplerState();
	context.__program.__flush();
	var count = numTriangles == -1 ? indexBuffer.__numIndices : numTriangles * 3;
	openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.bindBuffer(openfl__$internal_stage3D_opengl_GLContext3D.gl.ELEMENT_ARRAY_BUFFER,indexBuffer.__id);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var _this = openfl__$internal_stage3D_opengl_GLContext3D.gl;
	var mode = openfl__$internal_stage3D_opengl_GLContext3D.gl.TRIANGLES;
	var type = indexBuffer.__elementType;
	var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(firstIndex);
	_this.__context.drawElements(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLContext3D.present = function(context) {
};
openfl__$internal_stage3D_opengl_GLContext3D.setBlendFactors = function(context,sourceFactor,destinationFactor) {
	var updateSrc = openfl_display3D_Context3D.__stateCache.updateBlendSrcFactor(sourceFactor);
	var updateDest = openfl_display3D_Context3D.__stateCache.updateBlendDestFactor(destinationFactor);
	if(updateSrc || updateDest) {
		openfl__$internal_stage3D_opengl_GLContext3D.context = context;
		openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
		openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactors();
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setColorMask = function(context,red,green,blue,alpha) {
	var gl = context.__renderSession.gl;
	gl.__context.colorMask(red,green,blue,alpha);
};
openfl__$internal_stage3D_opengl_GLContext3D.setCulling = function(context,triangleFaceToCull) {
	var gl = context.__renderSession.gl;
	if(openfl_display3D_Context3D.__stateCache.updateCullingMode(triangleFaceToCull)) {
		switch(triangleFaceToCull) {
		case 0:
			gl.__context.enable(gl.CULL_FACE);
			gl.__context.cullFace(gl.FRONT);
			break;
		case 1:
			gl.__context.enable(gl.CULL_FACE);
			gl.__context.cullFace(gl.BACK);
			break;
		case 2:
			gl.__context.enable(gl.CULL_FACE);
			gl.__context.cullFace(gl.FRONT_AND_BACK);
			break;
		case 3:
			gl.__context.disable(gl.CULL_FACE);
			break;
		default:
			return new openfl_errors_IllegalOperationError();
		}
	}
	return null;
};
openfl__$internal_stage3D_opengl_GLContext3D.setDepthTest = function(context,depthMask,passCompareMode) {
	var gl = context.__renderSession.gl;
	var depthTestEnabled = context.__backBufferEnableDepthAndStencil;
	if(openfl_display3D_Context3D.__stateCache.updateDepthTestEnabled(depthTestEnabled)) {
		if(depthTestEnabled) {
			gl.__context.enable(gl.DEPTH_TEST);
		} else {
			gl.__context.disable(gl.DEPTH_TEST);
		}
	}
	if(openfl_display3D_Context3D.__stateCache.updateDepthTestMask(depthMask)) {
		gl.__context.depthMask(depthMask);
	}
	if(openfl_display3D_Context3D.__stateCache.updateDepthCompareMode(passCompareMode)) {
		switch(passCompareMode) {
		case 0:
			gl.__context.depthFunc(gl.ALWAYS);
			break;
		case 1:
			gl.__context.depthFunc(gl.EQUAL);
			break;
		case 2:
			gl.__context.depthFunc(gl.GREATER);
			break;
		case 3:
			gl.__context.depthFunc(gl.GEQUAL);
			break;
		case 4:
			gl.__context.depthFunc(gl.LESS);
			break;
		case 5:
			gl.__context.depthFunc(gl.LEQUAL);
			break;
		case 6:
			gl.__context.depthFunc(gl.NEVER);
			break;
		case 7:
			gl.__context.depthFunc(gl.NOTEQUAL);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setEnableErrorChecking = function(value) {
	openfl__$internal_stage3D_GLUtils.debug = value;
};
openfl__$internal_stage3D_opengl_GLContext3D.setProgram = function(context,program) {
	if(openfl_display3D_Context3D.__stateCache.updateProgram3D(program)) {
		program.__use();
		program.__setPositionScale(context.__positionScale);
		context.__program = program;
		context.__samplerDirty |= context.__program.__samplerUsageMask;
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			context.__samplerStates[i].copyFrom(context.__program.__getSamplerState(i));
		}
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromByteArray = function(context,programType,firstRegister,numRegisters,data,byteArrayOffset) {
	var gl = context.__renderSession.gl;
	if(numRegisters == -1) {
		numRegisters = (openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data) >> 2) - byteArrayOffset;
	}
	var isVertex = programType == 1;
	var dest = isVertex ? context.__vertexConstants : context.__fragmentConstants;
	var bytes = openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(data);
	var len = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
	var floatData = len == null ? new Float32Array(bytes.b.bufferValue,0) : new Float32Array(bytes.b.bufferValue,0,len);
	var outOffset = firstRegister * 4;
	var inOffset = _$UInt_UInt_$Impl_$.toFloat(byteArrayOffset) / _$UInt_UInt_$Impl_$.toFloat(4) | 0;
	var _g1 = 0;
	var _g = numRegisters * 4;
	while(_g1 < _g) {
		var i = _g1++;
		dest[outOffset + i] = floatData[inOffset + i];
	}
	if(context.__program != null) {
		context.__program.__markDirty(isVertex,firstRegister,numRegisters);
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromMatrix = function(context,programType,firstRegister,matrix,transposedMatrix) {
	if(transposedMatrix == null) {
		transposedMatrix = false;
	}
	var isVertex = programType == 1;
	var dest = isVertex ? context.__vertexConstants : context.__fragmentConstants;
	var source = matrix.rawData;
	var i = firstRegister * 4;
	if(transposedMatrix) {
		dest[i++] = source.data.get(0);
		dest[i++] = source.data.get(4);
		dest[i++] = source.data.get(8);
		dest[i++] = source.data.get(12);
		dest[i++] = source.data.get(1);
		dest[i++] = source.data.get(5);
		dest[i++] = source.data.get(9);
		dest[i++] = source.data.get(13);
		dest[i++] = source.data.get(2);
		dest[i++] = source.data.get(6);
		dest[i++] = source.data.get(10);
		dest[i++] = source.data.get(14);
		dest[i++] = source.data.get(3);
		dest[i++] = source.data.get(7);
		dest[i++] = source.data.get(11);
		dest[i++] = source.data.get(15);
	} else {
		dest[i++] = source.data.get(0);
		dest[i++] = source.data.get(1);
		dest[i++] = source.data.get(2);
		dest[i++] = source.data.get(3);
		dest[i++] = source.data.get(4);
		dest[i++] = source.data.get(5);
		dest[i++] = source.data.get(6);
		dest[i++] = source.data.get(7);
		dest[i++] = source.data.get(8);
		dest[i++] = source.data.get(9);
		dest[i++] = source.data.get(10);
		dest[i++] = source.data.get(11);
		dest[i++] = source.data.get(12);
		dest[i++] = source.data.get(13);
		dest[i++] = source.data.get(14);
		dest[i++] = source.data.get(15);
	}
	if(context.__program != null) {
		context.__program.__markDirty(isVertex,firstRegister,4);
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromVector = function(context,programType,firstRegister,data,numRegisters) {
	if(numRegisters == null) {
		numRegisters = -1;
	}
	if(numRegisters == -1) {
		numRegisters = data.data.get_length() >> 2;
	}
	var isVertex = programType == 1;
	var dest = isVertex ? context.__vertexConstants : context.__fragmentConstants;
	var source = data;
	var sourceIndex = 0;
	var destIndex = firstRegister * 4;
	var _g1 = 0;
	var _g = numRegisters;
	while(_g1 < _g) {
		var i = _g1++;
		dest[destIndex++] = source.data.get(sourceIndex++);
		dest[destIndex++] = source.data.get(sourceIndex++);
		dest[destIndex++] = source.data.get(sourceIndex++);
		dest[destIndex++] = source.data.get(sourceIndex++);
	}
	if(context.__program != null) {
		context.__program.__markDirty(isVertex,firstRegister,numRegisters);
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setRenderToBackBuffer = function(context) {
	var gl = context.__renderSession.gl;
	gl.__context.bindFramebuffer(gl.FRAMEBUFFER,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.frontFace(gl.CCW);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	context.__renderToTexture = null;
	context.__scissorRectangle = null;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewport();
	openfl__$internal_stage3D_opengl_GLContext3D.__updateScissorRectangle();
	openfl__$internal_stage3D_opengl_GLContext3D.__updateDepthAndStencilState();
	context.__positionScale[1] = 1.0;
	if(context.__program != null) {
		context.__program.__setPositionScale(context.__positionScale);
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setRenderToTexture = function(context,texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
	if(surfaceSelector == null) {
		surfaceSelector = 0;
	}
	if(antiAlias == null) {
		antiAlias = 0;
	}
	if(enableDepthAndStencil == null) {
		enableDepthAndStencil = false;
	}
	var gl = context.__renderSession.gl;
	var width = 0;
	var height = 0;
	if(context.__framebuffer == null) {
		context.__framebuffer = gl.__context.createFramebuffer();
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	gl.__context.bindFramebuffer(gl.FRAMEBUFFER,context.__framebuffer);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
		var texture2D = texture;
		width = texture2D.__width;
		height = texture2D.__height;
		gl.__context.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture.__textureID,0);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
		var rectTexture = texture;
		width = rectTexture.__width;
		height = rectTexture.__height;
		gl.__context.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture.__textureID,0);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_CubeTexture)) {
		var cubeTexture = texture;
		width = cubeTexture.__size;
		height = cubeTexture.__size;
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			gl.__context.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,texture.__textureID,0);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid texture"));
	}
	if(enableDepthAndStencil) {
		if(context.__supportsPackedDepthStencil) {
			if(context.__depthStencilRenderBuffer == null) {
				context.__depthStencilRenderBuffer = gl.__context.createRenderbuffer();
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			gl.__context.bindRenderbuffer(gl.RENDERBUFFER,context.__depthStencilRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.__context.renderbufferStorage(gl.RENDERBUFFER,openfl_display3D_Context3D.DEPTH_STENCIL,width,height);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.__context.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,context.__depthStencilRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			if(context.__depthRenderBuffer == null) {
				context.__depthRenderBuffer = gl.__context.createRenderbuffer();
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			if(context.__stencilRenderBuffer == null) {
				context.__stencilRenderBuffer = gl.__context.createRenderbuffer();
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			gl.__context.bindRenderbuffer(gl.RENDERBUFFER,context.__depthRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.__context.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,width,height);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.__context.bindRenderbuffer(gl.RENDERBUFFER,context.__stencilRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.__context.renderbufferStorage(gl.RENDERBUFFER,gl.STENCIL_INDEX8,width,height);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.__context.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,context.__depthRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.__context.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.STENCIL_ATTACHMENT,gl.RENDERBUFFER,context.__stencilRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		gl.__context.bindRenderbuffer(gl.RENDERBUFFER,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	openfl__$internal_stage3D_opengl_GLContext3D.__setViewport(0,0,width,height);
	if(context.enableErrorChecking) {
		var code = gl.__context.checkFramebufferStatus(gl.FRAMEBUFFER);
		if(code != gl.FRAMEBUFFER_COMPLETE) {
			haxe_Log.trace("Error: Context3D.setRenderToTexture status:${code} width:${texture2D.__width} height:${texture2D.__height}",{ fileName : "GLContext3D.hx", lineNumber : 736, className : "openfl._internal.stage3D.opengl.GLContext3D", methodName : "setRenderToTexture"});
		}
	}
	context.__positionScale[1] = -1.0;
	if(context.__program != null) {
		context.__program.__setPositionScale(context.__positionScale);
	}
	gl.__context.frontFace(gl.CW);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	context.__renderToTexture = texture;
	context.__scissorRectangle = null;
	context.__rttDepthAndStencil = enableDepthAndStencil;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateScissorRectangle();
	openfl__$internal_stage3D_opengl_GLContext3D.__updateDepthAndStencilState();
};
openfl__$internal_stage3D_opengl_GLContext3D.setSamplerStateAt = function(context,sampler,wrap,filter,mipfilter) {
	if(sampler < 0 || sampler > 8) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("sampler out of range"));
	}
	var gl = context.__renderSession.gl;
	var state = context.__samplerStates[sampler];
	switch(wrap) {
	case 0:
		state.set_wrapModeS(gl.CLAMP_TO_EDGE);
		state.set_wrapModeT(gl.CLAMP_TO_EDGE);
		break;
	case 1:
		state.set_wrapModeS(gl.CLAMP_TO_EDGE);
		state.set_wrapModeT(gl.REPEAT);
		break;
	case 2:
		state.set_wrapModeS(gl.REPEAT);
		state.set_wrapModeT(gl.REPEAT);
		break;
	case 3:
		state.set_wrapModeS(gl.REPEAT);
		state.set_wrapModeT(gl.CLAMP_TO_EDGE);
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_Error("wrap bad enum"));
	}
	switch(filter) {
	case 0:
		if(context.__supportsAnisotropicFiltering) {
			state.set_maxAniso(context.__maxAnisotropyTexture2D < 16 ? context.__maxAnisotropyTexture2D : 16);
		}
		break;
	case 1:
		if(context.__supportsAnisotropicFiltering) {
			state.set_maxAniso(context.__maxAnisotropyTexture2D < 2 ? context.__maxAnisotropyTexture2D : 2);
		}
		break;
	case 2:
		if(context.__supportsAnisotropicFiltering) {
			state.set_maxAniso(context.__maxAnisotropyTexture2D < 4 ? context.__maxAnisotropyTexture2D : 4);
		}
		break;
	case 3:
		if(context.__supportsAnisotropicFiltering) {
			state.set_maxAniso(context.__maxAnisotropyTexture2D < 8 ? context.__maxAnisotropyTexture2D : 8);
		}
		break;
	case 4:
		state.set_magFilter(gl.LINEAR);
		if(context.__supportsAnisotropicFiltering) {
			state.set_maxAniso(1);
		}
		break;
	case 5:
		state.set_magFilter(gl.NEAREST);
		if(context.__supportsAnisotropicFiltering) {
			state.set_maxAniso(1);
		}
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_Error("filter bad enum"));
	}
	switch(mipfilter) {
	case 0:
		state.set_minFilter(filter == 5 ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR_MIPMAP_LINEAR);
		break;
	case 1:
		state.set_minFilter(filter == 5 ? gl.NEAREST_MIPMAP_NEAREST : gl.LINEAR_MIPMAP_NEAREST);
		break;
	case 2:
		state.set_minFilter(filter == 5 ? gl.NEAREST : gl.LINEAR);
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_Error("mipfiter bad enum"));
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setScissorRectangle = function(context,rectangle) {
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	context.__scissorRectangle = rectangle != null ? rectangle.clone() : null;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateScissorRectangle();
};
openfl__$internal_stage3D_opengl_GLContext3D.setStencilActions = function(context,triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
	if(actionOnDepthPassStencilFail == null) {
		actionOnDepthPassStencilFail = 5;
	}
	if(actionOnDepthFail == null) {
		actionOnDepthFail = 5;
	}
	if(actionOnBothPass == null) {
		actionOnBothPass = 5;
	}
	if(compareMode == null) {
		compareMode = 0;
	}
	if(triangleFace == null) {
		triangleFace = 2;
	}
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	context.__stencilCompareMode = compareMode;
	var _this = openfl__$internal_stage3D_opengl_GLContext3D.gl;
	var face = openfl__$internal_stage3D_opengl_GLContext3D.__getGLTriangleFace(triangleFace);
	var fail = openfl__$internal_stage3D_opengl_GLContext3D.__getGLStencilAction(actionOnDepthPassStencilFail);
	var zfail = openfl__$internal_stage3D_opengl_GLContext3D.__getGLStencilAction(actionOnDepthFail);
	var zpass = openfl__$internal_stage3D_opengl_GLContext3D.__getGLStencilAction(actionOnBothPass);
	_this.__context.stencilOpSeparate(face,fail,zfail,zpass);
	var _this1 = openfl__$internal_stage3D_opengl_GLContext3D.gl;
	var func = openfl__$internal_stage3D_opengl_GLContext3D.__getGLCompareMode(context.__stencilCompareMode);
	_this1.__context.stencilFunc(func,context.__stencilRef,context.__stencilReadMask);
};
openfl__$internal_stage3D_opengl_GLContext3D.setStencilReferenceValue = function(context,referenceValue,readMask,writeMask) {
	if(writeMask == null) {
		writeMask = 255;
	}
	if(readMask == null) {
		readMask = 255;
	}
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	context.__stencilReadMask = readMask;
	context.__stencilRef = referenceValue;
	var _this = openfl__$internal_stage3D_opengl_GLContext3D.gl;
	var func = openfl__$internal_stage3D_opengl_GLContext3D.__getGLCompareMode(context.__stencilCompareMode);
	_this.__context.stencilFunc(func,context.__stencilRef,context.__stencilReadMask);
	openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.stencilMask(writeMask);
};
openfl__$internal_stage3D_opengl_GLContext3D.setTextureAt = function(context,sampler,texture) {
	if(context.__samplerTextures.data.get(sampler) != texture) {
		context.__samplerTextures.data.set(sampler,texture);
		context.__samplerDirty |= 1 << sampler;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setVertexBufferAt = function(context,index,buffer,bufferOffset,format) {
	if(format == null) {
		format = 4;
	}
	if(bufferOffset == null) {
		bufferOffset = 0;
	}
	var gl = context.__renderSession.gl;
	if(buffer == null) {
		gl.__context.disableVertexAttribArray(index);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		gl.__context.bindBuffer(gl.ARRAY_BUFFER,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		return;
	}
	gl.__context.enableVertexAttribArray(index);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.bindBuffer(gl.ARRAY_BUFFER,buffer.__id);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var byteOffset = bufferOffset * 4;
	switch(format) {
	case 0:
		var type = gl.UNSIGNED_BYTE;
		var stride = buffer.__stride;
		var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(byteOffset);
		gl.__context.vertexAttribPointer(index,4,type,true,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		break;
	case 1:
		var type1 = gl.FLOAT;
		var stride1 = buffer.__stride;
		var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(byteOffset);
		gl.__context.vertexAttribPointer(index,1,type1,false,stride1,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		break;
	case 2:
		var type2 = gl.FLOAT;
		var stride2 = buffer.__stride;
		var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(byteOffset);
		gl.__context.vertexAttribPointer(index,2,type2,false,stride2,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset2));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		break;
	case 3:
		var type3 = gl.FLOAT;
		var stride3 = buffer.__stride;
		var offset3 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(byteOffset);
		gl.__context.vertexAttribPointer(index,3,type3,false,stride3,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset3));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		break;
	case 4:
		var type4 = gl.FLOAT;
		var stride4 = buffer.__stride;
		var offset4 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(byteOffset);
		gl.__context.vertexAttribPointer(index,4,type4,false,stride4,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset4));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__flushSamplerState = function() {
	var sampler = 0;
	while(openfl__$internal_stage3D_opengl_GLContext3D.context.__samplerDirty != 0) {
		if((openfl__$internal_stage3D_opengl_GLContext3D.context.__samplerDirty & 1 << sampler) != 0) {
			if(openfl_display3D_Context3D.__stateCache.updateActiveTextureSample(sampler)) {
				openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.activeTexture(openfl__$internal_stage3D_opengl_GLContext3D.gl.TEXTURE0 + sampler);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			var texture = openfl__$internal_stage3D_opengl_GLContext3D.context.__samplerTextures.data.get(sampler);
			if(texture != null) {
				var target = texture.__textureTarget;
				var _this = openfl__$internal_stage3D_opengl_GLContext3D.gl;
				var texture1 = texture.__getTexture();
				_this.__context.bindTexture(target,texture1);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				texture.__setSamplerState(openfl__$internal_stage3D_opengl_GLContext3D.context.__samplerStates[sampler]);
			} else {
				openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.bindTexture(openfl__$internal_stage3D_opengl_GLContext3D.gl.TEXTURE_2D,null);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			openfl__$internal_stage3D_opengl_GLContext3D.context.__samplerDirty &= ~(1 << sampler);
		}
		++sampler;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__getGLCompareMode = function(compareMode) {
	switch(compareMode) {
	case 0:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.ALWAYS;
	case 1:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.EQUAL;
	case 2:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.GREATER;
	case 3:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.GEQUAL;
	case 4:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.LESS;
	case 5:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.LEQUAL;
	case 6:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.NEVER;
	case 7:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.NOTEQUAL;
	default:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.EQUAL;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__getGLTriangleFace = function(triangleFace) {
	switch(triangleFace) {
	case 0:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.BACK;
	case 1:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.FRONT;
	case 2:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.FRONT_AND_BACK;
	case 3:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.NONE;
	default:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.FRONT_AND_BACK;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__getGLStencilAction = function(stencilAction) {
	switch(stencilAction) {
	case 0:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.DECR;
	case 1:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.DECR_WRAP;
	case 2:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.INCR;
	case 3:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.INCR_WRAP;
	case 4:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.INVERT;
	case 5:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.KEEP;
	case 6:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.REPLACE;
	case 7:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
	default:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.KEEP;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__hasGLExtension = function(name) {
	return openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.getSupportedExtensions().indexOf(name) != -1;
};
openfl__$internal_stage3D_opengl_GLContext3D.__setViewport = function(originX,originY,width,height) {
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture != null) {
		originY *= -1;
	}
	if(openfl_display3D_Context3D.__stateCache.updateViewport(originX,originY,width,height)) {
		openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.viewport(originX,originY,width,height);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateDepthAndStencilState = function() {
	var depthAndStencil = openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture != null ? openfl__$internal_stage3D_opengl_GLContext3D.context.__rttDepthAndStencil : openfl__$internal_stage3D_opengl_GLContext3D.context.__backBufferEnableDepthAndStencil;
	if(depthAndStencil) {
		openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.enable(openfl__$internal_stage3D_opengl_GLContext3D.gl.DEPTH_TEST);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.enable(openfl__$internal_stage3D_opengl_GLContext3D.gl.STENCIL_TEST);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	} else {
		openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.disable(openfl__$internal_stage3D_opengl_GLContext3D.gl.DEPTH_TEST);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.disable(openfl__$internal_stage3D_opengl_GLContext3D.gl.STENCIL_TEST);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactorsTEMP = function(context) {
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactors();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactors = function() {
	if(openfl_display3D_Context3D.__stateCache._srcBlendFactor == null || openfl_display3D_Context3D.__stateCache._destBlendFactor == null) {
		return;
	}
	var src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE;
	var dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
	var _g = openfl_display3D_Context3D.__stateCache._srcBlendFactor;
	switch(_g) {
	case 0:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.DST_ALPHA;
		break;
	case 1:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.DST_COLOR;
		break;
	case 2:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE;
		break;
	case 3:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_DST_ALPHA;
		break;
	case 4:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_DST_COLOR;
		break;
	case 5:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_SRC_ALPHA;
		break;
	case 7:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.SRC_ALPHA;
		break;
	case 9:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
	var _g1 = openfl_display3D_Context3D.__stateCache._destBlendFactor;
	switch(_g1) {
	case 0:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.DST_ALPHA;
		break;
	case 2:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE;
		break;
	case 3:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_DST_ALPHA;
		break;
	case 5:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_SRC_ALPHA;
		break;
	case 6:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_SRC_COLOR;
		break;
	case 7:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.SRC_ALPHA;
		break;
	case 8:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.SRC_COLOR;
		break;
	case 9:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
	openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.enable(openfl__$internal_stage3D_opengl_GLContext3D.gl.BLEND);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.blendFunc(src,dest);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateScissorRectangle = function() {
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle == null) {
		openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.disable(openfl__$internal_stage3D_opengl_GLContext3D.gl.SCISSOR_TEST);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		return;
	}
	openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.enable(openfl__$internal_stage3D_opengl_GLContext3D.gl.SCISSOR_TEST);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var height = 0;
	var offsetX = 0;
	var offsetY = 0;
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture != null) {
		if(js_Boot.__instanceof(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture,openfl_display3D_textures_Texture)) {
			var texture2D = openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture;
			height = texture2D.__height;
		} else if(js_Boot.__instanceof(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture,openfl_display3D_textures_RectangleTexture)) {
			var rectTexture = openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture;
			height = rectTexture.__height;
		}
	} else {
		height = openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferHeight;
		offsetX = openfl__$internal_stage3D_opengl_GLContext3D.context.__stage3D.x | 0;
		offsetY = openfl__$internal_stage3D_opengl_GLContext3D.context.__stage3D.y | 0;
	}
	openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.scissor((openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle.x | 0) + offsetX,height - (openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle.y | 0) - (openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle.height | 0) + offsetY,openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle.width | 0,openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle.height | 0);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewportTEMP = function(context) {
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewport();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewport = function() {
	if(!openfl_display_Stage3D.__active) {
		openfl_display_Stage3D.__active = true;
		openfl__$internal_stage3D_opengl_GLContext3D.context.__renderSession.renderer.clear();
	}
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture == null && openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferWidth > 0 && openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferHeight > 0) {
		openfl__$internal_stage3D_opengl_GLContext3D.__setViewport(openfl__$internal_stage3D_opengl_GLContext3D.context.__stage3D.x | 0,openfl__$internal_stage3D_opengl_GLContext3D.context.__stage3D.y | 0,openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferWidth,openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferHeight);
	}
};
var openfl__$internal_stage3D_opengl_GLCubeTexture = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLCubeTexture"] = openfl__$internal_stage3D_opengl_GLCubeTexture;
openfl__$internal_stage3D_opengl_GLCubeTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLCubeTexture"];
openfl__$internal_stage3D_opengl_GLCubeTexture.create = function(cubeTexture,renderSession) {
	var gl = renderSession.gl;
	cubeTexture.__textureTarget = gl.TEXTURE_CUBE_MAP;
	cubeTexture.__uploadedSides = 0;
};
openfl__$internal_stage3D_opengl_GLCubeTexture.uploadCompressedTextureFromByteArray = function(cubeTexture,renderSession,data,byteArrayOffset) {
	var reader = new openfl__$internal_stage3D_atf_ATFReader(data,byteArrayOffset);
	var alpha = reader.readHeader(cubeTexture.__size,cubeTexture.__size,true);
	var gl = renderSession.gl;
	gl.__context.bindTexture(cubeTexture.__textureTarget,cubeTexture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	reader.readTextures(function(side,level,gpuFormat,width,height,blockLength,bytes) {
		var format = openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats.toTextureFormat(alpha,gpuFormat);
		if(format == 0) {
			return;
		}
		var target = openfl__$internal_stage3D_opengl_GLCubeTexture.__sideToTarget(gl,side);
		cubeTexture.__format = format;
		gl.__context.compressedTexImage2D(target,level,cubeTexture.__format,width,height,0,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(bytes,blockLength));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	});
	gl.__context.bindTexture(cubeTexture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromBitmapData = function(cubeTexture,renderSession,source,side,miplevel,generateMipmap) {
	if(generateMipmap == null) {
		generateMipmap = false;
	}
	if(miplevel == null) {
		miplevel = 0;
	}
	var size = cubeTexture.__size >> miplevel;
	if(size == 0) {
		return;
	}
	var image = cubeTexture.__getImage(source);
	openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromTypedArray(cubeTexture,renderSession,image.get_data(),side,miplevel);
};
openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromByteArray = function(cubeTexture,renderSession,data,byteArrayOffset,side,miplevel) {
	if(byteArrayOffset == 0) {
		openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromTypedArray(cubeTexture,renderSession,data.b,side,miplevel);
		return;
	}
	var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
	var this1;
	if(buffer != null) {
		this1 = new Uint8Array(buffer,byteArrayOffset);
	} else {
		this1 = null;
	}
	openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromTypedArray(cubeTexture,renderSession,this1,side,miplevel);
};
openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromTypedArray = function(cubeTexture,renderSession,data,side,miplevel) {
	if(data == null) {
		return;
	}
	var gl = renderSession.gl;
	var size = cubeTexture.__size >> miplevel;
	if(size == 0) {
		return;
	}
	var target = openfl__$internal_stage3D_opengl_GLCubeTexture.__sideToTarget(gl,side);
	gl.__context.bindTexture(gl.TEXTURE_CUBE_MAP,cubeTexture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var internalformat = cubeTexture.__internalFormat;
	var format = cubeTexture.__format;
	var type = gl.UNSIGNED_BYTE;
	var data1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(data);
	gl.__context.texImage2D(target,miplevel,internalformat,size,size,0,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data1));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.bindTexture(cubeTexture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	cubeTexture.__uploadedSides |= 1 << side;
};
openfl__$internal_stage3D_opengl_GLCubeTexture.setSamplerState = function(cubeTexture,renderSession,state) {
	if(!state.equals(cubeTexture.__samplerState)) {
		var gl = renderSession.gl;
		if(state.minFilter != gl.NEAREST && state.minFilter != gl.LINEAR && !state.mipmapGenerated) {
			gl.__context.generateMipmap(gl.TEXTURE_CUBE_MAP);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			state.mipmapGenerated = true;
		}
		if(state.maxAniso != 0.0) {
			gl.__context.texParameterf(gl.TEXTURE_CUBE_MAP,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,state.maxAniso);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	openfl__$internal_stage3D_opengl_GLTextureBase.setSamplerState(cubeTexture,renderSession,state);
};
openfl__$internal_stage3D_opengl_GLCubeTexture.__sideToTarget = function(gl,side) {
	switch(side) {
	case 0:
		return gl.TEXTURE_CUBE_MAP_NEGATIVE_X;
	case 1:
		return gl.TEXTURE_CUBE_MAP_POSITIVE_X;
	case 2:
		return gl.TEXTURE_CUBE_MAP_NEGATIVE_Y;
	case 3:
		return gl.TEXTURE_CUBE_MAP_POSITIVE_Y;
	case 4:
		return gl.TEXTURE_CUBE_MAP_NEGATIVE_Z;
	case 5:
		return gl.TEXTURE_CUBE_MAP_POSITIVE_Z;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
};
var openfl__$internal_stage3D_opengl_GLIndexBuffer3D = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLIndexBuffer3D"] = openfl__$internal_stage3D_opengl_GLIndexBuffer3D;
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.__name__ = ["openfl","_internal","stage3D","opengl","GLIndexBuffer3D"];
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.create = function(indexBuffer,renderSession,bufferUsage) {
	var gl = renderSession.gl;
	indexBuffer.__elementType = gl.UNSIGNED_SHORT;
	indexBuffer.__id = gl.__context.createBuffer();
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	indexBuffer.__usage = bufferUsage == 0 ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
};
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.dispose = function(indexBuffer,renderSession) {
	var gl = renderSession.gl;
	gl.__context.deleteBuffer(indexBuffer.__id);
};
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromByteArray = function(indexBuffer,renderSession,data,byteArrayOffset,startOffset,count) {
	var offset = byteArrayOffset + startOffset * 2;
	var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
	var this1;
	if(buffer != null) {
		if(count == null) {
			this1 = new Int16Array(buffer,offset);
		} else {
			this1 = new Int16Array(buffer,offset,count);
		}
	} else {
		this1 = null;
	}
	openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromTypedArray(indexBuffer,renderSession,this1);
};
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromTypedArray = function(indexBuffer,renderSession,data) {
	if(data == null) {
		return;
	}
	var gl = renderSession.gl;
	gl.__context.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,indexBuffer.__id);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.bufferData(gl,gl.ELEMENT_ARRAY_BUFFER,data,indexBuffer.__usage);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromVector = function(indexBuffer,renderSession,data,startOffset,count) {
	if(data == null) {
		return;
	}
	var gl = renderSession.gl;
	var length = startOffset + count;
	var existingInt16Array = indexBuffer.__tempInt16Array;
	if(indexBuffer.__tempInt16Array == null || indexBuffer.__tempInt16Array.length < count) {
		var this1;
		if(count != null) {
			this1 = new Int16Array(count);
		} else {
			this1 = null;
		}
		indexBuffer.__tempInt16Array = this1;
		if(existingInt16Array != null) {
			indexBuffer.__tempInt16Array.set(existingInt16Array);
		}
	}
	var _g1 = startOffset;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		indexBuffer.__tempInt16Array[i - startOffset] = data.data.get(i);
	}
	openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromTypedArray(indexBuffer,renderSession,indexBuffer.__tempInt16Array);
};
var openfl__$internal_stage3D_opengl_GLProgram3D = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLProgram3D"] = openfl__$internal_stage3D_opengl_GLProgram3D;
openfl__$internal_stage3D_opengl_GLProgram3D.__name__ = ["openfl","_internal","stage3D","opengl","GLProgram3D"];
openfl__$internal_stage3D_opengl_GLProgram3D.dispose = function(program,renderSession) {
	openfl__$internal_stage3D_opengl_GLProgram3D.program = program;
	openfl__$internal_stage3D_opengl_GLProgram3D.renderSession = renderSession;
	openfl__$internal_stage3D_opengl_GLProgram3D.__deleteShaders();
};
openfl__$internal_stage3D_opengl_GLProgram3D.flushUniform = function(uniform,gl) {
	var index = uniform.regIndex * 4;
	var _g = uniform.type;
	switch(_g) {
	case 35664:
		var location = uniform.location;
		var count = uniform.regCount;
		var v = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(uniform.regData.subarray(index,index + uniform.regCount * 2));
		gl.__context.uniform2fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 2));
		break;
	case 35665:
		var location1 = uniform.location;
		var count1 = uniform.regCount;
		var v1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(uniform.regData.subarray(index,index + uniform.regCount * 3));
		gl.__context.uniform3fv(location1,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v1,count1 * 4 * 3));
		break;
	case 35666:
		var location2 = uniform.location;
		var count2 = uniform.regCount;
		var v2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(uniform.regData.subarray(index,index + uniform.regCount * 4));
		gl.__context.uniform4fv(location2,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v2,count2 * 4 * 4));
		break;
	case 35674:
		var location3 = uniform.location;
		var count3 = uniform.size;
		var v3 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(uniform.regData.subarray(index,index + uniform.size * 2 * 2));
		gl.__context.uniformMatrix2fv(location3,false,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v3,count3 * 4 * 4));
		break;
	case 35675:
		var location4 = uniform.location;
		var count4 = uniform.size;
		var v4 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(uniform.regData.subarray(index,index + uniform.size * 3 * 3));
		gl.__context.uniformMatrix3fv(location4,false,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v4,count4 * 4 * 9));
		break;
	case 35676:
		var location5 = uniform.location;
		var count5 = uniform.size;
		var v5 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(uniform.regData.subarray(index,index + uniform.size * 4 * 4));
		gl.__context.uniformMatrix4fv(location5,false,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v5,count5 * 4 * 16));
		break;
	default:
		var location6 = uniform.location;
		var count6 = uniform.regCount;
		var v6 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(uniform.regData.subarray(index,index + uniform.regCount * 4));
		gl.__context.uniform4fv(location6,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v6,count6 * 4 * 4));
	}
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLProgram3D.setPositionScale = function(program,renderSession,positionScale) {
	var gl = renderSession.gl;
	var location = program.__positionScale.location;
	var v = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(positionScale);
	gl.__context.uniform4fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,16));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLProgram3D.upload = function(program,renderSession,vertexProgram,fragmentProgram) {
	openfl__$internal_stage3D_opengl_GLProgram3D.program = program;
	openfl__$internal_stage3D_opengl_GLProgram3D.renderSession = renderSession;
	var samplerStates = [];
	var glslVertex = openfl__$internal_stage3D_AGALConverter.convertToGLSL(vertexProgram,null);
	var glslFragment = openfl__$internal_stage3D_AGALConverter.convertToGLSL(fragmentProgram,samplerStates);
	openfl__$internal_stage3D_opengl_GLProgram3D.__uploadFromGLSL(glslVertex,glslFragment);
	var _g1 = 0;
	var _g = samplerStates.length;
	while(_g1 < _g) {
		var i = _g1++;
		program.__samplerStates.data.set(i,samplerStates[i]);
	}
};
openfl__$internal_stage3D_opengl_GLProgram3D["use"] = function(program,renderSession) {
	var gl = renderSession.gl;
	gl.__context.useProgram(program.__programID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	program.__vertexUniformMap.markAllDirty();
	program.__fragmentUniformMap.markAllDirty();
	var _g_head = program.__samplerUniforms.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var sampler = val;
		if(sampler.regCount == 1) {
			gl.__context.uniform1i(sampler.location,sampler.regIndex);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
		}
	}
	var _g_head1 = program.__alphaSamplerUniforms.h;
	while(_g_head1 != null) {
		var val1 = _g_head1.item;
		_g_head1 = _g_head1.next;
		var sampler1 = val1;
		if(sampler1.regCount == 1) {
			gl.__context.uniform1i(sampler1.location,sampler1.regIndex);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
		}
	}
};
openfl__$internal_stage3D_opengl_GLProgram3D.__buildUniformList = function() {
	var gl = openfl__$internal_stage3D_opengl_GLProgram3D.renderSession.gl;
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__uniforms.clear();
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__samplerUniforms.clear();
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__alphaSamplerUniforms.clear();
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__samplerUsageMask = 0;
	var numActive = 0;
	numActive = gl.__context.getProgramParameter(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,gl.ACTIVE_UNIFORMS);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var vertexUniforms = new List();
	var fragmentUniforms = new List();
	var _g1 = 0;
	var _g = numActive;
	while(_g1 < _g) {
		var i = _g1++;
		var info = gl.__context.getActiveUniform(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,i);
		var name = info.name;
		var size = info.size;
		var uniformType = info.type;
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var uniform = new openfl_display3D_Uniform(gl);
		uniform.name = name;
		uniform.size = size;
		uniform.type = uniformType;
		uniform.location = gl.__context.getUniformLocation(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,uniform.name);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var indexBracket = uniform.name.indexOf("[");
		if(indexBracket >= 0) {
			uniform.name = uniform.name.substring(0,indexBracket);
		}
		var _g2 = uniform.type;
		switch(_g2) {
		case 35674:
			uniform.regCount = 2;
			break;
		case 35675:
			uniform.regCount = 3;
			break;
		case 35676:
			uniform.regCount = 4;
			break;
		default:
			uniform.regCount = 1;
		}
		uniform.regCount *= uniform.size;
		openfl__$internal_stage3D_opengl_GLProgram3D.program.__uniforms.add(uniform);
		if(uniform.name == "vcPositionScale") {
			openfl__$internal_stage3D_opengl_GLProgram3D.program.__positionScale = uniform;
		} else if(StringTools.startsWith(uniform.name,"vc")) {
			uniform.regIndex = Std.parseInt(uniform.name.substring(2));
			uniform.regData = openfl__$internal_stage3D_opengl_GLProgram3D.program.__context.__vertexConstants;
			vertexUniforms.add(uniform);
		} else if(StringTools.startsWith(uniform.name,"fc")) {
			uniform.regIndex = Std.parseInt(uniform.name.substring(2));
			uniform.regData = openfl__$internal_stage3D_opengl_GLProgram3D.program.__context.__fragmentConstants;
			fragmentUniforms.add(uniform);
		} else if(StringTools.startsWith(uniform.name,"sampler") && !StringTools.endsWith(uniform.name,"_alpha")) {
			uniform.regIndex = Std.parseInt(uniform.name.substring(7));
			openfl__$internal_stage3D_opengl_GLProgram3D.program.__samplerUniforms.add(uniform);
			var _g4 = 0;
			var _g3 = uniform.regCount;
			while(_g4 < _g3) {
				var reg = _g4++;
				openfl__$internal_stage3D_opengl_GLProgram3D.program.__samplerUsageMask |= 1 << uniform.regIndex + reg;
			}
		} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alpha")) {
			var len = uniform.name.indexOf("_") - 7;
			uniform.regIndex = Std.parseInt(uniform.name.substring(7,7 + len)) + 4;
			openfl__$internal_stage3D_opengl_GLProgram3D.program.__alphaSamplerUniforms.add(uniform);
		}
		if(lime_utils_Log.level == 5) {
			haxe_Log.trace("" + i + " name:" + uniform.name + " type:" + uniform.type + " size:" + uniform.size + " location:" + Std.string(uniform.location),{ fileName : "GLProgram3D.hx", lineNumber : 247, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__buildUniformList"});
		}
	}
	var tmp = Lambda.array(vertexUniforms);
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexUniformMap = new openfl_display3D_UniformMap(tmp);
	var tmp1 = Lambda.array(fragmentUniforms);
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentUniformMap = new openfl_display3D_UniformMap(tmp1);
};
openfl__$internal_stage3D_opengl_GLProgram3D.__deleteShaders = function() {
	var gl = openfl__$internal_stage3D_opengl_GLProgram3D.renderSession.gl;
	if(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID != null) {
		openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID = null;
	}
	if(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID != null) {
		gl.__context.deleteShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID = null;
	}
	if(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID != null) {
		gl.__context.deleteShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID = null;
	}
};
openfl__$internal_stage3D_opengl_GLProgram3D.__getUniformRegisters = function(uniform,index,size) {
	return uniform.regData.subarray(index,index + size);
};
openfl__$internal_stage3D_opengl_GLProgram3D.__uploadFromGLSL = function(vertexShaderSource,fragmentShaderSource) {
	var gl = openfl__$internal_stage3D_opengl_GLProgram3D.renderSession.gl;
	openfl__$internal_stage3D_opengl_GLProgram3D.__deleteShaders();
	if(lime_utils_Log.level == 5) {
		lime_utils_Log.info(vertexShaderSource,{ fileName : "GLProgram3D.hx", lineNumber : 322, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__uploadFromGLSL"});
		lime_utils_Log.info(fragmentShaderSource,{ fileName : "GLProgram3D.hx", lineNumber : 323, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__uploadFromGLSL"});
	}
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexSource = vertexShaderSource;
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentSource = fragmentShaderSource;
	var tmp = gl.__context.createShader(gl.VERTEX_SHADER);
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID = tmp;
	gl.__context.shaderSource(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID,vertexShaderSource);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.compileShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var shaderCompiled = gl.__context.getShaderParameter(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID,gl.COMPILE_STATUS);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	if(shaderCompiled == 0) {
		var vertexInfoLog = gl.__context.getShaderInfoLog(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID);
		if(vertexInfoLog != null && vertexInfoLog.length != 0) {
			haxe_Log.trace("vertex: " + vertexInfoLog,{ fileName : "GLProgram3D.hx", lineNumber : 347, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__uploadFromGLSL"});
		}
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Error compiling vertex shader: " + vertexInfoLog));
	}
	var tmp1 = gl.__context.createShader(gl.FRAGMENT_SHADER);
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID = tmp1;
	gl.__context.shaderSource(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID,fragmentShaderSource);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.compileShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var fragmentCompiled = gl.__context.getShaderParameter(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID,gl.COMPILE_STATUS);
	if(fragmentCompiled == 0) {
		var fragmentInfoLog = gl.__context.getShaderInfoLog(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID);
		if(fragmentInfoLog != null && fragmentInfoLog.length != 0) {
			haxe_Log.trace("fragment: " + fragmentInfoLog,{ fileName : "GLProgram3D.hx", lineNumber : 370, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__uploadFromGLSL"});
		}
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Error compiling fragment shader: " + fragmentInfoLog));
	}
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID = gl.__context.createProgram();
	gl.__context.attachShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.attachShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var name = "va" + i;
		if(vertexShaderSource.indexOf(" " + name) != -1) {
			gl.__context.bindAttribLocation(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,i,name);
		}
	}
	gl.__context.linkProgram(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID);
	var infoLog = gl.__context.getProgramInfoLog(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID);
	if(infoLog != null && infoLog.length != 0) {
		haxe_Log.trace("program: " + infoLog,{ fileName : "GLProgram3D.hx", lineNumber : 403, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__uploadFromGLSL"});
	}
	openfl__$internal_stage3D_opengl_GLProgram3D.__buildUniformList();
};
var openfl__$internal_stage3D_opengl_GLRectangleTexture = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLRectangleTexture"] = openfl__$internal_stage3D_opengl_GLRectangleTexture;
openfl__$internal_stage3D_opengl_GLRectangleTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLRectangleTexture"];
openfl__$internal_stage3D_opengl_GLRectangleTexture.create = function(rectangleTexture,renderSession) {
	var gl = renderSession.gl;
	rectangleTexture.__textureTarget = gl.TEXTURE_2D;
	openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(rectangleTexture,renderSession,null);
};
openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromBitmapData = function(rectangleTexture,renderSession,source) {
	if(source == null) {
		return;
	}
	var image = rectangleTexture.__getImage(source);
	if(image == null) {
		return;
	}
	openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(rectangleTexture,renderSession,image.get_data());
};
openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromByteArray = function(rectangleTexture,renderSession,data,byteArrayOffset) {
	if(byteArrayOffset == 0) {
		openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(rectangleTexture,renderSession,data.b);
		return;
	}
	var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
	var this1;
	if(buffer != null) {
		this1 = new Uint8Array(buffer,byteArrayOffset);
	} else {
		this1 = null;
	}
	openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(rectangleTexture,renderSession,this1);
};
openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray = function(rectangleTexture,renderSession,data) {
	var gl = renderSession.gl;
	gl.__context.bindTexture(rectangleTexture.__textureTarget,rectangleTexture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var target = rectangleTexture.__textureTarget;
	var internalformat = rectangleTexture.__internalFormat;
	var width = rectangleTexture.__width;
	var height = rectangleTexture.__height;
	var format = rectangleTexture.__format;
	var type = gl.UNSIGNED_BYTE;
	var data1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(data);
	gl.__context.texImage2D(target,0,internalformat,width,height,0,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data1));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.bindTexture(rectangleTexture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLRectangleTexture.setSamplerState = function(rectangleTexture,renderSession,state) {
	if(!state.equals(rectangleTexture.__samplerState)) {
		var gl = renderSession.gl;
		if(state.maxAniso != 0.0) {
			gl.__context.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,state.maxAniso);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	openfl__$internal_stage3D_opengl_GLTextureBase.setSamplerState(rectangleTexture,renderSession,state);
};
var openfl__$internal_stage3D_opengl_GLStage3D = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLStage3D"] = openfl__$internal_stage3D_opengl_GLStage3D;
openfl__$internal_stage3D_opengl_GLStage3D.__name__ = ["openfl","_internal","stage3D","opengl","GLStage3D"];
openfl__$internal_stage3D_opengl_GLStage3D.render = function(stage3D,renderSession) {
	if(stage3D.context3D != null) {
		renderSession.blendModeManager.setBlendMode(null);
		if(renderSession.shaderManager.currentShader != null) {
			renderSession.shaderManager.setShader(null);
			if(stage3D.context3D.__program != null) {
				stage3D.context3D.__program.__use();
			}
		}
	}
	if(openfl__$internal_stage3D_GLUtils.debug) {
		renderSession.gl.__context.getError();
	}
};
var openfl__$internal_stage3D_opengl_GLTexture = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLTexture"] = openfl__$internal_stage3D_opengl_GLTexture;
openfl__$internal_stage3D_opengl_GLTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLTexture"];
openfl__$internal_stage3D_opengl_GLTexture.create = function(texture,renderSession) {
	var gl = renderSession.gl;
	texture.__textureTarget = gl.TEXTURE_2D;
	gl.__context.bindTexture(texture.__textureTarget,texture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var target = texture.__textureTarget;
	var internalformat = texture.__internalFormat;
	var width = texture.__width;
	var height = texture.__height;
	var format = texture.__format;
	var type = gl.UNSIGNED_BYTE;
	var data = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
	gl.__context.texImage2D(target,0,internalformat,width,height,0,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.bindTexture(texture.__textureTarget,null);
	openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray(texture,renderSession,null);
};
openfl__$internal_stage3D_opengl_GLTexture.uploadCompressedTextureFromByteArray = function(texture,renderSession,data,byteArrayOffset) {
	var reader = new openfl__$internal_stage3D_atf_ATFReader(data,byteArrayOffset);
	var alpha = reader.readHeader(texture.__width,texture.__height,false);
	var gl = renderSession.gl;
	gl.__context.bindTexture(texture.__textureTarget,texture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	reader.readTextures(function(target,level,gpuFormat,width,height,blockLength,bytes) {
		var format = openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats.toTextureFormat(alpha,gpuFormat);
		if(format == 0) {
			return;
		}
		texture.__format = format;
		gl.__context.compressedTexImage2D(texture.__textureTarget,level,texture.__format,width,height,0,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(bytes,blockLength));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	});
	gl.__context.bindTexture(texture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLTexture.uploadFromBitmapData = function(texture,renderSession,source,miplevel,generateMipmap) {
	if(source == null) {
		return;
	}
	var width = texture.__width >> miplevel;
	var height = texture.__height >> miplevel;
	if(width == 0 && height == 0) {
		return;
	}
	if(width == 0) {
		width = 1;
	}
	if(height == 0) {
		height = 1;
	}
	if(source.width != width || source.height != height) {
		var copy = new openfl_display_BitmapData(width,height,true,0);
		copy.draw(source);
		source = copy;
	}
	var image = texture.__getImage(source);
	openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray(texture,renderSession,image.get_data(),miplevel);
};
openfl__$internal_stage3D_opengl_GLTexture.uploadFromByteArray = function(texture,renderSession,data,byteArrayOffset,miplevel) {
	if(miplevel == null) {
		miplevel = 0;
	}
	if(byteArrayOffset == 0) {
		openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray(texture,renderSession,data.b,miplevel);
		return;
	}
	var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
	var this1;
	if(buffer != null) {
		this1 = new Uint8Array(buffer,byteArrayOffset);
	} else {
		this1 = null;
	}
	openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray(texture,renderSession,this1,miplevel);
};
openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray = function(texture,renderSession,data,miplevel) {
	if(miplevel == null) {
		miplevel = 0;
	}
	if(data == null) {
		return;
	}
	var gl = renderSession.gl;
	var width = texture.__width >> miplevel;
	var height = texture.__height >> miplevel;
	if(width == 0 && height == 0) {
		return;
	}
	if(width == 0) {
		width = 1;
	}
	if(height == 0) {
		height = 1;
	}
	gl.__context.bindTexture(texture.__textureTarget,texture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var target = texture.__textureTarget;
	var internalformat = texture.__internalFormat;
	var format = texture.__format;
	var type = gl.UNSIGNED_BYTE;
	var data1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(data);
	gl.__context.texImage2D(target,miplevel,internalformat,width,height,0,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data1));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.bindTexture(texture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLTexture.setSamplerState = function(texture,renderSession,state) {
	if(!state.equals(texture.__samplerState)) {
		var gl = renderSession.gl;
		if(state.minFilter != gl.NEAREST && state.minFilter != gl.LINEAR && !state.mipmapGenerated) {
			gl.__context.generateMipmap(gl.TEXTURE_2D);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			state.mipmapGenerated = true;
		}
		if(state.maxAniso != 0.0) {
			gl.__context.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,state.maxAniso);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	openfl__$internal_stage3D_opengl_GLTextureBase.setSamplerState(texture,renderSession,state);
};
var openfl__$internal_stage3D_opengl_GLTextureBase = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLTextureBase"] = openfl__$internal_stage3D_opengl_GLTextureBase;
openfl__$internal_stage3D_opengl_GLTextureBase.__name__ = ["openfl","_internal","stage3D","opengl","GLTextureBase"];
openfl__$internal_stage3D_opengl_GLTextureBase.create = function(textureBase,renderSession) {
	var gl = renderSession.gl;
	textureBase.__textureID = gl.__context.createTexture();
	textureBase.__textureContext = gl;
	if(openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA == null) {
		openfl__$internal_stage3D_opengl_GLTextureBase.__textureInternalFormat = gl.RGBA;
		var bgraExtension = null;
		if(bgraExtension != null) {
			openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA = true;
			openfl__$internal_stage3D_opengl_GLTextureBase.__textureFormat = bgraExtension.BGRA_EXT;
			if(gl.type == lime_graphics_opengl_GLContextType.GLES) {
				openfl__$internal_stage3D_opengl_GLTextureBase.__textureInternalFormat = bgraExtension.BGRA_EXT;
			}
		} else {
			openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA = false;
			openfl__$internal_stage3D_opengl_GLTextureBase.__textureFormat = gl.RGBA;
		}
	}
	if(openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats == null) {
		openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats = new openfl__$internal_stage3D_GLCompressedTextureFormats(gl);
	}
	textureBase.__internalFormat = openfl__$internal_stage3D_opengl_GLTextureBase.__textureInternalFormat;
	textureBase.__format = openfl__$internal_stage3D_opengl_GLTextureBase.__textureFormat;
};
openfl__$internal_stage3D_opengl_GLTextureBase.dispose = function(textureBase,renderSession) {
	var gl = renderSession.gl;
	if(textureBase.__alphaTexture != null) {
		textureBase.__alphaTexture.dispose();
	}
	gl.__context.deleteTexture(textureBase.__textureID);
};
openfl__$internal_stage3D_opengl_GLTextureBase.getImage = function(textureBase,renderSession,bitmapData) {
	var image = bitmapData.image;
	if(!bitmapData.__isValid || image == null) {
		return null;
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	var gl = renderSession.gl;
	if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) {
		gl.__context.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
	} else if(!image.get_premultiplied() && image.get_transparent()) {
		gl.__context.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,0);
		image = image.clone();
		image.set_premultiplied(true);
	}
	if(image.get_format() != 0) {
		image = image.clone();
		image.set_format(0);
		image.buffer.premultiplied = true;
	}
	return image;
};
openfl__$internal_stage3D_opengl_GLTextureBase.setSamplerState = function(textureBase,renderSession,state) {
	if(!state.equals(textureBase.__samplerState)) {
		var gl = renderSession.gl;
		gl.__context.bindTexture(textureBase.__textureTarget,textureBase.__textureID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		gl.__context.texParameteri(textureBase.__textureTarget,gl.TEXTURE_MIN_FILTER,state.minFilter);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		gl.__context.texParameteri(textureBase.__textureTarget,gl.TEXTURE_MAG_FILTER,state.magFilter);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		gl.__context.texParameteri(textureBase.__textureTarget,gl.TEXTURE_WRAP_S,state.wrapModeS);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		gl.__context.texParameteri(textureBase.__textureTarget,gl.TEXTURE_WRAP_T,state.wrapModeT);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var tmp = state.lodBias != 0.0;
		textureBase.__samplerState = state;
		textureBase.__samplerState.__samplerDirty = false;
	}
};
var openfl__$internal_stage3D_opengl_GLVertexBuffer3D = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLVertexBuffer3D"] = openfl__$internal_stage3D_opengl_GLVertexBuffer3D;
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.__name__ = ["openfl","_internal","stage3D","opengl","GLVertexBuffer3D"];
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.create = function(vertexBuffer,renderSession,bufferUsage) {
	var gl = renderSession.gl;
	vertexBuffer.__id = gl.__context.createBuffer();
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	vertexBuffer.__stride = vertexBuffer.__vertexSize * 4;
	vertexBuffer.__usage = bufferUsage == 0 ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
};
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.dispose = function(vertexBuffer,renderSession) {
	var gl = renderSession.gl;
	gl.__context.deleteBuffer(vertexBuffer.__id);
};
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromByteArray = function(vertexBuffer,renderSession,data,byteArrayOffset,startVertex,numVertices) {
	var offset = byteArrayOffset + startVertex * vertexBuffer.__stride;
	var length = numVertices * vertexBuffer.__vertexSize;
	var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
	var this1;
	if(buffer != null) {
		if(length == null) {
			this1 = new Float32Array(buffer,offset);
		} else {
			this1 = new Float32Array(buffer,offset,length);
		}
	} else {
		this1 = null;
	}
	openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromTypedArray(vertexBuffer,renderSession,this1);
};
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromTypedArray = function(vertexBuffer,renderSession,data) {
	if(data == null) {
		return;
	}
	var gl = renderSession.gl;
	gl.__context.bindBuffer(gl.ARRAY_BUFFER,vertexBuffer.__id);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.bufferData(gl,gl.ARRAY_BUFFER,data,vertexBuffer.__usage);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromVector = function(vertexBuffer,renderSession,data,startVertex,numVertices) {
	if(data == null) {
		return;
	}
	var gl = renderSession.gl;
	var start = startVertex * vertexBuffer.__vertexSize;
	var count = numVertices * vertexBuffer.__vertexSize;
	var length = start + count;
	var existingFloat32Array = vertexBuffer.__tempFloat32Array;
	if(vertexBuffer.__tempFloat32Array == null || vertexBuffer.__tempFloat32Array.length < count) {
		var this1;
		if(count != null) {
			this1 = new Float32Array(count);
		} else {
			this1 = null;
		}
		vertexBuffer.__tempFloat32Array = this1;
		if(existingFloat32Array != null) {
			vertexBuffer.__tempFloat32Array.set(existingFloat32Array);
		}
	}
	var _g1 = start;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		vertexBuffer.__tempFloat32Array[i - start] = data.data.get(i);
	}
	openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromTypedArray(vertexBuffer,renderSession,vertexBuffer.__tempFloat32Array);
};
var openfl__$internal_stage3D_opengl_GLVideoTexture = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLVideoTexture"] = openfl__$internal_stage3D_opengl_GLVideoTexture;
openfl__$internal_stage3D_opengl_GLVideoTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLVideoTexture"];
openfl__$internal_stage3D_opengl_GLVideoTexture.create = function(videoTexture,renderSession) {
	var gl = renderSession.gl;
	videoTexture.__textureTarget = gl.TEXTURE_2D;
};
openfl__$internal_stage3D_opengl_GLVideoTexture.getTexture = function(videoTexture,renderSession) {
	if(!videoTexture.__netStream.__video.paused) {
		var gl = renderSession.gl;
		gl.__context.bindTexture(videoTexture.__textureTarget,videoTexture.__textureID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.texImage2D(gl,gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,videoTexture.__netStream.__video);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	return videoTexture.__textureID;
};
var openfl__$internal_swf_FilterType = $hxClasses["openfl._internal.swf.FilterType"] = { __ename__ : ["openfl","_internal","swf","FilterType"], __constructs__ : ["BlurFilter","ColorMatrixFilter","DropShadowFilter","GlowFilter"] };
openfl__$internal_swf_FilterType.BlurFilter = function(blurX,blurY,quality) { var $x = ["BlurFilter",0,blurX,blurY,quality]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.ColorMatrixFilter = function(matrix) { var $x = ["ColorMatrixFilter",1,matrix]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) { var $x = ["DropShadowFilter",2,distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) { var $x = ["GlowFilter",3,color,alpha,blurX,blurY,strength,quality,inner,knockout]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
var openfl__$internal_swf_SWFLite = function() {
	this.symbols = new haxe_ds_IntMap();
};
$hxClasses["openfl._internal.swf.SWFLite"] = openfl__$internal_swf_SWFLite;
openfl__$internal_swf_SWFLite.__name__ = ["openfl","_internal","swf","SWFLite"];
openfl__$internal_swf_SWFLite.resolveClass = function(name) {
	var value = Type.resolveClass(name);
	if(value == null) {
		value = Type.resolveClass(StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveClass(StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
openfl__$internal_swf_SWFLite.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	if(value == null) {
		value = Type.resolveEnum(StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveEnum(StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
openfl__$internal_swf_SWFLite.unserialize = function(data) {
	if(data == null) {
		return null;
	}
	var unserializer = new haxe_Unserializer(data);
	unserializer.setResolver({ resolveClass : openfl__$internal_swf_SWFLite.resolveClass, resolveEnum : openfl__$internal_swf_SWFLite.resolveEnum});
	return unserializer.unserialize();
};
openfl__$internal_swf_SWFLite.prototype = {
	frameRate: null
	,library: null
	,root: null
	,symbols: null
	,createButton: function(className) {
		return null;
	}
	,createMovieClip: function(className) {
		if(className == null) {
			className = "";
		}
		if(className == "") {
			return this.root.__createObject(this);
		} else {
			var symbol = this.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(symbol1.className == className) {
					if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_SpriteSymbol)) {
						return (js_Boot.__cast(symbol1 , openfl__$internal_symbols_SpriteSymbol)).__createObject(this);
					}
				}
			}
		}
		return null;
	}
	,getBitmapData: function(className) {
		var symbol = this.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(symbol1.className == className) {
				if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol)) {
					var bitmap = symbol1;
					return openfl_utils_Assets.getBitmapData(bitmap.path);
				}
			}
		}
		return null;
	}
	,hasSymbol: function(className) {
		var symbol = this.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(symbol1.className == className) {
				return true;
			}
		}
		return false;
	}
	,serialize: function() {
		var serializer = new haxe_Serializer();
		serializer.serialize(this);
		return serializer.toString();
	}
	,__class__: openfl__$internal_swf_SWFLite
};
var openfl_utils_AssetLibrary = function() {
	lime_utils_AssetLibrary.call(this);
};
$hxClasses["openfl.utils.AssetLibrary"] = openfl_utils_AssetLibrary;
openfl_utils_AssetLibrary.__name__ = ["openfl","utils","AssetLibrary"];
openfl_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),rootPath));
};
openfl_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
openfl_utils_AssetLibrary.fromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null && js_Boot.__instanceof(library,openfl_utils_AssetLibrary)) {
		return library;
	} else {
		return null;
	}
};
openfl_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = openfl_utils_AssetLibrary.fromManifest(manifest);
	if(library != null && js_Boot.__instanceof(library,openfl_utils_AssetLibrary)) {
		return library.load().then(function(library1) {
			return lime_app_Future.withValue(library1);
		});
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
openfl_utils_AssetLibrary.__super__ = lime_utils_AssetLibrary;
openfl_utils_AssetLibrary.prototype = $extend(lime_utils_AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,loadMovieClip: function(id) {
		var _gthis = this;
		return new lime_app_Future(function() {
			return _gthis.getMovieClip(id);
		});
	}
	,__class__: openfl_utils_AssetLibrary
});
var openfl__$internal_swf_SWFLiteLibrary = function(id) {
	openfl_utils_AssetLibrary.call(this);
	this.id = id;
	this.alphaCheck = new haxe_ds_StringMap();
	this.imageClassNames = new haxe_ds_StringMap();
	this.rootPath = "";
};
$hxClasses["openfl._internal.swf.SWFLiteLibrary"] = openfl__$internal_swf_SWFLiteLibrary;
openfl__$internal_swf_SWFLiteLibrary.__name__ = ["openfl","_internal","swf","SWFLiteLibrary"];
openfl__$internal_swf_SWFLiteLibrary.__super__ = openfl_utils_AssetLibrary;
openfl__$internal_swf_SWFLiteLibrary.prototype = $extend(openfl_utils_AssetLibrary.prototype,{
	alphaCheck: null
	,id: null
	,imageClassNames: null
	,preloading: null
	,rootPath: null
	,swf: null
	,exists: function(id,type) {
		if(this.swf == null) {
			return false;
		}
		if(id == "" && type == "MOVIE_CLIP") {
			return true;
		}
		if(type == "IMAGE" || type == "MOVIE_CLIP") {
			if(this.swf != null) {
				return this.swf.hasSymbol(id);
			} else {
				return false;
			}
		}
		return false;
	}
	,getImage: function(id) {
		var _this = this.imageClassNames;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.imageClassNames;
			if(__map_reserved[id] != null) {
				id = _this1.getReserved(id);
			} else {
				id = _this1.h[id];
			}
		}
		var _this2 = this.alphaCheck;
		if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
			var symbol = this.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol1 , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = symbol1;
					if(bitmapSymbol.alpha != null) {
						var image = openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
						var alpha = openfl_utils_AssetLibrary.prototype.getImage.call(this,bitmapSymbol.alpha);
						this.__copyChannel(image,alpha);
						var _this3 = this.cachedImages;
						if(__map_reserved[id] != null) {
							_this3.setReserved(id,image);
						} else {
							_this3.h[id] = image;
						}
						this.cachedImages.remove(bitmapSymbol.alpha);
						var _this4 = this.alphaCheck;
						if(__map_reserved[id] != null) {
							_this4.setReserved(id,true);
						} else {
							_this4.h[id] = true;
						}
						return image;
					}
				}
			}
		}
		return openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
	}
	,getMovieClip: function(id) {
		if(this.swf != null) {
			return this.swf.createMovieClip(id);
		} else {
			return null;
		}
	}
	,isLocal: function(id,type) {
		return true;
	}
	,load: function() {
		var _gthis = this;
		if(this.id != null) {
			var key = this.id;
			var _this = this.preload;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,true);
			} else {
				_this.h[key] = true;
			}
		}
		var promise = new lime_app_Promise();
		this.preloading = true;
		var onComplete = function(data) {
			var key1 = _gthis.id;
			var _this1 = _gthis.cachedText;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,data);
			} else {
				_this1.h[key1] = data;
			}
			_gthis.swf = openfl__$internal_swf_SWFLite.unserialize(data);
			_gthis.swf.library = _gthis;
			var bitmapSymbol;
			var symbol = _gthis.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol)) {
					bitmapSymbol = symbol1;
					if(bitmapSymbol.className != null) {
						var key2 = bitmapSymbol.className;
						var value = bitmapSymbol.path;
						var _this2 = _gthis.imageClassNames;
						if(__map_reserved[key2] != null) {
							_this2.setReserved(key2,value);
						} else {
							_this2.h[key2] = value;
						}
					}
				}
			}
			var key3 = _gthis.id;
			var value1 = _gthis.swf;
			var _this3 = openfl__$internal_swf_SWFLite.instances;
			if(__map_reserved[key3] != null) {
				_this3.setReserved(key3,value1);
			} else {
				_this3.h[key3] = value1;
			}
			_gthis.__load().onProgress($bind(promise,promise.progress)).onError($bind(promise,promise.error)).onComplete(function(_) {
				_gthis.preloading = false;
				promise.complete(_gthis);
			});
		};
		if(openfl_utils_Assets.exists(this.id)) {
			var id = this.paths.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				var _this4 = this.preload;
				if(__map_reserved[id1] != null) {
					_this4.setReserved(id1,true);
				} else {
					_this4.h[id1] = true;
				}
			}
			this.loadText(this.id).onError($bind(promise,promise.error)).onComplete(onComplete);
		} else {
			var id2 = this.paths.keys();
			while(id2.hasNext()) {
				var id3 = id2.next();
				var _this5 = this.preload;
				if(__map_reserved[id3] != null) {
					_this5.setReserved(id3,true);
				} else {
					_this5.h[id3] = true;
				}
			}
			var path = this.rootPath != null && this.rootPath != "" ? this.rootPath + "/" + this.id : this.id;
			var loader = new openfl_net_URLLoader();
			loader.addEventListener("complete",function(_1) {
				onComplete(loader.data);
			});
			loader.addEventListener("ioError",function(e) {
				promise.error(e);
			});
			loader.load(new openfl_net_URLRequest(path));
		}
		return promise.future;
	}
	,loadImage: function(id) {
		var _gthis = this;
		var _this = this.imageClassNames;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.imageClassNames;
			if(__map_reserved[id] != null) {
				id = _this1.getReserved(id);
			} else {
				id = _this1.h[id];
			}
		}
		var tmp;
		if(!this.preloading) {
			var _this2 = this.alphaCheck;
			tmp = !(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id));
		} else {
			tmp = false;
		}
		if(tmp) {
			var symbol = this.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol1 , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = [symbol1];
					if(bitmapSymbol[0].alpha != null) {
						var promise = [new lime_app_Promise()];
						this.__loadImage(id).onError(($_=promise[0],$bind($_,$_.error))).onComplete((function(promise1,bitmapSymbol1) {
							return function(image) {
								_gthis.__loadImage(bitmapSymbol1[0].alpha).onError(($_=promise1[0],$bind($_,$_.error))).onComplete((function(promise2,bitmapSymbol2) {
									return function(alpha) {
										_gthis.__copyChannel(image,alpha);
										var _this3 = _gthis.cachedImages;
										if(__map_reserved[id] != null) {
											_this3.setReserved(id,image);
										} else {
											_this3.h[id] = image;
										}
										_gthis.cachedImages.remove(bitmapSymbol2[0].alpha);
										var _this4 = _gthis.alphaCheck;
										if(__map_reserved[id] != null) {
											_this4.setReserved(id,true);
										} else {
											_this4.h[id] = true;
										}
										promise2[0].complete(image);
									};
								})(promise1,bitmapSymbol1));
							};
						})(promise,bitmapSymbol));
						return promise[0].future;
					}
				}
			}
		}
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,unload: function() {
		if(this.swf == null) {
			return;
		}
		var bitmap;
		var symbol = this.swf.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol)) {
				bitmap = symbol1;
				openfl_utils_Assets.cache.removeBitmapData(bitmap.path);
			}
		}
	}
	,__copyChannel: function(image,alpha) {
		if(alpha != null) {
			image.copyChannel(alpha,alpha.get_rect(),new lime_math_Vector2(),lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.ALPHA);
		}
		image.buffer.premultiplied = true;
		image.set_premultiplied(false);
	}
	,__fromManifest: function(manifest) {
		this.rootPath = manifest.rootPath;
		openfl_utils_AssetLibrary.prototype.__fromManifest.call(this,manifest);
	}
	,__load: function() {
		return openfl_utils_AssetLibrary.prototype.load.call(this);
	}
	,__loadImage: function(id) {
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,__class__: openfl__$internal_swf_SWFLiteLibrary
});
var openfl__$internal_swf_ShapeCommand = $hxClasses["openfl._internal.swf.ShapeCommand"] = { __ename__ : ["openfl","_internal","swf","ShapeCommand"], __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CurveTo","EndFill","LineStyle","LineTo","MoveTo"] };
openfl__$internal_swf_ShapeCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.BeginGradientFill = function(fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",3,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.EndFill = ["EndFill",4];
openfl__$internal_swf_ShapeCommand.EndFill.toString = $estr;
openfl__$internal_swf_ShapeCommand.EndFill.__enum__ = openfl__$internal_swf_ShapeCommand;
openfl__$internal_swf_ShapeCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",5,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.LineTo = function(x,y) { var $x = ["LineTo",6,x,y]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.MoveTo = function(x,y) { var $x = ["MoveTo",7,x,y]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
var openfl__$internal_symbols_SWFSymbol = function() {
};
$hxClasses["openfl._internal.symbols.SWFSymbol"] = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SWFSymbol.__name__ = ["openfl","_internal","symbols","SWFSymbol"];
openfl__$internal_symbols_SWFSymbol.prototype = {
	className: null
	,id: null
	,__createObject: function(swf) {
		return null;
	}
	,__class__: openfl__$internal_symbols_SWFSymbol
};
var openfl__$internal_symbols_BitmapSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.BitmapSymbol"] = openfl__$internal_symbols_BitmapSymbol;
openfl__$internal_symbols_BitmapSymbol.__name__ = ["openfl","_internal","symbols","BitmapSymbol"];
openfl__$internal_symbols_BitmapSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_BitmapSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	alpha: null
	,path: null
	,smooth: null
	,__createObject: function(swf) {
		return new openfl_display_Bitmap(openfl_display_BitmapData.fromImage(swf.library.getImage(this.path)),1,this.smooth != false);
	}
	,__class__: openfl__$internal_symbols_BitmapSymbol
});
var openfl__$internal_symbols_ButtonSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ButtonSymbol"] = openfl__$internal_symbols_ButtonSymbol;
openfl__$internal_symbols_ButtonSymbol.__name__ = ["openfl","_internal","symbols","ButtonSymbol"];
openfl__$internal_symbols_ButtonSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ButtonSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	downState: null
	,hitState: null
	,overState: null
	,upState: null
	,__createObject: function(swf) {
		var simpleButton = null;
		openfl_display_SimpleButton.__initSWF = swf;
		openfl_display_SimpleButton.__initSymbol = this;
		if(this.className != null) {
			var symbolType = Type.resolveClass(this.className);
			if(symbolType != null) {
				simpleButton = Type.createInstance(symbolType,[]);
			}
		}
		if(simpleButton == null) {
			simpleButton = new openfl_display_SimpleButton();
		}
		return simpleButton;
	}
	,__class__: openfl__$internal_symbols_ButtonSymbol
});
var openfl__$internal_symbols_DynamicTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.DynamicTextSymbol"] = openfl__$internal_symbols_DynamicTextSymbol;
openfl__$internal_symbols_DynamicTextSymbol.__name__ = ["openfl","_internal","symbols","DynamicTextSymbol"];
openfl__$internal_symbols_DynamicTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_DynamicTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	align: null
	,border: null
	,color: null
	,fontHeight: null
	,fontID: null
	,fontName: null
	,height: null
	,html: null
	,indent: null
	,input: null
	,leading: null
	,leftMargin: null
	,multiline: null
	,password: null
	,rightMargin: null
	,selectable: null
	,text: null
	,width: null
	,wordWrap: null
	,x: null
	,y: null
	,__createObject: function(swf) {
		var textField = new openfl_text_TextField();
		textField.__fromSymbol(swf,this);
		return textField;
	}
	,__class__: openfl__$internal_symbols_DynamicTextSymbol
});
var openfl__$internal_symbols_FontSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.FontSymbol"] = openfl__$internal_symbols_FontSymbol;
openfl__$internal_symbols_FontSymbol.__name__ = ["openfl","_internal","symbols","FontSymbol"];
openfl__$internal_symbols_FontSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_FontSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	advances: null
	,ascent: null
	,bold: null
	,codes: null
	,descent: null
	,glyphs: null
	,italic: null
	,leading: null
	,name: null
	,__class__: openfl__$internal_symbols_FontSymbol
});
var openfl__$internal_symbols_ShapeSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ShapeSymbol"] = openfl__$internal_symbols_ShapeSymbol;
openfl__$internal_symbols_ShapeSymbol.__name__ = ["openfl","_internal","symbols","ShapeSymbol"];
openfl__$internal_symbols_ShapeSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ShapeSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	commands: null
	,rendered: null
	,__createObject: function(swf) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		if(this.rendered != null) {
			graphics.copyFrom(this.rendered.get_graphics());
			return shape;
		}
		var _g = 0;
		var _g1 = this.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmapID = command[2];
				var bitmapSymbol = swf.symbols.get(bitmapID);
				var bitmap = swf.library.getImage(bitmapSymbol.path);
				if(bitmap != null) {
					graphics.beginBitmapFill(openfl_display_BitmapData.fromImage(bitmap),matrix,repeat,smooth);
				}
				break;
			case 1:
				var alpha = command[3];
				var color = command[2];
				graphics.beginFill(color,alpha);
				break;
			case 2:
				var focalPointRatio = command[9];
				var interpolationMethod = command[8];
				var spreadMethod = command[7];
				var matrix1 = command[6];
				var ratios = command[5];
				var alphas = command[4];
				var colors = command[3];
				var fillType = command[2];
				graphics.beginGradientFill(fillType,colors,alphas,ratios,matrix1,spreadMethod,interpolationMethod,focalPointRatio);
				break;
			case 3:
				var anchorY = command[5];
				var anchorX = command[4];
				var controlY = command[3];
				var controlX = command[2];
				graphics.curveTo(controlX,controlY,anchorX,anchorY);
				break;
			case 4:
				graphics.endFill();
				break;
			case 5:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color1 = command[3];
				var thickness = command[2];
				if(thickness != null) {
					graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit);
				} else {
					graphics.lineStyle();
				}
				break;
			case 6:
				var y = command[3];
				var x = command[2];
				graphics.lineTo(x,y);
				break;
			case 7:
				var y1 = command[3];
				var x1 = command[2];
				graphics.moveTo(x1,y1);
				break;
			}
		}
		this.commands = null;
		this.rendered = new openfl_display_Shape();
		this.rendered.get_graphics().copyFrom(shape.get_graphics());
		return shape;
	}
	,__class__: openfl__$internal_symbols_ShapeSymbol
});
var openfl__$internal_symbols_SpriteSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
	this.frames = [];
};
$hxClasses["openfl._internal.symbols.SpriteSymbol"] = openfl__$internal_symbols_SpriteSymbol;
openfl__$internal_symbols_SpriteSymbol.__name__ = ["openfl","_internal","symbols","SpriteSymbol"];
openfl__$internal_symbols_SpriteSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SpriteSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	baseClassName: null
	,frames: null
	,__createObject: function(swf) {
		openfl_display_MovieClip.__initSWF = swf;
		openfl_display_MovieClip.__initSymbol = this;
		var symbolType = null;
		if(this.className != null) {
			symbolType = Type.resolveClass(this.className);
			var tmp = symbolType == null;
		}
		if(symbolType == null && this.baseClassName != null) {
			symbolType = Type.resolveClass(this.baseClassName);
			var tmp1 = symbolType == null;
		}
		var movieClip = null;
		if(symbolType != null) {
			movieClip = Type.createInstance(symbolType,[]);
		} else {
			movieClip = new openfl_display_MovieClip();
		}
		return movieClip;
	}
	,__class__: openfl__$internal_symbols_SpriteSymbol
});
var openfl__$internal_symbols_StaticTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.StaticTextSymbol"] = openfl__$internal_symbols_StaticTextSymbol;
openfl__$internal_symbols_StaticTextSymbol.__name__ = ["openfl","_internal","symbols","StaticTextSymbol"];
openfl__$internal_symbols_StaticTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_StaticTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	matrix: null
	,records: null
	,rendered: null
	,__createObject: function(swf) {
		var staticText = new openfl_text_StaticText();
		var graphics = staticText.__graphics;
		if(this.rendered != null) {
			staticText.text = this.rendered.text;
			graphics.copyFrom(this.rendered.__graphics);
			return staticText;
		}
		var text = "";
		if(this.records != null) {
			var font = null;
			var color = 16777215;
			var offsetX = this.matrix.tx;
			var offsetY = this.matrix.ty;
			var scale;
			var index;
			var code;
			var _g = 0;
			var _g1 = this.records;
			while(_g < _g1.length) {
				var record = _g1[_g];
				++_g;
				if(record.fontID != null) {
					font = swf.symbols.h[record.fontID];
				}
				if(record.offsetX != null) {
					offsetX = this.matrix.tx + record.offsetX * 0.05;
				}
				if(record.offsetY != null) {
					offsetY = this.matrix.ty + record.offsetY * 0.05;
				}
				if(record.color != null) {
					color = record.color;
				}
				if(font != null) {
					scale = record.fontHeight / 1024 * 0.05;
					var _g3 = 0;
					var _g2 = record.glyphs.length;
					while(_g3 < _g2) {
						var i = _g3++;
						index = record.glyphs[i];
						text += String.fromCharCode(font.codes[index]);
						var _g4 = 0;
						var _g5 = font.glyphs[index];
						while(_g4 < _g5.length) {
							var command = _g5[_g4];
							++_g4;
							switch(command[1]) {
							case 1:
								var alpha = command[3];
								graphics.beginFill(color & 16777215,(color >> 24 & 255) / 255);
								break;
							case 3:
								var anchorY = command[5];
								var anchorX = command[4];
								var controlY = command[3];
								var controlX = command[2];
								graphics.curveTo(controlX * scale + offsetX,controlY * scale + offsetY,anchorX * scale + offsetX,anchorY * scale + offsetY);
								break;
							case 4:
								graphics.endFill();
								break;
							case 5:
								var miterLimit = command[9];
								var joints = command[8];
								var caps = command[7];
								var scaleMode = command[6];
								var pixelHinting = command[5];
								var alpha1 = command[4];
								var color1 = command[3];
								var thickness = command[2];
								if(thickness != null) {
									graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit);
								} else {
									graphics.lineStyle();
								}
								break;
							case 6:
								var y = command[3];
								var x = command[2];
								graphics.lineTo(x * scale + offsetX,y * scale + offsetY);
								break;
							case 7:
								var y1 = command[3];
								var x1 = command[2];
								graphics.moveTo(x1 * scale + offsetX,y1 * scale + offsetY);
								break;
							default:
							}
						}
						offsetX += record.advances[i] * 0.05;
					}
				}
			}
		}
		staticText.text = text;
		this.records = null;
		this.rendered = new openfl_text_StaticText();
		this.rendered.text = text;
		this.rendered.__graphics.copyFrom(staticText.__graphics);
		return staticText;
	}
	,__class__: openfl__$internal_symbols_StaticTextSymbol
});
var openfl__$internal_symbols_StaticTextRecord = function() {
};
$hxClasses["openfl._internal.symbols.StaticTextRecord"] = openfl__$internal_symbols_StaticTextRecord;
openfl__$internal_symbols_StaticTextRecord.__name__ = ["openfl","_internal","symbols","StaticTextRecord"];
openfl__$internal_symbols_StaticTextRecord.prototype = {
	advances: null
	,color: null
	,fontHeight: null
	,fontID: null
	,glyphs: null
	,offsetX: null
	,offsetY: null
	,__class__: openfl__$internal_symbols_StaticTextRecord
};
var openfl__$internal_text_HTMLParser = function() { };
$hxClasses["openfl._internal.text.HTMLParser"] = openfl__$internal_text_HTMLParser;
openfl__$internal_text_HTMLParser.__name__ = ["openfl","_internal","text","HTMLParser"];
openfl__$internal_text_HTMLParser.parse = function(value,textFormat,textFormatRanges) {
	value = value.replace(openfl__$internal_text_HTMLParser.__regexBreakTag.r,"\n");
	value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[0].r,"\"");
	value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[1].r,"'");
	value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[2].r,"&");
	value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[5].r," ");
	var segments = value.split("<");
	if(segments.length == 1) {
		value = value.replace(openfl__$internal_text_HTMLParser.__regexHTMLTag.r,"");
		if(textFormatRanges.data.get_length() > 1) {
			var len = textFormatRanges.data.get_length() - 1;
			new openfl__$Vector_AbstractVector(textFormatRanges.data.splice(1,len));
		}
		value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[3].r,"<");
		value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[4].r,">");
		var range = textFormatRanges.data.get(0);
		range.format = textFormat;
		range.start = 0;
		range.end = value.length;
		return value;
	} else {
		var len1 = textFormatRanges.data.get_length();
		new openfl__$Vector_AbstractVector(textFormatRanges.data.splice(0,len1));
		value = "";
		var segment;
		var _g1 = 0;
		var _g = segments.length;
		while(_g1 < _g) {
			var i = _g1++;
			segment = segments[i];
			segment = segment.replace(openfl__$internal_text_HTMLParser.__regexEntities[3].r,"<");
			segment = segment.replace(openfl__$internal_text_HTMLParser.__regexEntities[4].r,">");
			segments[i] = segment;
		}
		var formatStack = [textFormat.clone()];
		var sub;
		var noLineBreak = false;
		var _g2 = 0;
		while(_g2 < segments.length) {
			var segment1 = segments[_g2];
			++_g2;
			if(segment1 == "") {
				continue;
			}
			var isClosingTag = HxOverrides.substr(segment1,0,1) == "/";
			var tagEndIndex = segment1.indexOf(">");
			var start = tagEndIndex + 1;
			var spaceIndex = segment1.indexOf(" ");
			var tagName = segment1.substring(isClosingTag ? 1 : 0,spaceIndex > -1 && spaceIndex < tagEndIndex ? spaceIndex : tagEndIndex);
			var format;
			if(isClosingTag) {
				formatStack.pop();
				format = formatStack[formatStack.length - 1].clone();
				if(tagName.toLowerCase() == "p" && textFormatRanges.data.get_length() > 0) {
					value += "\n";
					noLineBreak = true;
				}
				if(start < segment1.length) {
					sub = HxOverrides.substr(segment1,start,null);
					var x = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length);
					textFormatRanges.data.push(x);
					value += sub;
					noLineBreak = false;
				}
			} else {
				format = formatStack[formatStack.length - 1].clone();
				if(tagEndIndex > -1) {
					var _g11 = tagName.toLowerCase();
					switch(_g11) {
					case "a":
						if(openfl__$internal_text_HTMLParser.__regexHref.match(segment1)) {
							format.url = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexHref);
						}
						break;
					case "b":
						format.bold = true;
						break;
					case "em":case "i":
						format.italic = true;
						break;
					case "font":
						if(openfl__$internal_text_HTMLParser.__regexFace.match(segment1)) {
							format.font = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexFace);
						}
						if(openfl__$internal_text_HTMLParser.__regexColor.match(segment1)) {
							format.color = Std.parseInt("0x" + openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexColor));
						}
						if(openfl__$internal_text_HTMLParser.__regexSize.match(segment1)) {
							var sizeAttr = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							if(firstChar == 43 || firstChar == 45) {
								var parentFormat = formatStack.length >= 2 ? formatStack[formatStack.length - 2] : textFormat;
								format.size = parentFormat.size + Std.parseInt(sizeAttr);
							} else {
								format.size = Std.parseInt(sizeAttr);
							}
						}
						break;
					case "p":
						if(textFormatRanges.data.get_length() > 0 && !noLineBreak) {
							value += "\n";
						}
						if(openfl__$internal_text_HTMLParser.__regexAlign.match(segment1)) {
							format.align = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexAlign).toLowerCase());
						}
						break;
					case "textformat":
						if(openfl__$internal_text_HTMLParser.__regexBlockIndent.match(segment1)) {
							format.blockIndent = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexBlockIndent));
						}
						if(openfl__$internal_text_HTMLParser.__regexIndent.match(segment1)) {
							format.indent = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexIndent));
						}
						if(openfl__$internal_text_HTMLParser.__regexLeading.match(segment1)) {
							format.leading = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexLeading));
						}
						if(openfl__$internal_text_HTMLParser.__regexLeftMargin.match(segment1)) {
							format.leftMargin = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexLeftMargin));
						}
						if(openfl__$internal_text_HTMLParser.__regexRightMargin.match(segment1)) {
							format.rightMargin = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexRightMargin));
						}
						if(openfl__$internal_text_HTMLParser.__regexTabStops.match(segment1)) {
							var values = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexTabStops).split(" ");
							var tabStops = [];
							var _g12 = 0;
							while(_g12 < values.length) {
								var stop = values[_g12];
								++_g12;
								tabStops.push(Std.parseInt(stop));
							}
							format.tabStops = tabStops;
						}
						break;
					case "u":
						format.underline = true;
						break;
					}
					formatStack.push(format);
					if(start < segment1.length) {
						sub = segment1.substring(start);
						var x1 = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length);
						textFormatRanges.data.push(x1);
						value += sub;
						noLineBreak = false;
					}
				} else {
					var x2 = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + segment1.length);
					textFormatRanges.data.push(x2);
					value += segment1;
					noLineBreak = false;
				}
			}
		}
		if(textFormatRanges.data.get_length() == 0) {
			var x3 = new openfl__$internal_text_TextFormatRange(formatStack[0],0,0);
			textFormatRanges.data.push(x3);
		}
	}
	return value;
};
openfl__$internal_text_HTMLParser.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.set_text("");
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineBreaks = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.lineDescents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineLeadings = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineHeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineWidths = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.layoutGroups = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.textFormatRanges = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.findFont = function(name) {
	return null;
};
openfl__$internal_text_TextEngine.findFontVariant = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	var tmp;
	if(bold && italic) {
		var _this = openfl_text_Font.__fontByName;
		var key = fontNamePrefix + " Bold Italic";
		if(__map_reserved[key] != null) {
			tmp = _this.existsReserved(key);
		} else {
			tmp = _this.h.hasOwnProperty(key);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Bold Italic");
	} else {
		var tmp1;
		if(bold) {
			var _this1 = openfl_text_Font.__fontByName;
			var key1 = fontNamePrefix + " Bold";
			if(__map_reserved[key1] != null) {
				tmp1 = _this1.existsReserved(key1);
			} else {
				tmp1 = _this1.h.hasOwnProperty(key1);
			}
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Bold");
		} else {
			var tmp2;
			if(italic) {
				var _this2 = openfl_text_Font.__fontByName;
				var key2 = fontNamePrefix + " Italic";
				if(__map_reserved[key2] != null) {
					tmp2 = _this2.existsReserved(key2);
				} else {
					tmp2 = _this2.h.hasOwnProperty(key2);
				}
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Italic");
			}
		}
	}
	return openfl__$internal_text_TextEngine.findFont(fontName);
};
openfl__$internal_text_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	var leading;
	openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(format);
	if(format.__ascent != null) {
		ascent = format.size * format.__ascent;
		descent = format.size * format.__descent;
	} else {
		ascent = format.size;
		descent = format.size * 0.185;
	}
	leading = format.leading;
	return ascent + descent + leading;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	var tmp;
	if(bold && italic) {
		var _this = openfl_text_Font.__fontByName;
		var key = fontNamePrefix + " Bold Italic";
		if(__map_reserved[key] != null) {
			tmp = _this.existsReserved(key);
		} else {
			tmp = _this.h.hasOwnProperty(key);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		fontName = fontNamePrefix + " Bold Italic";
		bold = false;
		italic = false;
	} else {
		var tmp1;
		if(bold) {
			var _this1 = openfl_text_Font.__fontByName;
			var key1 = fontNamePrefix + " Bold";
			if(__map_reserved[key1] != null) {
				tmp1 = _this1.existsReserved(key1);
			} else {
				tmp1 = _this1.h.hasOwnProperty(key1);
			}
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			fontName = fontNamePrefix + " Bold";
			bold = false;
		} else {
			var tmp2;
			if(italic) {
				var _this2 = openfl_text_Font.__fontByName;
				var key2 = fontNamePrefix + " Italic";
				if(__map_reserved[key2] != null) {
					tmp2 = _this2.existsReserved(key2);
				} else {
					tmp2 = _this2.h.hasOwnProperty(key2);
				}
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				fontName = fontNamePrefix + " Italic";
				italic = false;
			} else {
				if(bold && (fontName.indexOf(" Bold ") > -1 || StringTools.endsWith(fontName," Bold"))) {
					bold = false;
				}
				if(italic && (fontName.indexOf(" Italic ") > -1 || StringTools.endsWith(fontName," Italic"))) {
					italic = false;
				}
			}
		}
	}
	var font = italic ? "italic " : "normal ";
	font += "normal ";
	font += bold ? "bold " : "normal ";
	font += format.size + "px";
	font += "/" + (format.leading + format.size + 3) + "px ";
	var font1;
	switch(fontName) {
	case "_sans":
		font1 = "sans-serif";
		break;
	case "_serif":
		font1 = "serif";
		break;
	case "_typewriter":
		font1 = "monospace";
		break;
	default:
		var _this_r = new RegExp("^[\\s'\"]+(.*)[\\s'\"]+$","".split("u").join(""));
		font1 = "'" + fontName.replace(_this_r,"$1") + "'";
	}
	font += "" + font1;
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return null;
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,caretIndex: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__cursorTimer: null
	,__hasFocus: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__restrictRegexp: null
	,__selectionStart: null
	,__showCursor: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__useIntAdvances: null
	,__cairoFont: null
	,__font: null
	,createRestrictRegexp: function(restrict) {
		var declinedRange = new EReg("\\^(.-.|.)","gu");
		var declined = "";
		var accepted = declinedRange.map(restrict,function(ereg) {
			declined += ereg.matched(1);
			return "";
		});
		var testRegexpParts = [];
		if(accepted.length > 0) {
			testRegexpParts.push("[^" + restrict + "]");
		}
		if(declined.length > 0) {
			testRegexpParts.push("[" + declined + "]");
		}
		return new EReg("(" + testRegexpParts.join("|") + ")","g");
	}
	,getBounds: function() {
		var padding = this.border ? 1 : 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.data.get_length() + 1) {
			return null;
		}
		if(this.lineBreaks.data.get_length() == 0) {
			return this.text;
		} else {
			return lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.text,index > 0 ? this.lineBreaks.data.get(index - 1) : 0,this.lineBreaks.data.get(index));
		}
	}
	,getLineBreakIndex: function(startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		var br = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"<br>",startIndex);
		var cr = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"\n",startIndex);
		var lf = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"\r",startIndex);
		if(cr == -1 && br == -1) {
			return lf;
		}
		if(lf == -1 && br == -1) {
			return cr;
		}
		if(lf == -1 && cr == -1) {
			return br;
		}
		if(cr == -1) {
			return Math.min(br,lf) | 0;
		}
		if(lf == -1) {
			return Math.min(br,cr) | 0;
		}
		if(br == -1) {
			return Math.min(cr,lf) | 0;
		}
		return Math.min(Math.min(cr,lf),br) | 0;
	}
	,getLineMeasurements: function() {
		this.lineAscents.data.set_length(0);
		this.lineDescents.data.set_length(0);
		this.lineLeadings.data.set_length(0);
		this.lineHeights.data.set_length(0);
		this.lineWidths.data.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		var currentTextHeight = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.data.push(currentLineAscent);
				this.lineDescents.data.push(currentLineDescent);
				this.lineLeadings.data.push(currentLineLeading != null ? currentLineLeading : 0);
				this.lineHeights.data.push(currentLineHeight);
				this.lineWidths.data.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) {
					this.bottomScrollV++;
				}
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group.leading;
			} else {
				currentLineLeading = Math.max(currentLineLeading,group.leading) | 0;
			}
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			currentTextHeight = group.offsetY - 2 + group.ascent + group.descent;
			if(currentTextHeight > this.textHeight) {
				this.textHeight = currentTextHeight;
			}
		}
		this.lineAscents.data.push(currentLineAscent);
		this.lineDescents.data.push(currentLineDescent);
		this.lineLeadings.data.push(currentLineLeading != null ? currentLineLeading : 0);
		this.lineHeights.data.push(currentLineHeight);
		this.lineWidths.data.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		} else if(this.textHeight <= this.height - 2) {
			this.bottomScrollV++;
		}
		if(this.autoSize != 2) {
			var _g2 = this.autoSize;
			switch(_g2) {
			case 0:case 1:case 3:
				if(!this.wordWrap) {
					this.width = this.textWidth + 4;
				}
				this.height = this.textHeight + 4;
				this.bottomScrollV = this.numLines;
				break;
			default:
			}
		}
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = this.textWidth - this.width + 4 | 0;
		} else {
			this.maxScrollH = 0;
		}
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.data.set_length(0);
		if(this.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(this.text,"")) {
			return;
		}
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var maxAscent = 0.0;
		var descent = 0.0;
		var layoutGroup = null;
		var positions = null;
		var widthValue = 0.0;
		var heightValue = 0.0;
		var maxHeightValue = 0.0;
		var previousSpaceIndex = -2;
		var spaceIndex = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text," ");
		var breakIndex = this.getLineBreakIndex();
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
			++rangeIndex;
			formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
		}
		if(heightValue > maxHeightValue) {
			maxHeightValue = heightValue;
		}
		if(ascent > maxAscent) {
			maxAscent = ascent;
		}
		lineFormat = formatRange.format;
		var wrap;
		var maxLoops = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) + 1;
		while(textIndex < maxLoops) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			if(textIndex <= breakIndex) {
				if(this.wordWrap && previousSpaceIndex <= textIndex && this.width >= 4) {
					var text = lime_text__$UTF8String_UTF8String_$Impl_$.substring(_gthis.text,textIndex,breakIndex);
					var tempWidth = openfl__$internal_text_TextEngine.__context.measureText(text).width;
					while(offsetX + tempWidth > _gthis.width - 2) {
						var i = 1;
						while(textIndex + i < breakIndex + 1) {
							var text1 = lime_text__$UTF8String_UTF8String_$Impl_$.substr(_gthis.text,textIndex,i);
							tempWidth = openfl__$internal_text_TextEngine.__context.measureText(text1).width;
							if(offsetX + tempWidth > _gthis.width - 2) {
								--i;
								break;
							}
							++i;
						}
						if(i == 0 && tempWidth > _gthis.width - 4) {
							i = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(_gthis.text);
						}
						if(i == 0) {
							offsetX = 2;
							offsetY += layoutGroup.height;
							++lineIndex;
							break;
						} else {
							var endIndex = textIndex + i;
							if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
								layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex);
								_gthis.layoutGroups.data.push(layoutGroup);
							} else {
								layoutGroup.format = formatRange.format;
								layoutGroup.startIndex = textIndex;
								layoutGroup.endIndex = endIndex;
							}
							var text2 = _gthis.text;
							var endIndex1 = textIndex + i;
							var positions1 = [];
							if(_gthis.__useIntAdvances == null) {
								_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
							}
							if(_gthis.__useIntAdvances) {
								var previousWidth = 0.0;
								var width;
								var _g1 = textIndex;
								var _g = endIndex1;
								while(_g1 < _g) {
									var i1 = _g1++;
									width = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text2,textIndex,i1 + 1)).width;
									positions1.push(width - previousWidth);
									previousWidth = width;
								}
							} else {
								var _g11 = textIndex;
								var _g2 = endIndex1;
								while(_g11 < _g2) {
									var i2 = _g11++;
									var advance;
									if(i2 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text2) - 1) {
										var nextWidth = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text2,i2 + 1)).width;
										var twoWidths = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text2,i2,2)).width;
										advance = twoWidths - nextWidth;
									} else {
										advance = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text2,i2)).width;
									}
									positions1.push(advance);
								}
							}
							layoutGroup.positions = positions1;
							layoutGroup.offsetX = offsetX;
							layoutGroup.ascent = ascent;
							layoutGroup.descent = descent;
							layoutGroup.leading = leading;
							layoutGroup.lineIndex = lineIndex;
							layoutGroup.offsetY = offsetY;
							var positions2 = layoutGroup.positions;
							var width1 = 0.0;
							var _g3 = 0;
							while(_g3 < positions2.length) {
								var position = positions2[_g3];
								++_g3;
								width1 += position;
							}
							layoutGroup.width = width1;
							layoutGroup.height = heightValue;
							layoutGroup = null;
							if(ascent > maxAscent) {
								maxAscent = ascent;
							}
							if(heightValue > maxHeightValue) {
								maxHeightValue = heightValue;
							}
							var _g4 = 0;
							var _g12 = _gthis.layoutGroups;
							while(_g4 < _g12.data.get_length()) {
								var lg = _g12.data.get(_g4);
								++_g4;
								if(lg.lineIndex < lineIndex) {
									continue;
								}
								if(lg.lineIndex > lineIndex) {
									break;
								}
								lg.ascent = maxAscent;
								lg.height = maxHeightValue;
							}
							offsetY += maxHeightValue;
							maxAscent = 0.0;
							maxHeightValue = 0.0;
							++lineIndex;
							offsetX = 2;
							textIndex += i;
							var text3 = _gthis.text;
							var positions3 = [];
							if(_gthis.__useIntAdvances == null) {
								_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
							}
							if(_gthis.__useIntAdvances) {
								var previousWidth1 = 0.0;
								var width2;
								var _g13 = textIndex;
								var _g5 = breakIndex;
								while(_g13 < _g5) {
									var i3 = _g13++;
									width2 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text3,textIndex,i3 + 1)).width;
									positions3.push(width2 - previousWidth1);
									previousWidth1 = width2;
								}
							} else {
								var _g14 = textIndex;
								var _g6 = breakIndex;
								while(_g14 < _g6) {
									var i4 = _g14++;
									var advance1;
									if(i4 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text3) - 1) {
										var nextWidth1 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text3,i4 + 1)).width;
										var twoWidths1 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text3,i4,2)).width;
										advance1 = twoWidths1 - nextWidth1;
									} else {
										advance1 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text3,i4)).width;
									}
									positions3.push(advance1);
								}
							}
							positions = positions3;
							var width3 = 0.0;
							var _g7 = 0;
							while(_g7 < positions.length) {
								var position1 = positions[_g7];
								++_g7;
								width3 += position1;
							}
							widthValue = width3;
							tempWidth = widthValue;
						}
					}
				}
				if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
					_gthis.layoutGroups.data.push(layoutGroup);
				} else {
					layoutGroup.format = formatRange.format;
					layoutGroup.startIndex = textIndex;
					layoutGroup.endIndex = breakIndex;
				}
				var text4 = this.text;
				var positions4 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth2 = 0.0;
					var width4;
					var _g15 = textIndex;
					var _g8 = breakIndex;
					while(_g15 < _g8) {
						var i5 = _g15++;
						width4 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text4,textIndex,i5 + 1)).width;
						positions4.push(width4 - previousWidth2);
						previousWidth2 = width4;
					}
				} else {
					var _g16 = textIndex;
					var _g9 = breakIndex;
					while(_g16 < _g9) {
						var i6 = _g16++;
						var advance2;
						if(i6 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text4) - 1) {
							var nextWidth2 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text4,i6 + 1)).width;
							var twoWidths2 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text4,i6,2)).width;
							advance2 = twoWidths2 - nextWidth2;
						} else {
							advance2 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text4,i6)).width;
						}
						positions4.push(advance2);
					}
				}
				layoutGroup.positions = positions4;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				var positions5 = layoutGroup.positions;
				var width5 = 0.0;
				var _g10 = 0;
				while(_g10 < positions5.length) {
					var position2 = positions5[_g10];
					++_g10;
					width5 += position2;
				}
				layoutGroup.width = width5;
				layoutGroup.height = heightValue;
				layoutGroup = null;
			} else if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				if(layoutGroup.endIndex == spaceIndex) {
					layoutGroup.width -= layoutGroup.positions[layoutGroup.positions.length - 1];
				}
				layoutGroup = null;
			}
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
					++rangeIndex;
					formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					if(currentFormat.__ascent != null) {
						ascent = currentFormat.size * currentFormat.__ascent;
						descent = currentFormat.size * currentFormat.__descent;
					} else {
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
					}
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
				}
				if(heightValue > maxHeightValue) {
					maxHeightValue = heightValue;
				}
				if(ascent > maxAscent) {
					maxAscent = ascent;
				}
				lineFormat = formatRange.format;
			}
			if(breakIndex >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) - 1) {
				offsetY -= maxHeightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			var _g17 = 0;
			var _g18 = _gthis.layoutGroups;
			while(_g17 < _g18.data.get_length()) {
				var lg1 = _g18.data.get(_g17);
				++_g17;
				if(lg1.lineIndex < lineIndex) {
					continue;
				}
				if(lg1.lineIndex > lineIndex) {
					break;
				}
				lg1.ascent = maxAscent;
				lg1.height = maxHeightValue;
			}
			offsetY += maxHeightValue;
			maxAscent = 0.0;
			maxHeightValue = 0.0;
			++lineIndex;
			offsetX = 2;
			textIndex = breakIndex + 1;
			breakIndex = this.getLineBreakIndex(textIndex);
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1 && textIndex < formatRange.end) {
			if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = null;
			}
			wrap = false;
			while(textIndex != formatRange.end) {
				var endIndex2 = -1;
				if(spaceIndex == -1) {
					endIndex2 = breakIndex;
				} else {
					endIndex2 = spaceIndex + 1;
					if(breakIndex > -1 && breakIndex < endIndex2) {
						endIndex2 = breakIndex;
					}
				}
				if(endIndex2 == -1 || endIndex2 > formatRange.end) {
					endIndex2 = formatRange.end;
				}
				var text5 = this.text;
				var positions6 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth3 = 0.0;
					var width6;
					var _g19 = textIndex;
					var _g20 = endIndex2;
					while(_g19 < _g20) {
						var i7 = _g19++;
						width6 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text5,textIndex,i7 + 1)).width;
						positions6.push(width6 - previousWidth3);
						previousWidth3 = width6;
					}
				} else {
					var _g110 = textIndex;
					var _g21 = endIndex2;
					while(_g110 < _g21) {
						var i8 = _g110++;
						var advance3;
						if(i8 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text5) - 1) {
							var nextWidth3 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text5,i8 + 1)).width;
							var twoWidths3 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text5,i8,2)).width;
							advance3 = twoWidths3 - nextWidth3;
						} else {
							advance3 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text5,i8)).width;
						}
						positions6.push(advance3);
					}
				}
				positions = positions6;
				var width7 = 0.0;
				var _g22 = 0;
				while(_g22 < positions.length) {
					var position3 = positions[_g22];
					++_g22;
					width7 += position3;
				}
				widthValue = width7;
				if(lineFormat.align == 2) {
					if(positions.length > 0 && textIndex == previousSpaceIndex) {
						++textIndex;
						var spaceWidth = positions.shift();
						widthValue -= spaceWidth;
						offsetX += spaceWidth;
					}
					if(positions.length > 0 && endIndex2 == spaceIndex + 1) {
						--endIndex2;
						var spaceWidth1 = positions.pop();
						widthValue -= spaceWidth1;
					}
				}
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) {
						wrap = true;
						if(positions.length > 0 && endIndex2 == spaceIndex + 1) {
							var lastPosition = positions[positions.length - 1];
							var spaceWidth2 = lastPosition;
							if(offsetX + widthValue - spaceWidth2 <= this.width - 2) {
								wrap = false;
							}
						}
					}
				}
				if(wrap) {
					if(lineFormat.align != 2 && (layoutGroup != null || this.layoutGroups.data.get_length() > 0)) {
						var previous = layoutGroup;
						if(previous == null) {
							var this1 = this.layoutGroups;
							var index = this.layoutGroups.data.get_length() - 1;
							previous = this1.data.get(index);
						}
						previous.width -= previous.positions[previous.positions.length - 1];
						previous.endIndex--;
					}
					var i9 = this.layoutGroups.data.get_length() - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups.data.get(i9);
						if(i9 > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i9;
					}
					if(textIndex == previousSpaceIndex + 1) {
						if(ascent > maxAscent) {
							maxAscent = ascent;
						}
						if(heightValue > maxHeightValue) {
							maxHeightValue = heightValue;
						}
						var _g23 = 0;
						var _g111 = _gthis.layoutGroups;
						while(_g23 < _g111.data.get_length()) {
							var lg2 = _g111.data.get(_g23);
							++_g23;
							if(lg2.lineIndex < lineIndex) {
								continue;
							}
							if(lg2.lineIndex > lineIndex) {
								break;
							}
							lg2.ascent = maxAscent;
							lg2.height = maxHeightValue;
						}
						offsetY += maxHeightValue;
						maxAscent = 0.0;
						maxHeightValue = 0.0;
						++lineIndex;
						offsetX = 2;
					}
					offsetX = 2;
					if(offsetCount > 0) {
						var this2 = this.layoutGroups;
						var index1 = this.layoutGroups.data.get_length() - offsetCount;
						var bumpX = this2.data.get(index1).offsetX;
						var _g112 = this.layoutGroups.data.get_length() - offsetCount;
						var _g24 = this.layoutGroups.data.get_length();
						while(_g112 < _g24) {
							var i10 = _g112++;
							layoutGroup = this.layoutGroups.data.get(i10);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					if(this.width >= 4) {
						var text6 = lime_text__$UTF8String_UTF8String_$Impl_$.substring(_gthis.text,textIndex,endIndex2);
						var tempWidth1 = openfl__$internal_text_TextEngine.__context.measureText(text6).width;
						while(offsetX + tempWidth1 > _gthis.width - 2) {
							var i11 = 1;
							while(textIndex + i11 < endIndex2 + 1) {
								var text7 = lime_text__$UTF8String_UTF8String_$Impl_$.substr(_gthis.text,textIndex,i11);
								tempWidth1 = openfl__$internal_text_TextEngine.__context.measureText(text7).width;
								if(offsetX + tempWidth1 > _gthis.width - 2) {
									--i11;
									break;
								}
								++i11;
							}
							if(i11 == 0 && tempWidth1 > _gthis.width - 4) {
								i11 = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(_gthis.text);
							}
							if(i11 == 0) {
								offsetX = 2;
								offsetY += layoutGroup.height;
								++lineIndex;
								break;
							} else {
								var endIndex3 = textIndex + i11;
								if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
									layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex3);
									_gthis.layoutGroups.data.push(layoutGroup);
								} else {
									layoutGroup.format = formatRange.format;
									layoutGroup.startIndex = textIndex;
									layoutGroup.endIndex = endIndex3;
								}
								var text8 = _gthis.text;
								var endIndex4 = textIndex + i11;
								var positions7 = [];
								if(_gthis.__useIntAdvances == null) {
									_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
								}
								if(_gthis.__useIntAdvances) {
									var previousWidth4 = 0.0;
									var width8;
									var _g113 = textIndex;
									var _g25 = endIndex4;
									while(_g113 < _g25) {
										var i12 = _g113++;
										width8 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text8,textIndex,i12 + 1)).width;
										positions7.push(width8 - previousWidth4);
										previousWidth4 = width8;
									}
								} else {
									var _g114 = textIndex;
									var _g26 = endIndex4;
									while(_g114 < _g26) {
										var i13 = _g114++;
										var advance4;
										if(i13 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text8) - 1) {
											var nextWidth4 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text8,i13 + 1)).width;
											var twoWidths4 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text8,i13,2)).width;
											advance4 = twoWidths4 - nextWidth4;
										} else {
											advance4 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text8,i13)).width;
										}
										positions7.push(advance4);
									}
								}
								layoutGroup.positions = positions7;
								layoutGroup.offsetX = offsetX;
								layoutGroup.ascent = ascent;
								layoutGroup.descent = descent;
								layoutGroup.leading = leading;
								layoutGroup.lineIndex = lineIndex;
								layoutGroup.offsetY = offsetY;
								var positions8 = layoutGroup.positions;
								var width9 = 0.0;
								var _g27 = 0;
								while(_g27 < positions8.length) {
									var position4 = positions8[_g27];
									++_g27;
									width9 += position4;
								}
								layoutGroup.width = width9;
								layoutGroup.height = heightValue;
								layoutGroup = null;
								if(ascent > maxAscent) {
									maxAscent = ascent;
								}
								if(heightValue > maxHeightValue) {
									maxHeightValue = heightValue;
								}
								var _g28 = 0;
								var _g115 = _gthis.layoutGroups;
								while(_g28 < _g115.data.get_length()) {
									var lg3 = _g115.data.get(_g28);
									++_g28;
									if(lg3.lineIndex < lineIndex) {
										continue;
									}
									if(lg3.lineIndex > lineIndex) {
										break;
									}
									lg3.ascent = maxAscent;
									lg3.height = maxHeightValue;
								}
								offsetY += maxHeightValue;
								maxAscent = 0.0;
								maxHeightValue = 0.0;
								++lineIndex;
								offsetX = 2;
								textIndex += i11;
								var text9 = _gthis.text;
								var positions9 = [];
								if(_gthis.__useIntAdvances == null) {
									_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
								}
								if(_gthis.__useIntAdvances) {
									var previousWidth5 = 0.0;
									var width10;
									var _g116 = textIndex;
									var _g29 = endIndex2;
									while(_g116 < _g29) {
										var i14 = _g116++;
										width10 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text9,textIndex,i14 + 1)).width;
										positions9.push(width10 - previousWidth5);
										previousWidth5 = width10;
									}
								} else {
									var _g117 = textIndex;
									var _g30 = endIndex2;
									while(_g117 < _g30) {
										var i15 = _g117++;
										var advance5;
										if(i15 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text9) - 1) {
											var nextWidth5 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text9,i15 + 1)).width;
											var twoWidths5 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text9,i15,2)).width;
											advance5 = twoWidths5 - nextWidth5;
										} else {
											advance5 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text9,i15)).width;
										}
										positions9.push(advance5);
									}
								}
								positions = positions9;
								var width11 = 0.0;
								var _g31 = 0;
								while(_g31 < positions.length) {
									var position5 = positions[_g31];
									++_g31;
									width11 += position5;
								}
								widthValue = width11;
								tempWidth1 = widthValue;
							}
						}
					}
					if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex2);
						_gthis.layoutGroups.data.push(layoutGroup);
					} else {
						layoutGroup.format = formatRange.format;
						layoutGroup.startIndex = textIndex;
						layoutGroup.endIndex = endIndex2;
					}
					layoutGroup.positions = positions;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					offsetX += widthValue;
					textIndex = endIndex2;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(lineFormat.align != 2) {
							layoutGroup.endIndex = spaceIndex;
							layoutGroup.positions = layoutGroup.positions.concat(positions);
							layoutGroup.width += widthValue;
						}
					} else if(layoutGroup == null || lineFormat.align == 2) {
						if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
							layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex2);
							_gthis.layoutGroups.data.push(layoutGroup);
						} else {
							layoutGroup.format = formatRange.format;
							layoutGroup.startIndex = textIndex;
							layoutGroup.endIndex = endIndex2;
						}
						layoutGroup.positions = positions;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
					} else {
						layoutGroup.endIndex = endIndex2;
						layoutGroup.positions = layoutGroup.positions.concat(positions);
						layoutGroup.width += widthValue;
						if(breakIndex == endIndex2) {
							++endIndex2;
						}
					}
					offsetX += widthValue;
					textIndex = endIndex2;
				}
				var nextSpaceIndex = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text," ",textIndex);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					textIndex = formatRange.end;
					if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
						++rangeIndex;
						formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						if(currentFormat.__ascent != null) {
							ascent = currentFormat.size * currentFormat.__ascent;
							descent = currentFormat.size * currentFormat.__descent;
						} else {
							ascent = currentFormat.size;
							descent = currentFormat.size * 0.185;
						}
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
					}
					if(heightValue > maxHeightValue) {
						maxHeightValue = heightValue;
					}
					if(ascent > maxAscent) {
						maxAscent = ascent;
					}
				} else {
					if(breakIndex == previousSpaceIndex) {
						layoutGroup.endIndex = breakIndex;
						if(breakIndex - layoutGroup.startIndex - layoutGroup.positions.length < 0) {
							layoutGroup.positions.push(0.0);
						}
						textIndex = breakIndex + 1;
					}
					previousSpaceIndex = spaceIndex;
					spaceIndex = nextSpaceIndex;
				}
				if(breakIndex > -1 && breakIndex <= textIndex && (spaceIndex > breakIndex || spaceIndex == -1) || textIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) || spaceIndex > formatRange.end) {
					break;
				}
			}
		} else {
			if(textIndex > formatRange.end) {
				break;
			} else if(textIndex < formatRange.end || textIndex == lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text)) {
				if(this.wordWrap && this.width >= 4) {
					var endIndex5 = formatRange.end;
					var text10 = lime_text__$UTF8String_UTF8String_$Impl_$.substring(_gthis.text,textIndex,endIndex5);
					var tempWidth2 = openfl__$internal_text_TextEngine.__context.measureText(text10).width;
					while(offsetX + tempWidth2 > _gthis.width - 2) {
						var i16 = 1;
						while(textIndex + i16 < endIndex5 + 1) {
							var text11 = lime_text__$UTF8String_UTF8String_$Impl_$.substr(_gthis.text,textIndex,i16);
							tempWidth2 = openfl__$internal_text_TextEngine.__context.measureText(text11).width;
							if(offsetX + tempWidth2 > _gthis.width - 2) {
								--i16;
								break;
							}
							++i16;
						}
						if(i16 == 0 && tempWidth2 > _gthis.width - 4) {
							i16 = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(_gthis.text);
						}
						if(i16 == 0) {
							offsetX = 2;
							offsetY += layoutGroup.height;
							++lineIndex;
							break;
						} else {
							var endIndex6 = textIndex + i16;
							if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
								layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex6);
								_gthis.layoutGroups.data.push(layoutGroup);
							} else {
								layoutGroup.format = formatRange.format;
								layoutGroup.startIndex = textIndex;
								layoutGroup.endIndex = endIndex6;
							}
							var text12 = _gthis.text;
							var endIndex7 = textIndex + i16;
							var positions10 = [];
							if(_gthis.__useIntAdvances == null) {
								_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
							}
							if(_gthis.__useIntAdvances) {
								var previousWidth6 = 0.0;
								var width12;
								var _g118 = textIndex;
								var _g32 = endIndex7;
								while(_g118 < _g32) {
									var i17 = _g118++;
									width12 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text12,textIndex,i17 + 1)).width;
									positions10.push(width12 - previousWidth6);
									previousWidth6 = width12;
								}
							} else {
								var _g119 = textIndex;
								var _g33 = endIndex7;
								while(_g119 < _g33) {
									var i18 = _g119++;
									var advance6;
									if(i18 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text12) - 1) {
										var nextWidth6 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text12,i18 + 1)).width;
										var twoWidths6 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text12,i18,2)).width;
										advance6 = twoWidths6 - nextWidth6;
									} else {
										advance6 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text12,i18)).width;
									}
									positions10.push(advance6);
								}
							}
							layoutGroup.positions = positions10;
							layoutGroup.offsetX = offsetX;
							layoutGroup.ascent = ascent;
							layoutGroup.descent = descent;
							layoutGroup.leading = leading;
							layoutGroup.lineIndex = lineIndex;
							layoutGroup.offsetY = offsetY;
							var positions11 = layoutGroup.positions;
							var width13 = 0.0;
							var _g34 = 0;
							while(_g34 < positions11.length) {
								var position6 = positions11[_g34];
								++_g34;
								width13 += position6;
							}
							layoutGroup.width = width13;
							layoutGroup.height = heightValue;
							layoutGroup = null;
							if(ascent > maxAscent) {
								maxAscent = ascent;
							}
							if(heightValue > maxHeightValue) {
								maxHeightValue = heightValue;
							}
							var _g35 = 0;
							var _g120 = _gthis.layoutGroups;
							while(_g35 < _g120.data.get_length()) {
								var lg4 = _g120.data.get(_g35);
								++_g35;
								if(lg4.lineIndex < lineIndex) {
									continue;
								}
								if(lg4.lineIndex > lineIndex) {
									break;
								}
								lg4.ascent = maxAscent;
								lg4.height = maxHeightValue;
							}
							offsetY += maxHeightValue;
							maxAscent = 0.0;
							maxHeightValue = 0.0;
							++lineIndex;
							offsetX = 2;
							textIndex += i16;
							var text13 = _gthis.text;
							var positions12 = [];
							if(_gthis.__useIntAdvances == null) {
								_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
							}
							if(_gthis.__useIntAdvances) {
								var previousWidth7 = 0.0;
								var width14;
								var _g121 = textIndex;
								var _g36 = endIndex5;
								while(_g121 < _g36) {
									var i19 = _g121++;
									width14 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text13,textIndex,i19 + 1)).width;
									positions12.push(width14 - previousWidth7);
									previousWidth7 = width14;
								}
							} else {
								var _g122 = textIndex;
								var _g37 = endIndex5;
								while(_g122 < _g37) {
									var i20 = _g122++;
									var advance7;
									if(i20 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text13) - 1) {
										var nextWidth7 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text13,i20 + 1)).width;
										var twoWidths7 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text13,i20,2)).width;
										advance7 = twoWidths7 - nextWidth7;
									} else {
										advance7 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text13,i20)).width;
									}
									positions12.push(advance7);
								}
							}
							positions = positions12;
							var width15 = 0.0;
							var _g38 = 0;
							while(_g38 < positions.length) {
								var position7 = positions[_g38];
								++_g38;
								width15 += position7;
							}
							widthValue = width15;
							tempWidth2 = widthValue;
						}
					}
				}
				var text14 = this.text;
				var endIndex8 = formatRange.end;
				var positions13 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth8 = 0.0;
					var width16;
					var _g123 = textIndex;
					var _g39 = endIndex8;
					while(_g123 < _g39) {
						var i21 = _g123++;
						width16 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text14,textIndex,i21 + 1)).width;
						positions13.push(width16 - previousWidth8);
						previousWidth8 = width16;
					}
				} else {
					var _g124 = textIndex;
					var _g40 = endIndex8;
					while(_g124 < _g40) {
						var i22 = _g124++;
						var advance8;
						if(i22 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text14) - 1) {
							var nextWidth8 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text14,i22 + 1)).width;
							var twoWidths8 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text14,i22,2)).width;
							advance8 = twoWidths8 - nextWidth8;
						} else {
							advance8 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text14,i22)).width;
						}
						positions13.push(advance8);
					}
				}
				positions = positions13;
				var width17 = 0.0;
				var _g41 = 0;
				while(_g41 < positions.length) {
					var position8 = positions[_g41];
					++_g41;
					width17 += position8;
				}
				widthValue = width17;
				var endIndex9 = formatRange.end;
				if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex9);
					_gthis.layoutGroups.data.push(layoutGroup);
				} else {
					layoutGroup.format = formatRange.format;
					layoutGroup.startIndex = textIndex;
					layoutGroup.endIndex = endIndex9;
				}
				var text15 = this.text;
				var endIndex10 = formatRange.end;
				var positions14 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth9 = 0.0;
					var width18;
					var _g125 = textIndex;
					var _g42 = endIndex10;
					while(_g125 < _g42) {
						var i23 = _g125++;
						width18 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text15,textIndex,i23 + 1)).width;
						positions14.push(width18 - previousWidth9);
						previousWidth9 = width18;
					}
				} else {
					var _g126 = textIndex;
					var _g43 = endIndex10;
					while(_g126 < _g43) {
						var i24 = _g126++;
						var advance9;
						if(i24 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text15) - 1) {
							var nextWidth9 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text15,i24 + 1)).width;
							var twoWidths9 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text15,i24,2)).width;
							advance9 = twoWidths9 - nextWidth9;
						} else {
							advance9 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text15,i24)).width;
						}
						positions14.push(advance9);
					}
				}
				layoutGroup.positions = positions14;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				var positions15 = layoutGroup.positions;
				var width19 = 0.0;
				var _g44 = 0;
				while(_g44 < positions15.length) {
					var position9 = positions15[_g44];
					++_g44;
					width19 += position9;
				}
				layoutGroup.width = width19;
				layoutGroup.height = heightValue;
				offsetX += widthValue;
				textIndex = formatRange.end;
			}
			if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
				++rangeIndex;
				formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				if(currentFormat.__ascent != null) {
					ascent = currentFormat.size * currentFormat.__ascent;
					descent = currentFormat.size * currentFormat.__descent;
				} else {
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
				}
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
			}
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
			if(textIndex == formatRange.end) {
				if(ascent > maxAscent) {
					maxAscent = ascent;
				}
				if(heightValue > maxHeightValue) {
					maxHeightValue = heightValue;
				}
				var _g45 = 0;
				var _g127 = _gthis.layoutGroups;
				while(_g45 < _g127.data.get_length()) {
					var lg5 = _g127.data.get(_g45);
					++_g45;
					if(lg5.lineIndex < lineIndex) {
						continue;
					}
					if(lg5.lineIndex > lineIndex) {
						break;
					}
					lg5.ascent = maxAscent;
					lg5.height = maxHeightValue;
				}
				offsetY += maxHeightValue;
				maxAscent = 0.0;
				maxHeightValue = 0.0;
				++lineIndex;
				offsetX = 2;
				++textIndex;
				break;
			}
		}
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var totalWidth = this.width - 4;
		var group;
		var lineLength;
		var _g1 = 0;
		var _g = this.layoutGroups.data.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups.data.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				var _g2 = group.format.align;
				switch(_g2) {
				case 0:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) {
						offsetX = Math.round((totalWidth - this.lineWidths.data.get(lineIndex)) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) {
						lineLength = 1;
						var _g3 = i + 1;
						var _g21 = this.layoutGroups.data.get_length();
						while(_g3 < _g21) {
							var j = _g3++;
							if(this.layoutGroups.data.get(j).lineIndex == lineIndex) {
								if(j == 0 || lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt(this.text,this.layoutGroups.data.get(j).startIndex - 1) == 32) {
									++lineLength;
								}
							} else {
								break;
							}
						}
						if(lineLength > 1) {
							group = this.layoutGroups.data.get(i + lineLength - 1);
							var endChar = lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt(this.text,group.endIndex);
							if(group.endIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) && endChar != 10 && endChar != 13) {
								offsetX = (totalWidth - this.lineWidths.data.get(lineIndex)) / (lineLength - 1);
								var j1 = 0;
								while(true) {
									if(j1 > 1 && lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt(this.text,this.layoutGroups.data.get(j1).startIndex - 1) != 32) {
										this.layoutGroups.data.get(i + j1).offsetX += offsetX * (j1 - 1);
										++j1;
									}
									this.layoutGroups.data.get(i + j1).offsetX += offsetX * j1;
									if(!(++j1 < lineLength)) {
										break;
									}
								}
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) {
						offsetX = Math.round(totalWidth - this.lineWidths.data.get(lineIndex));
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
	}
	,update: function() {
		if(this.text == null || this.textFormatRanges.data.get_length() == 0) {
			this.lineAscents.data.set_length(0);
			this.lineBreaks.data.set_length(0);
			this.lineDescents.data.set_length(0);
			this.lineLeadings.data.set_length(0);
			this.lineHeights.data.set_length(0);
			this.lineWidths.data.set_length(0);
			this.layoutGroups.data.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,set_restrict: function(value) {
		if(lime_text__$UTF8String_UTF8String_$Impl_$.equals(this.restrict,value)) {
			return this.restrict;
		}
		this.restrict = value;
		if(this.restrict == null || lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.restrict) == 0) {
			this.__restrictRegexp = null;
		} else {
			this.__restrictRegexp = this.createRestrictRegexp(value);
		}
		return this.restrict;
	}
	,set_text: function(value) {
		if(value == null) {
			return this.text = value;
		}
		if(this.__restrictRegexp != null) {
			value = this.__restrictRegexp.split(value).join("");
		}
		if(this.maxChars > 0 && value.length > this.maxChars) {
			value = HxOverrides.substr(value,0,this.maxChars);
		}
		this.text = value;
		return this.text;
	}
	,__class__: openfl__$internal_text_TextEngine
	,__properties__: {set_text:"set_text",set_restrict:"set_restrict"}
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,positions: null
	,startIndex: null
	,width: null
	,getAdvance: function(index) {
		return this.positions[index];
	}
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl__$internal_timeline_Frame = function() {
};
$hxClasses["openfl._internal.timeline.Frame"] = openfl__$internal_timeline_Frame;
openfl__$internal_timeline_Frame.__name__ = ["openfl","_internal","timeline","Frame"];
openfl__$internal_timeline_Frame.prototype = {
	label: null
	,objects: null
	,script: null
	,scriptSource: null
	,__class__: openfl__$internal_timeline_Frame
};
var openfl__$internal_timeline_FrameObject = function() {
};
$hxClasses["openfl._internal.timeline.FrameObject"] = openfl__$internal_timeline_FrameObject;
openfl__$internal_timeline_FrameObject.__name__ = ["openfl","_internal","timeline","FrameObject"];
openfl__$internal_timeline_FrameObject.prototype = {
	blendMode: null
	,cacheAsBitmap: null
	,clipDepth: null
	,colorTransform: null
	,depth: null
	,filters: null
	,id: null
	,matrix: null
	,name: null
	,symbol: null
	,type: null
	,visible: null
	,__class__: openfl__$internal_timeline_FrameObject
};
var openfl__$internal_timeline_FrameObjectType = $hxClasses["openfl._internal.timeline.FrameObjectType"] = { __ename__ : ["openfl","_internal","timeline","FrameObjectType"], __constructs__ : ["CREATE","UPDATE","DESTROY"] };
openfl__$internal_timeline_FrameObjectType.CREATE = ["CREATE",0];
openfl__$internal_timeline_FrameObjectType.CREATE.toString = $estr;
openfl__$internal_timeline_FrameObjectType.CREATE.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.UPDATE = ["UPDATE",1];
openfl__$internal_timeline_FrameObjectType.UPDATE.toString = $estr;
openfl__$internal_timeline_FrameObjectType.UPDATE.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.DESTROY = ["DESTROY",2];
openfl__$internal_timeline_FrameObjectType.DESTROY.toString = $estr;
openfl__$internal_timeline_FrameObjectType.DESTROY.__enum__ = openfl__$internal_timeline_FrameObjectType;
var openfl__$internal_utils_NullUtils = function() { };
$hxClasses["openfl._internal.utils.NullUtils"] = openfl__$internal_utils_NullUtils;
openfl__$internal_utils_NullUtils.__name__ = ["openfl","_internal","utils","NullUtils"];
var openfl__$internal_utils_PerlinNoise = function(seed,octaves,falloff) {
	if(seed == null) {
		seed = 123;
	}
	if(falloff == null) {
		falloff = .5;
	}
	this.octaves = octaves == null ? 4 : octaves;
	this.baseFactor = 0.015625;
	this.seedOffset(seed);
	this.octFreqPers(falloff);
};
$hxClasses["openfl._internal.utils.PerlinNoise"] = openfl__$internal_utils_PerlinNoise;
openfl__$internal_utils_PerlinNoise.__name__ = ["openfl","_internal","utils","PerlinNoise"];
openfl__$internal_utils_PerlinNoise.prototype = {
	octaves: null
	,aOctFreq: null
	,aOctPers: null
	,fPersMax: null
	,iXoffset: null
	,iYoffset: null
	,iZoffset: null
	,baseFactor: null
	,fill: function(bitmap,_x,_y,_z,_) {
		var baseX = _x * this.baseFactor + this.iXoffset;
		_y = _y * this.baseFactor + this.iYoffset;
		_z = _z * this.baseFactor + this.iZoffset;
		var width = bitmap.width;
		var height = bitmap.height;
		var p = openfl__$internal_utils_PerlinNoise.P;
		var octaves = this.octaves;
		var aOctFreq = this.aOctFreq;
		var aOctPers = this.aOctPers;
		var _g1 = 0;
		var _g = height;
		while(_g1 < _g) {
			var py = _g1++;
			_x = baseX;
			var _g3 = 0;
			var _g2 = width;
			while(_g3 < _g2) {
				var px = _g3++;
				var s = 0.;
				var _g5 = 0;
				var _g4 = octaves;
				while(_g5 < _g4) {
					var i = _g5++;
					var fFreq = aOctFreq[i];
					var fPers = aOctPers[i];
					var x = _x * fFreq;
					var y = _y * fFreq;
					var z = _z * fFreq;
					var xf = x - x % 1;
					var yf = y - y % 1;
					var zf = z - z % 1;
					var X = (xf | 0) & 255;
					var Y = (yf | 0) & 255;
					var Z = (zf | 0) & 255;
					x -= xf;
					y -= yf;
					z -= zf;
					var u = x * x * x * (x * (x * 6 - 15) + 10);
					var v = y * y * y * (y * (y * 6 - 15) + 10);
					var w = z * z * z * (z * (z * 6 - 15) + 10);
					var A = p[X] + Y;
					var AA = p[A] + Z;
					var AB = p[A + 1] + Z;
					var B = p[X + 1] + Y;
					var BA = p[B] + Z;
					var BB = p[B + 1] + Z;
					var x1 = x - 1;
					var y1 = y - 1;
					var z1 = z - 1;
					var hash = p[BB + 1] & 15;
					var g1 = ((hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z1 : hash < 4 ? -y1 : hash == 14 ? -x1 : -z1);
					hash = p[AB + 1] & 15;
					var g2 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z1 : hash < 4 ? -y1 : hash == 14 ? -x : -z1);
					hash = p[BA + 1] & 15;
					var g3 = ((hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z1 : hash < 4 ? -y : hash == 14 ? -x1 : -z1);
					hash = p[AA + 1] & 15;
					var g4 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z1 : hash < 4 ? -y : hash == 14 ? -x : -z1);
					hash = p[BB] & 15;
					var g5 = ((hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z : hash < 4 ? -y1 : hash == 14 ? -x1 : -z);
					hash = p[AB] & 15;
					var g6 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z : hash < 4 ? -y1 : hash == 14 ? -x : -z);
					hash = p[BA] & 15;
					var g7 = ((hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z : hash < 4 ? -y : hash == 14 ? -x1 : -z);
					hash = p[AA] & 15;
					var g8 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z : hash < 4 ? -y : hash == 14 ? -x : -z);
					g2 += u * (g1 - g2);
					g4 += u * (g3 - g4);
					g6 += u * (g5 - g6);
					g8 += u * (g7 - g8);
					g4 += v * (g2 - g4);
					g8 += v * (g6 - g8);
					s += (g8 + w * (g4 - g8)) * fPers;
				}
				var color = (s * this.fPersMax + 1) * 128 | 0;
				bitmap.setPixel32(px,py,-16777216 | color << 16 | color << 8 | color);
				_x += this.baseFactor;
			}
			_y += this.baseFactor;
		}
	}
	,octFreqPers: function(fPersistence) {
		var fFreq;
		var fPers;
		this.aOctFreq = [];
		this.aOctPers = [];
		this.fPersMax = 0;
		var _g1 = 0;
		var _g = this.octaves;
		while(_g1 < _g) {
			var i = _g1++;
			fFreq = Math.pow(2,i);
			fPers = Math.pow(fPersistence,i);
			this.fPersMax += fPers;
			this.aOctFreq.push(fFreq);
			this.aOctPers.push(fPers);
		}
		this.fPersMax = 1 / this.fPersMax;
	}
	,seedOffset: function(iSeed) {
		iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iXoffset = iSeed;
		iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iYoffset = iSeed;
		iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iZoffset = iSeed;
	}
	,__class__: openfl__$internal_utils_PerlinNoise
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl__$internal_Lib.application == null) {
		openfl__$internal_Lib.application = this;
	}
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(openfl__$internal_Lib.current == null) {
			openfl__$internal_Lib.current = new openfl_display_MovieClip();
		}
		openfl__$internal_Lib.current.__loaderInfo = openfl_display_LoaderInfo.create(null);
		openfl__$internal_Lib.current.__loaderInfo.content = openfl__$internal_Lib.current;
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) {
				this.backend.setFrameRate(config.fps);
			}
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new openfl_display_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.__preloader == null || this.__preloader.complete) {
				this.onPreloadComplete();
			}
		}
	}
	,__class__: openfl_display_Application
});
var openfl_display_IShaderDrawable = function() { };
$hxClasses["openfl.display.IShaderDrawable"] = openfl_display_IShaderDrawable;
openfl_display_IShaderDrawable.__name__ = ["openfl","display","IShaderDrawable"];
openfl_display_IShaderDrawable.prototype = {
	shader: null
	,__class__: openfl_display_IShaderDrawable
};
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_DisplayObject.call(this);
	this.set_bitmapData(bitmapData);
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) {
		this.pixelSnapping = 1;
	}
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	bitmapData: null
	,pixelSnapping: null
	,shader: null
	,smoothing: null
	,__image: null
	,__imageVersion: null
	,__enterFrame: function(deltaTime) {
		if(this.bitmapData != null && this.bitmapData.image != null) {
			var image = this.bitmapData.image;
			if(this.bitmapData.image.version != this.__imageVersion) {
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
				this.__imageVersion = image.version;
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__pool.get();
			bounds.setTo(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
			openfl_geom_Rectangle.__pool.release(bounds);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			if(this.__scrollRect != null && !this.__scrollRect.contains(px,py)) {
				return false;
			}
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.bitmapData == null) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCairoMask: function(renderSession) {
		renderSession.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderSession) {
		this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			var bitmap = this.__cacheBitmap;
			if(!(!bitmap.__renderable || bitmap.__worldAlpha <= 0)) {
				var context = renderSession.context;
				if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid && bitmap.bitmapData.readable) {
					renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
					renderSession.maskManager.pushObject(bitmap,false);
					lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.bitmapData.image);
					context.globalAlpha = bitmap.__worldAlpha;
					var transform = bitmap.__renderTransform;
					var scrollRect = bitmap.__scrollRect;
					if(renderSession.roundPixels) {
						context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
					} else {
						context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
					}
					if(!renderSession.allowSmoothing || !bitmap.smoothing) {
						context.mozImageSmoothingEnabled = false;
						context.msImageSmoothingEnabled = false;
						context.imageSmoothingEnabled = false;
					}
					if(scrollRect == null) {
						context.drawImage(bitmap.bitmapData.image.get_src(),0,0);
					} else {
						context.drawImage(bitmap.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
					}
					if(!renderSession.allowSmoothing || !bitmap.smoothing) {
						context.mozImageSmoothingEnabled = true;
						context.msImageSmoothingEnabled = true;
						context.imageSmoothingEnabled = true;
					}
					renderSession.maskManager.popObject(bitmap,false);
				}
			}
		} else if(!(!this.__renderable || this.__worldAlpha <= 0)) {
			var context1 = renderSession.context;
			if(this.bitmapData != null && this.bitmapData.__isValid && this.bitmapData.readable) {
				renderSession.blendModeManager.setBlendMode(this.__worldBlendMode);
				renderSession.maskManager.pushObject(this,false);
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.bitmapData.image);
				context1.globalAlpha = this.__worldAlpha;
				var transform1 = this.__renderTransform;
				var scrollRect1 = this.__scrollRect;
				if(renderSession.roundPixels) {
					context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
				} else {
					context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
				}
				if(!renderSession.allowSmoothing || !this.smoothing) {
					context1.mozImageSmoothingEnabled = false;
					context1.msImageSmoothingEnabled = false;
					context1.imageSmoothingEnabled = false;
				}
				if(scrollRect1 == null) {
					context1.drawImage(this.bitmapData.image.get_src(),0,0);
				} else {
					context1.drawImage(this.bitmapData.image.get_src(),scrollRect1.x,scrollRect1.y,scrollRect1.width,scrollRect1.height,scrollRect1.x,scrollRect1.y,scrollRect1.width,scrollRect1.height);
				}
				if(!renderSession.allowSmoothing || !this.smoothing) {
					context1.mozImageSmoothingEnabled = true;
					context1.msImageSmoothingEnabled = true;
					context1.imageSmoothingEnabled = true;
				}
				renderSession.maskManager.popObject(this,false);
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
	}
	,__renderDOMClear: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.render(this.__cacheBitmap,renderSession);
		} else {
			openfl__$internal_renderer_opengl_GLBitmap.render(this,renderSession);
		}
	}
	,__renderGLMask: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.renderMask(this.__cacheBitmap,renderSession);
		} else {
			openfl__$internal_renderer_opengl_GLBitmap.renderMask(this,renderSession);
		}
	}
	,__updateCacheBitmap: function(renderSession,force) {
		if(this.get_filters() == null) {
			return;
		}
		openfl_display_DisplayObject.prototype.__updateCacheBitmap.call(this,renderSession,force);
	}
	,__updateMask: function(maskGraphics) {
		if(this.bitmapData == null) {
			return;
		}
		maskGraphics.__commands.overrideMatrix(this.__worldTransform);
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) {
			maskGraphics.__bounds = new openfl_geom_Rectangle();
		}
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObject.prototype.__updateMask.call(this,maskGraphics);
	}
	,set_bitmapData: function(value) {
		this.bitmapData = value;
		this.smoothing = false;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		var tmp = this.__filters != null && this.__filters.length > 0;
		this.__imageVersion = -1;
		return this.bitmapData;
	}
	,get_height: function() {
		if(this.bitmapData != null) {
			return this.bitmapData.height * Math.abs(this.get_scaleY());
		}
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) {
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
				this.set_scaleY(value / this.bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) {
			return this.bitmapData.width * Math.abs(this.__scaleX);
		}
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) {
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
				this.set_scaleX(value / this.bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_bitmapData:"set_bitmapData"})
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	} else {
		width = width;
	}
	if(height == null) {
		height = 0;
	} else {
		height = height;
	}
	if(width < 0) {
		width = 0;
	} else {
		width = width;
	}
	if(height < 0) {
		height = 0;
	} else {
		height = height;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderable = true;
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	var image = lime_graphics_Image.fromBase64(base64,type);
	bitmapData.__fromImage(image);
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	var image = lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	bitmapData.__fromImage(image);
	if(rawAlpha != null) {
		bitmapData.__applyAlpha(rawAlpha);
	}
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	bitmapData.__fromFile(path);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture.__textureID;
	bitmapData.__textureContext = texture.__textureContext;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.loadFromBase64 = function(base64,type) {
	return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.loadFromBytes = function(bytes,rawAlpha) {
	return lime_graphics_Image.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)).then(function(image) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(rawAlpha != null) {
			bitmapData.__applyAlpha(rawAlpha);
		}
		return lime_app_Future.withValue(bitmapData);
	});
};
openfl_display_BitmapData.loadFromFile = function(path) {
	return lime_graphics_Image.loadFromFile(path).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,readable: null
	,rect: null
	,transparent: null
	,width: null
	,__blendMode: null
	,__buffer: null
	,__bufferColorTransform: null
	,__bufferContext: null
	,__bufferAlpha: null
	,__bufferData: null
	,__framebuffer: null
	,__framebufferContext: null
	,__isMask: null
	,__isValid: null
	,__renderable: null
	,__surface: null
	,__texture: null
	,__textureContext: null
	,__textureVersion: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable) {
			return;
		}
		filter.__applyFilter(this,sourceBitmapData,sourceRect,destPoint);
	}
	,clone: function() {
		if(!this.__isValid) {
			return new openfl_display_BitmapData(this.width,this.height,this.transparent,0);
		} else if(!this.readable && this.image == null) {
			var bitmapData = new openfl_display_BitmapData(0,0,this.transparent,0);
			bitmapData.width = this.width;
			bitmapData.height = this.height;
			bitmapData.rect.copyFrom(this.rect);
			bitmapData.__framebuffer = this.__framebuffer;
			bitmapData.__framebufferContext = this.__framebufferContext;
			bitmapData.__texture = this.__texture;
			bitmapData.__textureContext = this.__textureContext;
			bitmapData.__isValid = true;
			return bitmapData;
		} else {
			return openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
		}
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) {
			return 0;
		} else if(otherBitmapData == null) {
			return -1;
		} else if(this.readable == false || otherBitmapData.readable == false) {
			return -2;
		} else if(this.width != otherBitmapData.width) {
			return -3;
		} else if(this.height != otherBitmapData.height) {
			return -4;
		}
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g1 = 0;
			var _g = bytes.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) {
				return 0;
			}
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.width;
			while(_g3 < _g21) {
				var x = _g3++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >>> 16 & 255) - (otherPixel >>> 16 & 255);
					g = (pixel >>> 8 & 255) - (otherPixel >>> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) {
						r *= -1;
					}
					if(g < 0) {
						g *= -1;
					}
					if(b < 0) {
						b *= -1;
					}
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >>> 24 & 255) - (otherPixel >>> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | 255;
							comparePixel = (a & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | b & 255;
						comparePixel = -16777216 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) {
						bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					}
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) {
			return 0;
		}
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.readable) {
			return;
		}
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.readable || sourceBitmapData == null) {
			return;
		}
		if(alphaPoint != null) {
			openfl_display_BitmapData.__tempVector.x = alphaPoint.x;
			openfl_display_BitmapData.__tempVector.y = alphaPoint.y;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null ? alphaBitmapData.image : null,alphaPoint != null ? openfl_display_BitmapData.__tempVector : null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.readable = false;
		this.__surface = null;
		this.__buffer = null;
		this.__framebuffer = null;
		this.__framebufferContext = null;
		this.__texture = null;
		this.__textureContext = null;
	}
	,disposeImage: function() {
		this.readable = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
			if(source.__transform != null) {
				matrix.copyFrom(source.__transform);
				matrix.tx = 0;
				matrix.ty = 0;
			}
		}
		if(!this.readable) {
			if(lime_graphics_opengl_GL.context != null) {
				var gl = lime_graphics_opengl_GL.context;
				var target = gl.FRAMEBUFFER;
				var framebuffer = this.__getFramebuffer(gl);
				gl.__context.bindFramebuffer(target,framebuffer);
				gl.__context.viewport(0,0,this.width,this.height);
				var renderer = new openfl__$internal_renderer_opengl_GLRenderer(null,gl,this);
				var renderSession = renderer.renderSession;
				renderSession.clearRenderDirty = false;
				renderSession.shaderManager = (js_Boot.__cast(null , openfl__$internal_renderer_opengl_GLRenderer)).renderSession.shaderManager;
				var matrixCache = source.__worldTransform;
				source.__updateTransforms(matrix);
				source.__updateChildren(false);
				source.__renderGL(renderer.renderSession);
				source.__updateTransforms(matrixCache);
				source.__updateChildren(true);
				gl.__context.bindFramebuffer(gl.FRAMEBUFFER,null);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source);
				copy.colorTransform(copy.rect,colorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
			var buffer = this.image.buffer;
			var renderSession1 = new openfl__$internal_renderer_RenderSession();
			renderSession1.clearRenderDirty = false;
			renderSession1.context = buffer.__srcContext;
			renderSession1.allowSmoothing = smoothing;
			renderSession1.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession1);
			renderSession1.blendModeManager = new openfl__$internal_renderer_canvas_CanvasBlendModeManager(renderSession1);
			renderSession1.blendModeManager.setBlendMode(blendMode);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.msImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			if(clipRect != null) {
				renderSession1.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
			}
			var matrixCache1 = source.__worldTransform;
			source.__updateTransforms(matrix);
			source.__updateChildren(false);
			source.__renderCanvas(renderSession1);
			source.__updateTransforms(matrixCache1);
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.msImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			if(clipRect != null) {
				renderSession1.maskManager.popRect();
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			buffer.__srcImageData = null;
			buffer.data = null;
			this.image.dirty = true;
			this.image.version++;
		}
	}
	,drawWithQuality: function(source,matrix,colorTransform,blendMode,clipRect,smoothing,quality) {
		if(smoothing == null) {
			smoothing = false;
		}
		this.draw(source,matrix,colorTransform,blendMode,clipRect,quality != 2 && smoothing);
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.readable || rect == null) {
			byteArray = null;
			return byteArray;
		}
		if(byteArray == null) {
			var this1 = new openfl_utils_ByteArrayData(0);
			byteArray = this1;
		}
		var image = this.image;
		if(!rect.equals(this.rect)) {
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.tx = Math.round(-rect.x);
			matrix.ty = Math.round(-rect.y);
			var bitmapData = new openfl_display_BitmapData(Math.ceil(rect.width),Math.ceil(rect.height),true,0);
			bitmapData.draw(this,matrix);
			image = bitmapData.image;
			openfl_geom_Matrix.__pool.release(matrix);
		}
		if(js_Boot.__instanceof(compressor,openfl_display_PNGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(image.encode("png")));
			return byteArray;
		} else if(js_Boot.__instanceof(compressor,openfl_display_JPEGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(image.encode("jpg",(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality)));
			return byteArray;
		}
		byteArray = null;
		return byteArray;
	}
	,fillRect: function(rect,color) {
		if(rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		if(this.readable) {
			this.image.fillRect(rect.__toLimeRectangle(),color,1);
		} else if(this.__framebuffer != null) {
			var gl = lime_graphics_opengl_GL.context;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			gl.__context.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer);
			if(useScissor) {
				gl.__context.enable(gl.SCISSOR_TEST);
				gl.__context.scissor(Math.round(rect.x),Math.round(rect.y),Math.round(rect.width),Math.round(rect.height));
			}
			gl.__context.clearColor((color1 >>> 16 & 255) / 255,(color1 >>> 8 & 255) / 255,(color1 & 255) / 255,(color1 >>> 24 & 255) / 255);
			gl.__context.clear(gl.COLOR_BUFFER_BIT);
			if(useScissor) {
				gl.__context.disable(gl.SCISSOR_TEST);
			}
			gl.__context.bindFramebuffer(gl.FRAMEBUFFER,null);
		}
	}
	,floodFill: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.floodFill(x,y,color,1);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl,alpha,colorTransform) {
		if(this.__buffer == null || this.__bufferContext != gl) {
			var uvWidth = 1;
			var uvHeight = 1;
			var this1 = new Float32Array(104);
			this.__bufferData = this1;
			this.__bufferData[0] = this.width;
			this.__bufferData[1] = this.height;
			this.__bufferData[3] = uvWidth;
			this.__bufferData[4] = uvHeight;
			this.__bufferData[27] = this.height;
			this.__bufferData[30] = uvHeight;
			this.__bufferData[52] = this.width;
			this.__bufferData[55] = uvWidth;
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				this.__bufferData[26 * i + 5] = alpha;
				if(colorTransform != null) {
					this.__bufferData[26 * i + 6] = colorTransform.redMultiplier;
					this.__bufferData[26 * i + 11] = colorTransform.greenMultiplier;
					this.__bufferData[26 * i + 16] = colorTransform.blueMultiplier;
					this.__bufferData[26 * i + 21] = colorTransform.alphaMultiplier;
					this.__bufferData[26 * i + 22] = colorTransform.redOffset / 255;
					this.__bufferData[26 * i + 23] = colorTransform.greenOffset / 255;
					this.__bufferData[26 * i + 24] = colorTransform.blueOffset / 255;
					this.__bufferData[26 * i + 25] = colorTransform.alphaOffset / 255;
				} else {
					this.__bufferData[26 * i + 6] = 1;
					this.__bufferData[26 * i + 11] = 1;
					this.__bufferData[26 * i + 16] = 1;
					this.__bufferData[26 * i + 21] = 1;
				}
			}
			this.__bufferAlpha = alpha;
			this.__bufferColorTransform = colorTransform != null ? colorTransform.__clone() : null;
			this.__bufferContext = gl;
			this.__buffer = gl.__context.createBuffer();
			gl.__context.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.bufferData(gl,gl.ARRAY_BUFFER,this.__bufferData,gl.STATIC_DRAW);
		} else {
			if(this.__bufferAlpha != alpha) {
				var _g1 = 0;
				while(_g1 < 4) {
					var i1 = _g1++;
					this.__bufferData[26 * i1 + 5] = alpha;
				}
				this.__bufferAlpha = alpha;
			}
			if(this.__bufferColorTransform == null && colorTransform != null || this.__bufferColorTransform != null && !this.__bufferColorTransform.__equals(colorTransform)) {
				if(colorTransform != null) {
					if(this.__bufferColorTransform == null) {
						this.__bufferColorTransform = colorTransform.__clone();
					} else {
						this.__bufferColorTransform.__copyFrom(colorTransform);
					}
					var _g2 = 0;
					while(_g2 < 4) {
						var i2 = _g2++;
						this.__bufferData[26 * i2 + 6] = colorTransform.redMultiplier;
						this.__bufferData[26 * i2 + 11] = colorTransform.greenMultiplier;
						this.__bufferData[26 * i2 + 16] = colorTransform.blueMultiplier;
						this.__bufferData[26 * i2 + 21] = colorTransform.alphaMultiplier;
						this.__bufferData[26 * i2 + 22] = colorTransform.redOffset / 255;
						this.__bufferData[26 * i2 + 23] = colorTransform.greenOffset / 255;
						this.__bufferData[26 * i2 + 24] = colorTransform.blueOffset / 255;
						this.__bufferData[26 * i2 + 25] = colorTransform.alphaOffset / 255;
					}
				} else {
					var _g3 = 0;
					while(_g3 < 4) {
						var i3 = _g3++;
						this.__bufferData[26 * i3 + 6] = 1;
						this.__bufferData[26 * i3 + 11] = 1;
						this.__bufferData[26 * i3 + 16] = 1;
						this.__bufferData[26 * i3 + 21] = 1;
						this.__bufferData[26 * i3 + 22] = 0;
						this.__bufferData[26 * i3 + 23] = 0;
						this.__bufferData[26 * i3 + 24] = 0;
						this.__bufferData[26 * i3 + 25] = 0;
					}
				}
			}
			gl.__context.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			var target = gl.ARRAY_BUFFER;
			var size = this.__bufferData.byteLength;
			var data = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.__bufferData);
			var usage = gl.STATIC_DRAW;
			gl.__context.bufferData(target,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,size),usage);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) {
			findColor = true;
		}
		if(!this.readable) {
			return new openfl_geom_Rectangle(0,0,this.width,this.height);
		}
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >>> 24 & 255) == 0) {
				color1 = 0;
			}
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.readable) {
			return null;
		}
		if(rect == null) {
			rect = this.rect;
		}
		var byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
		byteArray.__endian = 0;
		return byteArray;
	}
	,getSurface: function() {
		if(!this.readable) {
			return null;
		}
		if(this.__surface == null) {
			this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
		}
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__texture == null || this.__textureContext != gl) {
			this.__textureContext = gl;
			this.__texture = gl.__context.createTexture();
			gl.__context.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.__context.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.__context.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.__context.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.__context.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.__textureVersion = -1;
		}
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version != this.__textureVersion) {
			var internalFormat;
			var format;
			if(this.__surface != null) {
				lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
			}
			if(this.image.buffer.bitsPerPixel == 1) {
				internalFormat = gl.ALPHA;
				format = gl.ALPHA;
			} else {
				if(openfl_display_BitmapData.__supportsBGRA == null) {
					openfl_display_BitmapData.__textureInternalFormat = gl.RGBA;
					var bgraExtension = null;
					if(bgraExtension != null) {
						openfl_display_BitmapData.__supportsBGRA = true;
						openfl_display_BitmapData.__textureFormat = bgraExtension.BGRA_EXT;
						if(gl.type == lime_graphics_opengl_GLContextType.GLES) {
							openfl_display_BitmapData.__textureInternalFormat = bgraExtension.BGRA_EXT;
						}
					} else {
						openfl_display_BitmapData.__supportsBGRA = false;
						openfl_display_BitmapData.__textureFormat = gl.RGBA;
					}
				}
				internalFormat = openfl_display_BitmapData.__textureInternalFormat;
				format = openfl_display_BitmapData.__textureFormat;
			}
			gl.__context.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.image;
			if(textureImage.type != lime_graphics_ImageType.DATA && !textureImage.get_premultiplied()) {
				gl.__context.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
			} else if(!textureImage.get_premultiplied() && textureImage.get_transparent()) {
				gl.__context.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
			}
			if(!openfl_display_BitmapData.__supportsBGRA && textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			if(textureImage.type == lime_graphics_ImageType.DATA) {
				var target = gl.TEXTURE_2D;
				var width = textureImage.buffer.width;
				var height = textureImage.buffer.height;
				var type = gl.UNSIGNED_BYTE;
				var data = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(textureImage.get_data());
				gl.__context.texImage2D(target,0,internalFormat,width,height,0,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
			} else {
				lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,textureImage.get_src());
			}
			gl.__context.bindTexture(gl.TEXTURE_2D,null);
			this.__textureVersion = this.image.version;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels) / 4 | 0;
		var result = openfl__$Vector_Vector_$Impl_$.toIntVector(null,length,true);
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			var value = pixels.readUnsignedInt();
			result.data.set(i,value);
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect = hRect != null ? hRect : new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			var _g2 = [];
			var _g3 = 0;
			while(_g3 < 256) {
				var j = _g3++;
				_g2.push(0);
			}
			_g.push(_g2);
		}
		var result = _g;
		var _g21 = 0;
		var _g11 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels);
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) {
			secondAlphaThreshold = 1;
		}
		if(!this.readable) {
			return false;
		}
		if(js_Boot.__instanceof(secondObject,openfl_display_Bitmap)) {
			secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).bitmapData;
		}
		if(js_Boot.__instanceof(secondObject,openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				var pixel = this.getPixel32(x,y);
				if((pixel >> 24 & 255) > firstAlphaThreshold) {
					return true;
				}
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x1;
			var y1;
			if(secondBitmapDataPoint == null) {
				x1 = 0;
				y1 = 0;
			} else {
				x1 = secondBitmapDataPoint.x - firstPoint.x | 0;
				y1 = secondBitmapDataPoint.y - firstPoint.y | 0;
			}
			if(this.rect.contains(x1,y1)) {
				var hitRect = openfl_geom_Rectangle.__pool.get();
				hitRect.setTo(x1,y1,Math.min(secondBitmapData.width,this.width - x1),Math.min(secondBitmapData.height,this.height - y1));
				var pixels = this.getPixels(hitRect);
				hitRect.offset(-x1,-y1);
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel1;
				var testPixel;
				openfl_geom_Rectangle.__pool.release(hitRect);
				var _g1 = 0;
				var _g = length;
				while(_g1 < _g) {
					var i = _g1++;
					pixel1 = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if((pixel1 >> 24 & 255) > firstAlphaThreshold && (testPixel >> 24 & 255) > secondAlphaThreshold) {
						return true;
					}
				}
				return false;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__pool.get();
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels1 = this.getPixels(secondRectangle);
				var length1 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels1) / 4 | 0;
				var pixel2;
				var _g11 = 0;
				var _g2 = length1;
				while(_g11 < _g2) {
					var i1 = _g11++;
					pixel2 = pixels1.readUnsignedInt();
					if((pixel2 >> 24 & 255) > firstAlphaThreshold) {
						openfl_geom_Rectangle.__pool.release(secondRectangle);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(secondRectangle);
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable || sourceRect == null || destPoint == null) {
			return;
		}
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(high == null) {
			high = 255;
		}
		if(low == null) {
			low = 0;
		}
		if(!this.readable) {
			return;
		}
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return (Math.abs(randomSeed / 65536) | 0) % 32768;
		};
		var rand = func;
		rand();
		var range = high - low;
		var this1 = new openfl_utils_ByteArrayData(0);
		var data = this1;
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					blue = low + rand() % range;
					green = blue;
					red = green;
					alpha = 255;
				} else {
					if(redChannel) {
						red = low + rand() % range;
					}
					if(greenChannel) {
						green = low + rand() % range;
					}
					if(blueChannel) {
						blue = low + rand() % range;
					}
					if(alphaChannel) {
						alpha = low + rand() % range;
					}
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = sourceBitmapData.getPixels(sourceRect);
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) {
				a = pixelValue & -16777216;
			} else {
				a = alphaArray[pixelValue >> 24 & 255];
			}
			if(redArray == null) {
				r = pixelValue & 16711680;
			} else {
				r = redArray[pixelValue >> 16 & 255];
			}
			if(greenArray == null) {
				g = pixelValue & 65280;
			} else {
				g = greenArray[pixelValue >> 8 & 255];
			}
			if(blueArray == null) {
				b = pixelValue & 255;
			} else {
				b = blueArray[pixelValue & 255];
			}
			color = a + r + g + b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = openfl_geom_Rectangle.__pool.get();
		destRect.setTo(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
		openfl_geom_Rectangle.__pool.release(destRect);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(!this.readable) {
			return;
		}
		var noise = new openfl__$internal_utils_PerlinNoise(randomSeed,numOctaves,0.01);
		noise.fill(this,baseX,baseY,0);
	}
	,scroll: function(x,y) {
		if(!this.readable) {
			return;
		}
		this.image.scroll(x,y);
	}
	,setPixel: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel(x,y,color,1);
	}
	,setPixel32: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel32(x,y,color,1);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.readable || rect == null) {
			return;
		}
		var length = rect.width * rect.height * 4;
		if(_$UInt_UInt_$Impl_$.toFloat(byteArray.length - byteArray.position) < length) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("End of file was encountered.",2030));
		}
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytePointer(byteArray),1,openfl_utils__$Endian_Endian_$Impl_$.toLimeEndian(byteArray.__endian));
	}
	,setVector: function(rect,inputVector) {
		var this1 = new openfl_utils_ByteArrayData(0);
		var byteArray = this1;
		openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(byteArray,inputVector.data.get_length() * 4);
		var _g = 0;
		while(_g < inputVector.data.get_length()) {
			var color = inputVector.data.get(_g);
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) {
			return 0;
		}
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__applyAlpha: function(alpha) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(this.image);
		var data = this.image.buffer.data;
		var _g1 = 0;
		var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(alpha);
		while(_g1 < _g) {
			var i = _g1++;
			data[i * 4 + 3] = alpha.readUnsignedByte();
		}
		this.image.version++;
	}
	,__draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
			if(source.__transform != null) {
				matrix.copyFrom(source.__transform);
				matrix.tx = 0;
				matrix.ty = 0;
			}
		}
		if(!this.readable) {
			if(lime_graphics_opengl_GL.context != null) {
				var gl = lime_graphics_opengl_GL.context;
				var target = gl.FRAMEBUFFER;
				var framebuffer = this.__getFramebuffer(gl);
				gl.__context.bindFramebuffer(target,framebuffer);
				gl.__context.viewport(0,0,this.width,this.height);
				var renderer = new openfl__$internal_renderer_opengl_GLRenderer(null,gl,this);
				var renderSession = renderer.renderSession;
				renderSession.clearRenderDirty = true;
				renderSession.shaderManager = (js_Boot.__cast(null , openfl__$internal_renderer_opengl_GLRenderer)).renderSession.shaderManager;
				var matrixCache = source.__worldTransform;
				source.__updateTransforms(matrix);
				source.__updateChildren(false);
				source.__renderGL(renderer.renderSession);
				source.__updateTransforms(matrixCache);
				source.__updateChildren(true);
				gl.__context.bindFramebuffer(gl.FRAMEBUFFER,null);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source);
				copy.colorTransform(copy.rect,colorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
			var buffer = this.image.buffer;
			var renderSession1 = new openfl__$internal_renderer_RenderSession();
			renderSession1.clearRenderDirty = true;
			renderSession1.context = buffer.__srcContext;
			renderSession1.allowSmoothing = smoothing;
			renderSession1.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession1);
			renderSession1.blendModeManager = new openfl__$internal_renderer_canvas_CanvasBlendModeManager(renderSession1);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.msImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			if(clipRect != null) {
				renderSession1.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
			}
			var matrixCache1 = source.__worldTransform;
			source.__updateTransforms(matrix);
			source.__updateChildren(false);
			var cacheRenderable = source.__renderable;
			if(source.__isMask) {
				source.__renderable = true;
			}
			var cacheAlpha = source.__worldAlpha;
			source.__worldAlpha = 1;
			source.__renderCanvas(renderSession1);
			source.__renderable = cacheRenderable;
			source.__worldAlpha = cacheAlpha;
			source.__updateTransforms(matrixCache1);
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.msImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			if(clipRect != null) {
				renderSession1.maskManager.popRect();
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			buffer.__srcImageData = null;
			buffer.data = null;
			this.image.dirty = true;
			this.image.version++;
		}
	}
	,__fromBase64: function(base64,type) {
		var image = lime_graphics_Image.fromBase64(base64,type);
		this.__fromImage(image);
	}
	,__fromBytes: function(bytes,rawAlpha) {
		var image = lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
		this.__fromImage(image);
		if(rawAlpha != null) {
			this.__applyAlpha(rawAlpha);
		}
	}
	,__fromFile: function(path) {
		var image = lime_graphics_Image.fromFile(path);
		this.__fromImage(image);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.rect.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getFramebuffer: function(gl) {
		if(this.__framebuffer == null || this.__framebufferContext != gl) {
			this.getTexture(gl);
			this.__framebufferContext = gl;
			this.__framebuffer = gl.__context.createFramebuffer();
			gl.__context.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer);
			gl.__context.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.__texture,0);
		}
		return this.__framebuffer;
	}
	,__loadFromBase64: function(base64,type) {
		var _gthis = this;
		return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__loadFromBytes: function(bytes,rawAlpha) {
		var _gthis = this;
		return lime_graphics_Image.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)).then(function(image) {
			_gthis.__fromImage(image);
			if(rawAlpha != null) {
				_gthis.__applyAlpha(rawAlpha);
			}
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__loadFromFile: function(path) {
		var _gthis = this;
		return lime_graphics_Image.loadFromFile(path).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.readable) {
			return;
		}
		if(this.image.type == lime_graphics_ImageType.DATA) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		}
		var context = renderSession.context;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		context.drawImage(this.image.get_src(),0,0);
	}
	,__renderCanvasMask: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(10);
		var shader = renderSession.shaderManager.defaultShader;
		shader.get_data().uImage0.input = this;
		var tmp = renderSession.allowSmoothing && renderSession.upscaled;
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = renderer.getMatrix(this.__worldTransform);
		renderSession.shaderManager.setShader(shader);
		var target = gl.ARRAY_BUFFER;
		var buffer = this.getBuffer(gl,1,this.__worldColorTransform);
		gl.__context.bindBuffer(target,buffer);
		var index = shader.get_data().aPosition.index;
		var type = gl.FLOAT;
		var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
		gl.__context.vertexAttribPointer(index,3,type,false,24,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
		var index1 = shader.get_data().aTexCoord.index;
		var type1 = gl.FLOAT;
		var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
		gl.__context.vertexAttribPointer(index1,2,type1,false,24,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
		var index2 = shader.get_data().aAlpha.index;
		var type2 = gl.FLOAT;
		var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
		gl.__context.vertexAttribPointer(index2,1,type2,false,24,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset2));
		gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
	,__renderGLMask: function(renderSession) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
		shader.get_data().uImage0.input = this;
		var tmp = renderSession.allowSmoothing && renderSession.upscaled;
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = renderer.getMatrix(this.__worldTransform);
		renderSession.shaderManager.setShader(shader);
		var target = gl.ARRAY_BUFFER;
		var buffer = this.getBuffer(gl,1,this.__worldColorTransform);
		gl.__context.bindBuffer(target,buffer);
		var index = shader.get_data().aPosition.index;
		var type = gl.FLOAT;
		var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
		gl.__context.vertexAttribPointer(index,3,type,false,24,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
		var index1 = shader.get_data().aTexCoord.index;
		var type1 = gl.FLOAT;
		var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
		gl.__context.vertexAttribPointer(index1,2,type1,false,24,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
		gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
	}
	,__sync: function() {
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform = overrideTransform;
		}
	}
	,__class__: openfl_display_BitmapData
};
var openfl_display__$BlendMode_BlendMode_$Impl_$ = {};
$hxClasses["openfl.display._BlendMode.BlendMode_Impl_"] = openfl_display__$BlendMode_BlendMode_$Impl_$;
openfl_display__$BlendMode_BlendMode_$Impl_$.__name__ = ["openfl","display","_BlendMode","BlendMode_Impl_"];
openfl_display__$BlendMode_BlendMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "add":
		return 0;
	case "alpha":
		return 1;
	case "darken":
		return 2;
	case "difference":
		return 3;
	case "erase":
		return 4;
	case "hardlight":
		return 5;
	case "invert":
		return 6;
	case "layer":
		return 7;
	case "lighten":
		return 8;
	case "multiply":
		return 9;
	case "normal":
		return 10;
	case "overlay":
		return 11;
	case "screen":
		return 12;
	case "shader":
		return 13;
	case "subtract":
		return 14;
	default:
		return null;
	}
};
openfl_display__$BlendMode_BlendMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "add";
	case 1:
		return "alpha";
	case 2:
		return "darken";
	case 3:
		return "difference";
	case 4:
		return "erase";
	case 5:
		return "hardlight";
	case 6:
		return "invert";
	case 7:
		return "layer";
	case 8:
		return "lighten";
	case 9:
		return "multiply";
	case 10:
		return "normal";
	case 11:
		return "overlay";
	case 12:
		return "screen";
	case 13:
		return "shader";
	case 14:
		return "subtract";
	default:
		return null;
	}
};
var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = ["openfl","display","_CapsStyle","CapsStyle_Impl_"];
openfl_display__$CapsStyle_CapsStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "round":
		return 1;
	case "square":
		return 2;
	default:
		return null;
	}
};
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_DirectRenderer = function(type) {
	if(type == null) {
		type = "DirectRenderer";
	}
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
openfl_display_DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
openfl_display_DirectRenderer.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__render: null
	,get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl_display_DirectRenderer
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display__$GradientType_GradientType_$Impl_$ = {};
$hxClasses["openfl.display._GradientType.GradientType_Impl_"] = openfl_display__$GradientType_GradientType_$Impl_$;
openfl_display__$GradientType_GradientType_$Impl_$.__name__ = ["openfl","display","_GradientType","GradientType_Impl_"];
openfl_display__$GradientType_GradientType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linear":
		return 0;
	case "radial":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GradientType_GradientType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linear";
	case 1:
		return "radial";
	default:
		return null;
	}
};
var openfl_display_Graphics = function(owner) {
	this.__dirty = true;
	this.__owner = owner;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__width = 0;
	this.__height = 0;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	__bounds: null
	,__commands: null
	,__dirty: null
	,__height: null
	,__managed: null
	,__positionX: null
	,__positionY: null
	,__renderTransform: null
	,__strokePadding: null
	,__transformDirty: null
	,__visible: null
	,__owner: null
	,__width: null
	,__worldTransform: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.beginBitmapFill(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) {
			this.__visible = true;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds != null ? sourceGraphics.__bounds.clone() : null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix1;
		var iy1;
		var ix2;
		var iy2;
		ix1 = anchorX;
		ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) {
				ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			}
			if(t2 > 0 && t2 < 1) {
				ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
			}
		}
		iy1 = anchorY;
		iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) {
				iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			}
			if(t21 > 0 && t21 < 1) {
				iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
			}
		}
		this.__inflateBounds(ix1 - this.__strokePadding,iy1 - this.__strokePadding);
		this.__inflateBounds(ix1 + this.__strokePadding,iy1 + this.__strokePadding);
		this.__inflateBounds(ix2 - this.__strokePadding,iy2 - this.__strokePadding);
		this.__inflateBounds(ix2 + this.__strokePadding,iy2 + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) {
			ix = anchorX;
		} else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) {
			iy = anchorY;
		} else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) {
			return;
		}
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var stroke;
		var path;
		var trianglePath;
		var _g = 0;
		while(_g < graphicsData.data.get_length()) {
			var graphics = graphicsData.data.get(_g);
			++_g;
			var _g1 = graphics.__graphicsDataType;
			switch(_g1) {
			case openfl_display_GraphicsDataType.STROKE:
				stroke = graphics;
				if(stroke.fill != null) {
					var thickness = stroke.thickness;
					if(isNaN(thickness)) {
						thickness = null;
					}
					var _g11 = stroke.fill.__graphicsFillType;
					switch(_g11) {
					case openfl_display_GraphicsFillType.SOLID_FILL:
						fill = stroke.fill;
						this.lineStyle(thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						break;
					case openfl_display_GraphicsFillType.GRADIENT_FILL:
						gradientFill = stroke.fill;
						this.lineStyle(thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
						break;
					case openfl_display_GraphicsFillType.BITMAP_FILL:
						bitmapFill = stroke.fill;
						this.lineStyle(thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
						break;
					default:
					}
				} else {
					this.lineStyle();
				}
				break;
			case openfl_display_GraphicsDataType.SOLID:
				fill = graphics;
				this.beginFill(fill.color,fill.alpha);
				break;
			case openfl_display_GraphicsDataType.GRADIENT:
				gradientFill = graphics;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
				break;
			case openfl_display_GraphicsDataType.PATH:
				path = graphics;
				this.drawPath(path.commands,path.data,path.winding);
				break;
			case openfl_display_GraphicsDataType.BITMAP:
				bitmapFill = graphics;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
				break;
			case openfl_display_GraphicsDataType.END:
				this.endFill();
				break;
			case openfl_display_GraphicsDataType.TRIANGLE_PATH:
				trianglePath = graphics;
				this.drawTriangles(trianglePath.vertices,trianglePath.indices,trianglePath.uvtData,trianglePath.culling);
				break;
			}
		}
	}
	,drawPath: function(commands,data,winding) {
		if(winding == null) {
			winding = 0;
		}
		var dataIndex = 0;
		if(winding == 1) {
			this.__commands.windingNonZero();
		}
		var _g = 0;
		try {
			while(_g < commands.data.get_length()) {
				var command = commands.data.get(_g);
				++_g;
				switch(command) {
				case 1:
					this.moveTo(data.data.get(dataIndex),data.data.get(dataIndex + 1));
					dataIndex += 2;
					break;
				case 2:
					this.lineTo(data.data.get(dataIndex),data.data.get(dataIndex + 1));
					dataIndex += 2;
					break;
				case 3:
					this.curveTo(data.data.get(dataIndex),data.data.get(dataIndex + 1),data.data.get(dataIndex + 2),data.data.get(dataIndex + 3));
					dataIndex += 4;
					break;
				case 4:
					this.moveTo(data.data.get(dataIndex + 2),data.data.get(dataIndex + 3));
					throw "__break__";
					break;
				case 5:
					this.lineTo(data.data.get(dataIndex + 2),data.data.get(dataIndex + 3));
					throw "__break__";
					break;
				case 6:
					this.cubicCurveTo(data.data.get(dataIndex),data.data.get(dataIndex + 1),data.data.get(dataIndex + 2),data.data.get(dataIndex + 3),data.data.get(dataIndex + 4),data.data.get(dataIndex + 5));
					dataIndex += 6;
					break;
				default:
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		var xw = x + width;
		var yh = y + height;
		var minSize = width < height ? width * 2 : height * 2;
		if(topLeftRadius < minSize) {
			topLeftRadius = topLeftRadius;
		} else {
			topLeftRadius = minSize;
		}
		if(topRightRadius < minSize) {
			topRightRadius = topRightRadius;
		} else {
			topRightRadius = minSize;
		}
		if(bottomLeftRadius < minSize) {
			bottomLeftRadius = bottomLeftRadius;
		} else {
			bottomLeftRadius = minSize;
		}
		if(bottomRightRadius < minSize) {
			bottomRightRadius = bottomRightRadius;
		} else {
			bottomRightRadius = minSize;
		}
		var anchor = 1 - Math.sin(45 * (Math.PI / 180));
		var control = 1 - Math.tan(22.5 * (Math.PI / 180));
		var a = bottomRightRadius * anchor;
		var s = bottomRightRadius * control;
		this.moveTo(xw,yh - bottomRightRadius);
		this.curveTo(xw,yh - s,xw - a,yh - a);
		this.curveTo(xw - s,yh,xw - bottomRightRadius,yh);
		a = bottomLeftRadius * anchor;
		s = bottomLeftRadius * control;
		this.lineTo(x + bottomLeftRadius,yh);
		this.curveTo(x + s,yh,x + a,yh - a);
		this.curveTo(x,yh - s,x,yh - bottomLeftRadius);
		a = topLeftRadius * anchor;
		s = topLeftRadius * control;
		this.lineTo(x,y + topLeftRadius);
		this.curveTo(x,y + s,x + a,y + a);
		this.curveTo(x + s,y,x + topLeftRadius,y);
		a = topRightRadius * anchor;
		s = topRightRadius * control;
		this.lineTo(xw - topRightRadius,y);
		this.curveTo(xw - s,y,xw - a,y + a);
		this.curveTo(xw,y + s,xw,y + topRightRadius);
		this.lineTo(xw,yh - bottomRightRadius);
		this.set___dirty(true);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		if(culling == null) {
			culling = 1;
		}
		if(vertices == null) {
			return;
		}
		var vlen = vertices.data.get_length() / 2 | 0;
		if(culling == null) {
			culling = 1;
		}
		if(indices == null) {
			if(vlen % 3 != 0) {
				throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			}
			indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
			var _g1 = 0;
			var _g = vlen;
			while(_g1 < _g) {
				var i = _g1++;
				indices.data.push(i);
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = -Infinity;
		var tmpy = -Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g11 = 0;
		var _g2 = vlen;
		while(_g11 < _g2) {
			var i1 = _g11++;
			tmpx = vertices.data.get(i1 * 2);
			tmpy = vertices.data.get(i1 * 2 + 1);
			if(maxX < tmpx) {
				maxX = tmpx;
			}
			if(maxY < tmpy) {
				maxY = tmpy;
			}
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.lineBitmapStyle(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(scaleMode == null) {
			scaleMode = 2;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) {
					this.__strokePadding = thickness;
				}
			} else if(thickness / 2 > this.__strokePadding) {
				this.__strokePadding = thickness / 2;
			}
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) {
			this.__visible = true;
		}
	}
	,lineTo: function(x,y) {
		if(!isFinite(x) || !isFinite(y)) {
			return;
		}
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,readGraphicsData: function(recurse) {
		if(recurse == null) {
			recurse = true;
		}
		var graphicsData = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this.__owner.__readGraphicsData(graphicsData,recurse);
		return graphicsData;
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__cleanup: function() {
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
		}
		this.__bitmap = null;
		this.__canvas = null;
		this.__context = null;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) {
			return;
		}
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) {
			return false;
		}
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var px = norm == 0 ? -matrix.tx : 1.0 / norm * (matrix.c * (matrix.ty - y) + matrix.d * (x - matrix.tx));
		var norm1 = matrix.a * matrix.d - matrix.b * matrix.c;
		var py = norm1 == 0 ? -matrix.ty : 1.0 / norm1 * (matrix.a * (y - matrix.ty) + matrix.b * (matrix.tx - x));
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) {
				return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			}
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) {
			this.__bounds.width = x - this.__bounds.x;
		}
		if(y > this.__bounds.y + this.__bounds.height) {
			this.__bounds.height = y - this.__bounds.y;
		}
	}
	,__readGraphicsData: function(graphicsData) {
		var data = new openfl__$internal_renderer_DrawCommandReader(this.__commands);
		var path = null;
		var stroke;
		var _g = 0;
		var _g1 = this.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:case 4:case 5:case 6:case 7:case 8:case 15:case 16:
				if(path == null) {
					path = new openfl_display_GraphicsPath();
				}
				break;
			default:
				if(path != null) {
					graphicsData.data.push(path);
					path = null;
				}
			}
			switch(type[1]) {
			case 0:
				var _g2 = data.prev;
				switch(_g2[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				var this1 = data;
				var c = this1;
				var x = new openfl_display_GraphicsBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				graphicsData.data.push(x);
				break;
			case 1:
				var _g3 = data.prev;
				switch(_g3[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				var this2 = data;
				var c1 = this2;
				var x1 = new openfl_display_GraphicsSolidFill(c1.buffer.i[c1.iPos],1);
				graphicsData.data.push(x1);
				break;
			case 2:
				var _g4 = data.prev;
				switch(_g4[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				var this3 = data;
				var c2 = this3;
				var x2 = new openfl_display_GraphicsGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				graphicsData.data.push(x2);
				break;
			case 3:
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this4 = data;
				var c3 = this4;
				path.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 4:
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this5 = data;
				var c4 = this5;
				path.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 5:
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this6 = data;
				var c5 = this6;
				path.__drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 6:
				var _g8 = data.prev;
				switch(_g8[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this7 = data;
				var c6 = this7;
				path.__drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 7:
				var _g9 = data.prev;
				switch(_g9[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this8 = data;
				var c7 = this8;
				path.__drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				var _g10 = data.prev;
				switch(_g10[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this9 = data;
				var c8 = this9;
				path.__drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos] != null ? c8.buffer.o[c8.oPos] : c8.buffer.f[c8.fPos + 4]);
				break;
			case 11:
				var _g11 = data.prev;
				switch(_g11[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				var this10 = data;
				var x3 = new openfl_display_GraphicsEndFill();
				graphicsData.data.push(x3);
				break;
			case 12:
				var _g12 = data.prev;
				switch(_g12[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this11 = data;
				var c9 = this11;
				path = null;
				break;
			case 13:
				var _g13 = data.prev;
				switch(_g13[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this12 = data;
				var c10 = this12;
				break;
			case 14:
				var _g14 = data.prev;
				switch(_g14[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this13 = data;
				var c11 = this13;
				stroke = new openfl_display_GraphicsStroke(c11.buffer.o[c11.oPos],c11.buffer.b[c11.bPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos + 1]);
				stroke.fill = new openfl_display_GraphicsSolidFill(c11.buffer.i[c11.iPos],c11.buffer.f[c11.fPos]);
				graphicsData.data.push(stroke);
				break;
			case 15:
				var _g15 = data.prev;
				switch(_g15[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this14 = data;
				var c12 = this14;
				path.lineTo(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1]);
				break;
			case 16:
				var _g16 = data.prev;
				switch(_g16[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this15 = data;
				var c13 = this15;
				path.moveTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			default:
				var _g17 = data.prev;
				switch(_g17[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = type;
			}
		}
		if(path != null) {
			graphicsData.data.push(path);
		}
	}
	,__update: function() {
		if(this.__bounds == null || this.__bounds.width <= 0 || this.__bounds.height <= 0) {
			return;
		}
		var parentTransform = this.__owner.__renderTransform;
		var scaleX = 1.0;
		var scaleY = 1.0;
		if(parentTransform != null) {
			if(parentTransform.b == 0) {
				scaleX = Math.abs(parentTransform.a);
			} else {
				scaleX = Math.sqrt(parentTransform.a * parentTransform.a + parentTransform.b * parentTransform.b);
			}
			if(parentTransform.c == 0) {
				scaleY = Math.abs(parentTransform.d);
			} else {
				scaleY = Math.sqrt(parentTransform.c * parentTransform.c + parentTransform.d * parentTransform.d);
			}
		} else {
			return;
		}
		var width = this.__bounds.width * scaleX;
		var height = this.__bounds.height * scaleY;
		if(width < 1 || height < 1) {
			if(this.__width >= 1 || this.__height >= 1) {
				this.set___dirty(true);
			}
			this.__width = 0;
			this.__height = 0;
			return;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && width > openfl_display_Graphics.maxTextureWidth) {
			width = openfl_display_Graphics.maxTextureWidth;
			scaleX = openfl_display_Graphics.maxTextureWidth / this.__bounds.width;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && height > openfl_display_Graphics.maxTextureHeight) {
			height = openfl_display_Graphics.maxTextureHeight;
			scaleY = openfl_display_Graphics.maxTextureHeight / this.__bounds.height;
		}
		this.__renderTransform.a = width / this.__bounds.width;
		this.__renderTransform.d = height / this.__bounds.height;
		var inverseA = 1 / this.__renderTransform.a;
		var inverseD = 1 / this.__renderTransform.d;
		this.__worldTransform.a = inverseA * parentTransform.a;
		this.__worldTransform.b = inverseA * parentTransform.b;
		this.__worldTransform.c = inverseD * parentTransform.c;
		this.__worldTransform.d = inverseD * parentTransform.d;
		var x = this.__bounds.x;
		var y = this.__bounds.y;
		var tx = x * parentTransform.a + y * parentTransform.c + parentTransform.tx;
		var ty = x * parentTransform.b + y * parentTransform.d + parentTransform.ty;
		this.__worldTransform.tx = Math.floor(tx);
		this.__worldTransform.ty = Math.floor(ty);
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		this.__renderTransform.tx = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - ty) + _this.d * (tx - _this.tx));
		var _this1 = this.__worldTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		this.__renderTransform.ty = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (ty - _this1.ty) + _this1.b * (_this1.tx - tx));
		var newWidth = Math.ceil(width + this.__renderTransform.tx);
		var newHeight = Math.ceil(height + this.__renderTransform.ty);
		if(newWidth != this.__width || newHeight != this.__height) {
			this.set___dirty(true);
		}
		this.__width = newWidth;
		this.__height = newHeight;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) {
			var _this = this.__owner;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = ["openfl","display","IGraphicsFill"];
openfl_display_IGraphicsFill.prototype = {
	__graphicsFillType: null
	,__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl_display_IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) {
		smooth = false;
	}
	if(repeat == null) {
		repeat = true;
	}
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = openfl_display_GraphicsDataType.BITMAP;
	this.__graphicsFillType = openfl_display_GraphicsFillType.BITMAP_FILL;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = ["openfl","display","GraphicsBitmapFill"];
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	bitmapData: null
	,matrix: null
	,repeat: null
	,smooth: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = function() {
	this.__graphicsDataType = openfl_display_GraphicsDataType.END;
	this.__graphicsFillType = openfl_display_GraphicsFillType.END_FILL;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = ["openfl","display","GraphicsEndFill"];
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) {
		focalPointRatio = 0;
	}
	if(type == null) {
		type = 0;
	}
	if(spreadMethod == null) {
		spreadMethod = 0;
	}
	if(interpolationMethod == null) {
		interpolationMethod = 1;
	}
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = openfl_display_GraphicsDataType.GRADIENT;
	this.__graphicsFillType = openfl_display_GraphicsFillType.GRADIENT_FILL;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = ["openfl","display","GraphicsGradientFill"];
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	alphas: null
	,colors: null
	,focalPointRatio: null
	,interpolationMethod: null
	,matrix: null
	,ratios: null
	,spreadMethod: null
	,type: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = ["openfl","display","IGraphicsPath"];
var openfl_display_GraphicsPath = function(commands,data,winding) {
	if(winding == null) {
		winding = 0;
	}
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = openfl_display_GraphicsDataType.PATH;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = ["openfl","display","GraphicsPath"];
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	commands: null
	,data: null
	,winding: null
	,__graphicsDataType: null
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(6);
		this.data.data.push(controlX1);
		this.data.data.push(controlY1);
		this.data.data.push(controlX2);
		this.data.data.push(controlY2);
		this.data.data.push(anchorX);
		this.data.data.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(3);
		this.data.data.push(controlX);
		this.data.data.push(controlY);
		this.data.data.push(anchorX);
		this.data.data.push(anchorY);
	}
	,lineTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(2);
		this.data.data.push(x);
		this.data.data.push(y);
	}
	,moveTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(1);
		this.data.data.push(x);
		this.data.data.push(y);
	}
	,wideLineTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(2);
		this.data.data.push(x);
		this.data.data.push(y);
	}
	,wideMoveTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(1);
		this.data.data.push(x);
		this.data.data.push(y);
	}
	,__drawCircle: function(x,y,radius) {
		this.__drawRoundRect(x - radius,y - radius,radius * 2,radius * 2,radius * 2,radius * 2);
	}
	,__drawEllipse: function(x,y,width,height) {
		this.__drawRoundRect(x,y,width,height,width,height);
	}
	,__drawRect: function(x,y,width,height) {
		this.moveTo(x,y);
		this.lineTo(x + width,y);
		this.lineTo(x + width,y + height);
		this.lineTo(x,y + height);
		this.lineTo(x,y);
	}
	,__drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		ellipseWidth *= 0.5;
		ellipseHeight *= 0.5;
		if(ellipseWidth > width / 2) {
			ellipseWidth = width / 2;
		}
		if(ellipseHeight > height / 2) {
			ellipseHeight = height / 2;
		}
		var xe = x + width;
		var ye = y + height;
		var cx1 = -ellipseWidth + ellipseWidth * openfl_display_GraphicsPath.SIN45;
		var cx2 = -ellipseWidth + ellipseWidth * openfl_display_GraphicsPath.TAN22;
		var cy1 = -ellipseHeight + ellipseHeight * openfl_display_GraphicsPath.SIN45;
		var cy2 = -ellipseHeight + ellipseHeight * openfl_display_GraphicsPath.TAN22;
		this.moveTo(xe,ye - ellipseHeight);
		this.curveTo(xe,ye + cy2,xe + cx1,ye + cy1);
		this.curveTo(xe + cx2,ye,xe - ellipseWidth,ye);
		this.lineTo(x + ellipseWidth,ye);
		this.curveTo(x - cx2,ye,x - cx1,ye + cy1);
		this.curveTo(x,ye + cy2,x,ye - ellipseHeight);
		this.lineTo(x,y + ellipseHeight);
		this.curveTo(x,y - cy2,x - cx1,y - cy1);
		this.curveTo(x - cx2,y,x + ellipseWidth,y);
		this.lineTo(xe - ellipseWidth,y);
		this.curveTo(xe + cx2,y,xe + cx1,y - cy1);
		this.curveTo(xe,y - cy2,xe,y + ellipseHeight);
		this.lineTo(xe,ye - ellipseHeight);
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$ = {};
$hxClasses["openfl.display._GraphicsPathWinding.GraphicsPathWinding_Impl_"] = openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.__name__ = ["openfl","display","_GraphicsPathWinding","GraphicsPathWinding_Impl_"];
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.fromString = function(value) {
	switch(value) {
	case "evenOdd":
		return 0;
	case "nonZero":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "evenOdd";
	case 1:
		return "nonZero";
	default:
		return null;
	}
};
var openfl_display_GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = openfl_display_GraphicsDataType.SOLID;
	this.__graphicsFillType = openfl_display_GraphicsFillType.SOLID_FILL;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = ["openfl","display","GraphicsSolidFill"];
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	alpha: null
	,color: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = ["openfl","display","IGraphicsStroke"];
var openfl_display_GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) {
		miterLimit = 3;
	}
	if(joints == null) {
		joints = 2;
	}
	if(caps == null) {
		caps = 0;
	}
	if(scaleMode == null) {
		scaleMode = 2;
	}
	if(pixelHinting == null) {
		pixelHinting = false;
	}
	if(thickness == null) {
		thickness = NaN;
	}
	this.caps = caps;
	this.fill = fill;
	this.joints = joints;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	this.scaleMode = scaleMode;
	this.thickness = thickness;
	this.__graphicsDataType = openfl_display_GraphicsDataType.STROKE;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = ["openfl","display","GraphicsStroke"];
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	caps: null
	,fill: null
	,joints: null
	,miterLimit: null
	,pixelHinting: null
	,scaleMode: null
	,thickness: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsTrianglePath = function(vertices,indices,uvtData,culling) {
	if(culling == null) {
		culling = 1;
	}
	this.vertices = vertices;
	this.indices = indices;
	this.uvtData = uvtData;
	this.culling = culling;
	this.__graphicsDataType = openfl_display_GraphicsDataType.TRIANGLE_PATH;
};
$hxClasses["openfl.display.GraphicsTrianglePath"] = openfl_display_GraphicsTrianglePath;
openfl_display_GraphicsTrianglePath.__name__ = ["openfl","display","GraphicsTrianglePath"];
openfl_display_GraphicsTrianglePath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsTrianglePath.prototype = {
	culling: null
	,indices: null
	,uvtData: null
	,vertices: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsTrianglePath
};
var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : ["openfl","display","GraphicsDataType"], __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END","TRIANGLE_PATH"] };
openfl_display_GraphicsDataType.STROKE = ["STROKE",0];
openfl_display_GraphicsDataType.STROKE.toString = $estr;
openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.SOLID = ["SOLID",1];
openfl_display_GraphicsDataType.SOLID.toString = $estr;
openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.PATH = ["PATH",3];
openfl_display_GraphicsDataType.PATH.toString = $estr;
openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.BITMAP = ["BITMAP",4];
openfl_display_GraphicsDataType.BITMAP.toString = $estr;
openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.END = ["END",5];
openfl_display_GraphicsDataType.END.toString = $estr;
openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.TRIANGLE_PATH = ["TRIANGLE_PATH",6];
openfl_display_GraphicsDataType.TRIANGLE_PATH.toString = $estr;
openfl_display_GraphicsDataType.TRIANGLE_PATH.__enum__ = openfl_display_GraphicsDataType;
var openfl_display_GraphicsFillType = $hxClasses["openfl.display.GraphicsFillType"] = { __ename__ : ["openfl","display","GraphicsFillType"], __constructs__ : ["SOLID_FILL","GRADIENT_FILL","BITMAP_FILL","END_FILL"] };
openfl_display_GraphicsFillType.SOLID_FILL = ["SOLID_FILL",0];
openfl_display_GraphicsFillType.SOLID_FILL.toString = $estr;
openfl_display_GraphicsFillType.SOLID_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL",1];
openfl_display_GraphicsFillType.GRADIENT_FILL.toString = $estr;
openfl_display_GraphicsFillType.GRADIENT_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL",2];
openfl_display_GraphicsFillType.BITMAP_FILL.toString = $estr;
openfl_display_GraphicsFillType.BITMAP_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.END_FILL = ["END_FILL",3];
openfl_display_GraphicsFillType.END_FILL.toString = $estr;
openfl_display_GraphicsFillType.END_FILL.__enum__ = openfl_display_GraphicsFillType;
var openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$ = {};
$hxClasses["openfl.display._InterpolationMethod.InterpolationMethod_Impl_"] = openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.__name__ = ["openfl","display","_InterpolationMethod","InterpolationMethod_Impl_"];
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linearRGB":
		return 0;
	case "rgb":
		return 1;
	default:
		return null;
	}
};
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linearRGB";
	case 1:
		return "rgb";
	default:
		return null;
	}
};
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) {
		quality = 80;
	}
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl_display_JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display__$JointStyle_JointStyle_$Impl_$ = {};
$hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl_display__$JointStyle_JointStyle_$Impl_$;
openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = ["openfl","display","_JointStyle","JointStyle_Impl_"];
openfl_display__$JointStyle_JointStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bevel":
		return 0;
	case "miter":
		return 1;
	case "round":
		return 2;
	default:
		return null;
	}
};
openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display__$LineScaleMode_LineScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._LineScaleMode.LineScaleMode_Impl_"] = openfl_display__$LineScaleMode_LineScaleMode_$Impl_$;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.__name__ = ["openfl","display","_LineScaleMode","LineScaleMode_Impl_"];
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "horizontal":
		return 0;
	case "none":
		return 1;
	case "normal":
		return 2;
	case "vertical":
		return 3;
	default:
		return null;
	}
};
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "horizontal";
	case 1:
		return "none";
	case 2:
		return "normal";
	case 3:
		return "vertical";
	default:
		return null;
	}
};
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
	this.uncaughtErrorEvents = this.contentLoaderInfo.uncaughtErrorEvents;
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	content: null
	,contentLoaderInfo: null
	,uncaughtErrorEvents: null
	,__library: null
	,__path: null
	,__unloaded: null
	,close: function() {
		openfl__$internal_Lib.notImplemented({ fileName : "Loader.hx", lineNumber : 59, className : "openfl.display.Loader", methodName : "close"});
	}
	,load: function(request,context) {
		this.contentLoaderInfo.loaderURL = openfl_Lib.get_current().get_loaderInfo().url;
		this.contentLoaderInfo.url = request.url;
		this.__unloaded = false;
		if(request.contentType == null || request.contentType == "") {
			var extension = "";
			this.__path = request.url;
			var queryIndex = this.__path.indexOf("?");
			if(queryIndex > -1) {
				this.__path = this.__path.substring(0,queryIndex);
			}
			while(StringTools.endsWith(this.__path,"/")) this.__path = this.__path.substring(0,this.__path.length - 1);
			if(StringTools.endsWith(this.__path,".bundle")) {
				this.__path += "/library.json";
				if(queryIndex > -1) {
					request.url = this.__path + request.url.substring(queryIndex);
				} else {
					request.url = this.__path;
				}
			}
			var extIndex = this.__path.lastIndexOf(".");
			if(extIndex > -1) {
				extension = this.__path.substring(extIndex + 1);
			}
			var tmp;
			switch(extension) {
			case "gif":
				tmp = "image/gif";
				break;
			case "jpeg":case "jpg":
				tmp = "image/jpeg";
				break;
			case "js":
				tmp = "application/javascript";
				break;
			case "json":
				tmp = "application/json";
				break;
			case "png":
				tmp = "image/png";
				break;
			case "swf":
				tmp = "application/x-shockwave-flash";
				break;
			default:
				tmp = "application/x-www-form-urlencoded";
			}
			this.contentLoaderInfo.contentType = tmp;
		} else {
			this.contentLoaderInfo.contentType = request.contentType;
		}
		if(this.contentLoaderInfo.contentType.indexOf("image/") > -1 && request.method == "GET" && (request.requestHeaders == null || request.requestHeaders.length == 0) && request.userAgent == null) {
			openfl_display_BitmapData.loadFromFile(request.url).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError)).onProgress($bind(this,this.BitmapData_onProgress));
			return;
		}
		var loader = new openfl_net_URLLoader();
		loader.dataFormat = 0;
		if(this.contentLoaderInfo.contentType.indexOf("/json") > -1 || this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1) {
			loader.dataFormat = 1;
		}
		loader.addEventListener("complete",$bind(this,this.loader_onComplete));
		loader.addEventListener("ioError",$bind(this,this.loader_onError));
		loader.addEventListener("progress",$bind(this,this.loader_onProgress));
		loader.load(request);
	}
	,loadBytes: function(buffer,context) {
		openfl_display_BitmapData.loadFromBytes(buffer).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError));
	}
	,unload: function() {
		if(!this.__unloaded) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			if(this.__library != null) {
				openfl_utils_Assets.unloadLibrary(this.contentLoaderInfo.url);
				this.__library = null;
			}
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			this.__unloaded = true;
			this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("unload"));
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) {
			gc = true;
		}
		if(this.content != null) {
			this.content.__stopAllMovieClips();
		}
		var _g1 = 0;
		var _g = this.get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			this.getChildAt(i).__stopAllMovieClips();
		}
		this.unload();
		var gc1 = gc;
	}
	,__dispatchError: function(text) {
		var event = new openfl_events_IOErrorEvent("ioError");
		event.text = text;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function(error) {
		this.__dispatchError(Std.string(error));
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.content = new openfl_display_Bitmap(bitmapData);
		this.contentLoaderInfo.content = this.content;
		this.addChild(this.content);
		this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
	}
	,BitmapData_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,loader_onComplete: function(event) {
		var _gthis = this;
		var loader = event.target;
		if(this.contentLoaderInfo.contentType != null && this.contentLoaderInfo.contentType.indexOf("/json") > -1) {
			var manifest = lime_utils_AssetManifest.parse(loader.data,haxe_io_Path.directory(this.__path));
			if(manifest == null) {
				this.__dispatchError("Cannot parse asset manifest");
				return;
			}
			var library = lime_utils_AssetLibrary.fromManifest(manifest);
			if(library == null) {
				this.__dispatchError("Cannot open library");
				return;
			}
			if(js_Boot.__instanceof(library,openfl_utils_AssetLibrary)) {
				library.load().onComplete(function(_) {
					_gthis.__library = library;
					openfl_utils_Assets.registerLibrary(_gthis.contentLoaderInfo.url,_gthis.__library);
					if(manifest.name != null && !openfl_utils_Assets.hasLibrary(manifest.name)) {
						openfl_utils_Assets.registerLibrary(manifest.name,_gthis.__library);
					}
					_gthis.content = _gthis.__library.getMovieClip("");
					_gthis.contentLoaderInfo.content = _gthis.content;
					_gthis.addChild(_gthis.content);
					_gthis.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
				}).onError(function(e) {
					_gthis.__dispatchError(e);
				});
			}
		} else if(this.contentLoaderInfo.contentType != null && (this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1)) {
			this.content = new openfl_display_Sprite();
			this.contentLoaderInfo.content = this.content;
			this.addChild(this.content);
			eval("(function () {" + Std.string(loader.data) + "})()");
			this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
		} else {
			openfl_display_BitmapData.loadFromBytes(loader.data).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError));
		}
	}
	,loader_onError: function(event) {
		event.target = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,loader_onProgress: function(event) {
		event.target = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) {
		loaderInfo.loader = loader;
	} else {
		loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	}
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__completed: null
	,__complete: function() {
		if(!this.__completed) {
			if(this.bytesLoaded < this.bytesTotal) {
				this.bytesLoaded = this.bytesTotal;
			}
			this.__update(this.bytesLoaded,this.bytesTotal);
			this.__completed = true;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__update: function(bytesLoaded,bytesTotal) {
		this.bytesLoaded = bytesLoaded;
		this.bytesTotal = bytesTotal;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,bytesLoaded,bytesTotal));
	}
	,__class__: openfl_display_LoaderInfo
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 1;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
	if(openfl_display_MovieClip.__initSymbol != null) {
		this.__swf = openfl_display_MovieClip.__initSWF;
		this.__symbol = openfl_display_MovieClip.__initSymbol;
		openfl_display_MovieClip.__initSWF = null;
		openfl_display_MovieClip.__initSymbol = null;
		this.__fromSymbol(this.__swf,this.__symbol);
	}
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	enabled: null
	,__activeInstances: null
	,__activeInstancesByFrameObjectID: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__frameScripts: null
	,__frameTime: null
	,__lastFrameScriptEval: null
	,__lastFrameUpdate: null
	,__playing: null
	,__swf: null
	,__symbol: null
	,__timeElapsed: null
	,__totalFrames: null
	,addFrameScript: function(index,method) {
		if(index < 0) {
			return;
		}
		var frame = index + 1;
		if(method != null) {
			if(this.__frameScripts == null) {
				this.__frameScripts = new haxe_ds_IntMap();
			}
			this.__frameScripts.h[frame] = method;
		} else if(this.__frameScripts != null) {
			this.__frameScripts.remove(frame);
		}
	}
	,gotoAndPlay: function(frame,scene) {
		this.play();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,gotoAndStop: function(frame,scene) {
		this.stop();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,nextFrame: function() {
		this.stop();
		this.__goto(this.__currentFrame + 1);
	}
	,play: function() {
		if(this.__symbol == null || this.__playing || this.__totalFrames < 2) {
			return;
		}
		this.__playing = true;
		this.__frameTime = 1000 / this.__swf.frameRate | 0;
		this.__timeElapsed = 0;
	}
	,prevFrame: function() {
		this.stop();
		this.__goto(this.__currentFrame - 1);
	}
	,stop: function() {
		this.__playing = false;
	}
	,__enterFrame: function(deltaTime) {
		if(this.__symbol != null && this.__playing) {
			var nextFrame = this.__getNextFrame(deltaTime);
			if(this.__lastFrameScriptEval == nextFrame) {
				return;
			}
			if(this.__frameScripts != null) {
				if(nextFrame < this.__currentFrame) {
					if(!this.__evaluateFrameScripts(this.__totalFrames)) {
						return;
					}
					this.__currentFrame = 1;
				}
				if(!this.__evaluateFrameScripts(nextFrame)) {
					return;
				}
			} else {
				this.__currentFrame = nextFrame;
			}
		}
		if(this.__symbol != null && this.__currentFrame != this.__lastFrameUpdate) {
			this.__updateFrameLabel();
			var currentInstancesByFrameObjectID = new haxe_ds_IntMap();
			var frame;
			var frameData;
			var instance;
			var _g1 = 0;
			var _g = this.__currentFrame;
			while(_g1 < _g) {
				var i = _g1++;
				frame = i + 1;
				frameData = this.__symbol.frames[i];
				if(frameData.objects == null) {
					continue;
				}
				var _g2 = 0;
				var _g3 = frameData.objects;
				while(_g2 < _g3.length) {
					var frameObject = _g3[_g2];
					++_g2;
					var _g4 = frameObject.type;
					switch(_g4[1]) {
					case 0:
						instance = this.__activeInstancesByFrameObjectID.get(frameObject.id);
						if(instance != null) {
							currentInstancesByFrameObjectID.h[frameObject.id] = instance;
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
						break;
					case 1:
						instance = currentInstancesByFrameObjectID.h[frameObject.id];
						if(instance != null && instance.displayObject != null) {
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
						break;
					case 2:
						currentInstancesByFrameObjectID.remove(frameObject.id);
						break;
					}
				}
			}
			var currentInstances = [];
			var currentMasks = [];
			var instance1 = currentInstancesByFrameObjectID.iterator();
			while(instance1.hasNext()) {
				var instance2 = instance1.next();
				if(currentInstances.indexOf(instance2) == -1) {
					if(instance2.clipDepth > 0) {
						currentMasks.push(instance2);
					} else {
						currentInstances.push(instance2);
					}
				}
			}
			currentInstances.sort($bind(this,this.__sortDepths));
			var existingChild;
			var targetDepth;
			var targetChild;
			var child;
			var maskApplied;
			var _g11 = 0;
			var _g5 = currentInstances.length;
			while(_g11 < _g5) {
				var i1 = _g11++;
				existingChild = this.__children[i1];
				instance = currentInstances[i1];
				targetDepth = instance.depth;
				targetChild = instance.displayObject;
				if(existingChild != targetChild) {
					child = targetChild;
					this.addChildAt(targetChild,i1);
				} else {
					child = this.__children[i1];
				}
				maskApplied = false;
				var _g21 = 0;
				while(_g21 < currentMasks.length) {
					var mask = currentMasks[_g21];
					++_g21;
					if(targetDepth > mask.depth && targetDepth <= mask.clipDepth) {
						child.set_mask(mask.displayObject);
						maskApplied = true;
						break;
					}
				}
				if(currentMasks.length > 0 && !maskApplied && child.get_mask() != null) {
					child.set_mask(null);
				}
			}
			var child1;
			var i2 = currentInstances.length;
			var length = this.__children.length;
			while(i2 < length) {
				child1 = this.__children[i2];
				var _g6 = 0;
				var _g12 = this.__activeInstances;
				while(_g6 < _g12.length) {
					var instance3 = _g12[_g6];
					++_g6;
					if(instance3.displayObject == child1) {
						this.removeChild(child1);
						--i2;
						--length;
					}
				}
				++i2;
			}
			this.__lastFrameUpdate = this.__currentFrame;
		}
		openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
	}
	,__evaluateFrameScripts: function(advanceToFrame) {
		var _g1 = this.__currentFrame;
		var _g = advanceToFrame + 1;
		while(_g1 < _g) {
			var frame = _g1++;
			if(frame == this.__lastFrameScriptEval) {
				continue;
			}
			this.__lastFrameScriptEval = frame;
			this.__currentFrame = frame;
			if(this.__frameScripts.h.hasOwnProperty(frame)) {
				var script = this.__frameScripts.h[frame];
				script();
				if(this.__currentFrame != frame) {
					return false;
				}
			}
			if(!this.__playing) {
				break;
			}
		}
		return true;
	}
	,__fromSymbol: function(swf,symbol) {
		var _gthis = this;
		if(this.__activeInstances != null) {
			return;
		}
		this.__swf = swf;
		this.__symbol = symbol;
		this.__activeInstances = [];
		this.__activeInstancesByFrameObjectID = new haxe_ds_IntMap();
		this.__currentFrame = 1;
		this.__lastFrameScriptEval = -1;
		this.__lastFrameUpdate = -1;
		this.__totalFrames = this.__symbol.frames.length;
		var frame;
		var frameData;
		var _g1 = 0;
		var _g = this.__symbol.frames.length;
		while(_g1 < _g) {
			var i = _g1++;
			frame = i + 1;
			frameData = this.__symbol.frames[i];
			if(frameData.label != null) {
				this.__currentLabels.push(new openfl_display_FrameLabel(frameData.label,i + 1));
			}
			if(frameData.script != null) {
				if(this.__frameScripts == null) {
					this.__frameScripts = new haxe_ds_IntMap();
				}
				this.__frameScripts.h[frame] = frameData.script;
			} else if(frameData.scriptSource != null) {
				if(this.__frameScripts == null) {
					this.__frameScripts = new haxe_ds_IntMap();
				}
				try {
					var script = [eval("(function(){" + frameData.scriptSource + "})")];
					var wrapper = (function(script1) {
						return function() {
							try {
								script1[0].call(_gthis);
							} catch( e ) {
								haxe_CallStack.lastException = e;
								if (e instanceof js__$Boot_HaxeError) e = e.val;
								haxe_Log.trace("Error evaluating frame script\n " + Std.string(e) + "\n" + haxe_CallStack.exceptionStack().map((function() {
									return function(a) {
										return a[2];
									};
								})()).join("\n") + "\n" + Std.string(e.stack) + "\n" + script1[0].toString(),{ fileName : "MovieClip.hx", lineNumber : 488, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
							}
						};
					})(script);
					this.__frameScripts.h[frame] = wrapper;
				} catch( e1 ) {
					haxe_CallStack.lastException = e1;
					if(this.__symbol.className != null) {
						lime_utils_Log.warn("Unable to evaluate frame script source for symbol \"" + this.__symbol.className + "\" frame " + frame + "\n" + frameData.scriptSource,{ fileName : "MovieClip.hx", lineNumber : 504, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
					} else {
						lime_utils_Log.warn("Unable to evaluate frame script source:\n" + frameData.scriptSource,{ fileName : "MovieClip.hx", lineNumber : 508, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
					}
				}
			}
		}
		var frame1;
		var frameData1;
		var instance;
		var duplicate;
		var symbol1;
		var displayObject;
		var _g11 = 0;
		var _g2 = this.__totalFrames;
		while(_g11 < _g2) {
			var i1 = _g11++;
			frame1 = i1 + 1;
			frameData1 = this.__symbol.frames[i1];
			if(frameData1.objects == null) {
				continue;
			}
			var _g21 = 0;
			var _g3 = frameData1.objects;
			while(_g21 < _g3.length) {
				var frameObject = _g3[_g21];
				++_g21;
				if(frameObject.type == openfl__$internal_timeline_FrameObjectType.CREATE) {
					if(this.__activeInstancesByFrameObjectID.h.hasOwnProperty(frameObject.id)) {
						continue;
					} else {
						instance = null;
						duplicate = false;
						var _g4 = 0;
						var _g5 = this.__activeInstances;
						while(_g4 < _g5.length) {
							var activeInstance = _g5[_g4];
							++_g4;
							if(activeInstance.displayObject != null && activeInstance.characterID == frameObject.symbol && activeInstance.depth == frameObject.depth) {
								instance = activeInstance;
								duplicate = true;
								break;
							}
						}
					}
					if(instance == null) {
						symbol1 = this.__swf.symbols.h[frameObject.symbol];
						if(symbol1 != null) {
							displayObject = symbol1.__createObject(this.__swf);
							if(displayObject != null) {
								displayObject.parent = this;
								displayObject.stage = this.stage;
								instance = new openfl_display__$MovieClip_FrameSymbolInstance(frame1,frameObject.id,frameObject.symbol,frameObject.depth,displayObject,frameObject.clipDepth);
							}
						}
					}
					if(instance != null) {
						this.__activeInstancesByFrameObjectID.h[frameObject.id] = instance;
						if(!duplicate) {
							this.__activeInstances.push(instance);
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
					}
				}
			}
		}
		if(this.__totalFrames > 1) {
			this.play();
		}
		this.__enterFrame(0);
		var _g6 = 0;
		var _g12 = Type.getInstanceFields(js_Boot.getClass(this));
		while(_g6 < _g12.length) {
			var field = _g12[_g6];
			++_g6;
			var _g22 = 0;
			var _g31 = this.__children;
			while(_g22 < _g31.length) {
				var child = _g31[_g22];
				++_g22;
				if(child.get_name() == field) {
					this[field] = child;
				}
			}
		}
	}
	,__getNextFrame: function(deltaTime) {
		this.__timeElapsed += deltaTime;
		var nextFrame = this.__currentFrame + Math.floor(this.__timeElapsed / this.__frameTime);
		if(nextFrame < 1) {
			nextFrame = 1;
		}
		if(nextFrame > this.__totalFrames) {
			nextFrame = Math.floor((nextFrame - 1) % this.__totalFrames) + 1;
		}
		this.__timeElapsed %= this.__frameTime;
		return nextFrame;
	}
	,__goto: function(frame) {
		if(this.__symbol == null) {
			return;
		}
		if(frame < 1) {
			frame = 1;
		} else if(frame > this.__totalFrames) {
			frame = this.__totalFrames;
		}
		this.__currentFrame = frame;
		this.__enterFrame(0);
	}
	,__resolveFrameReference: function(frame) {
		if(typeof(frame) == "number" && ((frame | 0) === frame)) {
			return frame;
		} else if(typeof(frame) == "string") {
			var label = frame;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var frameLabel = _g1[_g];
				++_g;
				if(frameLabel.get_name() == label) {
					return frameLabel.get_frame();
				}
			}
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Error #2109: Frame label " + label + " not found in scene."));
		} else {
			throw new js__$Boot_HaxeError("Invalid type for frame " + Type.getClassName(frame));
		}
	}
	,__sortDepths: function(a,b) {
		return a.depth - b.depth;
	}
	,__stopAllMovieClips: function() {
		openfl_display_Sprite.prototype.__stopAllMovieClips.call(this);
		this.stop();
	}
	,__updateDisplayObject: function(displayObject,frameObject) {
		if(displayObject == null) {
			return;
		}
		if(frameObject.name != null) {
			displayObject.set_name(frameObject.name);
		}
		if(frameObject.matrix != null) {
			displayObject.get_transform().set_matrix(frameObject.matrix);
		}
		if(frameObject.colorTransform != null) {
			displayObject.get_transform().set_colorTransform(frameObject.colorTransform);
		}
		if(frameObject.filters != null) {
			var filters = [];
			var _g = 0;
			var _g1 = frameObject.filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				switch(filter[1]) {
				case 0:
					var quality = filter[4];
					var blurY = filter[3];
					var blurX = filter[2];
					filters.push(new openfl_filters_BlurFilter(blurX,blurY,quality));
					break;
				case 1:
					var matrix = filter[2];
					filters.push(new openfl_filters_ColorMatrixFilter(matrix));
					break;
				case 2:
					var hideObject = filter[12];
					var knockout = filter[11];
					var inner = filter[10];
					var quality1 = filter[9];
					var strength = filter[8];
					var blurY1 = filter[7];
					var blurX1 = filter[6];
					var alpha = filter[5];
					var color = filter[4];
					var angle = filter[3];
					var distance = filter[2];
					filters.push(new openfl_filters_DropShadowFilter(distance,angle,color,alpha,blurX1,blurY1,strength,quality1,inner,knockout,hideObject));
					break;
				case 3:
					var knockout1 = filter[9];
					var inner1 = filter[8];
					var quality2 = filter[7];
					var strength1 = filter[6];
					var blurY2 = filter[5];
					var blurX2 = filter[4];
					var alpha1 = filter[3];
					var color1 = filter[2];
					filters.push(new openfl_filters_GlowFilter(color1,alpha1,blurX2,blurY2,strength1,quality2,inner1,knockout1));
					break;
				}
			}
			displayObject.set_filters(filters);
		} else {
			displayObject.set_filters(null);
		}
		if(frameObject.visible != null) {
			displayObject.set_visible(frameObject.visible);
		}
		if(frameObject.blendMode != null) {
			displayObject.set_blendMode(frameObject.blendMode);
		}
		var tmp = frameObject.cacheAsBitmap != null;
	}
	,__updateFrameLabel: function() {
		this.__currentFrameLabel = this.__symbol.frames[this.__currentFrame - 1].label;
		if(this.__currentFrameLabel != null) {
			this.__currentLabel = this.__currentFrameLabel;
		} else {
			this.__currentLabel = null;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var label = _g1[_g];
				++_g;
				if(label.get_frame() < this.__currentFrame) {
					this.__currentLabel = label.get_name();
				} else {
					break;
				}
			}
		}
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_isPlaying: function() {
		return this.__playing;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_isPlaying:"get_isPlaying",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var openfl_display__$MovieClip_FrameSymbolInstance = function(initFrame,initFrameObjectID,characterID,depth,displayObject,clipDepth) {
	this.initFrame = initFrame;
	this.initFrameObjectID = initFrameObjectID;
	this.characterID = characterID;
	this.depth = depth;
	this.displayObject = displayObject;
	this.clipDepth = clipDepth;
};
$hxClasses["openfl.display._MovieClip.FrameSymbolInstance"] = openfl_display__$MovieClip_FrameSymbolInstance;
openfl_display__$MovieClip_FrameSymbolInstance.__name__ = ["openfl","display","_MovieClip","FrameSymbolInstance"];
openfl_display__$MovieClip_FrameSymbolInstance.prototype = {
	characterID: null
	,clipDepth: null
	,depth: null
	,displayObject: null
	,initFrame: null
	,initFrameObjectID: null
	,__class__: openfl_display__$MovieClip_FrameSymbolInstance
};
var openfl_display_OpenGLView = function() {
	openfl_display_DirectRenderer.call(this,"OpenGLView");
};
$hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
openfl_display_OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl_display_OpenGLView.__properties__ = {get_isSupported:"get_isSupported"};
openfl_display_OpenGLView.get_isSupported = function() {
	if(!window.WebGLRenderingContext) {
		return false;
	}
	if(lime_graphics_opengl_GL.context != null) {
		return true;
	} else {
		var canvas = window.document.createElement("canvas");
		var context = canvas.getContext("webgl");
		if(context == null) {
			context = canvas.getContext("experimental-webgl");
		}
		return context != null;
	}
};
openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
openfl_display_OpenGLView.prototype = $extend(openfl_display_DirectRenderer.prototype,{
	__added: null
	,__initialized: null
	,__enterFrame: function(deltaTime) {
		if(this.__render != null) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.__scrollRect == null) {
					rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight);
				} else {
					rect = new openfl_geom_Rectangle(this.get_x() + this.__scrollRect.x,this.get_y() + this.__scrollRect.y,this.__scrollRect.width,this.__scrollRect.height);
				}
				if(this.__render != null) {
					this.__render(rect);
				}
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.__scrollRect == null) {
				rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight);
			} else {
				rect = new openfl_geom_Rectangle(this.get_x() + this.__scrollRect.x,this.get_y() + this.__scrollRect.y,this.__scrollRect.width,this.__scrollRect.height);
			}
			renderSession.shaderManager.setShader(null);
			renderSession.blendModeManager.setBlendMode(null);
			if(this.__render != null) {
				this.__render(rect);
			}
		}
	}
	,__renderGLMask: function(renderSession) {
	}
	,__class__: openfl_display_OpenGLView
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) {
		fastCompression = false;
	}
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl_display_PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl_display_PNGEncoderOptions
};
var openfl_display__$PixelSnapping_PixelSnapping_$Impl_$ = {};
$hxClasses["openfl.display._PixelSnapping.PixelSnapping_Impl_"] = openfl_display__$PixelSnapping_PixelSnapping_$Impl_$;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.__name__ = ["openfl","display","_PixelSnapping","PixelSnapping_Impl_"];
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "auto":
		return 1;
	case "never":
		return 2;
	default:
		return null;
	}
};
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "auto";
	case 2:
		return "never";
	default:
		return null;
	}
};
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	this.display = display;
	if(display != null) {
		display.addEventListener("unload",$bind(this,this.display_onUnload));
		openfl_Lib.get_current().addChild(display);
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	display: null
	,ready: null
	,start: function() {
		if(this.simulateProgress) {
			return;
		}
		this.ready = true;
		openfl_Lib.get_current().get_loaderInfo().__complete();
		if(this.display != null) {
			var complete = new openfl_events_Event("complete",true,true);
			this.display.dispatchEvent(complete);
			if(!complete.isDefaultPrevented()) {
				this.display.dispatchEvent(new openfl_events_Event("unload"));
			}
		} else {
			lime_app_Preloader.prototype.start.call(this);
		}
	}
	,update: function(loaded,total) {
		openfl_Lib.get_current().get_loaderInfo().__update(loaded,total);
		if(this.display != null) {
			this.display.dispatchEvent(new openfl_events_ProgressEvent("progress",true,true,loaded,total));
		}
	}
	,display_onUnload: function(event) {
		if(this.display != null) {
			this.display.removeEventListener("unload",$bind(this,this.display_onUnload));
			if(this.display.parent == openfl_Lib.get_current()) {
				openfl_Lib.get_current().removeChild(this.display);
			}
			openfl_Lib.get_current().stage.set_focus(null);
			this.display = null;
		}
		if(this.ready && !this.simulateProgress) {
			lime_app_Preloader.prototype.start.call(this);
		}
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_ShaderData = function(byteArray) {
};
$hxClasses["openfl.display.ShaderData"] = openfl_display_ShaderData;
openfl_display_ShaderData.__name__ = ["openfl","display","ShaderData"];
openfl_display_ShaderData.prototype = {
	aAlpha: null
	,aPosition: null
	,aTexCoord: null
	,uImage0: null
	,uMatrix: null
	,__class__: openfl_display_ShaderData
};
var openfl_display_ShaderInput = function() {
	this.channels = 0;
	this.height = 0;
	this.index = 0;
	this.width = 0;
};
$hxClasses["openfl.display.ShaderInput"] = openfl_display_ShaderInput;
openfl_display_ShaderInput.__name__ = ["openfl","display","ShaderInput"];
openfl_display_ShaderInput.prototype = {
	channels: null
	,height: null
	,index: null
	,input: null
	,name: null
	,smoothing: null
	,width: null
	,__class__: openfl_display_ShaderInput
};
var openfl_display_ShaderParameter = function() {
	this.index = 0;
};
$hxClasses["openfl.display.ShaderParameter"] = openfl_display_ShaderParameter;
openfl_display_ShaderParameter.__name__ = ["openfl","display","ShaderParameter"];
openfl_display_ShaderParameter.prototype = {
	index: null
	,name: null
	,type: null
	,value: null
	,__class__: openfl_display_ShaderParameter
};
var openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$ = {};
$hxClasses["openfl.display._ShaderParameterType.ShaderParameterType_Impl_"] = openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.__name__ = ["openfl","display","_ShaderParameterType","ShaderParameterType_Impl_"];
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bool":
		return 0;
	case "bool2":
		return 1;
	case "bool3":
		return 1;
	case "bool4":
		return 1;
	case "float":
		return 4;
	case "float2":
		return 5;
	case "float3":
		return 6;
	case "float4":
		return 7;
	case "int":
		return 8;
	case "int2":
		return 9;
	case "int3":
		return 10;
	case "int4":
		return 11;
	case "matrix2x2":
		return 12;
	case "matrix2x3":
		return 13;
	case "matrix2x4":
		return 14;
	case "matrix3x2":
		return 15;
	case "matrix3x3":
		return 16;
	case "matrix3x4":
		return 17;
	case "matrix4x2":
		return 18;
	case "matrix4x3":
		return 19;
	case "matrix4x4":
		return 20;
	default:
		return null;
	}
};
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bool";
	case 1:
		return "bool2";
	case 2:
		return "bool3";
	case 3:
		return "bool4";
	case 4:
		return "float";
	case 5:
		return "float2";
	case 6:
		return "float3";
	case 7:
		return "float4";
	case 8:
		return "int";
	case 9:
		return "int2";
	case 10:
		return "int3";
	case 11:
		return "int4";
	case 12:
		return "matrix2x2";
	case 13:
		return "matrix2x3";
	case 14:
		return "matrix2x4";
	case 15:
		return "matrix3x2";
	case 16:
		return "matrix3x3";
	case 17:
		return "matrix3x4";
	case 18:
		return "matrix4x2";
	case 19:
		return "matrix4x3";
	case 20:
		return "matrix4x4";
	default:
		return null;
	}
};
var openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$ = {};
$hxClasses["openfl.display._ShaderPrecision.ShaderPrecision_Impl_"] = openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.__name__ = ["openfl","display","_ShaderPrecision","ShaderPrecision_Impl_"];
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fast":
		return 0;
	case "full":
		return 1;
	default:
		return null;
	}
};
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fast";
	case 1:
		return "full";
	default:
		return null;
	}
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	shader: null
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.set_upState(upState != null ? upState : new openfl_display_DisplayObject());
	this.set_overState(overState);
	this.set_downState(downState);
	this.set_hitTestState(hitTestState != null ? hitTestState : new openfl_display_DisplayObject());
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.__tabEnabled = true;
	this.set___currentState(this.upState);
	if(openfl_display_SimpleButton.__initSymbol != null) {
		var swf = openfl_display_SimpleButton.__initSWF;
		this.__symbol = openfl_display_SimpleButton.__initSymbol;
		openfl_display_SimpleButton.__initSWF = null;
		openfl_display_SimpleButton.__initSymbol = null;
		this.__fromSymbol(swf,this.__symbol);
	}
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = ["openfl","display","SimpleButton"];
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	downState: null
	,enabled: null
	,hitTestState: null
	,overState: null
	,trackAsMenu: null
	,upState: null
	,useHandCursor: null
	,__currentState: null
	,__ignoreEvent: null
	,__previousStates: null
	,__soundTransform: null
	,__symbol: null
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		if(symbol.downState != null) {
			this.set_downState(symbol.downState.__createObject(swf));
		}
		if(symbol.hitState != null) {
			this.set_hitTestState(symbol.hitState.__createObject(swf));
		}
		if(symbol.overState != null) {
			this.set_overState(symbol.overState.__createObject(swf));
		}
		if(symbol.upState != null) {
			this.set_upState(symbol.upState.__createObject(swf));
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getRenderBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		var hitTest = false;
		if(this.hitTestState != null) {
			if(this.hitTestState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				if(stack != null) {
					if(stack.length == 0) {
						stack[0] = hitObject;
					} else {
						stack[stack.length - 1] = hitObject;
					}
				}
				hitTest = true;
			}
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				hitTest = interactiveOnly;
			}
		}
		if(stack != null) {
			while(stack.length > 1 && stack[stack.length - 1] == stack[stack.length - 2]) stack.pop();
		}
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		if(this.__currentState.__hitTestMask(x,y)) {
			hitTest = true;
		}
		return hitTest;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCairo(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCairoMask: function(renderSession) {
		this.__currentState.__renderCairoMask(renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCanvas(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(bounds);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
		this.__currentState.__renderCanvasMask(renderSession);
	}
	,__renderDOM: function(renderSession) {
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__previousStates;
		while(_g < _g1.data.get_length()) {
			var previousState = _g1.data.get(_g);
			++_g;
			previousState.__renderDOM(renderSession);
		}
		this.__previousStates.data.set_length(0);
		if(this.__currentState != null) {
			if(this.__currentState.stage != this.stage) {
				this.__currentState.__setStageReference(this.stage);
			}
			this.__currentState.__renderDOM(renderSession);
		}
		renderSession.maskManager.popObject(this);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderGL(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderGLMask: function(renderSession) {
		if(this.__currentState == null) {
			return;
		}
		this.__currentState.__renderGLMask(renderSession);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__currentState != null) {
			this.__currentState.__setStageReference(stage);
		}
		if(this.hitTestState != null && this.hitTestState != this.__currentState) {
			this.hitTestState.__setStageReference(stage);
		}
	}
	,__setTransformDirty: function() {
		openfl_display_InteractiveObject.prototype.__setTransformDirty.call(this);
		if(this.__currentState != null) {
			this.__currentState.__setTransformDirty();
		}
		if(this.hitTestState != null && this.hitTestState != this.__currentState) {
			this.hitTestState.__setTransformDirty();
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(updateChildren) {
			if(this.__currentState != null) {
				this.__currentState.__update(transformOnly,true,maskGraphics);
			}
			if(this.hitTestState != null && this.hitTestState != this.__currentState) {
				this.hitTestState.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		if(this.__currentState != null) {
			this.__currentState.__updateChildren(transformOnly);
		}
		if(this.hitTestState != null && this.hitTestState != this.__currentState) {
			this.hitTestState.__updateChildren(transformOnly);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		if(this.__currentState != null) {
			this.__currentState.__updateTransforms();
		}
		if(this.hitTestState != null && this.hitTestState != this.__currentState) {
			this.hitTestState.__updateTransforms();
		}
	}
	,set_downState: function(downState) {
		if(this.downState != null && this.__currentState == this.downState) {
			this.set___currentState(downState);
		}
		return this.downState = downState;
	}
	,set_hitTestState: function(hitTestState) {
		if(this.hitTestState != null && this.hitTestState != hitTestState) {
			if(this.hitTestState != this.downState && this.hitTestState != this.upState && this.hitTestState != this.overState) {
				this.hitTestState.__renderParent = null;
			}
		}
		if(hitTestState != null) {
			hitTestState.__renderParent = this;
			if(!hitTestState.__renderDirty) {
				hitTestState.__renderDirty = true;
				hitTestState.__setParentRenderDirty();
			}
		}
		return this.hitTestState = hitTestState;
	}
	,set_overState: function(overState) {
		if(this.overState != null && this.__currentState == this.overState) {
			this.set___currentState(overState);
		}
		return this.overState = overState;
	}
	,get_soundTransform: function() {
		if(this.__soundTransform == null) {
			this.__soundTransform = new openfl_media_SoundTransform();
		}
		return new openfl_media_SoundTransform(this.__soundTransform.volume,this.__soundTransform.pan);
	}
	,set_soundTransform: function(value) {
		this.__soundTransform = new openfl_media_SoundTransform(value.volume,value.pan);
		return value;
	}
	,set_upState: function(upState) {
		if(this.upState != null && this.__currentState == this.upState) {
			this.set___currentState(upState);
		}
		return this.upState = upState;
	}
	,set___currentState: function(value) {
		if(this.__currentState != null && this.__currentState != this.hitTestState) {
			this.__currentState.__renderParent = null;
		}
		if(value != null && value.parent != null) {
			value.parent.removeChild(value);
		}
		if(value != this.__currentState) {
			if(value != null) {
				value.__renderParent = this;
				if(!value.__renderDirty) {
					value.__renderDirty = true;
					value.__setParentRenderDirty();
				}
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__currentState = value;
		return value;
	}
	,__this_onMouseDown: function(event) {
		this.set___currentState(this.downState);
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.upState != this.__currentState) {
			this.set___currentState(this.upState);
		}
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) {
			this.__ignoreEvent = true;
		}
		if(this.overState != this.__currentState && this.overState != null && !this.__ignoreEvent) {
			this.set___currentState(this.overState);
		}
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.overState != null) {
			this.set___currentState(this.overState);
		} else {
			this.set___currentState(this.upState);
		}
	}
	,__class__: openfl_display_SimpleButton
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_overState:"set_overState",set_hitTestState:"set_hitTestState",set_downState:"set_downState"})
});
var openfl_display__$SpreadMethod_SpreadMethod_$Impl_$ = {};
$hxClasses["openfl.display._SpreadMethod.SpreadMethod_Impl_"] = openfl_display__$SpreadMethod_SpreadMethod_$Impl_$;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.__name__ = ["openfl","display","_SpreadMethod","SpreadMethod_Impl_"];
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "pad":
		return 0;
	case "reflect":
		return 1;
	case "repeat":
		return 2;
	default:
		return null;
	}
};
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "pad";
	case 1:
		return "reflect";
	case 2:
		return "repeat";
	default:
		return null;
	}
};
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.application = window.application;
	this.window = window;
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else {
		this.set_color(color);
	}
	this.set_name(null);
	this.__contentsScaleFactor = window.__scale;
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.__logicalWidth = 0;
	this.__logicalHeight = 0;
	this.__displayMatrix = new openfl_geom_Matrix();
	this.__renderDirty = true;
	this.__wasFullscreen = window.__fullscreen;
	this.stage3Ds = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var this1 = this.stage3Ds;
	var x = new openfl_display_Stage3D();
	this1.data.push(x);
	this.__resize();
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = 1;
	this.scaleMode = 2;
	this.showDefaultContextMenu = true;
	this.softKeyboardRect = new openfl_geom_Rectangle();
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__rollOutStack = [];
	this.__touchData = new haxe_ds_IntMap();
	if(openfl_Lib.get_current().stage == null) {
		this.stage.addChild(openfl_Lib.get_current());
	}
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,quality: null
	,scaleMode: null
	,showDefaultContextMenu: null
	,softKeyboardRect: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__cacheFocus: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__contentsScaleFactor: null
	,__deltaTime: null
	,__dirty: null
	,__displayMatrix: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__fullscreen: null
	,__invalidated: null
	,__lastClickTime: null
	,__logicalWidth: null
	,__logicalHeight: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOverTarget: null
	,__mouseX: null
	,__mouseY: null
	,__primaryTouch: null
	,__renderer: null
	,__rendering: null
	,__rollOutStack: null
	,__stack: null
	,__transparent: null
	,__wasDirty: null
	,__wasFullscreen: null
	,__touchData: null
	,addRenderer: function(renderer) {
		var f = $bind(this,this.render);
		var a1 = renderer;
		var tmp = function() {
			f(a1);
		};
		renderer.onRender.add(tmp);
		var f1 = $bind(this,this.onRenderContextLost);
		var a11 = renderer;
		var tmp1 = function() {
			f1(a11);
		};
		renderer.onContextLost.add(tmp1);
		var f2 = $bind(this,this.onRenderContextRestored);
		var a12 = renderer;
		var tmp2 = function(a2) {
			f2(a12,a2);
		};
		renderer.onContextRestored.add(tmp2);
	}
	,addWindow: function(window) {
		if(this.window != window) {
			return;
		}
		var f = $bind(this,this.onWindowActivate);
		var a1 = window;
		var tmp = function() {
			f(a1);
		};
		window.onActivate.add(tmp);
		var f1 = $bind(this,this.onWindowClose);
		var a11 = window;
		var tmp1 = function() {
			f1(a11);
		};
		window.onClose.add(tmp1,false,-9000);
		var f2 = $bind(this,this.onWindowCreate);
		var a12 = window;
		var tmp2 = function() {
			f2(a12);
		};
		window.onCreate.add(tmp2);
		var f3 = $bind(this,this.onWindowDeactivate);
		var a13 = window;
		var tmp3 = function() {
			f3(a13);
		};
		window.onDeactivate.add(tmp3);
		var f4 = $bind(this,this.onWindowDropFile);
		var a14 = window;
		var tmp4 = function(a2) {
			f4(a14,a2);
		};
		window.onDropFile.add(tmp4);
		var f5 = $bind(this,this.onWindowEnter);
		var a15 = window;
		var tmp5 = function() {
			f5(a15);
		};
		window.onEnter.add(tmp5);
		var f6 = $bind(this,this.onWindowFocusIn);
		var a16 = window;
		var tmp6 = function() {
			f6(a16);
		};
		window.onFocusIn.add(tmp6);
		var f7 = $bind(this,this.onWindowFocusOut);
		var a17 = window;
		var tmp7 = function() {
			f7(a17);
		};
		window.onFocusOut.add(tmp7);
		var f8 = $bind(this,this.onWindowFullscreen);
		var a18 = window;
		var tmp8 = function() {
			f8(a18);
		};
		window.onFullscreen.add(tmp8);
		var f9 = $bind(this,this.onKeyDown);
		var a19 = window;
		var tmp9 = function(a21,a3) {
			f9(a19,a21,a3);
		};
		window.onKeyDown.add(tmp9);
		var f10 = $bind(this,this.onKeyUp);
		var a110 = window;
		var tmp10 = function(a22,a31) {
			f10(a110,a22,a31);
		};
		window.onKeyUp.add(tmp10);
		var f11 = $bind(this,this.onWindowLeave);
		var a111 = window;
		var tmp11 = function() {
			f11(a111);
		};
		window.onLeave.add(tmp11);
		var f12 = $bind(this,this.onWindowMinimize);
		var a112 = window;
		var tmp12 = function() {
			f12(a112);
		};
		window.onMinimize.add(tmp12);
		var f13 = $bind(this,this.onMouseDown);
		var a113 = window;
		var tmp13 = function(x,y,a23) {
			f13(a113,x,y,a23);
		};
		window.onMouseDown.add(tmp13);
		var f14 = $bind(this,this.onMouseMove);
		var a114 = window;
		var tmp14 = function(x1,y1) {
			f14(a114,x1,y1);
		};
		window.onMouseMove.add(tmp14);
		var f15 = $bind(this,this.onMouseMoveRelative);
		var a115 = window;
		var tmp15 = function(x2,y2) {
			f15(a115,x2,y2);
		};
		window.onMouseMoveRelative.add(tmp15);
		var f16 = $bind(this,this.onMouseUp);
		var a116 = window;
		var tmp16 = function(x3,y3,a24) {
			f16(a116,x3,y3,a24);
		};
		window.onMouseUp.add(tmp16);
		var f17 = $bind(this,this.onMouseWheel);
		var a117 = window;
		var tmp17 = function(a25,a32) {
			f17(a117,a25,a32);
		};
		window.onMouseWheel.add(tmp17);
		var f18 = $bind(this,this.onWindowMove);
		var a118 = window;
		var tmp18 = function(x4,y4) {
			f18(a118,x4,y4);
		};
		window.onMove.add(tmp18);
		var f19 = $bind(this,this.onWindowResize);
		var a119 = window;
		var tmp19 = function(a26,a33) {
			f19(a119,a26,a33);
		};
		window.onResize.add(tmp19);
		var f20 = $bind(this,this.onWindowRestore);
		var a120 = window;
		var tmp20 = function() {
			f20(a120);
		};
		window.onRestore.add(tmp20);
		var f21 = $bind(this,this.onTextEdit);
		var a121 = window;
		var tmp21 = function(a27,a34,a4) {
			f21(a121,a27,a34,a4);
		};
		window.onTextEdit.add(tmp21);
		var f22 = $bind(this,this.onTextInput);
		var a122 = window;
		var tmp22 = function(a28) {
			f22(a122,a28);
		};
		window.onTextInput.add(tmp22);
		if(window.id > -1) {
			this.onWindowCreate(window);
		}
	}
	,registerModule: function(application) {
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,removeRenderer: function(renderer) {
	}
	,removeWindow: function(window) {
	}
	,setPreloader: function(preloader) {
	}
	,unregisterModule: function(application) {
		application.onExit.remove($bind(this,this.onModuleExit));
		application.onUpdate.remove($bind(this,this.update));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		try {
			openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadConnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadConnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__onKey("keyDown",keyCode,modifier);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__onKey("keyUp",keyCode,modifier);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onModuleExit: function(code) {
		if(this.window != null) {
			try {
				this.__broadcastEvent(new openfl_events_Event("deactivate"));
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.__handleError(e);
			}
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			var type;
			switch(button) {
			case 1:
				type = "middleMouseDown";
				break;
			case 2:
				type = "rightMouseDown";
				break;
			default:
				type = "mouseDown";
			}
			this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__onMouse("mouseMove",x * window.__scale | 0,y * window.__scale | 0,0);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			var type;
			switch(button) {
			case 1:
				type = "middleMouseUp";
				break;
			case 2:
				type = "rightMouseUp";
				break;
			default:
				type = "mouseUp";
			}
			this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
			if(!this.showDefaultContextMenu && button == 2) {
				window.onMouseUp.cancel();
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__onMouseWheel(deltaX * window.__scale | 0,deltaY * window.__scale | 0);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
		this.__renderer = null;
	}
	,onRenderContextRestored: function(renderer,context) {
		this.__createRenderer();
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			var stack = [];
			if(this.__focus == null) {
				this.__getInteractive(stack);
			} else {
				this.__focus.__getInteractive(stack);
			}
			var event = new openfl_events_TextEvent("textInput",true,false,text);
			if(stack.length > 0) {
				stack.reverse();
				this.__dispatchStack(event,stack);
			} else {
				this.__dispatchEvent(event);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchMove: function(touch) {
		try {
			this.__onTouch("touchMove",touch);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchEnd: function(touch) {
		try {
			if(this.__primaryTouch == touch) {
				this.__primaryTouch = null;
			}
			this.__onTouch("touchEnd",touch);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchStart: function(touch) {
		try {
			if(this.__primaryTouch == null) {
				this.__primaryTouch = touch;
			}
			this.__onTouch("touchBegin",touch);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,onWindowClose: function(window) {
		if(this.window == window) {
			this.window = null;
		}
		try {
			this.__primaryTouch = null;
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			if(window.renderer != null) {
				this.__createRenderer();
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__renderDirty = true;
			this.__broadcastEvent(new openfl_events_Event("activate"));
			this.set_focus(this.__cacheFocus);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__primaryTouch = null;
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
			var currentFocus = this.get_focus();
			this.set_focus(null);
			this.__cacheFocus = currentFocus;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowFullscreen: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__resize();
			if(!this.__wasFullscreen) {
				this.__wasFullscreen = true;
				if(this.__displayState == 2) {
					this.__displayState = 1;
				}
				this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowMinimize: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) {
			return;
		}
		try {
			this.__renderDirty = true;
			this.__resize();
			if(this.__wasFullscreen && !window.__fullscreen) {
				this.__wasFullscreen = false;
				this.__displayState = 2;
				this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowRestore: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,render: function(renderer) {
		if(renderer.window == null || renderer.window != this.window) {
			return;
		}
		try {
			if(this.__rendering) {
				return;
			}
			this.__rendering = true;
			if(this.__renderer != null && (openfl_display_Stage3D.__active || this.stage3Ds.data.get(0).__contextRequested)) {
				this.__renderer.clear();
				this.__renderer.renderStage3D();
				this.__renderDirty = true;
			}
			this.__broadcastEvent(new openfl_events_Event("enterFrame"));
			this.__broadcastEvent(new openfl_events_Event("frameConstructed"));
			this.__broadcastEvent(new openfl_events_Event("exitFrame"));
			if(this.__invalidated) {
				this.__invalidated = false;
				this.__broadcastEvent(new openfl_events_Event("render"));
			}
			this.__renderable = true;
			this.__enterFrame(this.__deltaTime);
			this.__deltaTime = 0;
			this.__update(false,true);
			if(this.__renderer != null && this.__renderDirty) {
				if(!openfl_display_Stage3D.__active) {
					this.__renderer.clear();
				}
				if(renderer.type == lime_graphics_RendererType.CAIRO) {
					var _g = renderer.context;
					if(_g[1] == 4) {
						var cairo = _g[2];
					}
				}
				this.__renderer.render();
			} else {
				renderer.onRender.cancel();
			}
			this.__rendering = false;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
	}
	,__broadcastEvent: function(event) {
		var key = event.type;
		var _this = openfl_display_DisplayObject.__broadcastEvents;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = event.type;
			var _this1 = openfl_display_DisplayObject.__broadcastEvents;
			var dispatchers = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
			var _g = 0;
			while(_g < dispatchers.length) {
				var dispatcher = dispatchers[_g];
				++_g;
				dispatcher.__dispatch(event);
			}
		}
	}
	,__createRenderer: function() {
		var _g = this.window.renderer.context;
		switch(_g[1]) {
		case 0:
			var gl = _g[2];
			this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this,gl);
			break;
		case 1:
			var context = _g[2];
			this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this,context);
			break;
		case 2:
			var element = _g[2];
			break;
		case 4:
			var cairo = _g[2];
			break;
		case 5:
			var ctx = _g[2];
			break;
		default:
		}
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) {
			var _this = parent.__getWorldTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				mouse.x = -_this.tx;
				mouse.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
				mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
				mouse.x = px;
			}
		}
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) {
				x = this.__dragBounds.x;
			} else if(x > this.__dragBounds.get_right()) {
				x = this.__dragBounds.get_right();
			}
			if(y < this.__dragBounds.y) {
				y = this.__dragBounds.y;
			} else if(y > this.__dragBounds.get_bottom()) {
				y = this.__dragBounds.get_bottom();
			}
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
		}
		return true;
	}
	,__globalToLocal: function(global,local) {
		if(global != local) {
			local.copyFrom(global);
		}
		return local;
	}
	,__handleError: function(e) {
		var event = new openfl_events_UncaughtErrorEvent("uncaughtError",true,true,e);
		openfl_Lib.get_current().__loaderInfo.uncaughtErrorEvents.dispatchEvent(event);
		if(!event.__preventDefault) {
			try {
				var exc = haxe_CallStack.lastException;
				if(exc != null && Object.prototype.hasOwnProperty.call(exc,"stack") && exc.stack != null && exc.stack != "") {
					console.log(exc.stack);
					e.stack = exc.stack;
				} else {
					var msg = haxe_CallStack.toString(haxe_CallStack.callStack());
					console.log(msg);
				}
			} catch( e2 ) {
				haxe_CallStack.lastException = e2;
			}
			throw e;
		}
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,true,charCode,keyCode1,keyLocation,this.__macKeyboard ? lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) : lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__dispatchStack(event,stack);
			if(event.__preventDefault) {
				if(type == "keyDown") {
					this.window.onKeyDown.cancel();
				} else {
					this.window.onKeyUp.cancel();
				}
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		var tmp3 = function() {
			f3(a13);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) {
			return;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__mouseX = targetPoint.x;
		this.__mouseY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var clickType = null;
		switch(type) {
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) {
				clickType = "middleClick";
			}
			this.__mouseDownMiddle = null;
			break;
		case "mouseDown":
			if(target.__allowMouseFocus()) {
				this.set_focus(target);
			} else {
				this.set_focus(null);
			}
			this.__mouseDownLeft = target;
			openfl_events_MouseEvent.__buttonDown = true;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft != null) {
				openfl_events_MouseEvent.__buttonDown = false;
				if(this.__mouseX < 0 || this.__mouseY < 0) {
					this.__dispatchEvent(openfl_events_MouseEvent.__create("releaseOutside",1,this.__mouseX,this.__mouseY,new openfl_geom_Point(this.__mouseX,this.__mouseY),this));
				} else if(this.__mouseDownLeft == target) {
					clickType = "click";
				}
				this.__mouseDownLeft = null;
			}
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) {
				clickType = "rightClick";
			}
			this.__mouseDownRight = null;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		this.__dispatchStack(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
		if(clickType != null) {
			this.__dispatchStack(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__dispatchStack(openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
					this.__lastClickTime = 0;
				} else {
					this.__lastClickTime = currentTime;
				}
			}
		}
		if(openfl_ui_Mouse.__cursor == "auto") {
			var cursor = null;
			if(this.__mouseDownLeft != null) {
				cursor = this.__mouseDownLeft.__getCursor();
			} else {
				var _g = 0;
				while(_g < stack.length) {
					var target1 = stack[_g];
					++_g;
					cursor = target1.__getCursor();
					if(cursor != null) {
						lime_ui_Mouse.set_cursor(cursor);
						break;
					}
				}
			}
			if(cursor == null) {
				lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
			}
		}
		var event;
		if(target != this.__mouseOverTarget) {
			if(this.__mouseOverTarget != null) {
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				this.__mouseOverTarget.__dispatchEvent(event);
			}
		}
		var _g1 = 0;
		var _g11 = this.__rollOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(stack.indexOf(target2) == -1) {
				HxOverrides.remove(this.__rollOutStack,target2);
				event = openfl_events_MouseEvent.__create("rollOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				event.bubbles = false;
				target2.__dispatchEvent(event);
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(this.__rollOutStack.indexOf(target3) == -1 && this.__mouseOverTarget != null) {
				if(target3.hasEventListener("rollOver")) {
					event = openfl_events_MouseEvent.__create("rollOver",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),target3);
					event.bubbles = false;
					target3.__dispatchEvent(event);
				}
				if(target3.hasEventListener("rollOut")) {
					this.__rollOutStack.push(target3);
				}
			}
		}
		if(target != this.__mouseOverTarget) {
			if(target != null) {
				event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
				event.bubbles = true;
				target.__dispatchEvent(event);
			}
			this.__mouseOverTarget = target;
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
			var dropTarget = null;
			if(this.__mouseOverTarget == this.__dragObject) {
				var cacheMouseEnabled = this.__dragObject.mouseEnabled;
				var cacheMouseChildren = this.__dragObject.mouseChildren;
				this.__dragObject.mouseEnabled = false;
				this.__dragObject.mouseChildren = false;
				var stack1 = [];
				if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack1,true,this)) {
					dropTarget = stack1[stack1.length - 1];
				}
				this.__dragObject.mouseEnabled = cacheMouseEnabled;
				this.__dragObject.mouseChildren = cacheMouseChildren;
			} else if(this.__mouseOverTarget != this) {
				dropTarget = this.__mouseOverTarget;
			}
			this.__dragObject.dropTarget = dropTarget;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		var delta = deltaY | 0;
		this.__dispatchStack(openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,targetPoint),target,delta),stack);
		openfl_geom_Point.__pool.release(targetPoint);
	}
	,__onTouch: function(type,touch) {
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(Math.round(touch.x * this.window.__width * this.window.__scale),Math.round(touch.y * this.window.__height * this.window.__scale));
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		var touchX = targetPoint.x;
		var touchY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(touchX,touchY,false,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var touchId = touch.id;
		var touchData = null;
		if(this.__touchData.h.hasOwnProperty(touchId)) {
			touchData = this.__touchData.h[touchId];
		} else {
			touchData = openfl_utils_TouchData.__pool.get();
			touchData.reset();
			touchData.touch = touch;
			this.__touchData.h[touchId] = touchData;
		}
		var touchType = null;
		var releaseTouchData = false;
		switch(type) {
		case "touchBegin":
			touchData.touchDownTarget = target;
			break;
		case "touchEnd":
			if(touchData.touchDownTarget == target) {
				touchType = "touchTap";
			}
			touchData.touchDownTarget = null;
			releaseTouchData = true;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		var isPrimaryTouchPoint = this.__primaryTouch == touch;
		var touchEvent = openfl_events_TouchEvent.__create(type,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
		touchEvent.touchPointID = touchId;
		touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
		this.__dispatchStack(touchEvent,stack);
		if(touchType != null) {
			touchEvent = openfl_events_TouchEvent.__create(touchType,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			this.__dispatchStack(touchEvent,stack);
		}
		var touchOverTarget = touchData.touchOverTarget;
		if(target != touchOverTarget && touchOverTarget != null) {
			touchEvent = openfl_events_TouchEvent.__create("touchOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			touchOverTarget.__dispatchEvent(touchEvent);
		}
		var touchOutStack = touchData.rollOutStack;
		var _g = 0;
		while(_g < touchOutStack.length) {
			var target1 = touchOutStack[_g];
			++_g;
			if(stack.indexOf(target1) == -1) {
				HxOverrides.remove(touchOutStack,target1);
				touchEvent = openfl_events_TouchEvent.__create("touchRollOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = false;
				target1.__dispatchEvent(touchEvent);
			}
		}
		var _g1 = 0;
		while(_g1 < stack.length) {
			var target2 = stack[_g1];
			++_g1;
			if(touchOutStack.indexOf(target2) == -1) {
				if(target2.hasEventListener("touchRollOver")) {
					touchEvent = openfl_events_TouchEvent.__create("touchRollOver",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),target2);
					touchEvent.touchPointID = touchId;
					touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
					touchEvent.bubbles = false;
					target2.__dispatchEvent(touchEvent);
				}
				if(target2.hasEventListener("touchRollOut")) {
					touchOutStack.push(target2);
				}
			}
		}
		if(target != touchOverTarget) {
			if(target != null) {
				touchEvent = openfl_events_TouchEvent.__create("touchOver",null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = true;
				target.__dispatchEvent(touchEvent);
			}
			touchData.touchOverTarget = target;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
		if(releaseTouchData) {
			this.__touchData.remove(touchId);
			touchData.reset();
			openfl_utils_TouchData.__pool.release(touchData);
		}
	}
	,__resize: function() {
		var cacheWidth = this.stageWidth;
		var cacheHeight = this.stageHeight;
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		this.__logicalWidth = windowWidth;
		this.__logicalHeight = windowHeight;
		this.__displayMatrix.identity();
		if(this.__logicalWidth == 0 && this.__logicalHeight == 0) {
			this.stageWidth = windowWidth;
			this.stageHeight = windowHeight;
		} else {
			this.stageWidth = this.__logicalWidth;
			this.stageHeight = this.__logicalHeight;
			var scaleX = windowWidth / this.stageWidth;
			var scaleY = windowHeight / this.stageHeight;
			var targetScale = Math.min(scaleX,scaleY);
			var offsetX = Math.round((windowWidth - this.stageWidth * targetScale) / 2);
			var offsetY = Math.round((windowHeight - this.stageHeight * targetScale) / 2);
			this.__displayMatrix.scale(targetScale,targetScale);
			this.__displayMatrix.translate(offsetX,offsetY);
		}
		var _g = 0;
		var _g1 = this.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__resize(this.stageWidth,this.stageHeight);
		}
		if(this.__renderer != null) {
			this.__renderer.resize(windowWidth,windowHeight);
		}
		if(this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) {
			this.__dispatchEvent(new openfl_events_Event("resize"));
		}
	}
	,__setLogicalSize: function(width,height) {
		this.__logicalWidth = width;
		this.__logicalHeight = height;
		this.__resize();
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		this.__dragBounds = bounds == null ? null : bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = 0;
				this.__dragOffsetY = 0;
			} else {
				var mouse = openfl_geom_Point.__pool.get();
				mouse.setTo(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) {
					var _this = parent.__getWorldTransform();
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						mouse.x = -_this.tx;
						mouse.y = -_this.ty;
					} else {
						var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
						mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
						mouse.x = px;
					}
				}
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
				openfl_geom_Point.__pool.release(mouse);
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		if(transformOnly) {
			if(this.__transformDirty) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGraphics);
				if(updateChildren) {
					this.__transformDirty = false;
				}
			}
		} else if(this.__transformDirty || this.__renderDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGraphics);
			var updateChildren1 = updateChildren;
		}
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value & 16777215,6);
		return this.__color = value;
	}
	,get_contentsScaleFactor: function() {
		return this.__contentsScaleFactor;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) {
			if(value == 2) {
				if(this.window.__fullscreen) {
					this.window.set_fullscreen(false);
				}
			} else if(!this.window.__fullscreen) {
				this.window.set_fullscreen(true);
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			this.__cacheFocus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,this.__focus,false,0);
				var stack = [];
				oldFocus.__getInteractive(stack);
				stack.reverse();
				this.__dispatchStack(event,stack);
			}
			if(this.__focus != null) {
				var event1 = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				var stack1 = [];
				value.__getInteractive(stack1);
				stack1.reverse();
				this.__dispatchStack(event1,stack1);
			}
		}
		return this.__focus;
	}
	,get_frameRate: function() {
		if(this.application != null) {
			return this.application.backend.getFrameRate();
		}
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.application != null) {
			return this.application.backend.setFrameRate(value);
		}
		return value;
	}
	,get_fullScreenHeight: function() {
		return this.window.get_display().currentMode.height;
	}
	,get_fullScreenWidth: function() {
		return this.window.get_display().currentMode.width;
	}
	,set_height: function(value) {
		return this.get_height();
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,set_rotation: function(value) {
		return 0;
	}
	,set_scaleX: function(value) {
		return 0;
	}
	,set_scaleY: function(value) {
		return 0;
	}
	,set_transform: function(value) {
		return this.get_transform();
	}
	,set_width: function(value) {
		return this.get_width();
	}
	,set_x: function(value) {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_fullScreenWidth:"get_fullScreenWidth",get_fullScreenHeight:"get_fullScreenHeight",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",get_contentsScaleFactor:"get_contentsScaleFactor",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
	this.set_x(0);
	this.set_y(0);
	this.visible = true;
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,x: null
	,y: null
	,__contextRequested: null
	,__stage: null
	,__canvas: null
	,__renderContext: null
	,__style: null
	,__webgl: null
	,requestContext3D: function(context3DRenderMode,profile) {
		if(profile == null) {
			profile = 0;
		}
		if(context3DRenderMode == null) {
			context3DRenderMode = 0;
		}
		this.__contextRequested = true;
		if(this.context3D != null) {
			haxe_Timer.delay($bind(this,this.__dispatchCreate),1);
		}
	}
	,requestContext3DMatchingProfiles: function(profiles) {
		this.requestContext3D();
	}
	,__createContext: function(stage,renderSession) {
		this.__stage = stage;
		if(renderSession.gl != null) {
			this.context3D = new openfl_display3D_Context3D(this,renderSession);
			this.__dispatchCreate();
		} else {
			this.__canvas = window.document.createElement("canvas");
			this.__canvas.width = stage.stageWidth;
			this.__canvas.height = stage.stageHeight;
			var $window = stage.window;
			var transparentBackground = Object.prototype.hasOwnProperty.call($window.config,"background") && $window.config.background == null;
			var colorDepth = Object.prototype.hasOwnProperty.call($window.config,"colorDepth") ? $window.config.colorDepth : 16;
			var options = Object.prototype.hasOwnProperty.call($window.config,"antialiasing") && $window.config.antialiasing > 0;
			var options1 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : Object.prototype.hasOwnProperty.call($window.config,"depthBuffer") ? $window.config.depthBuffer : true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call($window.config,"stencilBuffer") && $window.config.stencilBuffer, preserveDrawingBuffer : false};
			this.__webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.__canvas,options1);
			if(this.__webgl != null) {
				this.__renderContext = new lime__$backend_html5_HTML5GLRenderContext(this.__webgl);
				lime_graphics_opengl_GL.context = this.__renderContext;
				this.context3D = new openfl_display3D_Context3D(this,renderSession);
				renderSession.element.appendChild(this.__canvas);
				this.__style = this.__canvas.style;
				this.__style.setProperty("position","absolute",null);
				this.__style.setProperty("top","0",null);
				this.__style.setProperty("left","0",null);
				this.__style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
				this.__style.setProperty("z-index","-1",null);
				this.__dispatchCreate();
			} else {
				this.__dispatchError();
			}
		}
	}
	,__dispatchError: function() {
		this.__contextRequested = false;
		this.dispatchEvent(new openfl_events_ErrorEvent("error",false,false,"Context3D not available"));
	}
	,__dispatchCreate: function() {
		if(this.__contextRequested) {
			this.__contextRequested = false;
			this.dispatchEvent(new openfl_events_Event("context3DCreate"));
		}
	}
	,__renderCairo: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested) {
			this.__dispatchError();
			this.__contextRequested = false;
		}
	}
	,__renderCanvas: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested) {
			this.__dispatchError();
			this.__contextRequested = false;
		}
	}
	,__renderDOM: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested && this.context3D == null) {
			this.__createContext(stage,renderSession);
		}
		if(this.context3D != null) {
			lime_graphics_opengl_GL.context = this.__renderContext;
			this.__resetContext3DStates();
		}
	}
	,__renderGL: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested && this.context3D == null) {
			this.__createContext(stage,renderSession);
		}
		if(this.context3D != null) {
			this.__resetContext3DStates();
			if(this.context3D != null) {
				renderSession.blendModeManager.setBlendMode(null);
				if(renderSession.shaderManager.currentShader != null) {
					renderSession.shaderManager.setShader(null);
					if(this.context3D.__program != null) {
						this.context3D.__program.__use();
					}
				}
			}
			if(openfl__$internal_stage3D_GLUtils.debug) {
				renderSession.gl.__context.getError();
			}
		}
	}
	,__resize: function(width,height) {
		if(this.__canvas != null) {
			this.__canvas.width = width;
			this.__canvas.height = height;
		}
	}
	,__resetContext3DStates: function() {
		this.context3D.__updateBlendFactors();
		this.context3D.__updateBackbufferViewport();
	}
	,set_x: function(value) {
		if(this.x == value) {
			return value;
		}
		this.x = value;
		if(this.context3D != null) {
			this.context3D.__updateBackbufferViewport();
		}
		return value;
	}
	,set_y: function(value) {
		if(this.y == value) {
			return value;
		}
		this.y = value;
		if(this.context3D != null) {
			this.context3D.__updateBackbufferViewport();
		}
		return value;
	}
	,__class__: openfl_display_Stage3D
	,__properties__: {set_y:"set_y",set_x:"set_x"}
});
var openfl_display__$StageAlign_StageAlign_$Impl_$ = {};
$hxClasses["openfl.display._StageAlign.StageAlign_Impl_"] = openfl_display__$StageAlign_StageAlign_$Impl_$;
openfl_display__$StageAlign_StageAlign_$Impl_$.__name__ = ["openfl","display","_StageAlign","StageAlign_Impl_"];
openfl_display__$StageAlign_StageAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bottom":
		return 0;
	case "bottomLeft":
		return 1;
	case "bottomRight":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "top":
		return 5;
	case "topLeft":
		return 6;
	case "topRight":
		return 7;
	default:
		return null;
	}
};
openfl_display__$StageAlign_StageAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bottom";
	case 1:
		return "bottomLeft";
	case 2:
		return "bottomRight";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "top";
	case 6:
		return "topLeft";
	case 7:
		return "topRight";
	default:
		return null;
	}
};
var openfl_display__$StageDisplayState_StageDisplayState_$Impl_$ = {};
$hxClasses["openfl.display._StageDisplayState.StageDisplayState_Impl_"] = openfl_display__$StageDisplayState_StageDisplayState_$Impl_$;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.__name__ = ["openfl","display","_StageDisplayState","StageDisplayState_Impl_"];
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fullScreen":
		return 0;
	case "fullScreenInteractive":
		return 1;
	case "normal":
		return 2;
	default:
		return null;
	}
};
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fullScreen";
	case 1:
		return "fullScreenInteractive";
	case 2:
		return "normal";
	default:
		return null;
	}
};
var openfl_display__$StageQuality_StageQuality_$Impl_$ = {};
$hxClasses["openfl.display._StageQuality.StageQuality_Impl_"] = openfl_display__$StageQuality_StageQuality_$Impl_$;
openfl_display__$StageQuality_StageQuality_$Impl_$.__name__ = ["openfl","display","_StageQuality","StageQuality_Impl_"];
openfl_display__$StageQuality_StageQuality_$Impl_$.fromString = function(value) {
	switch(value) {
	case "best":
		return 0;
	case "high":
		return 1;
	case "low":
		return 2;
	case "medium":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageQuality_StageQuality_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "best";
	case 1:
		return "high";
	case 2:
		return "low";
	case 3:
		return "medium";
	default:
		return null;
	}
};
var openfl_display__$StageScaleMode_StageScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._StageScaleMode.StageScaleMode_Impl_"] = openfl_display__$StageScaleMode_StageScaleMode_$Impl_$;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.__name__ = ["openfl","display","_StageScaleMode","StageScaleMode_Impl_"];
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "exactFit":
		return 0;
	case "noBorder":
		return 1;
	case "noScale":
		return 2;
	case "showAll":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "exactFit";
	case 1:
		return "noBorder";
	case 2:
		return "noScale";
	case 3:
		return "showAll";
	default:
		return null;
	}
};
var openfl_display__$TriangleCulling_TriangleCulling_$Impl_$ = {};
$hxClasses["openfl.display._TriangleCulling.TriangleCulling_Impl_"] = openfl_display__$TriangleCulling_TriangleCulling_$Impl_$;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.__name__ = ["openfl","display","_TriangleCulling","TriangleCulling_Impl_"];
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.fromString = function(value) {
	switch(value) {
	case "negative":
		return 0;
	case "none":
		return 1;
	case "positive":
		return 2;
	default:
		return null;
	}
};
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "negative";
	case 1:
		return "none";
	case 2:
		return "positive";
	default:
		return null;
	}
};
var openfl_display_Window = function(config) {
	lime_ui_Window.call(this,config);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	create: function(application) {
		lime_ui_Window.prototype.create.call(this,application);
		this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(this.config,"background") ? this.config.background : 16777215);
		if(Object.prototype.hasOwnProperty.call(this.config,"parameters")) {
			try {
				this.stage.get_loaderInfo().parameters = this.config.parameters;
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
		if(Object.prototype.hasOwnProperty.call(this.config,"resizable") && !this.config.resizable) {
			this.stage.__setLogicalSize(this.config.width,this.config.height);
		}
		application.addModule(this.stage);
	}
	,__class__: openfl_display_Window
});
var openfl_display3D_Context3D = function(stage3D,renderSession) {
	this.totalGPUMemory = 0;
	this.profile = 0;
	this.enableErrorChecking = false;
	this.driverInfo = "OpenGL (Direct blitting)";
	this.backBufferWidth = 0;
	this.backBufferHeight = 0;
	openfl_events_EventDispatcher.call(this);
	this.__stage3D = stage3D;
	this.__renderSession = renderSession;
	openfl__$internal_stage3D_opengl_GLContext3D.create(this);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
openfl_display3D_Context3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	backBufferHeight: null
	,backBufferWidth: null
	,driverInfo: null
	,enableErrorChecking: null
	,maxBackBufferHeight: null
	,maxBackBufferWidth: null
	,profile: null
	,totalGPUMemory: null
	,__backBufferAntiAlias: null
	,__backBufferEnableDepthAndStencil: null
	,__backBufferWantsBestResolution: null
	,__depthRenderBuffer: null
	,__depthStencilRenderBuffer: null
	,__fragmentConstants: null
	,__framebuffer: null
	,__frameCount: null
	,__maxAnisotropyCubeTexture: null
	,__maxAnisotropyTexture2D: null
	,__positionScale: null
	,__program: null
	,__renderSession: null
	,__renderToTexture: null
	,__rttDepthAndStencil: null
	,__samplerDirty: null
	,__samplerTextures: null
	,__samplerStates: null
	,__scissorRectangle: null
	,__stage3D: null
	,__stats: null
	,__statsCache: null
	,__stencilCompareMode: null
	,__stencilRef: null
	,__stencilReadMask: null
	,__stencilRenderBuffer: null
	,__supportsAnisotropicFiltering: null
	,__supportsPackedDepthStencil: null
	,__vertexConstants: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = 7;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(blue == null) {
			blue = 0;
		}
		if(green == null) {
			green = 0;
		}
		if(red == null) {
			red = 0;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.clear(this,red,green,blue,alpha,depth,stencil,mask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
		if(wantsBestResolutionOnBrowserZoom == null) {
			wantsBestResolutionOnBrowserZoom = false;
		}
		if(wantsBestResolution == null) {
			wantsBestResolution = false;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = true;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.configureBackBuffer(this,width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom);
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_CubeTexture(this,size,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_IndexBuffer3D(this,numIndices,bufferUsage);
	}
	,createProgram: function() {
		return new openfl_display3D_Program3D(this);
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		return new openfl_display3D_textures_RectangleTexture(this,width,height,openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString(format),optimizeForRenderToTexture);
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_Texture(this,width,height,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_VertexBuffer3D(this,numVertices,data32PerVertex,openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString(bufferUsage));
	}
	,createVideoTexture: function() {
		return new openfl_display3D_textures_VideoTexture(this);
	}
	,dispose: function(recreate) {
		if(recreate == null) {
			recreate = true;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.dispose(this,recreate);
	}
	,drawToBitmapData: function(destination) {
		if(destination == null) {
			return;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.drawToBitmapData(this,destination);
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) {
			numTriangles = -1;
		}
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__program == null) {
			return;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.drawTriangles(this,indexBuffer,firstIndex,numTriangles);
	}
	,present: function() {
		openfl__$internal_stage3D_opengl_GLContext3D.present(this);
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		openfl__$internal_stage3D_opengl_GLContext3D.setBlendFactors(this,sourceFactor,destinationFactor);
	}
	,setColorMask: function(red,green,blue,alpha) {
		openfl__$internal_stage3D_opengl_GLContext3D.setColorMask(this,red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		openfl__$internal_stage3D_opengl_GLContext3D.setCulling(this,triangleFaceToCull);
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		openfl__$internal_stage3D_opengl_GLContext3D.setDepthTest(this,depthMask,passCompareMode);
	}
	,setProgram: function(program) {
		if(program == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		openfl__$internal_stage3D_opengl_GLContext3D.setProgram(this,program);
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		if(numRegisters == 0) {
			return;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromByteArray(this,programType,firstRegister,numRegisters,data,byteArrayOffset);
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) {
			transposedMatrix = false;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromMatrix(this,programType,firstRegister,matrix,transposedMatrix);
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) {
			numRegisters = -1;
		}
		if(numRegisters == 0) {
			return;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromVector(this,programType,firstRegister,data,numRegisters);
	}
	,setRenderToBackBuffer: function() {
		openfl__$internal_stage3D_opengl_GLContext3D.setRenderToBackBuffer(this);
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		if(antiAlias == null) {
			antiAlias = 0;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.setRenderToTexture(this,texture,enableDepthAndStencil,antiAlias,surfaceSelector);
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		openfl__$internal_stage3D_opengl_GLContext3D.setSamplerStateAt(this,sampler,wrap,filter,mipfilter);
	}
	,setScissorRectangle: function(rectangle) {
		openfl__$internal_stage3D_opengl_GLContext3D.setScissorRectangle(this,rectangle);
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		if(actionOnDepthPassStencilFail == null) {
			actionOnDepthPassStencilFail = 5;
		}
		if(actionOnDepthFail == null) {
			actionOnDepthFail = 5;
		}
		if(actionOnBothPass == null) {
			actionOnBothPass = 5;
		}
		if(compareMode == null) {
			compareMode = 0;
		}
		if(triangleFace == null) {
			triangleFace = 2;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.setStencilActions(this,triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.setStencilReferenceValue(this,referenceValue,readMask,writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		openfl__$internal_stage3D_opengl_GLContext3D.setTextureAt(this,sampler,texture);
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(format == null) {
			format = 4;
		}
		if(bufferOffset == null) {
			bufferOffset = 0;
		}
		openfl__$internal_stage3D_opengl_GLContext3D.setVertexBufferAt(this,index,buffer,bufferOffset,format);
	}
	,__updateBackbufferViewport: function() {
		openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewportTEMP(this);
	}
	,__updateBlendFactors: function() {
		openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactorsTEMP(this);
	}
	,set_enableErrorChecking: function(value) {
		openfl__$internal_stage3D_opengl_GLContext3D.setEnableErrorChecking(value);
		return this.enableErrorChecking = value;
	}
	,__class__: openfl_display3D_Context3D
	,__properties__: {set_enableErrorChecking:"set_enableErrorChecking"}
});
var openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3D.Context3DTelemetry_Impl_"] = openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.__name__ = ["openfl","display3D","_Context3D","Context3DTelemetry_Impl_"];
var openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_"] = openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.__name__ = ["openfl","display3D","_Context3DBlendFactor","Context3DBlendFactor_Impl_"];
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.fromString = function(value) {
	switch(value) {
	case "destinationAlpha":
		return 0;
	case "destinationColor":
		return 1;
	case "one":
		return 2;
	case "oneMinusDestinationAlpha":
		return 3;
	case "oneMinusDestinationColor":
		return 4;
	case "oneMinusSourceAlpha":
		return 5;
	case "oneMinusSourceColor":
		return 6;
	case "sourceAlpha":
		return 7;
	case "sourceColor":
		return 8;
	case "zero":
		return 9;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "destinationAlpha";
	case 1:
		return "destinationColor";
	case 2:
		return "one";
	case 3:
		return "oneMinusDestinationAlpha";
	case 4:
		return "oneMinusDestinationColor";
	case 5:
		return "oneMinusSourceAlpha";
	case 6:
		return "oneMinusSourceColor";
	case 7:
		return "sourceAlpha";
	case 8:
		return "sourceColor";
	case 9:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBufferUsage.Context3DBufferUsage_Impl_"] = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.__name__ = ["openfl","display3D","_Context3DBufferUsage","Context3DBufferUsage_Impl_"];
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamicDraw":
		return 0;
	case "staticDraw":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamicDraw";
	case 1:
		return "staticDraw";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DCompareMode","Context3DCompareMode_Impl_"];
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "equal":
		return 1;
	case "greater":
		return 2;
	case "greaterEqual":
		return 3;
	case "less":
		return 4;
	case "lessEqual":
		return 5;
	case "never":
		return 6;
	case "notEqual":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "equal";
	case 2:
		return "greater";
	case 3:
		return "greaterEqual";
	case 4:
		return "less";
	case 5:
		return "lessEqual";
	case 6:
		return "never";
	case 7:
		return "notEqual";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DMipFilter.Context3DMipFilter_Impl_"] = openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.__name__ = ["openfl","display3D","_Context3DMipFilter","Context3DMipFilter_Impl_"];
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "miplinear":
		return 0;
	case "mipnearest":
		return 1;
	case "mipnone":
		return 2;
	default:
		return null;
	}
};
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "miplinear";
	case 1:
		return "mipnearest";
	case 2:
		return "mipnone";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProfile.Context3DProfile_Impl_"] = openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.__name__ = ["openfl","display3D","_Context3DProfile","Context3DProfile_Impl_"];
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.fromString = function(value) {
	switch(value) {
	case "baseline":
		return 0;
	case "baselineConstrained":
		return 1;
	case "baselineExtended":
		return 2;
	case "standard":
		return 3;
	case "standardConstrained":
		return 4;
	case "standardExtended":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "baseline";
	case 1:
		return "baselineConstrained";
	case 2:
		return "baselineExtended";
	case 3:
		return "standard";
	case 4:
		return "standardConstrained";
	case 5:
		return "standardExtended";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProgramType.Context3DProgramType_Impl_"] = openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.__name__ = ["openfl","display3D","_Context3DProgramType","Context3DProgramType_Impl_"];
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fragment":
		return 0;
	case "vertex":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fragment";
	case 1:
		return "vertex";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DRenderMode.Context3DRenderMode_Impl_"] = openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DRenderMode","Context3DRenderMode_Impl_"];
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "auto":
		return 0;
	case "software":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "auto";
	case 1:
		return "software";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_"] = openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.__name__ = ["openfl","display3D","_Context3DStencilAction","Context3DStencilAction_Impl_"];
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.fromString = function(value) {
	switch(value) {
	case "decrementSaturate":
		return 0;
	case "decrementWrap":
		return 1;
	case "incrementSaturate":
		return 2;
	case "incrementWrap":
		return 3;
	case "invert":
		return 4;
	case "keep":
		return 5;
	case "set":
		return 6;
	case "zero":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "decrementSaturate";
	case 1:
		return "decrementWrap";
	case 2:
		return "incrementSaturate";
	case 3:
		return "incrementWrap";
	case 4:
		return "invert";
	case 5:
		return "keep";
	case 6:
		return "set";
	case 7:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFilter.Context3DTextureFilter_Impl_"] = openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFilter","Context3DTextureFilter_Impl_"];
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "anisotropic16x":
		return 0;
	case "anisotropic2x":
		return 1;
	case "anisotropic4x":
		return 2;
	case "anisotropic8x":
		return 3;
	case "linear":
		return 4;
	case "nearest":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "anisotropic16x";
	case 1:
		return "anisotropic2x";
	case 2:
		return "anisotropic4x";
	case 3:
		return "anisotropic8x";
	case 4:
		return "linear";
	case 5:
		return "nearest";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_"] = openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFormat","Context3DTextureFormat_Impl_"];
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bgrPacked565":
		return 0;
	case "bgra":
		return 1;
	case "bgraPacked4444":
		return 2;
	case "compressed":
		return 3;
	case "compressedAlpha":
		return 4;
	case "rgbaHalfFloat":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bgrPacked565";
	case 1:
		return "bgra";
	case 2:
		return "bgraPacked4444";
	case 3:
		return "compressed";
	case 4:
		return "compressedAlpha";
	case 5:
		return "rgbaHalfFloat";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromString = function(value) {
	switch(value) {
	case "back":
		return 0;
	case "front":
		return 1;
	case "frontAndBack":
		return 2;
	case "none":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "back";
	case 1:
		return "front";
	case 2:
		return "frontAndBack";
	case 3:
		return "none";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DVertexBufferFormat.Context3DVertexBufferFormat_Impl_"] = openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DVertexBufferFormat","Context3DVertexBufferFormat_Impl_"];
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bytes4":
		return 0;
	case "float1":
		return 1;
	case "float2":
		return 2;
	case "float3":
		return 3;
	case "float4":
		return 4;
	default:
		return null;
	}
};
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bytes4";
	case 1:
		return "float1";
	case 2:
		return "float2";
	case 3:
		return "float3";
	case 4:
		return "float4";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DWrapMode.Context3DWrapMode_Impl_"] = openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DWrapMode","Context3DWrapMode_Impl_"];
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "clamp":
		return 0;
	case "clamp_u_repeat_y":
		return 1;
	case "repeat":
		return 2;
	case "repeat_u_clamp_y":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "clamp";
	case 1:
		return "clamp_u_repeat_y";
	case 2:
		return "repeat";
	case 3:
		return "repeat_u_clamp_y";
	default:
		return null;
	}
};
var openfl_display3D_IndexBuffer3D = function(context3D,numIndices,bufferUsage) {
	this.__context = context3D;
	this.__numIndices = numIndices;
	openfl__$internal_stage3D_opengl_GLIndexBuffer3D.create(this,this.__context.__renderSession,bufferUsage);
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl_display3D_IndexBuffer3D.prototype = {
	__context: null
	,__elementType: null
	,__id: null
	,__memoryUsage: null
	,__numIndices: null
	,__tempInt16Array: null
	,__usage: null
	,dispose: function() {
		openfl__$internal_stage3D_opengl_GLIndexBuffer3D.dispose(this,this.__context.__renderSession);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startOffset,count) {
		openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset,startOffset,count);
	}
	,uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) {
			byteLength = -1;
		}
		openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromTypedArray(this,this.__context.__renderSession,data);
	}
	,uploadFromVector: function(data,startOffset,count) {
		openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromVector(this,this.__context.__renderSession,data,startOffset,count);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context3D) {
	this.__context = context3D;
	this.__memUsage = 0;
	this.__samplerUsageMask = 0;
	this.__uniforms = new List();
	this.__samplerUniforms = new List();
	this.__alphaSamplerUniforms = new List();
	this.__samplerStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	__alphaSamplerUniforms: null
	,__context: null
	,__fragmentShaderID: null
	,__fragmentSource: null
	,__fragmentUniformMap: null
	,__memUsage: null
	,__positionScale: null
	,__programID: null
	,__samplerStates: null
	,__samplerUniforms: null
	,__samplerUsageMask: null
	,__uniforms: null
	,__vertexShaderID: null
	,__vertexSource: null
	,__vertexUniformMap: null
	,dispose: function() {
		openfl__$internal_stage3D_opengl_GLProgram3D.dispose(this,this.__context.__renderSession);
	}
	,upload: function(vertexProgram,fragmentProgram) {
		openfl__$internal_stage3D_opengl_GLProgram3D.upload(this,this.__context.__renderSession,vertexProgram,fragmentProgram);
	}
	,__flush: function() {
		this.__vertexUniformMap.flush();
		this.__fragmentUniformMap.flush();
	}
	,__getSamplerState: function(sampler) {
		return this.__samplerStates.data.get(sampler);
	}
	,__markDirty: function(isVertex,index,count) {
		if(isVertex) {
			this.__vertexUniformMap.markDirty(index,count);
		} else {
			this.__fragmentUniformMap.markDirty(index,count);
		}
	}
	,__setPositionScale: function(positionScale) {
		if(this.__positionScale != null) {
			openfl__$internal_stage3D_opengl_GLProgram3D.setPositionScale(this,this.__context.__renderSession,positionScale);
		}
	}
	,__setSamplerState: function(sampler,state) {
		this.__samplerStates.data.set(sampler,state);
	}
	,__use: function() {
		openfl__$internal_stage3D_opengl_GLProgram3D["use"](this,this.__context.__renderSession);
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_Uniform = function(gl) {
	this.gl = gl;
	this.isDirty = true;
	var this1 = new lime_utils_BytePointerData(null,0);
	this.regDataPointer = this1;
};
$hxClasses["openfl.display3D.Uniform"] = openfl_display3D_Uniform;
openfl_display3D_Uniform.__name__ = ["openfl","display3D","Uniform"];
openfl_display3D_Uniform.prototype = {
	name: null
	,location: null
	,type: null
	,size: null
	,regData: null
	,regIndex: null
	,regCount: null
	,isDirty: null
	,gl: null
	,regDataPointer: null
	,flush: function() {
		openfl__$internal_stage3D_opengl_GLProgram3D.flushUniform(this,this.gl);
	}
	,__class__: openfl_display3D_Uniform
};
var openfl_display3D_UniformMap = function(list) {
	this.__uniforms = list;
	this.__uniforms.sort(function(a,b) {
		return Reflect.compare(a.regIndex,b.regIndex);
	});
	var total = 0;
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		if(uniform.regIndex + uniform.regCount > total) {
			total = uniform.regIndex + uniform.regCount;
		}
	}
	this.__registerLookup = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,total);
	var _g2 = 0;
	var _g11 = this.__uniforms;
	while(_g2 < _g11.length) {
		var uniform1 = _g11[_g2];
		++_g2;
		var _g3 = 0;
		var _g21 = uniform1.regCount;
		while(_g3 < _g21) {
			var i = _g3++;
			this.__registerLookup.data.set(uniform1.regIndex + i,uniform1);
		}
	}
	this.__anyDirty = this.__allDirty = true;
};
$hxClasses["openfl.display3D.UniformMap"] = openfl_display3D_UniformMap;
openfl_display3D_UniformMap.__name__ = ["openfl","display3D","UniformMap"];
openfl_display3D_UniformMap.prototype = {
	__allDirty: null
	,__anyDirty: null
	,__registerLookup: null
	,__uniforms: null
	,flush: function() {
		if(this.__anyDirty) {
			var _g = 0;
			var _g1 = this.__uniforms;
			while(_g < _g1.length) {
				var uniform = _g1[_g];
				++_g;
				if(this.__allDirty || uniform.isDirty) {
					uniform.flush();
					uniform.isDirty = false;
				}
			}
			this.__anyDirty = this.__allDirty = false;
		}
	}
	,markAllDirty: function() {
		this.__allDirty = true;
		this.__anyDirty = true;
	}
	,markDirty: function(start,count) {
		if(this.__allDirty) {
			return;
		}
		var end = start + count;
		if(end > this.__registerLookup.data.get_length()) {
			end = this.__registerLookup.data.get_length();
		}
		var index = start;
		while(index < end) {
			var uniform = this.__registerLookup.data.get(index);
			if(uniform != null) {
				uniform.isDirty = true;
				this.__anyDirty = true;
				index = uniform.regIndex + uniform.regCount;
			} else {
				++index;
			}
		}
	}
	,__class__: openfl_display3D_UniformMap
};
var openfl_display3D_VertexBuffer3D = function(context3D,numVertices,dataPerVertex,bufferUsage) {
	this.__context = context3D;
	this.__numVertices = numVertices;
	this.__vertexSize = dataPerVertex;
	openfl__$internal_stage3D_opengl_GLVertexBuffer3D.create(this,this.__context.__renderSession,openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString(bufferUsage));
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl_display3D_VertexBuffer3D.prototype = {
	__context: null
	,__data: null
	,__id: null
	,__memoryUsage: null
	,__numVertices: null
	,__stride: null
	,__tempFloat32Array: null
	,__usage: null
	,__vertexSize: null
	,dispose: function() {
		openfl__$internal_stage3D_opengl_GLVertexBuffer3D.dispose(this,this.__context.__renderSession);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startVertex,numVertices) {
		openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset,startVertex,numVertices);
	}
	,uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) {
			byteLength = -1;
		}
		openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromTypedArray(this,this.__context.__renderSession,data);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromVector(this,this.__context.__renderSession,data,startVertex,numVertices);
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(context) {
	openfl_events_EventDispatcher.call(this);
	this.__context = context;
	openfl__$internal_stage3D_opengl_GLTextureBase.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__alphaTexture: null
	,__context: null
	,__format: null
	,__height: null
	,__internalFormat: null
	,__optimizeForRenderToTexture: null
	,__samplerState: null
	,__streamingLevels: null
	,__textureContext: null
	,__textureID: null
	,__textureTarget: null
	,__width: null
	,dispose: function() {
		openfl__$internal_stage3D_opengl_GLTextureBase.dispose(this,this.__context.__renderSession);
	}
	,__getImage: function(bitmapData) {
		return openfl__$internal_stage3D_opengl_GLTextureBase.getImage(this,this.__context.__renderSession,bitmapData);
	}
	,__getTexture: function() {
		return this.__textureID;
	}
	,__setSamplerState: function(state) {
		openfl__$internal_stage3D_opengl_GLTextureBase.setSamplerState(this,this.__context.__renderSession,state);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,size,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__size = size;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	openfl__$internal_stage3D_opengl_GLCubeTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__size: null
	,__uploadedSides: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		if(!async) {
			openfl__$internal_stage3D_opengl_GLCubeTexture.uploadCompressedTextureFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset);
		} else {
			haxe_Timer.delay(function() {
				openfl__$internal_stage3D_opengl_GLCubeTexture.uploadCompressedTextureFromByteArray(_gthis,_gthis.__context.__renderSession,data,byteArrayOffset);
				_gthis.dispatchEvent(new openfl_events_Event("textureReady"));
			},1);
		}
	}
	,uploadFromBitmapData: function(source,side,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		if(source == null) {
			return;
		}
		openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromBitmapData(this,this.__context.__renderSession,source,side,miplevel,generateMipmap);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset,side,miplevel);
	}
	,uploadFromTypedArray: function(data,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(data == null) {
			return;
		}
		openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromTypedArray(this,this.__context.__renderSession,data,side,miplevel);
	}
	,__setSamplerState: function(state) {
		openfl__$internal_stage3D_opengl_GLCubeTexture.setSamplerState(this,this.__context.__renderSession,state);
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,width,height,format,optimizeForRenderToTexture) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	openfl__$internal_stage3D_opengl_GLRectangleTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadFromBitmapData: function(source) {
		openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromBitmapData(this,this.__context.__renderSession,source);
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset);
	}
	,uploadFromTypedArray: function(data) {
		openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(this,this.__context.__renderSession,data);
	}
	,__setSamplerState: function(state) {
		openfl__$internal_stage3D_opengl_GLRectangleTexture.setSamplerState(this,this.__context.__renderSession,state);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,width,height,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	openfl__$internal_stage3D_opengl_GLTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		if(!async) {
			openfl__$internal_stage3D_opengl_GLTexture.uploadCompressedTextureFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset);
		} else {
			haxe_Timer.delay(function() {
				openfl__$internal_stage3D_opengl_GLTexture.uploadCompressedTextureFromByteArray(_gthis,_gthis.__context.__renderSession,data,byteArrayOffset);
				_gthis.dispatchEvent(new openfl_events_Event("textureReady"));
			},1);
		}
	}
	,uploadFromBitmapData: function(source,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		openfl__$internal_stage3D_opengl_GLTexture.uploadFromBitmapData(this,this.__context.__renderSession,source,miplevel,generateMipmap);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		openfl__$internal_stage3D_opengl_GLTexture.uploadFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset,miplevel);
	}
	,uploadFromTypedArray: function(data,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray(this,this.__context.__renderSession,data,miplevel);
	}
	,__setSamplerState: function(state) {
		openfl__$internal_stage3D_opengl_GLTexture.setSamplerState(this,this.__context.__renderSession,state);
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_display3D_textures_VideoTexture = function(context) {
	openfl_display3D_textures_TextureBase.call(this,context);
	openfl__$internal_stage3D_opengl_GLVideoTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.VideoTexture"] = openfl_display3D_textures_VideoTexture;
openfl_display3D_textures_VideoTexture.__name__ = ["openfl","display3D","textures","VideoTexture"];
openfl_display3D_textures_VideoTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_VideoTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	videoHeight: null
	,videoWidth: null
	,__netStream: null
	,attachNetStream: function(netStream) {
		var _gthis = this;
		this.__netStream = netStream;
		if(this.__netStream.__video.readyState == 4) {
			haxe_Timer.delay(function() {
				_gthis.__textureReady();
			},0);
		} else {
			this.__netStream.__video.addEventListener("canplay",function(_) {
				_gthis.__textureReady();
			},false);
		}
	}
	,__getTexture: function() {
		return openfl__$internal_stage3D_opengl_GLVideoTexture.getTexture(this,this.__context.__renderSession);
	}
	,__textureReady: function() {
		this.videoWidth = this.__netStream.__video.videoWidth;
		this.videoHeight = this.__netStream.__video.videoHeight;
		this.dispatchEvent(new openfl_events_Event("textureReady"));
	}
	,__class__: openfl_display3D_textures_VideoTexture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function() {
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_IllegalOperationError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "IllegalOperationError";
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl_errors_IllegalOperationError;
openfl_errors_IllegalOperationError.__name__ = ["openfl","errors","IllegalOperationError"];
openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
openfl_errors_IllegalOperationError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IllegalOperationError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = ["openfl","errors","RangeError"];
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) {
			parameters.push(p1);
		}
		if(p2 != null) {
			parameters.push(p2);
		}
		if(p3 != null) {
			parameters.push(p3);
		}
		if(p4 != null) {
			parameters.push(p4);
		}
		if(p5 != null) {
			parameters.push(p5);
		}
		return $bind(this,this.__formatToString).apply(this,[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) {
			this.__preventDefault = true;
		}
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") {
				output += " " + param + "=\"" + Std.string(arg) + "\"";
			} else {
				output += " " + param + "=" + Std.string(arg);
			}
		}
		output += "]";
		return output;
	}
	,__class__: openfl_events_Event
};
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) {
		activating = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,clone: function() {
		var event = new openfl_events_ActivityEvent(this.type,this.bubbles,this.cancelable,this.activating);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ActivityEvent",["type","bubbles","cancelable","activating"]);
	}
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,clone: function() {
		var event = new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TextEvent",["type","bubbles","cancelable","text"]);
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,clone: function() {
		var event = new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_DispatchIterator = function(list) {
	this.list = list;
	this.index = list.length;
};
$hxClasses["openfl.events._EventDispatcher.DispatchIterator"] = openfl_events__$EventDispatcher_DispatchIterator;
openfl_events__$EventDispatcher_DispatchIterator.__name__ = ["openfl","events","_EventDispatcher","DispatchIterator"];
openfl_events__$EventDispatcher_DispatchIterator.prototype = {
	active: null
	,index: null
	,isCopy: null
	,list: null
	,copy: function() {
		if(!this.isCopy) {
			this.list = this.list.slice();
			this.isCopy = true;
		}
	}
	,hasNext: function() {
		if(this.index < this.list.length) {
			return true;
		} else {
			this.active = false;
			return false;
		}
	}
	,next: function() {
		return this.list[this.index++];
	}
	,remove: function(listener,listIndex) {
		if(this.active) {
			if(!this.isCopy) {
				if(listIndex < this.index) {
					this.index--;
				}
			} else {
				var _g1 = this.index;
				var _g = this.list.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this.list[i] == listener) {
						this.list.splice(i,1);
						break;
					}
				}
			}
		}
	}
	,reset: function(list) {
		this.list = list;
		this.active = true;
		this.isCopy = false;
		this.index = 0;
	}
	,__class__: openfl_events__$EventDispatcher_DispatchIterator
};
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		if(Reflect.compareMethods(this.callback,callback)) {
			return this.useCapture == useCapture;
		} else {
			return false;
		}
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) {
		keyCode = 0;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FocusEvent",["type","bubbles","cancelable","relatedObject","shiftKey","keyCode"]);
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) {
		interactive = false;
	}
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FullscreenEvent",["type","bubbles","cancelable","fullscreen","interactive"]);
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,clone: function() {
		var event = new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("GameInputEvent",["type","bubbles","cancelable","device"]);
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) {
		redirected = false;
	}
	if(status == null) {
		status = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,clone: function() {
		var event = new openfl_events_HTTPStatusEvent(this.type,this.bubbles,null,this.status,this.redirected);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("HTTPStatusEvent",["type","bubbles","cancelable","status","redirected"]);
	}
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("IOErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) {
		commandKeyValue = false;
	}
	if(controlKeyValue == null) {
		controlKeyValue = false;
	}
	if(shiftKeyValue == null) {
		shiftKeyValue = false;
	}
	if(altKeyValue == null) {
		altKeyValue = false;
	}
	if(ctrlKeyValue == null) {
		ctrlKeyValue = false;
	}
	if(keyCodeValue == null) {
		keyCodeValue = 0;
	}
	if(charCodeValue == null) {
		charCodeValue = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	this.keyLocation = keyLocationValue != null ? keyLocationValue : 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("KeyboardEvent",["type","bubbles","cancelable","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey"]);
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) {
		clickCount = 0;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
	this.isRelatedObjectInaccessible = false;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) {
		delta = 0;
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,isRelatedObjectInaccessible: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,clone: function() {
		var event = new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("MouseEvent",["type","bubbles","cancelable","localX","localY","relatedObject","ctrlKey","altKey","shiftKey","buttonDown","delta"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = ["openfl","events","NetStatusEvent"];
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	info: null
	,clone: function() {
		var event = new openfl_events_NetStatusEvent(this.type,this.bubbles,this.cancelable,this.info);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("NetStatusEvent",["type","bubbles","cancelable","info"]);
	}
	,__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) {
		bytesTotal = 0;
	}
	if(bytesLoaded == null) {
		bytesLoaded = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,clone: function() {
		var event = new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ProgressEvent",["type","bubbles","cancelable","bytesLoaded","bytesTotal"]);
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SecurityErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) {
		isTouchPointCanceled = false;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 0;
	}
	if(sizeY == null) {
		sizeY = 0;
	}
	if(sizeX == null) {
		sizeX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,clone: function() {
		var event = new openfl_events_TouchEvent(this.type,this.bubbles,this.cancelable,this.touchPointID,this.isPrimaryTouchPoint,this.localX,this.localY,this.sizeX,this.sizeY,this.pressure,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.commandKey,this.controlKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TouchEvent",["type","bubbles","cancelable","touchPointID","isPrimaryTouchPoint","localX","localY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey","commandKey","controlKey"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_events_UncaughtErrorEvent = function(type,bubbles,cancelable,error) {
	if(cancelable == null) {
		cancelable = true;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.error = error;
};
$hxClasses["openfl.events.UncaughtErrorEvent"] = openfl_events_UncaughtErrorEvent;
openfl_events_UncaughtErrorEvent.__name__ = ["openfl","events","UncaughtErrorEvent"];
openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_UncaughtErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	error: null
	,clone: function() {
		var event = new openfl_events_UncaughtErrorEvent(this.type,this.bubbles,this.cancelable,this.error);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("UncaughtErrorEvent",["type","bubbles","cancelable","error"]);
	}
	,__class__: openfl_events_UncaughtErrorEvent
});
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_filters_BitmapFilter = function() {
	this.__bottomExtension = 0;
	this.__leftExtension = 0;
	this.__needSecondBitmapData = true;
	this.__numShaderPasses = 0;
	this.__preserveObject = false;
	this.__rightExtension = 0;
	this.__topExtension = 0;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.prototype = {
	__bottomExtension: null
	,__leftExtension: null
	,__needSecondBitmapData: null
	,__numShaderPasses: null
	,__preserveObject: null
	,__renderDirty: null
	,__rightExtension: null
	,__topExtension: null
	,clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		return sourceBitmapData;
	}
	,__initShader: function(renderSession,pass) {
		return renderSession.shaderManager.defaultShader;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters_BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.set_quality(quality);
	this.__needSecondBitmapData = true;
	this.__preserveObject = false;
};
$hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
openfl_filters_BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_BlurFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	blurX: null
	,blurY: null
	,quality: null
	,horizontalPasses: null
	,verticalPasses: null
	,clone: function() {
		return new openfl_filters_BlurFilter(this.blurX,this.blurY,this.quality);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var finalImage = lime_graphics_utils_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.blurX,this.blurY,this.quality);
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__initShader: function(renderSession,pass) {
		return null;
	}
	,set_blurX: function(value) {
		if(value != this.blurX) {
			this.blurX = value;
			this.__renderDirty = true;
			this.__leftExtension = value > 0 ? Math.ceil(value) : 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,set_blurY: function(value) {
		if(value != this.blurY) {
			this.blurY = value;
			this.__renderDirty = true;
			this.__topExtension = value > 0 ? Math.ceil(value) : 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,set_quality: function(value) {
		this.horizontalPasses = this.blurX <= 0 ? 0 : Math.round(this.blurX * (value / 4)) + 1;
		this.verticalPasses = this.blurY <= 0 ? 0 : Math.round(this.blurY * (value / 4)) + 1;
		this.__numShaderPasses = this.horizontalPasses + this.verticalPasses;
		if(value != this.quality) {
			this.__renderDirty = true;
		}
		return this.quality = value;
	}
	,__class__: openfl_filters_BlurFilter
	,__properties__: {set_quality:"set_quality",set_blurY:"set_blurY",set_blurX:"set_blurX"}
});
var openfl_filters__$BlurFilter_BlurShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 sum = vec4(0.0);\n\t\t\tsum += texture2D(uImage0, vBlurCoords[0]) * 0.00443;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[1]) * 0.05399;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[2]) * 0.24197;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[3]) * 0.39894;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[4]) * 0.24197;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[5]) * 0.05399;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[6]) * 0.00443;\n\t\t\t\n\t\t\tgl_FragColor = sum;\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = aTexCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = aTexCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = aTexCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = aTexCoord;\n\t\t\tvBlurCoords[4] = aTexCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = aTexCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = aTexCoord + r * 1.0;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.get_data().uRadius.value = [0,0];
};
$hxClasses["openfl.filters._BlurFilter.BlurShader"] = openfl_filters__$BlurFilter_BlurShader;
openfl_filters__$BlurFilter_BlurShader.__name__ = ["openfl","filters","_BlurFilter","BlurShader"];
openfl_filters__$BlurFilter_BlurShader.__super__ = openfl_display_Shader;
openfl_filters__$BlurFilter_BlurShader.prototype = $extend(openfl_display_Shader.prototype,{
	__update: function() {
		var tmp = this.get_data().uImage0.input.width;
		this.get_data().uTextureSize.value = [tmp,this.get_data().uImage0.input.height];
		openfl_display_Shader.prototype.__update.call(this);
	}
	,__class__: openfl_filters__$BlurFilter_BlurShader
});
var openfl_filters_ColorMatrixFilter = function(matrix) {
	openfl_filters_BitmapFilter.call(this);
	this.set_matrix(matrix);
	this.__numShaderPasses = 0;
	this.__needSecondBitmapData = false;
};
$hxClasses["openfl.filters.ColorMatrixFilter"] = openfl_filters_ColorMatrixFilter;
openfl_filters_ColorMatrixFilter.__name__ = ["openfl","filters","ColorMatrixFilter"];
openfl_filters_ColorMatrixFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ColorMatrixFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	matrix: null
	,clone: function() {
		return new openfl_filters_ColorMatrixFilter(this.matrix);
	}
	,__applyFilter: function(destBitmapData,sourceBitmapData,sourceRect,destPoint) {
		var sourceImage = sourceBitmapData.image;
		var image = destBitmapData.image;
		lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
		lime_graphics_utils_ImageCanvasUtil.convertToData(image);
		var sourceData = sourceImage.get_data();
		var destData = image.get_data();
		var offsetX = destPoint.x - sourceRect.x | 0;
		var offsetY = destPoint.y - sourceRect.y | 0;
		var sourceStride = sourceBitmapData.width * 4;
		var destStride = destBitmapData.width * 4;
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourcePixel;
		var destPixel = 0;
		var sourceOffset;
		var destOffset;
		var _g1 = sourceRect.y | 0;
		var _g = sourceRect.height | 0;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = sourceRect.x | 0;
			var _g2 = sourceRect.width | 0;
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				destOffset = (row + offsetX) * destStride + (column + offsetY) * 4;
				switch(sourceFormat) {
				case 0:
					sourcePixel = (sourceData[sourceOffset] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset + 2] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourceOffset + 1] & 255) << 24 | (sourceData[sourceOffset + 2] & 255) << 16 | (sourceData[sourceOffset + 3] & 255) << 8 | sourceData[sourceOffset] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[sourceOffset + 2] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if((sourcePixel & 255) == 0) {
					destPixel = 0;
				} else {
					var value = Math.min(this.matrix[0] * (sourcePixel >>> 24 & 255) + this.matrix[1] * (sourcePixel >>> 16 & 255) + this.matrix[2] * (sourcePixel >>> 8 & 255) + this.matrix[3] * (sourcePixel & 255) + this.matrix[4],255) | 0;
					destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					var value1 = Math.min(this.matrix[5] * (sourcePixel >>> 24 & 255) + this.matrix[6] * (sourcePixel >>> 16 & 255) + this.matrix[7] * (sourcePixel >>> 8 & 255) + this.matrix[8] * (sourcePixel & 255) + this.matrix[9],255) | 0;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					var value2 = Math.min(this.matrix[10] * (sourcePixel >>> 24 & 255) + this.matrix[11] * (sourcePixel >>> 16 & 255) + this.matrix[12] * (sourcePixel >>> 8 & 255) + this.matrix[13] * (sourcePixel & 255) + this.matrix[14],255) | 0;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
					var value3 = Math.min(this.matrix[15] * (sourcePixel >>> 24 & 255) + this.matrix[16] * (sourcePixel >>> 16 & 255) + this.matrix[17] * (sourcePixel >>> 8 & 255) + this.matrix[18] * (sourcePixel & 255) + this.matrix[19],255) | 0;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
				}
				if(destPremultiplied) {
					if((destPixel & 255) == 0) {
						if(destPixel != 0) {
							destPixel = 0;
						}
					} else if((destPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
						destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destOffset] = destPixel >>> 24 & 255;
					destData[destOffset + 1] = destPixel >>> 16 & 255;
					destData[destOffset + 2] = destPixel >>> 8 & 255;
					destData[destOffset + 3] = destPixel & 255;
					break;
				case 1:
					destData[destOffset] = destPixel & 255;
					destData[destOffset + 1] = destPixel >>> 24 & 255;
					destData[destOffset + 2] = destPixel >>> 16 & 255;
					destData[destOffset + 3] = destPixel >>> 8 & 255;
					break;
				case 2:
					destData[destOffset] = destPixel >>> 8 & 255;
					destData[destOffset + 1] = destPixel >>> 16 & 255;
					destData[destOffset + 2] = destPixel >>> 24 & 255;
					destData[destOffset + 3] = destPixel & 255;
					break;
				}
			}
		}
		destBitmapData.image.dirty = true;
		return destBitmapData;
	}
	,__initShader: function(renderSession,pass) {
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			value = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0];
		}
		return this.matrix = value;
	}
	,__class__: openfl_filters_ColorMatrixFilter
	,__properties__: {set_matrix:"set_matrix"}
});
var openfl_filters__$ColorMatrixFilter_ColorMatrixShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform mat4 uMultipliers;\n\t\tuniform vec4 uOffsets;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tcolor = uOffsets + color * uMultipliers;\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.get_data().uMultipliers.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	this.get_data().uOffsets.value = [0,0,0,0];
};
$hxClasses["openfl.filters._ColorMatrixFilter.ColorMatrixShader"] = openfl_filters__$ColorMatrixFilter_ColorMatrixShader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__name__ = ["openfl","filters","_ColorMatrixFilter","ColorMatrixShader"];
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__super__ = openfl_display_Shader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.prototype = $extend(openfl_display_Shader.prototype,{
	init: function(matrix) {
		var multipliers = this.get_data().uMultipliers.value;
		var offsets = this.get_data().uOffsets.value;
		multipliers[0] = matrix[0];
		multipliers[1] = matrix[1];
		multipliers[2] = matrix[2];
		multipliers[3] = matrix[3];
		multipliers[4] = matrix[5];
		multipliers[5] = matrix[6];
		multipliers[6] = matrix[7];
		multipliers[7] = matrix[8];
		multipliers[8] = matrix[10];
		multipliers[9] = matrix[11];
		multipliers[10] = matrix[12];
		multipliers[11] = matrix[13];
		multipliers[12] = matrix[15];
		multipliers[13] = matrix[16];
		multipliers[14] = matrix[17];
		multipliers[15] = matrix[18];
		offsets[0] = matrix[4] / 255.0;
		offsets[1] = matrix[9] / 255.0;
		offsets[2] = matrix[14] / 255.0;
		offsets[3] = matrix[19] / 255.0;
	}
	,__class__: openfl_filters__$ColorMatrixFilter_ColorMatrixShader
});
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) {
		hideObject = false;
	}
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 45;
	}
	if(distance == null) {
		distance = 4;
	}
	this.distance = 4;
	this.blurY = 0;
	this.blurX = 0;
	this.angle = 45;
	openfl_filters_BitmapFilter.call(this);
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__updateSize();
	this.set_distance(distance);
	this.set_angle(angle);
	this.set_color(color);
	this.set_alpha(alpha);
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.set_strength(strength);
	this.set_quality(quality);
	this.set_inner(inner);
	this.set_knockout(knockout);
	this.set_hideObject(hideObject);
	this.__needSecondBitmapData = true;
	this.__preserveObject = !hideObject;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,angle: null
	,blurX: null
	,blurY: null
	,color: null
	,distance: null
	,hideObject: null
	,inner: null
	,knockout: null
	,quality: null
	,strength: null
	,__offsetX: null
	,__offsetY: null
	,clone: function() {
		return new openfl_filters_DropShadowFilter(this.distance,this.angle,this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout,this.hideObject);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var a = this.color >> 24 & 255;
		var r = this.color >> 16 & 255;
		var g = this.color >> 8 & 255;
		var b = this.color & 255;
		sourceBitmapData.colorTransform(sourceBitmapData.rect,new openfl_geom_ColorTransform(0,0,0,1,r,g,b,a));
		destPoint.x += this.__offsetX;
		destPoint.y += this.__offsetY;
		var finalImage = lime_graphics_utils_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.blurX,this.blurY,this.quality,this.strength);
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__updateSize: function() {
		this.__offsetX = this.distance * Math.cos(this.angle * Math.PI / 180) | 0;
		this.__offsetY = this.distance * Math.sin(this.angle * Math.PI / 180) | 0;
		this.__topExtension = Math.ceil((this.__offsetY < 0 ? -this.__offsetY : 0) + this.blurY);
		this.__bottomExtension = Math.ceil((this.__offsetY > 0 ? this.__offsetY : 0) + this.blurY);
		this.__leftExtension = Math.ceil((this.__offsetX < 0 ? -this.__offsetX : 0) + this.blurX);
		this.__rightExtension = Math.ceil((this.__offsetX > 0 ? this.__offsetX : 0) + this.blurX);
	}
	,set_alpha: function(value) {
		if(value != this.alpha) {
			this.__renderDirty = true;
		}
		return this.alpha = value;
	}
	,set_angle: function(value) {
		if(value != this.angle) {
			this.angle = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,set_blurX: function(value) {
		if(value != this.blurX) {
			this.blurX = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,set_blurY: function(value) {
		if(value != this.blurY) {
			this.blurY = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,set_color: function(value) {
		if(value != this.color) {
			this.__renderDirty = true;
		}
		return this.color = value;
	}
	,set_distance: function(value) {
		if(value != this.distance) {
			this.distance = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,set_hideObject: function(value) {
		if(value != this.hideObject) {
			this.__renderDirty = true;
			this.__preserveObject = !value;
		}
		return this.hideObject = value;
	}
	,set_inner: function(value) {
		if(value != this.inner) {
			this.__renderDirty = true;
		}
		return this.inner = value;
	}
	,set_knockout: function(value) {
		if(value != this.knockout) {
			this.__renderDirty = true;
		}
		return this.knockout = value;
	}
	,set_quality: function(value) {
		if(value != this.quality) {
			this.__renderDirty = true;
		}
		return this.quality = value;
	}
	,set_strength: function(value) {
		if(value != this.strength) {
			this.__renderDirty = true;
		}
		return this.strength = value;
	}
	,__class__: openfl_filters_DropShadowFilter
	,__properties__: {set_strength:"set_strength",set_quality:"set_quality",set_knockout:"set_knockout",set_inner:"set_inner",set_hideObject:"set_hideObject",set_distance:"set_distance",set_color:"set_color",set_blurY:"set_blurY",set_blurX:"set_blurX",set_angle:"set_angle",set_alpha:"set_alpha"}
});
var openfl_filters_GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 2;
	}
	if(blurY == null) {
		blurY = 6;
	}
	if(blurX == null) {
		blurX = 6;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16711680;
	}
	openfl_filters_BitmapFilter.call(this);
	this.set_color(color);
	this.set_alpha(alpha);
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.set_strength(strength);
	this.set_quality(quality);
	this.set_inner(inner);
	this.set_knockout(knockout);
	this.__needSecondBitmapData = true;
	this.__preserveObject = true;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,blurX: null
	,blurY: null
	,color: null
	,inner: null
	,knockout: null
	,quality: null
	,strength: null
	,horizontalPasses: null
	,verticalPasses: null
	,clone: function() {
		return new openfl_filters_GlowFilter(this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var r = this.color >> 16 & 255;
		var g = this.color >> 8 & 255;
		var b = this.color & 255;
		sourceBitmapData.colorTransform(sourceBitmapData.rect,new openfl_geom_ColorTransform(0,0,0,1,r,g,b,this.alpha * 255));
		var finalImage = lime_graphics_utils_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.blurX,this.blurY,this.quality,this.strength);
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__initShader: function(renderSession,pass) {
		return null;
	}
	,set_alpha: function(value) {
		if(value != this.alpha) {
			this.__renderDirty = true;
		}
		return this.alpha = value;
	}
	,set_blurX: function(value) {
		if(value != this.blurX) {
			this.blurX = value;
			this.__renderDirty = true;
			this.__leftExtension = value > 0 ? Math.ceil(value) : 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,set_blurY: function(value) {
		if(value != this.blurY) {
			this.blurY = value;
			this.__renderDirty = true;
			this.__topExtension = value > 0 ? Math.ceil(value) : 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,set_color: function(value) {
		if(value != this.color) {
			this.__renderDirty = true;
		}
		return this.color = value;
	}
	,set_inner: function(value) {
		if(value != this.inner) {
			this.__renderDirty = true;
		}
		return this.inner = value;
	}
	,set_knockout: function(value) {
		if(value != this.knockout) {
			this.__renderDirty = true;
		}
		return this.knockout = value;
	}
	,set_quality: function(value) {
		this.horizontalPasses = this.blurX <= 0 ? 0 : Math.round(this.blurX * (value / 4)) + 1;
		this.verticalPasses = this.blurY <= 0 ? 0 : Math.round(this.blurY * (value / 4)) + 1;
		this.__numShaderPasses = this.horizontalPasses + this.verticalPasses;
		if(value != this.quality) {
			this.__renderDirty = true;
		}
		return this.quality = value;
	}
	,set_strength: function(value) {
		if(value != this.strength) {
			this.__renderDirty = true;
		}
		return this.strength = value;
	}
	,__class__: openfl_filters_GlowFilter
	,__properties__: {set_strength:"set_strength",set_quality:"set_quality",set_knockout:"set_knockout",set_inner:"set_inner",set_color:"set_color",set_blurY:"set_blurY",set_blurX:"set_blurX",set_alpha:"set_alpha"}
});
var openfl_filters__$GlowFilter_GlowShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform vec4 uColor;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tfloat a = 0.0;\n\t\t\ta += texture2D(uImage0, vBlurCoords[0]).a * 0.00443;\n\t\t\ta += texture2D(uImage0, vBlurCoords[1]).a * 0.05399;\n\t\t\ta += texture2D(uImage0, vBlurCoords[2]).a * 0.24197;\n\t\t\ta += texture2D(uImage0, vBlurCoords[3]).a * 0.39894;\n\t\t\ta += texture2D(uImage0, vBlurCoords[4]).a * 0.24197;\n\t\t\ta += texture2D(uImage0, vBlurCoords[5]).a * 0.05399;\n\t\t\ta += texture2D(uImage0, vBlurCoords[6]).a * 0.00443;\n\t\t\ta *= uColor.a;\n\t\t\t\n\t\t\tgl_FragColor = vec4(uColor.rgb * a, a);\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = aTexCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = aTexCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = aTexCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = aTexCoord;\n\t\t\tvBlurCoords[4] = aTexCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = aTexCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = aTexCoord + r * 1.0;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.get_data().uRadius.value = [0,0];
	this.get_data().uColor.value = [0,0,0,0];
};
$hxClasses["openfl.filters._GlowFilter.GlowShader"] = openfl_filters__$GlowFilter_GlowShader;
openfl_filters__$GlowFilter_GlowShader.__name__ = ["openfl","filters","_GlowFilter","GlowShader"];
openfl_filters__$GlowFilter_GlowShader.__super__ = openfl_display_Shader;
openfl_filters__$GlowFilter_GlowShader.prototype = $extend(openfl_display_Shader.prototype,{
	__update: function() {
		var tmp = this.get_data().uImage0.input.width;
		this.get_data().uTextureSize.value = [tmp,this.get_data().uImage0.input.height];
		openfl_display_Shader.prototype.__update.call(this);
	}
	,__class__: openfl_filters__$GlowFilter_GlowShader
});
var openfl_filters__$BlurShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._BlurShader_ShaderData"] = openfl_filters__$BlurShader_$ShaderData;
openfl_filters__$BlurShader_$ShaderData.__name__ = ["openfl","filters","_BlurShader_ShaderData"];
openfl_filters__$BlurShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$BlurShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uRadius: null
	,uTextureSize: null
	,__class__: openfl_filters__$BlurShader_$ShaderData
});
var openfl_filters__$ColorMatrixShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._ColorMatrixShader_ShaderData"] = openfl_filters__$ColorMatrixShader_$ShaderData;
openfl_filters__$ColorMatrixShader_$ShaderData.__name__ = ["openfl","filters","_ColorMatrixShader_ShaderData"];
openfl_filters__$ColorMatrixShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$ColorMatrixShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uMultipliers: null
	,uOffsets: null
	,__class__: openfl_filters__$ColorMatrixShader_$ShaderData
});
var openfl_filters__$GlowShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._GlowShader_ShaderData"] = openfl_filters__$GlowShader_$ShaderData;
openfl_filters__$GlowShader_$ShaderData.__name__ = ["openfl","filters","_GlowShader_ShaderData"];
openfl_filters__$GlowShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$GlowShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uRadius: null
	,uTextureSize: null
	,uColor: null
	,__class__: openfl_filters__$GlowShader_$ShaderData
});
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
		this.redOffset = second.redMultiplier * this.redOffset + second.redOffset;
		this.greenOffset = second.greenMultiplier * this.greenOffset + second.greenOffset;
		this.blueOffset = second.blueMultiplier * this.blueOffset + second.blueOffset;
		this.alphaOffset = second.alphaMultiplier * this.alphaOffset + second.alphaOffset;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__copyFrom: function(ct) {
		this.redMultiplier = ct.redMultiplier;
		this.greenMultiplier = ct.greenMultiplier;
		this.blueMultiplier = ct.blueMultiplier;
		this.alphaMultiplier = ct.alphaMultiplier;
		this.redOffset = ct.redOffset;
		this.greenOffset = ct.greenOffset;
		this.blueOffset = ct.blueOffset;
		this.alphaOffset = ct.alphaOffset;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__identity: function() {
		this.redMultiplier = 1;
		this.greenMultiplier = 1;
		this.blueMultiplier = 1;
		this.alphaMultiplier = 1;
		this.redOffset = 0;
		this.greenOffset = 0;
		this.blueOffset = 0;
		this.alphaOffset = 0;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) {
			skipAlphaMultiplier = false;
		}
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function() {
		if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			var this1 = new Float32Array(20);
			openfl_geom_ColorTransform.__limeColorMatrix = this1;
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.setTo(0,0,1);
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(this.__array == null) {
			var this1 = new Float32Array(9);
			this.__array = this1;
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		openfl_geom_Matrix.__matrix3.setTo(this.a,this.b,this.c,this.d,this.tx,this.ty);
		return openfl_geom_Matrix.__matrix3;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.tx;
		} else {
			return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.ty;
		} else {
			return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.data.get_length() == 16) {
		var data = null;
		this.rawData = new openfl__$Vector_AbstractVector(v.data.concat(data));
	} else {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.data.set(i,a[i]);
		}
		this.rawData = vector;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var a = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.data.set(i,a[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	var a1 = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a1.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.data.set(i,a1[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var a = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2.0 * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.data.set(i,a[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var this1 = m.rawData;
		var value = thisMat.rawData.data.get(i) + (toMat.rawData.data.get(i) - thisMat.rawData.data.get(i)) * percent;
		this1.data.set(i,value);
	}
	return m;
};
openfl_geom_Matrix3D.__getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	m.rawData.data.set(0,c + a1.x * a1.x * t);
	m.rawData.data.set(5,c + a1.y * a1.y * t);
	m.rawData.data.set(10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	m.rawData.data.set(4,tmp1 + tmp2);
	m.rawData.data.set(1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	m.rawData.data.set(8,tmp1 - tmp2);
	m.rawData.data.set(2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	m.rawData.data.set(9,tmp1 + tmp2);
	m.rawData.data.set(6,tmp1 - tmp2);
	return m;
};
openfl_geom_Matrix3D.prototype = {
	rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.data.get(0);
		var m121 = this.rawData.data.get(4);
		var m131 = this.rawData.data.get(8);
		var m141 = this.rawData.data.get(12);
		var m112 = this.rawData.data.get(1);
		var m122 = this.rawData.data.get(5);
		var m132 = this.rawData.data.get(9);
		var m142 = this.rawData.data.get(13);
		var m113 = this.rawData.data.get(2);
		var m123 = this.rawData.data.get(6);
		var m133 = this.rawData.data.get(10);
		var m143 = this.rawData.data.get(14);
		var m114 = this.rawData.data.get(3);
		var m124 = this.rawData.data.get(7);
		var m134 = this.rawData.data.get(11);
		var m144 = this.rawData.data.get(15);
		var m211 = lhs.rawData.data.get(0);
		var m221 = lhs.rawData.data.get(4);
		var m231 = lhs.rawData.data.get(8);
		var m241 = lhs.rawData.data.get(12);
		var m212 = lhs.rawData.data.get(1);
		var m222 = lhs.rawData.data.get(5);
		var m232 = lhs.rawData.data.get(9);
		var m242 = lhs.rawData.data.get(13);
		var m213 = lhs.rawData.data.get(2);
		var m223 = lhs.rawData.data.get(6);
		var m233 = lhs.rawData.data.get(10);
		var m243 = lhs.rawData.data.get(14);
		var m214 = lhs.rawData.data.get(3);
		var m224 = lhs.rawData.data.get(7);
		var m234 = lhs.rawData.data.get(11);
		var m244 = lhs.rawData.data.get(15);
		this.rawData.data.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.data.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.data.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.data.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.data.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.data.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.data.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.data.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.data.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.data.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.data.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.data.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.data.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.data.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.data.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.data.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var tx;
		var ty;
		var tz = 0;
		ty = tz;
		tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.data.set(0,x2 + (y2 + z2) * cos);
		d.data.set(1,x * y * ccos + z * sin);
		d.data.set(2,x * z * ccos - y * sin);
		d.data.set(4,x * y * ccos - z * sin);
		d.data.set(5,y2 + (x2 + z2) * cos);
		d.data.set(6,y * z * ccos + x * sin);
		d.data.set(8,x * z * ccos + y * sin);
		d.data.set(9,y * z * ccos - x * sin);
		d.data.set(10,z2 + (x2 + y2) * cos);
		d.data.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.data.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.data.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.data.set(i,a[i]);
		}
		this.append(new openfl_geom_Matrix3D(vector));
	}
	,appendTranslation: function(x,y,z) {
		var _g = this.rawData;
		var value = _g.data.get(12) + x;
		_g.data.set(12,value);
		var _g1 = this.rawData;
		var value1 = _g1.data.get(13) + y;
		_g1.data.set(13,value1);
		var _g2 = this.rawData;
		var value2 = _g2.data.get(14) + z;
		_g2.data.set(14,value2);
	}
	,clone: function() {
		return new openfl_geom_Matrix3D(new openfl__$Vector_AbstractVector(this.rawData.data.copy()));
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			this.rawData.data.set(0,vector3D.x);
			this.rawData.data.set(1,vector3D.y);
			this.rawData.data.set(2,vector3D.z);
			this.rawData.data.set(3,vector3D.w);
			break;
		case 1:
			this.rawData.data.set(4,vector3D.x);
			this.rawData.data.set(5,vector3D.y);
			this.rawData.data.set(6,vector3D.z);
			this.rawData.data.set(7,vector3D.w);
			break;
		case 2:
			this.rawData.data.set(8,vector3D.x);
			this.rawData.data.set(9,vector3D.y);
			this.rawData.data.set(10,vector3D.z);
			this.rawData.data.set(11,vector3D.w);
			break;
		case 3:
			this.rawData.data.set(12,vector3D.x);
			this.rawData.data.set(13,vector3D.y);
			this.rawData.data.set(14,vector3D.z);
			this.rawData.data.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data.get(0);
			vector3D.y = this.rawData.data.get(1);
			vector3D.z = this.rawData.data.get(2);
			vector3D.w = this.rawData.data.get(3);
			break;
		case 1:
			vector3D.x = this.rawData.data.get(4);
			vector3D.y = this.rawData.data.get(5);
			vector3D.z = this.rawData.data.get(6);
			vector3D.w = this.rawData.data.get(7);
			break;
		case 2:
			vector3D.x = this.rawData.data.get(8);
			vector3D.y = this.rawData.data.get(9);
			vector3D.z = this.rawData.data.get(10);
			vector3D.w = this.rawData.data.get(11);
			break;
		case 3:
			vector3D.x = this.rawData.data.get(12);
			vector3D.y = this.rawData.data.get(13);
			vector3D.z = this.rawData.data.get(14);
			vector3D.w = this.rawData.data.get(15);
			break;
		default:
		}
	}
	,copyFrom: function(other) {
		this.rawData = new openfl__$Vector_AbstractVector(other.rawData.data.copy());
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var length = vector.data.get_length() - index;
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			var this1 = this.rawData;
			var value = vector.data.get(i + index);
			this1.data.set(i,value);
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var _g1 = 0;
		var _g = this.rawData.data.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			var value = this.rawData.data.get(i);
			vector.data.set(i + index,value);
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			this.rawData.data.set(0,vector3D.x);
			this.rawData.data.set(4,vector3D.y);
			this.rawData.data.set(8,vector3D.z);
			this.rawData.data.set(12,vector3D.w);
			break;
		case 1:
			this.rawData.data.set(1,vector3D.x);
			this.rawData.data.set(5,vector3D.y);
			this.rawData.data.set(9,vector3D.z);
			this.rawData.data.set(13,vector3D.w);
			break;
		case 2:
			this.rawData.data.set(2,vector3D.x);
			this.rawData.data.set(6,vector3D.y);
			this.rawData.data.set(10,vector3D.z);
			this.rawData.data.set(14,vector3D.w);
			break;
		case 3:
			this.rawData.data.set(3,vector3D.x);
			this.rawData.data.set(7,vector3D.y);
			this.rawData.data.set(11,vector3D.z);
			this.rawData.data.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data.get(0);
			vector3D.y = this.rawData.data.get(4);
			vector3D.z = this.rawData.data.get(8);
			vector3D.w = this.rawData.data.get(12);
			break;
		case 1:
			vector3D.x = this.rawData.data.get(1);
			vector3D.y = this.rawData.data.get(5);
			vector3D.z = this.rawData.data.get(9);
			vector3D.w = this.rawData.data.get(13);
			break;
		case 2:
			vector3D.x = this.rawData.data.get(2);
			vector3D.y = this.rawData.data.get(6);
			vector3D.z = this.rawData.data.get(10);
			vector3D.w = this.rawData.data.get(14);
			break;
		case 3:
			vector3D.x = this.rawData.data.get(3);
			vector3D.y = this.rawData.data.get(7);
			vector3D.z = this.rawData.data.get(11);
			vector3D.w = this.rawData.data.get(15);
			break;
		default:
		}
	}
	,copyToMatrix3D: function(other) {
		other.rawData = new openfl__$Vector_AbstractVector(this.rawData.data.copy());
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		var vec = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var m = this.clone();
		var mr = new openfl__$Vector_AbstractVector(m.rawData.data.copy());
		var pos = new openfl_geom_Vector3D(mr.data.get(12),mr.data.get(13),mr.data.get(14));
		mr.data.set(12,0);
		mr.data.set(13,0);
		mr.data.set(14,0);
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.data.get(0) * mr.data.get(0) + mr.data.get(1) * mr.data.get(1) + mr.data.get(2) * mr.data.get(2));
		scale.y = Math.sqrt(mr.data.get(4) * mr.data.get(4) + mr.data.get(5) * mr.data.get(5) + mr.data.get(6) * mr.data.get(6));
		scale.z = Math.sqrt(mr.data.get(8) * mr.data.get(8) + mr.data.get(9) * mr.data.get(9) + mr.data.get(10) * mr.data.get(10));
		if(mr.data.get(0) * (mr.data.get(5) * mr.data.get(10) - mr.data.get(6) * mr.data.get(9)) - mr.data.get(1) * (mr.data.get(4) * mr.data.get(10) - mr.data.get(6) * mr.data.get(8)) + mr.data.get(2) * (mr.data.get(4) * mr.data.get(9) - mr.data.get(5) * mr.data.get(8)) < 0) {
			scale.z = -scale.z;
		}
		var _g = mr;
		var value = _g.data.get(0) / scale.x;
		_g.data.set(0,value);
		var _g1 = mr;
		var value1 = _g1.data.get(1) / scale.x;
		_g1.data.set(1,value1);
		var _g2 = mr;
		var value2 = _g2.data.get(2) / scale.x;
		_g2.data.set(2,value2);
		var _g3 = mr;
		var value3 = _g3.data.get(4) / scale.y;
		_g3.data.set(4,value3);
		var _g4 = mr;
		var value4 = _g4.data.get(5) / scale.y;
		_g4.data.set(5,value4);
		var _g5 = mr;
		var value5 = _g5.data.get(6) / scale.y;
		_g5.data.set(6,value5);
		var _g6 = mr;
		var value6 = _g6.data.get(8) / scale.z;
		_g6.data.set(8,value6);
		var _g7 = mr;
		var value7 = _g7.data.get(9) / scale.z;
		_g7.data.set(9,value7);
		var _g8 = mr;
		var value8 = _g8.data.get(10) / scale.z;
		_g8.data.set(10,value8);
		var rot = new openfl_geom_Vector3D();
		switch(orientationStyle) {
		case 0:
			rot.w = Math.acos((mr.data.get(0) + mr.data.get(5) + mr.data.get(10) - 1) / 2);
			var len = Math.sqrt((mr.data.get(6) - mr.data.get(9)) * (mr.data.get(6) - mr.data.get(9)) + (mr.data.get(8) - mr.data.get(2)) * (mr.data.get(8) - mr.data.get(2)) + (mr.data.get(1) - mr.data.get(4)) * (mr.data.get(1) - mr.data.get(4)));
			if(len != 0) {
				rot.x = (mr.data.get(6) - mr.data.get(9)) / len;
				rot.y = (mr.data.get(8) - mr.data.get(2)) / len;
				rot.z = (mr.data.get(1) - mr.data.get(4)) / len;
			} else {
				rot.x = rot.y = rot.z = 0;
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.data.get(2));
			if(mr.data.get(2) != 1 && mr.data.get(2) != -1) {
				rot.x = Math.atan2(mr.data.get(6),mr.data.get(10));
				rot.z = Math.atan2(mr.data.get(1),mr.data.get(0));
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.data.get(4),mr.data.get(5));
			}
			break;
		case 2:
			var tr = mr.data.get(0) + mr.data.get(5) + mr.data.get(10);
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data.get(6) - mr.data.get(9)) / (4 * rot.w);
				rot.y = (mr.data.get(8) - mr.data.get(2)) / (4 * rot.w);
				rot.z = (mr.data.get(1) - mr.data.get(4)) / (4 * rot.w);
			} else if(mr.data.get(0) > mr.data.get(5) && mr.data.get(0) > mr.data.get(10)) {
				rot.x = Math.sqrt(1 + mr.data.get(0) - mr.data.get(5) - mr.data.get(10)) / 2;
				rot.w = (mr.data.get(6) - mr.data.get(9)) / (4 * rot.x);
				rot.y = (mr.data.get(1) + mr.data.get(4)) / (4 * rot.x);
				rot.z = (mr.data.get(8) + mr.data.get(2)) / (4 * rot.x);
			} else if(mr.data.get(5) > mr.data.get(10)) {
				rot.y = Math.sqrt(1 + mr.data.get(5) - mr.data.get(0) - mr.data.get(10)) / 2;
				rot.x = (mr.data.get(1) + mr.data.get(4)) / (4 * rot.y);
				rot.w = (mr.data.get(8) - mr.data.get(2)) / (4 * rot.y);
				rot.z = (mr.data.get(6) + mr.data.get(9)) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.data.get(10) - mr.data.get(0) - mr.data.get(5)) / 2;
				rot.x = (mr.data.get(8) + mr.data.get(2)) / (4 * rot.z);
				rot.y = (mr.data.get(6) + mr.data.get(9)) / (4 * rot.z);
				rot.w = (mr.data.get(1) - mr.data.get(4)) / (4 * rot.z);
			}
			break;
		}
		vec.data.push(pos);
		vec.data.push(rot);
		vec.data.push(scale);
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data.get(0) + y * this.rawData.data.get(4) + z * this.rawData.data.get(8) + this.rawData.data.get(3),x * this.rawData.data.get(1) + y * this.rawData.data.get(5) + z * this.rawData.data.get(9) + this.rawData.data.get(7),x * this.rawData.data.get(2) + y * this.rawData.data.get(6) + z * this.rawData.data.get(10) + this.rawData.data.get(11),0);
	}
	,identity: function() {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.data.set(i,a[i]);
		}
		this.rawData = vector;
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var this1 = this.rawData;
			var value = this.rawData.data.get(i) + (toMat.rawData.data.get(i) - this.rawData.data.get(i)) * percent;
			this1.data.set(i,value);
		}
	}
	,invert: function() {
		var d = this.get_determinant();
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data.get(0);
			var m21 = this.rawData.data.get(4);
			var m31 = this.rawData.data.get(8);
			var m41 = this.rawData.data.get(12);
			var m12 = this.rawData.data.get(1);
			var m22 = this.rawData.data.get(5);
			var m32 = this.rawData.data.get(9);
			var m42 = this.rawData.data.get(13);
			var m13 = this.rawData.data.get(2);
			var m23 = this.rawData.data.get(6);
			var m33 = this.rawData.data.get(10);
			var m43 = this.rawData.data.get(14);
			var m14 = this.rawData.data.get(3);
			var m24 = this.rawData.data.get(7);
			var m34 = this.rawData.data.get(11);
			var m44 = this.rawData.data.get(15);
			this.rawData.data.set(0,d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24)));
			this.rawData.data.set(1,-d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14)));
			this.rawData.data.set(2,d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14)));
			this.rawData.data.set(3,-d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14)));
			this.rawData.data.set(4,-d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24)));
			this.rawData.data.set(5,d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14)));
			this.rawData.data.set(6,-d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14)));
			this.rawData.data.set(7,d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14)));
			this.rawData.data.set(8,d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24)));
			this.rawData.data.set(9,-d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14)));
			this.rawData.data.set(10,d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14)));
			this.rawData.data.set(11,-d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14)));
			this.rawData.data.set(12,-d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23)));
			this.rawData.data.set(13,d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13)));
			this.rawData.data.set(14,-d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13)));
			this.rawData.data.set(15,d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) {
			at = new openfl_geom_Vector3D(0,0,-1);
		}
		if(up == null) {
			up = new openfl_geom_Vector3D(0,-1,0);
		}
		var dir = at.subtract(pos);
		var vup = up.clone();
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = dir.clone();
		dir2.scaleBy(vup.dotProduct(dir));
		vup = vup.subtract(dir2);
		if(vup.get_length() > 0) {
			vup.normalize();
		} else if(dir.x != 0) {
			vup = new openfl_geom_Vector3D(-dir.y,dir.x,0);
		} else {
			vup = new openfl_geom_Vector3D(1,0,0);
		}
		right = vup.crossProduct(dir);
		right.normalize();
		this.rawData.data.set(0,right.x);
		this.rawData.data.set(4,right.y);
		this.rawData.data.set(8,right.z);
		this.rawData.data.set(12,0.0);
		this.rawData.data.set(1,vup.x);
		this.rawData.data.set(5,vup.y);
		this.rawData.data.set(9,vup.z);
		this.rawData.data.set(13,0.0);
		this.rawData.data.set(2,dir.x);
		this.rawData.data.set(6,dir.y);
		this.rawData.data.set(10,dir.z);
		this.rawData.data.set(14,0.0);
		this.rawData.data.set(3,pos.x);
		this.rawData.data.set(7,pos.y);
		this.rawData.data.set(11,pos.z);
		this.rawData.data.set(15,1.0);
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data.get(0);
		var m121 = rhs.rawData.data.get(4);
		var m131 = rhs.rawData.data.get(8);
		var m141 = rhs.rawData.data.get(12);
		var m112 = rhs.rawData.data.get(1);
		var m122 = rhs.rawData.data.get(5);
		var m132 = rhs.rawData.data.get(9);
		var m142 = rhs.rawData.data.get(13);
		var m113 = rhs.rawData.data.get(2);
		var m123 = rhs.rawData.data.get(6);
		var m133 = rhs.rawData.data.get(10);
		var m143 = rhs.rawData.data.get(14);
		var m114 = rhs.rawData.data.get(3);
		var m124 = rhs.rawData.data.get(7);
		var m134 = rhs.rawData.data.get(11);
		var m144 = rhs.rawData.data.get(15);
		var m211 = this.rawData.data.get(0);
		var m221 = this.rawData.data.get(4);
		var m231 = this.rawData.data.get(8);
		var m241 = this.rawData.data.get(12);
		var m212 = this.rawData.data.get(1);
		var m222 = this.rawData.data.get(5);
		var m232 = this.rawData.data.get(9);
		var m242 = this.rawData.data.get(13);
		var m213 = this.rawData.data.get(2);
		var m223 = this.rawData.data.get(6);
		var m233 = this.rawData.data.get(10);
		var m243 = this.rawData.data.get(14);
		var m214 = this.rawData.data.get(3);
		var m224 = this.rawData.data.get(7);
		var m234 = this.rawData.data.get(11);
		var m244 = this.rawData.data.get(15);
		this.rawData.data.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.data.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.data.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.data.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.data.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.data.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.data.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.data.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.data.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.data.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.data.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.data.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.data.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.data.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.data.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.data.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var tx;
		var ty;
		var tz = 0;
		ty = tz;
		tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.data.set(0,x2 + (y2 + z2) * cos);
		d.data.set(1,x * y * ccos + z * sin);
		d.data.set(2,x * z * ccos - y * sin);
		d.data.set(4,x * y * ccos - z * sin);
		d.data.set(5,y2 + (x2 + z2) * cos);
		d.data.set(6,y * z * ccos + x * sin);
		d.data.set(8,x * z * ccos + y * sin);
		d.data.set(9,y * z * ccos - x * sin);
		d.data.set(10,z2 + (x2 + y2) * cos);
		d.data.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.data.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.data.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.data.set(i,a[i]);
		}
		this.prepend(new openfl_geom_Matrix3D(vector));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.data.get_length() < 3 || components.data.get(2).x == 0 || components.data.get(2).y == 0 || components.data.get(2).z == 0) {
			return false;
		}
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data.get(2).x;
		scale[4] = scale[5] = scale[6] = components.data.get(2).y;
		scale[8] = scale[9] = scale[10] = components.data.get(2).z;
		if(orientationStyle == null) {
			var x = components.data.get(1).x;
			var y = components.data.get(1).y;
			var z = components.data.get(1).z;
			var w = components.data.get(1).w;
			if(orientationStyle == 0) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			this.rawData.data.set(0,(1 - 2 * y * y - 2 * z * z) * scale[0]);
			this.rawData.data.set(1,(2 * x * y + 2 * w * z) * scale[1]);
			this.rawData.data.set(2,(2 * x * z - 2 * w * y) * scale[2]);
			this.rawData.data.set(3,0);
			this.rawData.data.set(4,(2 * x * y - 2 * w * z) * scale[4]);
			this.rawData.data.set(5,(1 - 2 * x * x - 2 * z * z) * scale[5]);
			this.rawData.data.set(6,(2 * y * z + 2 * w * x) * scale[6]);
			this.rawData.data.set(7,0);
			this.rawData.data.set(8,(2 * x * z + 2 * w * y) * scale[8]);
			this.rawData.data.set(9,(2 * y * z - 2 * w * x) * scale[9]);
			this.rawData.data.set(10,(1 - 2 * x * x - 2 * y * y) * scale[10]);
			this.rawData.data.set(11,0);
			var this1 = this.rawData;
			var value = components.data.get(0).x;
			this1.data.set(12,value);
			var this2 = this.rawData;
			var value1 = components.data.get(0).y;
			this2.data.set(13,value1);
			var this3 = this.rawData;
			var value2 = components.data.get(0).z;
			this3.data.set(14,value2);
			this.rawData.data.set(15,1);
		} else if(orientationStyle == 1) {
			var cx = Math.cos(components.data.get(1).x);
			var cy = Math.cos(components.data.get(1).y);
			var cz = Math.cos(components.data.get(1).z);
			var sx = Math.sin(components.data.get(1).x);
			var sy = Math.sin(components.data.get(1).y);
			var sz = Math.sin(components.data.get(1).z);
			this.rawData.data.set(0,cy * cz * scale[0]);
			this.rawData.data.set(1,cy * sz * scale[1]);
			this.rawData.data.set(2,-sy * scale[2]);
			this.rawData.data.set(3,0);
			this.rawData.data.set(4,(sx * sy * cz - cx * sz) * scale[4]);
			this.rawData.data.set(5,(sx * sy * sz + cx * cz) * scale[5]);
			this.rawData.data.set(6,sx * cy * scale[6]);
			this.rawData.data.set(7,0);
			this.rawData.data.set(8,(cx * sy * cz + sx * sz) * scale[8]);
			this.rawData.data.set(9,(cx * sy * sz - sx * cz) * scale[9]);
			this.rawData.data.set(10,cx * cy * scale[10]);
			this.rawData.data.set(11,0);
			var this4 = this.rawData;
			var value3 = components.data.get(0).x;
			this4.data.set(12,value3);
			var this5 = this.rawData;
			var value4 = components.data.get(0).y;
			this5.data.set(13,value4);
			var this6 = this.rawData;
			var value5 = components.data.get(0).z;
			this6.data.set(14,value5);
			this.rawData.data.set(15,1);
		} else {
			var x1 = components.data.get(1).x;
			var y1 = components.data.get(1).y;
			var z1 = components.data.get(1).z;
			var w1 = components.data.get(1).w;
			if(orientationStyle == 0) {
				x1 *= Math.sin(w1 / 2);
				y1 *= Math.sin(w1 / 2);
				z1 *= Math.sin(w1 / 2);
				w1 = Math.cos(w1 / 2);
			}
			this.rawData.data.set(0,(1 - 2 * y1 * y1 - 2 * z1 * z1) * scale[0]);
			this.rawData.data.set(1,(2 * x1 * y1 + 2 * w1 * z1) * scale[1]);
			this.rawData.data.set(2,(2 * x1 * z1 - 2 * w1 * y1) * scale[2]);
			this.rawData.data.set(3,0);
			this.rawData.data.set(4,(2 * x1 * y1 - 2 * w1 * z1) * scale[4]);
			this.rawData.data.set(5,(1 - 2 * x1 * x1 - 2 * z1 * z1) * scale[5]);
			this.rawData.data.set(6,(2 * y1 * z1 + 2 * w1 * x1) * scale[6]);
			this.rawData.data.set(7,0);
			this.rawData.data.set(8,(2 * x1 * z1 + 2 * w1 * y1) * scale[8]);
			this.rawData.data.set(9,(2 * y1 * z1 - 2 * w1 * x1) * scale[9]);
			this.rawData.data.set(10,(1 - 2 * x1 * x1 - 2 * y1 * y1) * scale[10]);
			this.rawData.data.set(11,0);
			var this7 = this.rawData;
			var value6 = components.data.get(0).x;
			this7.data.set(12,value6);
			var this8 = this.rawData;
			var value7 = components.data.get(0).y;
			this8.data.set(13,value7);
			var this9 = this.rawData;
			var value8 = components.data.get(0).z;
			this9.data.set(14,value8);
			this.rawData.data.set(15,1);
		}
		if(components.data.get(2).x == 0) {
			this.rawData.data.set(0,1e-15);
		}
		if(components.data.get(2).y == 0) {
			this.rawData.data.set(5,1e-15);
		}
		if(components.data.get(2).z == 0) {
			this.rawData.data.set(10,1e-15);
		}
		return !(components.data.get(2).x == 0 || components.data.get(2).y == 0 || components.data.get(2).y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data.get(0) + y * this.rawData.data.get(4) + z * this.rawData.data.get(8) + this.rawData.data.get(12),x * this.rawData.data.get(1) + y * this.rawData.data.get(5) + z * this.rawData.data.get(9) + this.rawData.data.get(13),x * this.rawData.data.get(2) + y * this.rawData.data.get(6) + z * this.rawData.data.get(10) + this.rawData.data.get(14),x * this.rawData.data.get(3) + y * this.rawData.data.get(7) + z * this.rawData.data.get(11) + this.rawData.data.get(15));
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		var x;
		var y;
		var z;
		while(i + 3 <= vin.data.get_length()) {
			x = vin.data.get(i);
			y = vin.data.get(i + 1);
			z = vin.data.get(i + 2);
			var value = x * this.rawData.data.get(0) + y * this.rawData.data.get(4) + z * this.rawData.data.get(8) + this.rawData.data.get(12);
			vout.data.set(i,value);
			var value1 = x * this.rawData.data.get(1) + y * this.rawData.data.get(5) + z * this.rawData.data.get(9) + this.rawData.data.get(13);
			vout.data.set(i + 1,value1);
			var value2 = x * this.rawData.data.get(2) + y * this.rawData.data.get(6) + z * this.rawData.data.get(10) + this.rawData.data.get(14);
			vout.data.set(i + 2,value2);
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData = new openfl__$Vector_AbstractVector(this.rawData.data.copy());
		var this1 = this.rawData;
		var value = oRawData.data.get(4);
		this1.data.set(1,value);
		var this2 = this.rawData;
		var value1 = oRawData.data.get(8);
		this2.data.set(2,value1);
		var this3 = this.rawData;
		var value2 = oRawData.data.get(12);
		this3.data.set(3,value2);
		var this4 = this.rawData;
		var value3 = oRawData.data.get(1);
		this4.data.set(4,value3);
		var this5 = this.rawData;
		var value4 = oRawData.data.get(9);
		this5.data.set(6,value4);
		var this6 = this.rawData;
		var value5 = oRawData.data.get(13);
		this6.data.set(7,value5);
		var this7 = this.rawData;
		var value6 = oRawData.data.get(2);
		this7.data.set(8,value6);
		var this8 = this.rawData;
		var value7 = oRawData.data.get(6);
		this8.data.set(9,value7);
		var this9 = this.rawData;
		var value8 = oRawData.data.get(14);
		this9.data.set(11,value8);
		var this10 = this.rawData;
		var value9 = oRawData.data.get(3);
		this10.data.set(12,value9);
		var this11 = this.rawData;
		var value10 = oRawData.data.get(7);
		this11.data.set(13,value10);
		var this12 = this.rawData;
		var value11 = oRawData.data.get(11);
		this12.data.set(14,value11);
	}
	,get_determinant: function() {
		return (this.rawData.data.get(0) * this.rawData.data.get(5) - this.rawData.data.get(4) * this.rawData.data.get(1)) * (this.rawData.data.get(10) * this.rawData.data.get(15) - this.rawData.data.get(14) * this.rawData.data.get(11)) - (this.rawData.data.get(0) * this.rawData.data.get(9) - this.rawData.data.get(8) * this.rawData.data.get(1)) * (this.rawData.data.get(6) * this.rawData.data.get(15) - this.rawData.data.get(14) * this.rawData.data.get(7)) + (this.rawData.data.get(0) * this.rawData.data.get(13) - this.rawData.data.get(12) * this.rawData.data.get(1)) * (this.rawData.data.get(6) * this.rawData.data.get(11) - this.rawData.data.get(10) * this.rawData.data.get(7)) + (this.rawData.data.get(4) * this.rawData.data.get(9) - this.rawData.data.get(8) * this.rawData.data.get(5)) * (this.rawData.data.get(2) * this.rawData.data.get(15) - this.rawData.data.get(14) * this.rawData.data.get(3)) - (this.rawData.data.get(4) * this.rawData.data.get(13) - this.rawData.data.get(12) * this.rawData.data.get(5)) * (this.rawData.data.get(2) * this.rawData.data.get(11) - this.rawData.data.get(10) * this.rawData.data.get(3)) + (this.rawData.data.get(8) * this.rawData.data.get(13) - this.rawData.data.get(12) * this.rawData.data.get(9)) * (this.rawData.data.get(2) * this.rawData.data.get(7) - this.rawData.data.get(6) * this.rawData.data.get(3));
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.data.get(12),this.rawData.data.get(13),this.rawData.data.get(14));
	}
	,set_position: function(val) {
		this.rawData.data.set(12,val.x);
		this.rawData.data.set(13,val.y);
		this.rawData.data.set(14,val.z);
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom__$Orientation3D_Orientation3D_$Impl_$ = {};
$hxClasses["openfl.geom._Orientation3D.Orientation3D_Impl_"] = openfl_geom__$Orientation3D_Orientation3D_$Impl_$;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.__name__ = ["openfl","geom","_Orientation3D","Orientation3D_Impl_"];
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.fromString = function(value) {
	switch(value) {
	case "axisAngle":
		return 0;
	case "eulerAngles":
		return 1;
	case "quaternion":
		return 2;
	default:
		return null;
	}
};
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "axisAngle";
	case 1:
		return "eulerAngles";
	case 2:
		return "quaternion";
	default:
		return null;
	}
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare == this) {
			return true;
		} else if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return new openfl_geom_Rectangle();
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			return new openfl_geom_Rectangle();
		}
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x ? toUnion.x : this.x;
		var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
		var y0 = this.y > toUnion.y ? toUnion.y : this.y;
		var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) {
			offsetX = x - this.x;
		}
		if(this.y < y) {
			offsetY = y - this.y;
		}
		if(this.get_right() > x + width) {
			offsetRight = x + width - this.get_right();
		}
		if(this.get_bottom() > y + height) {
			offsetBottom = y + height - this.get_bottom();
		}
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform = value;
			if(value != null) {
				this.__displayObject.set_alpha(value.alphaMultiplier);
			}
			var _this = this.__displayObject;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		return this.__colorTransform;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__getWorldTransform().clone();
		}
		return null;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__transform.clone();
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			var a = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
			var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.data.set(i,a[i]);
			}
			return new openfl_geom_Matrix3D(vector);
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		this.__setTransform(value.rawData.data.get(0),value.rawData.data.get(1),value.rawData.data.get(5),value.rawData.data.get(6),value.rawData.data.get(12),value.rawData.data.get(13));
		return value;
	}
	,__setTransform: function(a,b,c,d,tx,ty) {
		if(this.__displayObject != null) {
			var scaleX = 0.0;
			var scaleY = 0.0;
			if(b == 0) {
				scaleX = a;
			} else {
				scaleX = Math.sqrt(a * a + b * b);
			}
			if(c == 0) {
				scaleY = a;
			} else {
				scaleY = Math.sqrt(c * c + d * d);
			}
			this.__displayObject.__scaleX = scaleX;
			this.__displayObject.__scaleY = scaleY;
			var rotation = 180 / Math.PI * Math.atan2(d,c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.a = a;
			this.__displayObject.__transform.b = b;
			this.__displayObject.__transform.c = c;
			this.__displayObject.__transform.d = d;
			this.__displayObject.__transform.tx = tx;
			this.__displayObject.__transform.ty = ty;
			this.__displayObject.__setTransformDirty();
		}
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"};
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = a.get_length();
	var lb = b.get_length();
	var dot = a.dotProduct(b);
	if(la != 0) {
		dot /= la;
	}
	if(lb != 0) {
		dot /= lb;
	}
	return Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = this.get_length();
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl_media_ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_media_AudioBuffer.fromFile(path));
};
openfl_media_Sound.loadFromFile = function(path) {
	return lime_media_AudioBuffer.loadFromFile(path).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.loadFromFiles = function(paths) {
	return lime_media_AudioBuffer.loadFromFiles(paths).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,close: function() {
		if(this.__buffer != null) {
			this.__buffer.dispose();
		}
	}
	,load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		var defaultLibrary = lime_utils_Assets.getLibrary("default");
		var tmp;
		if(defaultLibrary != null) {
			var key = this.url;
			var _this = defaultLibrary.cachedAudioBuffers;
			if(__map_reserved[key] != null) {
				tmp = _this.existsReserved(key);
			} else {
				tmp = _this.h.hasOwnProperty(key);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var key1 = this.url;
			var _this1 = defaultLibrary.cachedAudioBuffers;
			this.AudioBuffer_onURLLoad(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]);
		} else {
			lime_media_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
				_gthis.AudioBuffer_onURLLoad(null);
			});
		}
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength) {
		if(bytes == null || bytesLength <= 0) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) > bytesLength) {
			var this1 = new openfl_utils_ByteArrayData(bytesLength);
			var copy = this1;
			copy.writeBytes(bytes,0,bytesLength);
			bytes = copy;
		}
		this.__buffer = lime_media_AudioBuffer.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
		if(this.__buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
		if(format == null) {
			format = "float";
		}
		if(bytes == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		var audioBuffer = new lime_media_AudioBuffer();
		audioBuffer.bitsPerSample = format == "float" ? 32 : 16;
		audioBuffer.channels = stereo ? 2 : 1;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(bytes);
		var this1;
		if(buffer != null) {
			this1 = new Uint8Array(buffer,0);
		} else {
			this1 = null;
		}
		audioBuffer.data = this1;
		audioBuffer.sampleRate = sampleRate | 0;
		this.__buffer = audioBuffer;
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(openfl_media_SoundMixer.__soundChannels.length >= 32) {
			return null;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform();
		} else {
			sndTransform = sndTransform.clone();
		}
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) {
			pan = 1;
		}
		if(pan < -1) {
			pan = -1;
		}
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var source = new lime_media_AudioSource(this.__buffer);
		source.offset = startTime | 0;
		if(loops > 1) {
			source.set_loops(loops - 1);
		}
		source.set_gain(volume);
		var position = source.get_position();
		position.x = pan;
		position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		source.set_position(position);
		return new openfl_media_SoundChannel(source,sndTransform);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
			return this.__buffer.get_src().duration() * 1000 | 0;
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(source,soundTransform) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundTransform != null) {
		this.__soundTransform = soundTransform;
	} else {
		this.__soundTransform = new openfl_media_SoundTransform();
	}
	if(source != null) {
		this.__source = source;
		this.__source.onComplete.add($bind(this,this.source_onComplete));
		this.__isValid = true;
		this.__source.play();
	}
	openfl_media_SoundMixer.__registerSoundChannel(this);
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__soundTransform: null
	,__source: null
	,stop: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		if(!this.__isValid) {
			return;
		}
		this.__source.stop();
		this.__dispose();
	}
	,__dispose: function() {
		if(!this.__isValid) {
			return;
		}
		this.__source.onComplete.remove($bind(this,this.source_onComplete));
		this.__source.dispose();
		this.__isValid = false;
	}
	,__updateTransform: function() {
		this.set_soundTransform(this.get_soundTransform());
	}
	,get_position: function() {
		if(!this.__isValid) {
			return 0;
		}
		return this.__source.get_currentTime() + this.__source.offset;
	}
	,set_position: function(value) {
		if(!this.__isValid) {
			return 0;
		}
		this.__source.set_currentTime((value | 0) - this.__source.offset);
		return value;
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			var pan = openfl_media_SoundMixer.__soundTransform.pan + this.__soundTransform.pan;
			if(pan < -1) {
				pan = -1;
			}
			if(pan > 1) {
				pan = 1;
			}
			var volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			if(this.__isValid) {
				this.__source.set_gain(volume);
				var position = this.__source.get_position();
				position.x = pan;
				position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
				this.__source.set_position(position);
				return value;
			}
		}
		return value;
	}
	,source_onComplete: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	if(bufferTime == null) {
		bufferTime = 1000;
	}
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl_media_SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(vol == null) {
		vol = 1;
	}
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_media_SoundMixer = function() { };
$hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
openfl_media_SoundMixer.__name__ = ["openfl","media","SoundMixer"];
openfl_media_SoundMixer.__properties__ = {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform"};
openfl_media_SoundMixer.areSoundsInaccessible = function() {
	return false;
};
openfl_media_SoundMixer.stopAll = function() {
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.stop();
	}
};
openfl_media_SoundMixer.__registerSoundChannel = function(soundChannel) {
	openfl_media_SoundMixer.__soundChannels.push(soundChannel);
};
openfl_media_SoundMixer.__unregisterSoundChannel = function(soundChannel) {
	HxOverrides.remove(openfl_media_SoundMixer.__soundChannels,soundChannel);
};
openfl_media_SoundMixer.get_soundTransform = function() {
	return openfl_media_SoundMixer.__soundTransform;
};
openfl_media_SoundMixer.set_soundTransform = function(value) {
	openfl_media_SoundMixer.__soundTransform = value.clone();
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.__updateTransform();
	}
	return value;
};
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = ["openfl","net","NetConnection"];
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connect: function(command,_,_1,_2,_3,_4) {
		if(command != null) {
			throw new js__$Boot_HaxeError("Error: Can only connect in \"HTTP streaming\" mode");
		}
		this.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,true,{ code : "NetConnection.Connect.Success"}));
	}
	,__class__: openfl_net_NetConnection
});
var openfl_net_NetStream = function(connection,peerID) {
	openfl_events_EventDispatcher.call(this);
	this.__connection = connection;
	this.__video = window.document.createElement("video");
	this.__video.setAttribute("playsinline","");
	this.__video.setAttribute("webkit-playsinline","");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
	this.__video.addEventListener("loadedmetadata",$bind(this,this.video_onLoadMetaData),false);
};
$hxClasses["openfl.net.NetStream"] = openfl_net_NetStream;
openfl_net_NetStream.__name__ = ["openfl","net","NetStream"];
openfl_net_NetStream.__super__ = openfl_events_EventDispatcher;
openfl_net_NetStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	audioCodec: null
	,bufferLength: null
	,bufferTime: null
	,bytesLoaded: null
	,bytesTotal: null
	,checkPolicyFile: null
	,client: null
	,currentFPS: null
	,decodedFrames: null
	,liveDelay: null
	,objectEncoding: null
	,soundTransform: null
	,time: null
	,videoCode: null
	,__connection: null
	,__timer: null
	,__video: null
	,close: function() {
		this.__video.pause();
		this.__video.src = "";
		this.time = 0;
	}
	,pause: function() {
		this.__video.pause();
	}
	,play: function(url,_,_1,_2,_3,_4) {
		this.__video.src = url;
		this.__video.play();
	}
	,requestVideoStatus: function() {
		var _gthis = this;
		if(this.__timer == null) {
			this.__timer = new haxe_Timer(1);
		}
		this.__timer.run = function() {
			if(_gthis.__video.paused) {
				_gthis.__playStatus("NetStream.Play.pause");
			} else {
				_gthis.__playStatus("NetStream.Play.playing");
			}
			_gthis.__timer.stop();
		};
	}
	,resume: function() {
		this.__video.play();
	}
	,seek: function(time) {
		if(time < 0) {
			time = 0;
		} else if(time > this.__video.duration) {
			time = this.__video.duration;
		}
		this.__video.currentTime = time;
	}
	,togglePause: function() {
		if(this.__video.paused) {
			this.__video.play();
		} else {
			this.__video.pause();
		}
	}
	,__playStatus: function(code) {
		if(this.client != null) {
			try {
				var handler = this.client.onPlayStatus;
				handler({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadMetaData: function(event) {
		if(this.client != null) {
			try {
				var handler = this.client.onMetaData;
				handler({ width : this.__video.videoWidth, height : this.__video.videoHeight, duration : this.__video.duration});
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Start"}));
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		this.time = this.__video.currentTime;
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,get_speed: function() {
		return this.__video.playbackRate;
	}
	,set_speed: function(value) {
		return this.__video.playbackRate = value;
	}
	,__class__: openfl_net_NetStream
	,__properties__: {set_speed:"set_speed",get_speed:"get_speed"}
});
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.dataFormat = 1;
	if(request != null) {
		this.load(request);
	}
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,__httpRequest: null
	,close: function() {
		if(this.__httpRequest != null) {
			this.__httpRequest.cancel();
		}
	}
	,load: function(request) {
		var _gthis = this;
		if(this.dataFormat == 0) {
			var httpRequest = new lime_net__$HTTPRequest_$openfl_$utils_$ByteArray();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.__dispatchStatus();
				_gthis.data = data;
				var event = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event);
			});
		} else {
			var httpRequest1 = new lime_net__$HTTPRequest_$String();
			this.__prepareRequest(httpRequest1,request);
			httpRequest1.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data1) {
				_gthis.__dispatchStatus();
				_gthis.data = data1;
				var event1 = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event1);
			});
		}
	}
	,__dispatchStatus: function() {
		var event = new openfl_events_HTTPStatusEvent("httpStatus",false,false,this.__httpRequest.responseStatus);
		event.responseURL = this.__httpRequest.uri;
		var headers = [];
		if(this.__httpRequest.enableResponseHeaders && this.__httpRequest.responseHeaders != null) {
			var _g = 0;
			var _g1 = this.__httpRequest.responseHeaders;
			while(_g < _g1.length) {
				var header = _g1[_g];
				++_g;
				headers.push(new openfl_net_URLRequestHeader(header.name,header.value));
			}
		}
		event.responseHeaders = headers;
		this.dispatchEvent(event);
	}
	,__prepareRequest: function(httpRequest,request) {
		this.__httpRequest = httpRequest;
		this.__httpRequest.uri = request.url;
		var _g = request.method;
		var tmp;
		switch(_g) {
		case "DELETE":
			tmp = "DELETE";
			break;
		case "HEAD":
			tmp = "HEAD";
			break;
		case "OPTIONS":
			tmp = "OPTIONS";
			break;
		case "POST":
			tmp = "POST";
			break;
		case "PUT":
			tmp = "PUT";
			break;
		default:
			tmp = "GET";
		}
		this.__httpRequest.method = tmp;
		if(request.data != null) {
			if(js_Boot.__instanceof(request.data,openfl_net_URLVariables)) {
				var fields = Reflect.fields(request.data);
				var _g1 = 0;
				while(_g1 < fields.length) {
					var field = fields[_g1];
					++_g1;
					var _this = this.__httpRequest.formData;
					var value = Reflect.field(request.data,field);
					if(__map_reserved[field] != null) {
						_this.setReserved(field,value);
					} else {
						_this.h[field] = value;
					}
				}
			} else if(js_Boot.__instanceof(request.data,haxe_io_Bytes)) {
				this.__httpRequest.data = request.data;
			} else {
				this.__httpRequest.data = haxe_io_Bytes.ofString(Std.string(request.data));
			}
		}
		this.__httpRequest.contentType = request.contentType;
		if(request.requestHeaders != null) {
			var _g11 = 0;
			var _g2 = request.requestHeaders;
			while(_g11 < _g2.length) {
				var header = _g2[_g11];
				++_g11;
				this.__httpRequest.headers.push(new lime_net_HTTPRequestHeader(header.name,header.value));
			}
		}
		this.__httpRequest.followRedirects = request.followRedirects;
		this.__httpRequest.timeout = request.idleTimeout | 0;
		this.__httpRequest.withCredentials = request.manageCookies;
		var userAgent = request.userAgent;
		if(userAgent == null) {
			userAgent = "Mozilla/5.0 (Windows; U; en) AppleWebKit/420+ (KHTML, like Gecko) OpenFL/1.0";
		}
		this.__httpRequest.userAgent = request.userAgent;
		this.__httpRequest.enableResponseHeaders = true;
	}
	,httpRequest_onError: function(error) {
		this.__dispatchStatus();
		if(error == 403) {
			var event = new openfl_events_SecurityErrorEvent("securityError");
			event.text = Std.string(error);
			this.dispatchEvent(event);
		} else {
			var event1 = new openfl_events_IOErrorEvent("ioError");
			event1.text = Std.string(error);
			this.dispatchEvent(event1);
		}
	}
	,httpRequest_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_URLLoader
});
var openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$ = {};
$hxClasses["openfl.net._URLLoaderDataFormat.URLLoaderDataFormat_Impl_"] = openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.__name__ = ["openfl","net","_URLLoaderDataFormat","URLLoaderDataFormat_Impl_"];
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "binary":
		return 0;
	case "text":
		return 1;
	case "variables":
		return 2;
	default:
		return null;
	}
};
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "binary";
	case 1:
		return "text";
	case 2:
		return "variables";
	default:
		return null;
	}
};
var openfl_net_URLRequest = function(url) {
	if(url != null) {
		this.url = url;
	}
	this.contentType = null;
	this.followRedirects = openfl_net_URLRequestDefaults.followRedirects;
	this.idleTimeout = openfl_net_URLRequestDefaults.idleTimeout > 0 ? openfl_net_URLRequestDefaults.idleTimeout : 30000;
	this.manageCookies = openfl_net_URLRequestDefaults.manageCookies;
	this.method = "GET";
	this.requestHeaders = [];
	this.userAgent = openfl_net_URLRequestDefaults.userAgent;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,followRedirects: null
	,idleTimeout: null
	,manageCookies: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestDefaults = function() { };
$hxClasses["openfl.net.URLRequestDefaults"] = openfl_net_URLRequestDefaults;
openfl_net_URLRequestDefaults.__name__ = ["openfl","net","URLRequestDefaults"];
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_net_URLVariables = function(source) {
	if(source != null) {
		this.decode(source);
	}
};
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl_net_URLVariables.prototype = {
	decode: function(source) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = source.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) {
				var s = HxOverrides.substr(f1,0,eq);
				var field = decodeURIComponent(s.split("+").join(" "));
				var s1 = HxOverrides.substr(f1,eq + 1,null);
				this[field] = decodeURIComponent(s1.split("+").join(" "));
			} else if(eq != 0) {
				this[decodeURIComponent(f1.split("+").join(" "))] = "";
			}
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var tmp = encodeURIComponent(f) + "=";
			var s = Reflect.field(this,f);
			result.push(tmp + encodeURIComponent(s));
		}
		return result.join("&");
	}
	,__class__: openfl_net_URLVariables
};
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) {
		this.parentDomain = parentDomain;
	} else {
		this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	}
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl_system_LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl_system_LoaderContext
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_system_System = function() { };
$hxClasses["openfl.system.System"] = openfl_system_System;
openfl_system_System.__name__ = ["openfl","system","System"];
openfl_system_System.__properties__ = {get_vmVersion:"get_vmVersion",get_totalMemory:"get_totalMemory"};
openfl_system_System.exit = function(code) {
	lime_system_System.exit(code);
};
openfl_system_System.gc = function() {
};
openfl_system_System.pause = function() {
	openfl__$internal_Lib.notImplemented({ fileName : "System.hx", lineNumber : 40, className : "openfl.system.System", methodName : "pause"});
};
openfl_system_System.resume = function() {
	openfl__$internal_Lib.notImplemented({ fileName : "System.hx", lineNumber : 47, className : "openfl.system.System", methodName : "resume"});
};
openfl_system_System.setClipboard = function(string) {
	lime_system_Clipboard.set_text(string);
};
openfl_system_System.get_totalMemory = function() {
	return (window.performance && window.performance.memory) ? window.performance.memory.usedJSHeapSize : 0;
};
openfl_system_System.get_vmVersion = function() {
	return "1.0.0";
};
var openfl_text__$AntiAliasType_AntiAliasType_$Impl_$ = {};
$hxClasses["openfl.text._AntiAliasType.AntiAliasType_Impl_"] = openfl_text__$AntiAliasType_AntiAliasType_$Impl_$;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.__name__ = ["openfl","text","_AntiAliasType","AntiAliasType_Impl_"];
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "advanced":
		return 0;
	case "normal":
		return 1;
	default:
		return null;
	}
};
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "advanced";
	case 1:
		return "normal";
	default:
		return null;
	}
};
var openfl_text__$FontStyle_FontStyle_$Impl_$ = {};
$hxClasses["openfl.text._FontStyle.FontStyle_Impl_"] = openfl_text__$FontStyle_FontStyle_$Impl_$;
openfl_text__$FontStyle_FontStyle_$Impl_$.__name__ = ["openfl","text","_FontStyle","FontStyle_Impl_"];
openfl_text__$FontStyle_FontStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bold":
		return 0;
	case "boldItalic":
		return 1;
	case "italic":
		return 2;
	case "regular":
		return 3;
	default:
		return null;
	}
};
openfl_text__$FontStyle_FontStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bold";
	case 1:
		return "boldItalic";
	case 2:
		return "italic";
	case 3:
		return "regular";
	default:
		return null;
	}
};
var openfl_text__$FontType_FontType_$Impl_$ = {};
$hxClasses["openfl.text._FontType.FontType_Impl_"] = openfl_text__$FontType_FontType_$Impl_$;
openfl_text__$FontType_FontType_$Impl_$.__name__ = ["openfl","text","_FontType","FontType_Impl_"];
openfl_text__$FontType_FontType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "device":
		return 0;
	case "embedded":
		return 1;
	case "embeddedCFF":
		return 2;
	default:
		return null;
	}
};
openfl_text__$FontType_FontType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "device";
	case 1:
		return "embedded";
	case 2:
		return "embeddedCFF";
	default:
		return null;
	}
};
var openfl_text__$GridFitType_GridFitType_$Impl_$ = {};
$hxClasses["openfl.text._GridFitType.GridFitType_Impl_"] = openfl_text__$GridFitType_GridFitType_$Impl_$;
openfl_text__$GridFitType_GridFitType_$Impl_$.__name__ = ["openfl","text","_GridFitType","GridFitType_Impl_"];
openfl_text__$GridFitType_GridFitType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "pixel":
		return 1;
	case "subpixel":
		return 2;
	default:
		return null;
	}
};
openfl_text__$GridFitType_GridFitType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "pixel";
	case 2:
		return "subpixel";
	default:
		return null;
	}
};
var openfl_text_StaticText = function() {
	openfl_display_DisplayObject.call(this);
	this.__graphics = new openfl_display_Graphics(this);
};
$hxClasses["openfl.text.StaticText"] = openfl_text_StaticText;
openfl_text_StaticText.__name__ = ["openfl","text","StaticText"];
openfl_text_StaticText.__super__ = openfl_display_DisplayObject;
openfl_text_StaticText.prototype = $extend(openfl_display_DisplayObject.prototype,{
	text: null
	,__class__: openfl_text_StaticText
});
var openfl_text_TextField = function() {
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__displayAsPassword = false;
	this.__graphics = new openfl_display_Graphics(this);
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__mouseWheelEnabled = true;
	this.__text = "";
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	var this1 = this.__textEngine.textFormatRanges;
	var x = new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0);
	this1.data.push(x);
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
	this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
	this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
	this.addEventListener("keyDown",$bind(this,this.this_onKeyDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	shader: null
	,__bounds: null
	,__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__displayAsPassword: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__mouseWheelEnabled: null
	,__offsetX: null
	,__offsetY: null
	,__selectionIndex: null
	,__showCursor: null
	,__symbol: null
	,__text: null
	,__htmlText: null
	,__textEngine: null
	,__textFormat: null
	,__div: null
	,appendText: function(text) {
		if(text == null || text == "") {
			return;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		this.__updateText(lime_text__$UTF8String_UTF8String_$Impl_$.plus(this.__text,text));
		var this1 = this.__textEngine.textFormatRanges;
		var index = this.__textEngine.textFormatRanges.data.get_length() - 1;
		this1.data.get(index).end = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		this.__updateScrollH();
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) - 1) {
			return null;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				try {
					var x = group.offsetX;
					var _g3 = 0;
					var _g2 = charIndex - group.startIndex;
					while(_g3 < _g2) {
						var i = _g3++;
						x += group.positions[i];
					}
					var lastPosition = group.positions[charIndex - group.startIndex];
					return new openfl_geom_Rectangle(x,group.offsetY,lastPosition,group.ascent + group.descent);
				} catch( e ) {
					haxe_CallStack.lastException = e;
				}
			}
		}
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.data.get(i);
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.data.get_length()) {
			var group = _g11.data.get(_g2);
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				if(x >= group.offsetX && x <= group.offsetX + group.width) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.positions.length;
					while(_g3 < _g21) {
						var i1 = _g3++;
						advance += group.positions[i1];
						if(x <= group.offsetX + advance) {
							return group.startIndex + i1;
						}
					}
					return group.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) - 1) {
			return 0;
		}
		var index = this.__textEngine.getLineBreakIndex();
		var startIndex = 0;
		while(index > -1) {
			if(index <= charIndex) {
				startIndex = index + 1;
			} else if(index > charIndex) {
				break;
			}
			index = this.__textEngine.getLineBreakIndex(index + 1);
		}
		return startIndex;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.data.get(i);
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.data.get_length()) {
			var group = _g11.data.get(_g2);
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			return -1;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.startIndex <= charIndex && group.endIndex >= charIndex) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return 0;
		}
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group.startIndex;
				}
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents.data.get(lineIndex);
		var descender = this.__textEngine.lineDescents.data.get(lineIndex);
		var leading = this.__textEngine.lineLeadings.data.get(lineIndex);
		var lineHeight = this.__textEngine.lineHeights.data.get(lineIndex);
		var lineWidth = this.__textEngine.lineWidths.data.get(lineIndex);
		var margin;
		var _g = this.__textFormat.align;
		switch(_g) {
		case 0:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		case 1:case 4:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 2:case 3:case 5:
			margin = 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				return group.startIndex;
			}
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return null;
		}
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group.startIndex;
				}
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		return lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__textEngine.text,startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) - 1) {
			return 0;
		}
		var startIndex = this.getFirstCharInParagraph(charIndex);
		var endIndex = this.__textEngine.getLineBreakIndex(charIndex) + 1;
		if(endIndex == 0) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		var format = null;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.start <= beginIndex && group.end >= beginIndex || group.start <= endIndex && group.end >= endIndex) {
				if(format == null) {
					format = group.format.clone();
				} else {
					if(group.format.font != format.font) {
						format.font = null;
					}
					if(group.format.size != format.size) {
						format.size = null;
					}
					if(group.format.color != format.color) {
						format.color = null;
					}
					if(group.format.bold != format.bold) {
						format.bold = null;
					}
					if(group.format.italic != format.italic) {
						format.italic = null;
					}
					if(group.format.underline != format.underline) {
						format.underline = null;
					}
					if(group.format.url != format.url) {
						format.url = null;
					}
					if(group.format.target != format.target) {
						format.target = null;
					}
					if(group.format.align != format.align) {
						format.align = null;
					}
					if(group.format.leftMargin != format.leftMargin) {
						format.leftMargin = null;
					}
					if(group.format.rightMargin != format.rightMargin) {
						format.rightMargin = null;
					}
					if(group.format.indent != format.indent) {
						format.indent = null;
					}
					if(group.format.leading != format.leading) {
						format.leading = null;
					}
					if(group.format.blockIndent != format.blockIndent) {
						format.blockIndent = null;
					}
					if(group.format.bullet != format.bullet) {
						format.bullet = null;
					}
					if(group.format.kerning != format.kerning) {
						format.kerning = null;
					}
					if(group.format.letterSpacing != format.letterSpacing) {
						format.letterSpacing = null;
					}
					if(group.format.tabStops != format.tabStops) {
						format.tabStops = null;
					}
				}
			}
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) {
			return;
		}
		var startIndex = this.__caretIndex < this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		var endIndex = this.__caretIndex > this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		if(startIndex == endIndex && this.__textEngine.maxChars > 0 && lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) == this.__textEngine.maxChars) {
			return;
		}
		if(startIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			startIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		if(endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		if(endIndex < startIndex) {
			var cache = endIndex;
			endIndex = startIndex;
			startIndex = cache;
		}
		if(startIndex < 0) {
			startIndex = 0;
		}
		this.replaceText(startIndex,endIndex,value);
		var i = startIndex + lime_text__$UTF8String_UTF8String_$Impl_$.get_length(js_Boot.__cast(value , String));
		if(i > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			i = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		this.setSelection(i,i);
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) || newText == null) {
			return;
		}
		this.__updateText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,0,beginIndex) + newText + lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,endIndex));
		if(endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.data.get_length()) {
			range = this.__textEngine.textFormatRanges.data.get(i);
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				++i;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				if(i > 0) {
					new openfl__$Vector_AbstractVector(this.__textEngine.textFormatRanges.data.splice(i,1));
				} else {
					range.start = 0;
					range.end = beginIndex + newText.length;
					++i;
				}
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				++i;
			} else {
				++i;
			}
		}
		this.__updateScrollH();
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
		this.__stopCursorTimer();
		this.__startCursorTimer();
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		var max = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text());
		var range;
		if(beginIndex < 0) {
			beginIndex = 0;
		}
		if(endIndex < 0) {
			endIndex = 0;
		}
		if(endIndex == 0) {
			if(beginIndex == 0) {
				endIndex = max;
			} else {
				endIndex = beginIndex + 1;
			}
		}
		if(endIndex < beginIndex) {
			return;
		}
		if(beginIndex == 0 && endIndex >= max) {
			this.__textFormat.__merge(format);
			if(this.__textEngine.textFormatRanges.data.get_length() > 1) {
				var this1 = this.__textEngine.textFormatRanges;
				var len = this.__textEngine.textFormatRanges.data.get_length() - 1;
				new openfl__$Vector_AbstractVector(this1.data.splice(1,len));
				range = this.__textEngine.textFormatRanges.data.get(0);
				range.format = this.__textFormat;
				range.start = 0;
				range.end = max;
			}
		} else {
			var index = this.__textEngine.textFormatRanges.data.get_length();
			var searchIndex;
			while(index > 0) {
				--index;
				range = this.__textEngine.textFormatRanges.data.get(index);
				if(range.start == beginIndex && range.end == endIndex) {
					range.format = openfl_text_TextField.__defaultTextFormat.clone();
					range.format.__merge(format);
					return;
				}
				if(range.start >= beginIndex && range.end <= endIndex) {
					searchIndex = this.__textEngine.textFormatRanges.data.indexOf(range,0);
					if(searchIndex > -1) {
						new openfl__$Vector_AbstractVector(this.__textEngine.textFormatRanges.data.splice(searchIndex,1));
					}
				}
			}
			var prevRange = null;
			var nextRange = null;
			if(beginIndex > 0) {
				var _g1 = 0;
				var _g = this.__textEngine.textFormatRanges.data.get_length();
				while(_g1 < _g) {
					var i = _g1++;
					range = this.__textEngine.textFormatRanges.data.get(i);
					if(range.end >= beginIndex) {
						prevRange = range;
						break;
					}
				}
			}
			if(endIndex < max) {
				var ni = this.__textEngine.textFormatRanges.data.get_length();
				while(--ni >= 0) {
					range = this.__textEngine.textFormatRanges.data.get(ni);
					if(range.start <= endIndex) {
						nextRange = range;
						break;
					}
				}
			}
			if(nextRange == prevRange) {
				nextRange = new openfl__$internal_text_TextFormatRange(nextRange.format.clone(),nextRange.start,nextRange.end);
				this.__textEngine.textFormatRanges.data.push(nextRange);
			}
			if(prevRange != null) {
				prevRange.end = beginIndex;
			}
			if(nextRange != null) {
				nextRange.start = endIndex;
			}
			var textFormat = openfl_text_TextField.__defaultTextFormat.clone();
			textFormat.__merge(format);
			var this2 = this.__textEngine.textFormatRanges;
			var x = new openfl__$internal_text_TextFormatRange(textFormat,beginIndex,endIndex);
			this2.data.push(x);
			this.__textEngine.textFormatRanges.data.sort(function(a,b) {
				if(a.start < b.start || a.end < b.end) {
					return -1;
				} else if(a.start > b.start || a.end > b.end) {
					return 1;
				}
				return 0;
			});
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__allowMouseFocus: function() {
		if(!(this.__textEngine.type == 1 || this.get_tabEnabled())) {
			return this.get_selectable();
		} else {
			return true;
		}
	}
	,__caretBeginningOfLine: function() {
		if(this.__selectionIndex == this.__caretIndex || this.__caretIndex < this.__selectionIndex) {
			this.__caretIndex = this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex));
		} else {
			this.__selectionIndex = this.getLineOffset(this.getLineIndexOfChar(this.__selectionIndex));
		}
	}
	,__caretEndOfLine: function() {
		var lineIndex;
		if(this.__selectionIndex == this.__caretIndex) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		} else {
			lineIndex = this.getLineIndexOfChar(Math.max(this.__caretIndex,this.__selectionIndex) | 0);
		}
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.getLineOffset(lineIndex + 1) - 1;
		} else {
			this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
	}
	,__caretNextCharacter: function() {
		if(this.__caretIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			this.__caretIndex++;
		}
	}
	,__caretNextLine: function(lineIndex,caretIndex) {
		if(lineIndex == null) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		}
		if(lineIndex < this.__textEngine.numLines - 1) {
			if(caretIndex == null) {
				caretIndex = this.__caretIndex;
			}
			this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex,lineIndex + 1);
		} else {
			this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
	}
	,__caretPreviousCharacter: function() {
		if(this.__caretIndex > 0) {
			this.__caretIndex--;
		}
	}
	,__caretPreviousLine: function(lineIndex,caretIndex) {
		if(lineIndex == null) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		}
		if(lineIndex > 0) {
			if(caretIndex == null) {
				caretIndex = this.__caretIndex;
			}
			this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex,lineIndex - 1);
		} else {
			this.__caretIndex = 0;
		}
	}
	,__disableInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__dispatch: function(event) {
		if(event.eventPhase == 2 && event.type == "mouseUp") {
			var event1 = event;
			var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
			if(group != null) {
				var url = group.format.url;
				if(url != "") {
					if(StringTools.startsWith(url,"event:")) {
						this.dispatchEvent(new openfl_events_TextEvent("link",false,false,HxOverrides.substr(url,6,null)));
					} else {
						openfl_Lib.getURL(new openfl_net_URLRequest(url));
					}
				}
			}
		}
		return openfl_display_InteractiveObject.prototype.__dispatch.call(this,event);
	}
	,__enableInput: function() {
		if(this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.backend.setEnableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		this.set_width(symbol.width);
		this.set_height(symbol.height);
		this.__offsetX = symbol.x;
		this.__offsetY = symbol.y;
		this.set_multiline(symbol.multiline);
		this.set_wordWrap(symbol.wordWrap);
		this.set_displayAsPassword(symbol.password);
		if(symbol.border) {
			this.set_border(true);
			this.set_background(true);
		}
		this.set_selectable(symbol.selectable);
		if(symbol.input) {
			this.set_type(1);
		}
		var format = new openfl_text_TextFormat();
		if(symbol.color != null) {
			format.color = symbol.color & 16777215;
		}
		format.size = Math.round(symbol.fontHeight / 20);
		var font = swf.symbols.h[symbol.fontID];
		if(font != null) {
			format.__ascent = font.ascent / 20 / 1024;
			format.__descent = font.descent / 20 / 1024;
		}
		format.font = symbol.fontName;
		var found = false;
		var _g = format.font;
		if(_g == null) {
			found = true;
		} else {
			switch(_g) {
			case "":case "_sans":case "_serif":case "_typewriter":
				found = true;
				break;
			default:
				var _g1 = 0;
				var _g11 = openfl_text_Font.enumerateFonts();
				while(_g1 < _g11.length) {
					var font1 = _g11[_g1];
					++_g1;
					if(font1.name == format.font) {
						found = true;
						break;
					}
				}
			}
		}
		if(!found) {
			var alpha_r = new RegExp("[^a-zA-Z]+","g".split("u").join(""));
			var _g12 = 0;
			var _g2 = openfl_text_Font.enumerateFonts();
			while(_g12 < _g2.length) {
				var font2 = _g2[_g12];
				++_g12;
				if(HxOverrides.substr(font2.name.replace(alpha_r,""),0,symbol.fontName.length) == symbol.fontName) {
					format.font = font2.name;
					found = true;
					break;
				}
			}
		}
		if(found) {
			this.set_embedFonts(true);
		} else {
			var key = format.font;
			var _this = openfl_text_TextField.__missingFontWarning;
			if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
				var k = format.font;
				var _this1 = openfl_text_TextField.__missingFontWarning;
				if(__map_reserved[k] != null) {
					_this1.setReserved(k,true);
				} else {
					_this1.h[k] = true;
				}
				lime_utils_Log.warn("Could not find required font \"" + format.font + "\", it has not been embedded",{ fileName : "TextField.hx", lineNumber : 1071, className : "openfl.text.TextField", methodName : "__fromSymbol"});
			}
		}
		if(symbol.align != null) {
			if(symbol.align == "center") {
				format.align = 0;
			} else if(symbol.align == "right") {
				format.align = 4;
			} else if(symbol.align == "justify") {
				format.align = 2;
			}
			format.leftMargin = symbol.leftMargin / 20 | 0;
			format.rightMargin = symbol.rightMargin / 20 | 0;
			format.indent = symbol.indent / 20 | 0;
			format.leading = symbol.leading / 20 | 0;
		}
		this.set_defaultTextFormat(format);
		if(symbol.text != null) {
			if(symbol.html) {
				this.set_htmlText(symbol.text);
			} else {
				this.set_text(symbol.text);
			}
		}
	}
	,__getAdvance: function(position) {
		return position;
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.copyFrom(this.__textEngine.bounds);
		bounds.x += this.__offsetX;
		bounds.y += this.__offsetY;
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getCharIndexOnDifferentLine: function(charIndex,lineIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			return -1;
		}
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var x = null;
		var y = null;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) {
					var i = _g3++;
					x += group.positions[i];
				}
				if(y != null) {
					return this.__getPosition(x,y);
				}
			}
			if(group.lineIndex == lineIndex) {
				y = group.offsetY + group.height / 2;
				if(x != null) {
					return this.__getPosition(x,y);
				}
			}
		}
		return -1;
	}
	,__getCursor: function() {
		var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
		if(group != null && group.format.url != "") {
			return lime_ui_MouseCursor.POINTER;
		} else if(this.__textEngine.selectable) {
			return lime_ui_MouseCursor.TEXT;
		}
		return null;
	}
	,__getGroup: function(x,y,precise) {
		if(precise == null) {
			precise = false;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.data.get(i);
		}
		if(!precise && y > this.__textEngine.textHeight) {
			y = this.__textEngine.textHeight;
		}
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.data.get_length();
		while(_g11 < _g2) {
			var i1 = _g11++;
			group = this.__textEngine.layoutGroups.data.get(i1);
			if(i1 < this.__textEngine.layoutGroups.data.get_length() - 1) {
				nextGroup = this.__textEngine.layoutGroups.data.get(i1 + 1);
			} else {
				nextGroup = null;
			}
			if(firstGroup) {
				if(y < group.offsetY) {
					y = group.offsetY;
				}
				if(x < group.offsetX) {
					x = group.offsetX;
				}
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || !precise && nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || !precise && (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					return group;
				}
			}
		}
		return null;
	}
	,__getPosition: function(x,y) {
		var group = this.__getGroup(x,y);
		if(group == null) {
			return lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		var advance = 0.0;
		var _g1 = 0;
		var _g = group.positions.length;
		while(_g1 < _g) {
			var i = _g1++;
			advance += group.positions[i];
			if(x <= group.offsetX + advance) {
				if(x <= group.offsetX + (advance - group.positions[i]) + group.positions[i] / 2) {
					return group.startIndex + i;
				} else if(group.startIndex + i < group.endIndex) {
					return group.startIndex + i + 1;
				} else {
					return group.endIndex;
				}
			}
		}
		return group.endIndex;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		var transform = this.__worldTransform;
		var textEngine = this.__textEngine;
		var bounds = textEngine.bounds;
		var graphics = this.__graphics;
		if(this.__dirty) {
			this.__updateLayout();
			if(graphics.__bounds == null) {
				graphics.__bounds = new openfl_geom_Rectangle();
			}
			graphics.__bounds.copyFrom(bounds);
		}
		graphics.__update();
		if(this.__dirty || graphics.__dirty) {
			var width = graphics.__width;
			var height = graphics.__height;
			if((textEngine.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.__bitmap = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				if(this.__graphics.__canvas == null) {
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				var transform1 = graphics.__renderTransform;
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
					openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
				}
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					} else {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g = this.get_scrollV() - 1;
					while(_g1 < _g) {
						var i = _g1++;
						scrollY -= textEngine.lineHeights.data.get(i);
					}
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g2 = 0;
					var _g11 = textEngine.layoutGroups;
					while(_g2 < _g11.data.get_length()) {
						var group = _g11.data.get(_g2);
						++_g2;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						if(group.format.underline) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#000000";
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = .5;
							var x = group.offsetX + scrollX;
							var y = group.offsetY + offsetY + scrollY + group.ascent;
							openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						var tmp2 = StringTools.hex(group.format.color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp2;
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						if(this.__filters != null && this.__filters.length > 0) {
							if(js_Boot.__instanceof(this.__filters[0],openfl_filters_GlowFilter)) {
								var glowFilter = this.__filters[0];
								var cacheAlpha = openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha;
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha * glowFilter.alpha;
								var tmp3 = StringTools.hex(glowFilter.color & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp3;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = Math.max(glowFilter.blurX,glowFilter.blurY);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = null;
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha;
							}
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g3 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g3 < _g21) {
										var i1 = _g3++;
										if(group.positions.length <= i1) {
											break;
										}
										advance += group.positions[i1];
									}
									var scrollY1 = 0.0;
									var _g31 = 0;
									var _g22 = this.get_scrollV() - 1;
									while(_g31 < _g22) {
										var i2 = _g31++;
										scrollY1 -= textEngine.lineHeights.data.get(i2);
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance - this.get_scrollH(),scrollY1 + 2,1,openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex || group.startIndex > this.__caretIndex && group.endIndex < this.__selectionIndex || group.startIndex > this.__selectionIndex && group.endIndex < this.__caretIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text)) {
									end = this.getCharBoundaries(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text) - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							var tmp4 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp4;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							var tmp5 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp5;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
						var scrollX1 = -this.get_scrollH();
						var scrollY2 = 0.0;
						var _g12 = 0;
						var _g4 = this.get_scrollV() - 1;
						while(_g12 < _g4) {
							var i3 = _g12++;
							scrollY2 -= textEngine.lineHeights.data.get(i3);
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						var tmp6 = StringTools.hex(this.get_defaultTextFormat().color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp6;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				graphics.__visible = true;
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		if(this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
			var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = false;
				renderSession.context.msImageSmoothingEnabled = false;
				renderSession.context.imageSmoothingEnabled = false;
			}
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = true;
				renderSession.context.msImageSmoothingEnabled = true;
				renderSession.context.imageSmoothingEnabled = true;
			}
		} else {
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
	}
	,__renderDOMClear: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		var transform = this.__worldTransform;
		var textEngine = this.__textEngine;
		var bounds = textEngine.bounds;
		var graphics = this.__graphics;
		if(this.__dirty) {
			this.__updateLayout();
			if(graphics.__bounds == null) {
				graphics.__bounds = new openfl_geom_Rectangle();
			}
			graphics.__bounds.copyFrom(bounds);
		}
		graphics.__update();
		if(this.__dirty || graphics.__dirty) {
			var width = graphics.__width;
			var height = graphics.__height;
			if((textEngine.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.__bitmap = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				if(this.__graphics.__canvas == null) {
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				var transform1 = graphics.__renderTransform;
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
					openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
				}
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					} else {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g = this.get_scrollV() - 1;
					while(_g1 < _g) {
						var i = _g1++;
						scrollY -= textEngine.lineHeights.data.get(i);
					}
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g2 = 0;
					var _g11 = textEngine.layoutGroups;
					while(_g2 < _g11.data.get_length()) {
						var group = _g11.data.get(_g2);
						++_g2;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						if(group.format.underline) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#000000";
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = .5;
							var x = group.offsetX + scrollX;
							var y = group.offsetY + offsetY + scrollY + group.ascent;
							openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						var tmp2 = StringTools.hex(group.format.color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp2;
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						if(this.__filters != null && this.__filters.length > 0) {
							if(js_Boot.__instanceof(this.__filters[0],openfl_filters_GlowFilter)) {
								var glowFilter = this.__filters[0];
								var cacheAlpha = openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha;
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha * glowFilter.alpha;
								var tmp3 = StringTools.hex(glowFilter.color & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp3;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = Math.max(glowFilter.blurX,glowFilter.blurY);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = null;
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha;
							}
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g3 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g3 < _g21) {
										var i1 = _g3++;
										if(group.positions.length <= i1) {
											break;
										}
										advance += group.positions[i1];
									}
									var scrollY1 = 0.0;
									var _g31 = 0;
									var _g22 = this.get_scrollV() - 1;
									while(_g31 < _g22) {
										var i2 = _g31++;
										scrollY1 -= textEngine.lineHeights.data.get(i2);
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance - this.get_scrollH(),scrollY1 + 2,1,openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex || group.startIndex > this.__caretIndex && group.endIndex < this.__selectionIndex || group.startIndex > this.__selectionIndex && group.endIndex < this.__caretIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text)) {
									end = this.getCharBoundaries(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text) - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							var tmp4 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp4;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							var tmp5 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp5;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
						var scrollX1 = -this.get_scrollH();
						var scrollY2 = 0.0;
						var _g12 = 0;
						var _g4 = this.get_scrollV() - 1;
						while(_g12 < _g4) {
							var i3 = _g12++;
							scrollY2 -= textEngine.lineHeights.data.get(i3);
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						var tmp6 = StringTools.hex(this.get_defaultTextFormat().color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp6;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				graphics.__visible = true;
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
	}
	,__renderGLMask: function(renderSession) {
		var transform = this.__worldTransform;
		var textEngine = this.__textEngine;
		var bounds = textEngine.bounds;
		var graphics = this.__graphics;
		if(this.__dirty) {
			this.__updateLayout();
			if(graphics.__bounds == null) {
				graphics.__bounds = new openfl_geom_Rectangle();
			}
			graphics.__bounds.copyFrom(bounds);
		}
		graphics.__update();
		if(this.__dirty || graphics.__dirty) {
			var width = graphics.__width;
			var height = graphics.__height;
			if((textEngine.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.__bitmap = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				if(this.__graphics.__canvas == null) {
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				var transform1 = graphics.__renderTransform;
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
					openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
				}
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					} else {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g = this.get_scrollV() - 1;
					while(_g1 < _g) {
						var i = _g1++;
						scrollY -= textEngine.lineHeights.data.get(i);
					}
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g2 = 0;
					var _g11 = textEngine.layoutGroups;
					while(_g2 < _g11.data.get_length()) {
						var group = _g11.data.get(_g2);
						++_g2;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						if(group.format.underline) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#000000";
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = .5;
							var x = group.offsetX + scrollX;
							var y = group.offsetY + offsetY + scrollY + group.ascent;
							openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						var tmp2 = StringTools.hex(group.format.color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp2;
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						if(this.__filters != null && this.__filters.length > 0) {
							if(js_Boot.__instanceof(this.__filters[0],openfl_filters_GlowFilter)) {
								var glowFilter = this.__filters[0];
								var cacheAlpha = openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha;
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha * glowFilter.alpha;
								var tmp3 = StringTools.hex(glowFilter.color & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp3;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = Math.max(glowFilter.blurX,glowFilter.blurY);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = null;
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha;
							}
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g3 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g3 < _g21) {
										var i1 = _g3++;
										if(group.positions.length <= i1) {
											break;
										}
										advance += group.positions[i1];
									}
									var scrollY1 = 0.0;
									var _g31 = 0;
									var _g22 = this.get_scrollV() - 1;
									while(_g31 < _g22) {
										var i2 = _g31++;
										scrollY1 -= textEngine.lineHeights.data.get(i2);
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance - this.get_scrollH(),scrollY1 + 2,1,openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex || group.startIndex > this.__caretIndex && group.endIndex < this.__selectionIndex || group.startIndex > this.__selectionIndex && group.endIndex < this.__caretIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text)) {
									end = this.getCharBoundaries(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text) - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							var tmp4 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp4;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							var tmp5 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp5;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
						var scrollX1 = -this.get_scrollH();
						var scrollY2 = 0.0;
						var _g12 = 0;
						var _g4 = this.get_scrollV() - 1;
						while(_g12 < _g4) {
							var i3 = _g12++;
							scrollY2 -= textEngine.lineHeights.data.get(i3);
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						var tmp6 = StringTools.hex(this.get_defaultTextFormat().color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp6;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				graphics.__visible = true;
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		openfl_display_InteractiveObject.prototype.__renderGLMask.call(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
			this.__selectionIndex = this.__caretIndex;
		}
		var enableInput = true;
		if(enableInput) {
			this.__enableInput();
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__stopTextInput: function() {
		var disableInput = true;
		if(disableInput) {
			this.__disableInput();
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			var cacheWidth = this.__textEngine.width;
			var cacheHeight = this.__textEngine.height;
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				if(this.__textEngine.width != cacheWidth) {
					var _g = this.__textEngine.autoSize;
					switch(_g) {
					case 0:
						var _g1 = this;
						_g1.set_x(_g1.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					case 3:
						var _g2 = this;
						_g2.set_x(_g2.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,__updateScrollH: function() {
		if(!this.get_multiline() && this.get_type() == 1) {
			this.__layoutDirty = true;
			this.__updateLayout();
			var offsetX = this.__textEngine.textWidth - this.__textEngine.width + 4;
			if(offsetX > 0) {
				this.set_scrollH(Math.ceil(offsetX));
			} else {
				this.set_scrollH(0);
			}
		}
	}
	,__updateText: function(value) {
		this.__textEngine.set_text(value);
		this.__text = this.__textEngine.text;
		if(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) < this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		if(!this.__displayAsPassword) {
			this.__textEngine.set_text(this.__text);
		} else {
			var length = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text());
			var mask = "";
			var _g1 = 0;
			var _g = length;
			while(_g1 < _g) {
				var i = _g1++;
				mask += "*";
			}
			this.__textEngine.set_text(mask);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		var _this = this.__renderTransform;
		var px = this.__offsetX;
		var py = this.__offsetY;
		_this.tx = px * _this.a + py * _this.c + _this.tx;
		_this.ty = px * _this.b + py * _this.d + _this.ty;
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		var tmp = value != this.__textEngine.antiAliasType;
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.autoSize = value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.bottomScrollV;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters != null && this.__filters.length == 1 && js_Boot.__instanceof(this.__filters[0],openfl_filters_GlowFilter)) {
			return false;
		}
		return openfl_display_InteractiveObject.prototype.get_cacheAsBitmap.call(this);
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__displayAsPassword = value;
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		if(value != this.__textEngine.height) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.height = value;
		}
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__isHTML = true;
		value = openfl__$internal_text_HTMLParser.parse(value,this.__textFormat,this.__textEngine.textFormatRanges);
		this.__updateText(value);
		return value;
	}
	,get_length: function() {
		if(this.__text != null) {
			return lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__textEngine.maxChars = value;
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollV;
	}
	,get_mouseWheelEnabled: function() {
		return this.__mouseWheelEnabled;
	}
	,set_mouseWheelEnabled: function(value) {
		return this.__mouseWheelEnabled = value;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__updateText(this.__text);
			this.__updateScrollH();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		if(this.__textEngine.restrict != value) {
			this.__textEngine.set_restrict(value);
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollH) {
			value = this.__textEngine.maxScrollH;
		}
		if(value < 0) {
			value = 0;
		}
		if(value != this.__textEngine.scrollH) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,set_scrollV: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollV) {
			value = this.__textEngine.maxScrollV;
		}
		if(value < 1) {
			value = 1;
		}
		if(value != this.__textEngine.scrollV) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.scrollV = value;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) {
				this.__startTextInput();
			} else if(!value) {
				this.__stopTextInput();
			}
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Math.min(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_selectionEndIndex: function() {
		return Math.max(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.sharpness = value;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__textEngine.type == 1;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_text: function() {
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else {
			return value;
		}
		if(this.__textEngine.textFormatRanges.data.get_length() > 1) {
			var this1 = this.__textEngine.textFormatRanges;
			var len = this.__textEngine.textFormatRanges.data.get_length() - 1;
			new openfl__$Vector_AbstractVector(this1.data.splice(1,len));
		}
		var utfValue = value;
		var range = this.__textEngine.textFormatRanges.data.get(0);
		range.format = this.__textFormat;
		range.start = 0;
		range.end = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(utfValue);
		this.__isHTML = false;
		this.__updateText(value);
		return value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.data.get_length()) {
			var range = _g1.data.get(_g);
			++_g;
			range.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
				this.__textEngine.__useIntAdvances = true;
			} else {
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
				this.__textEngine.__useIntAdvances = null;
			}
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		if(value != this.__textEngine.width) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.width = value;
		}
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.wordWrap = value;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) {
			return;
		}
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				this.__dirty = true;
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) {
			return;
		}
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var _this = this.__worldTransform;
			var px = this.get_x();
			var py = this.get_y();
			var norm = _this.a * _this.d - _this.b * _this.c;
			var px1 = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - py) + _this.d * (px - _this.tx));
			var _this1 = this.__worldTransform;
			var px2 = this.get_x();
			var py1 = this.get_y();
			var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
			var py2 = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (py1 - _this1.ty) + _this1.b * (_this1.tx - px2));
			var upPos = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Math.min(this.__selectionIndex,upPos) | 0;
			rightPos = Math.max(this.__selectionIndex,upPos) | 0;
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_selectable() && this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
			this.__startTextInput();
		}
	}
	,this_onFocusOut: function(event) {
		this.__stopCursorTimer();
		if(event.relatedObject == null || !js_Boot.__instanceof(event.relatedObject,openfl_text_TextField)) {
			this.__stopTextInput();
		} else {
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
		}
		if(this.__selectionIndex != this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,this_onKeyDown: function(event) {
		if(this.get_selectable() && this.get_type() != 1 && event.keyCode == 67 && (event.commandKey || event.ctrlKey)) {
			if(this.__caretIndex != this.__selectionIndex) {
				lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
			}
		}
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable()) {
			return;
		}
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
				this.__selectionIndex = this.__caretIndex - 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 97:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
				this.__selectionIndex = 0;
			}
			break;
		case 99:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
				}
			}
			break;
		case 120:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
				this.__selectionIndex = this.__caretIndex + 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 1073741898:
			this.__caretBeginningOfLine();
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741901:
			this.__caretEndOfLine();
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741903:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)) {
				this.__caretEndOfLine();
				if(!lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
			} else if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__caretNextCharacter();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretNextCharacter();
				} else {
					this.__caretIndex = Math.max(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741904:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)) {
				this.__caretBeginningOfLine();
				if(!lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
			} else if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__caretPreviousCharacter();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretPreviousCharacter();
				} else {
					this.__caretIndex = Math.min(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741905:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__caretNextLine();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretNextLine();
				} else {
					var lineIndex = this.getLineIndexOfChar(Math.max(this.__caretIndex,this.__selectionIndex) | 0);
					this.__caretNextLine(lineIndex,Math.min(this.__caretIndex,this.__selectionIndex) | 0);
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741906:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__caretPreviousLine();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretPreviousLine();
				} else {
					var lineIndex1 = this.getLineIndexOfChar(Math.min(this.__caretIndex,this.__selectionIndex) | 0);
					this.__caretPreviousLine(lineIndex1,Math.min(this.__caretIndex,this.__selectionIndex) | 0);
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 13:case 1073741912:
			if(this.__textEngine.multiline) {
				this.replaceSelectedText("\n");
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.replaceSelectedText(value);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_sharpness:"set_sharpness",get_sharpness:"get_sharpness",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_restrict:"set_restrict",get_restrict:"get_restrict",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",set_mouseWheelEnabled:"set_mouseWheelEnabled",get_mouseWheelEnabled:"get_mouseWheelEnabled",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_gridFitType:"set_gridFitType",get_gridFitType:"get_gridFitType",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_border:"set_border",get_border:"get_border",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_background:"set_background",get_background:"get_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_antiAliasType:"set_antiAliasType",get_antiAliasType:"get_antiAliasType"})
});
var openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldAutoSize.TextFieldAutoSize_Impl_"] = openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.__name__ = ["openfl","text","_TextFieldAutoSize","TextFieldAutoSize_Impl_"];
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "left":
		return 1;
	case "none":
		return 2;
	case "right":
		return 3;
	default:
		return null;
	}
};
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "left";
	case 2:
		return "none";
	case 3:
		return "right";
	default:
		return null;
	}
};
var openfl_text__$TextFieldType_TextFieldType_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldType.TextFieldType_Impl_"] = openfl_text__$TextFieldType_TextFieldType_$Impl_$;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.__name__ = ["openfl","text","_TextFieldType","TextFieldType_Impl_"];
openfl_text__$TextFieldType_TextFieldType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamic":
		return 0;
	case "input":
		return 1;
	default:
		return null;
	}
};
openfl_text__$TextFieldType_TextFieldType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamic";
	case 1:
		return "input";
	default:
		return null;
	}
};
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,__ascent: null
	,__descent: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		newFormat.__ascent = this.__ascent;
		newFormat.__descent = this.__descent;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) {
			this.font = format.font;
		}
		if(format.size != null) {
			this.size = format.size;
		}
		if(format.color != null) {
			this.color = format.color;
		}
		if(format.bold != null) {
			this.bold = format.bold;
		}
		if(format.italic != null) {
			this.italic = format.italic;
		}
		if(format.underline != null) {
			this.underline = format.underline;
		}
		if(format.url != null) {
			this.url = format.url;
		}
		if(format.target != null) {
			this.target = format.target;
		}
		if(format.align != null) {
			this.align = format.align;
		}
		if(format.leftMargin != null) {
			this.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.indent = format.indent;
		}
		if(format.leading != null) {
			this.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.tabStops = format.tabStops;
		}
		if(format.__ascent != null) {
			this.__ascent = format.__ascent;
		}
		if(format.__descent != null) {
			this.__descent = format.__descent;
		}
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$ = {};
$hxClasses["openfl.text._TextFormatAlign.TextFormatAlign_Impl_"] = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.__name__ = ["openfl","text","_TextFormatAlign","TextFormatAlign_Impl_"];
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "end";
	case 2:
		return "justify";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "start";
	default:
		return null;
	}
};
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl_text_TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) {
		return openfl_ui_GameInput.__deviceList[index];
	}
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] == null) {
		var devices = lime_ui_Joystick.__getDeviceData();
		var device = devices[gamepad.id].id;
		var devices1 = lime_ui_Joystick.__getDeviceData();
		var device1 = new openfl_ui_GameInputDevice(device,devices1[gamepad.id].id);
		openfl_ui_GameInput.__deviceList.push(device1);
		openfl_ui_GameInput.__devices.set(gamepad,device1);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control;
			switch(axis) {
			case 0:
				control = "LEFT_X";
				break;
			case 1:
				control = "LEFT_Y";
				break;
			case 2:
				control = "RIGHT_X";
				break;
			case 3:
				control = "RIGHT_Y";
				break;
			case 4:
				control = "TRIGGER_LEFT";
				break;
			case 5:
				control = "TRIGGER_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + axis + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + control,-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__axis.h[axis];
		control2.value = value;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__button.h[button];
		control2.value = 1;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__button.h[button];
		control2.value = 0;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.h[gamepad.__id__]);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if(type == "deviceAdded") {
			var _g = 0;
			var _g1 = openfl_ui_GameInput.__deviceList;
			while(_g < _g1.length) {
				var device = _g1[_g];
				++_g;
				this.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
			}
		}
	}
	,__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) {
		value = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,sampleInterval: null
	,__axis: null
	,__button: null
	,__controls: null
	,__gamepad: null
	,getCachedSamples: function(data,append) {
		if(append == null) {
			append = false;
		}
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) {
			return this.__controls[i];
		}
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) {
		shift = false;
	}
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) {
			return key - 48 + 48;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 97;
		}
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 65;
		}
	}
	if(key >= 96 && key <= 105) {
		return key - 96 + 48;
	}
	switch(key) {
	case 8:
		return 8;
	case 13:
		return 13;
	case 46:
		return 127;
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	default:
		return 0;
	}
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = ["openfl","ui","Mouse"];
openfl_ui_Mouse.__properties__ = {set_cursor:"set_cursor",get_cursor:"get_cursor"};
openfl_ui_Mouse.hide = function() {
	lime_ui_Mouse.hide();
};
openfl_ui_Mouse.show = function() {
	lime_ui_Mouse.show();
};
openfl_ui_Mouse.get_cursor = function() {
	return openfl_ui_Mouse.__cursor;
};
openfl_ui_Mouse.set_cursor = function(value) {
	switch(value) {
	case "arrow":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		break;
	case "button":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.POINTER);
		break;
	case "crosshair":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.CROSSHAIR);
		break;
	case "custom":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.CUSTOM);
		break;
	case "hand":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.MOVE);
		break;
	case "ibeam":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.TEXT);
		break;
	case "resize_nesw":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.RESIZE_NESW);
		break;
	case "resize_ns":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.RESIZE_NS);
		break;
	case "resize_nwse":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.RESIZE_NWSE);
		break;
	case "resize_we":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.RESIZE_WE);
		break;
	case "wait":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.WAIT);
		break;
	case "waitarrow":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.WAIT_ARROW);
		break;
	default:
	}
	return openfl_ui_Mouse.__cursor = value;
};
var openfl_ui__$MouseCursor_MouseCursor_$Impl_$ = {};
$hxClasses["openfl.ui._MouseCursor.MouseCursor_Impl_"] = openfl_ui__$MouseCursor_MouseCursor_$Impl_$;
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__name__ = ["openfl","ui","_MouseCursor","MouseCursor_Impl_"];
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.fromLimeCursor = function(cursor) {
	switch(cursor[1]) {
	case 0:
		return "arrow";
	case 1:
		return "crosshair";
	case 2:
		return "auto";
	case 3:
		return "hand";
	case 4:
		return "button";
	case 5:
		return "resize_nesw";
	case 6:
		return "resize_nwse";
	case 7:
		return "resize_nwse";
	case 8:
		return "resize_we";
	case 9:
		return "ibeam";
	case 10:
		return "wait";
	case 11:
		return "waitarrow";
	case 12:
		return "custom";
	}
};
var openfl_ui_Multitouch = function() { };
$hxClasses["openfl.ui.Multitouch"] = openfl_ui_Multitouch;
openfl_ui_Multitouch.__name__ = ["openfl","ui","Multitouch"];
openfl_ui_Multitouch.__properties__ = {get_supportsTouchEvents:"get_supportsTouchEvents"};
openfl_ui_Multitouch.get_supportsTouchEvents = function() {
	if(('ontouchstart' in document.documentElement) || (window.DocumentTouch && document instanceof DocumentTouch)) {
		return true;
	}
	return false;
};
var openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$ = {};
$hxClasses["openfl.ui._MultitouchInputMode.MultitouchInputMode_Impl_"] = openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.__name__ = ["openfl","ui","_MultitouchInputMode","MultitouchInputMode_Impl_"];
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "gesture":
		return 0;
	case "none":
		return 1;
	case "touchPoint":
		return 2;
	default:
		return null;
	}
};
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "gesture";
	case 1:
		return "none";
	case 2:
		return "touchPoint";
	default:
		return null;
	}
};
var openfl_utils_IAssetCache = function() { };
$hxClasses["openfl.utils.IAssetCache"] = openfl_utils_IAssetCache;
openfl_utils_IAssetCache.__name__ = ["openfl","utils","IAssetCache"];
openfl_utils_IAssetCache.prototype = {
	get_enabled: null
	,set_enabled: null
	,clear: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,removeFont: null
	,removeSound: null
	,setBitmapData: null
	,setFont: null
	,setSound: null
	,__class__: openfl_utils_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_utils_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils.AssetCache"] = openfl_utils_AssetCache;
openfl_utils_AssetCache.__name__ = ["openfl","utils","AssetCache"];
openfl_utils_AssetCache.__interfaces__ = [openfl_utils_IAssetCache];
openfl_utils_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = this.bitmapData.keys();
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.removeBitmapData(key1);
				}
			}
			var keys1 = this.font.keys();
			var key2 = keys1;
			while(key2.hasNext()) {
				var key3 = key2.next();
				if(StringTools.startsWith(key3,prefix)) {
					this.removeFont(key3);
				}
			}
			var keys2 = this.sound.keys();
			var key4 = keys2;
			while(key4.hasNext()) {
				var key5 = key4.next();
				if(StringTools.startsWith(key5,prefix)) {
					this.removeSound(key5);
				}
			}
		}
	}
	,getBitmapData: function(id) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,getFont: function(id) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,getSound: function(id) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,hasBitmapData: function(id) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,hasFont: function(id) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,hasSound: function(id) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,removeBitmapData: function(id) {
		lime_utils_Assets.cache.image.remove(id);
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		lime_utils_Assets.cache.font.remove(id);
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		lime_utils_Assets.cache.audio.remove(id);
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bitmapData);
		} else {
			_this.h[id] = bitmapData;
		}
	}
	,setFont: function(id,font) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,font);
		} else {
			_this.h[id] = font;
		}
	}
	,setSound: function(id,sound) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,sound);
		} else {
			_this.h[id] = sound;
		}
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_utils_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_utils_Assets = function() { };
$hxClasses["openfl.utils.Assets"] = openfl_utils_Assets;
openfl_utils_Assets.__name__ = ["openfl","utils","Assets"];
openfl_utils_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) {
		useWeakReference = false;
	}
	if(priority == null) {
		priority = 0;
	}
	if(useCapture == null) {
		useCapture = false;
	}
	if(!lime_utils_Assets.onChange.has(openfl_utils_Assets.LimeAssets_onChange)) {
		lime_utils_Assets.onChange.add(openfl_utils_Assets.LimeAssets_onChange);
	}
	openfl_utils_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_utils_Assets.dispatchEvent = function(event) {
	return openfl_utils_Assets.dispatcher.dispatchEvent(event);
};
openfl_utils_Assets.exists = function(id,type) {
	return lime_utils_Assets.exists(id,type);
};
openfl_utils_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			return bitmapData;
		}
	}
	var image = lime_utils_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setBitmapData(id,bitmapData1);
		}
		return bitmapData1;
	}
	return null;
};
openfl_utils_Assets.getBytes = function(id) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_utils_Assets.getBytes(id));
};
openfl_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasFont(id)) {
		return openfl_utils_Assets.cache.getFont(id);
	}
	var limeFont = lime_utils_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setFont(id,font);
		}
		return font;
	}
	return new openfl_text_Font();
};
openfl_utils_Assets.getLibrary = function(name) {
	return lime_utils_Assets.getLibrary(name);
};
openfl_utils_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var limeLibrary = openfl_utils_Assets.getLibrary(libraryName);
	if(limeLibrary != null) {
		if(js_Boot.__instanceof(limeLibrary,openfl_utils_AssetLibrary)) {
			var library = limeLibrary;
			if(library.exists(symbolName,"MOVIE_CLIP")) {
				if(library.isLocal(symbolName,"MOVIE_CLIP")) {
					return library.getMovieClip(symbolName);
				} else {
					lime_utils_Log.error("MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 175, className : "openfl.utils.Assets", methodName : "getMovieClip"});
					return null;
				}
			}
		}
		lime_utils_Log.error("There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 184, className : "openfl.utils.Assets", methodName : "getMovieClip"});
	} else {
		lime_utils_Log.error("There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 188, className : "openfl.utils.Assets", methodName : "getMovieClip"});
	}
	return null;
};
openfl_utils_Assets.getMusic = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return openfl_utils_Assets.getSound(id,useCache);
};
openfl_utils_Assets.getPath = function(id) {
	return lime_utils_Assets.getPath(id);
};
openfl_utils_Assets.getSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasSound(id)) {
		var sound = openfl_utils_Assets.cache.getSound(id);
		if(openfl_utils_Assets.isValidSound(sound)) {
			return sound;
		}
	}
	var buffer = lime_utils_Assets.getAudioBuffer(id,false);
	if(buffer != null) {
		var sound1 = openfl_media_Sound.fromAudioBuffer(buffer);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setSound(id,sound1);
		}
		return sound1;
	}
	return null;
};
openfl_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getText(id);
};
openfl_utils_Assets.hasEventListener = function(type) {
	return openfl_utils_Assets.dispatcher.hasEventListener(type);
};
openfl_utils_Assets.hasLibrary = function(name) {
	return lime_utils_Assets.hasLibrary(name);
};
openfl_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_utils_Assets.cache.hasBitmapData(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(openfl_utils_Assets.cache.hasFont(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_utils_Assets.cache.hasSound(id)) {
				return true;
			}
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_utils_Assets.getLibrary(libraryName);
	if(library != null) {
		return library.isLocal(symbolName,type);
	}
	return false;
};
openfl_utils_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_utils_Assets.isValidSound = function(sound) {
	return true;
};
openfl_utils_Assets.list = function(type) {
	return lime_utils_Assets.list(type);
};
openfl_utils_Assets.loadBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	lime_utils_Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_utils_Assets.cache.get_enabled()) {
				openfl_utils_Assets.cache.setBitmapData(id,bitmapData1);
			}
			promise.complete(bitmapData1);
		} else {
			promise.error("[Assets] Could not load Image \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadBytes = function(id) {
	var promise = new lime_app_Promise();
	var future = lime_utils_Assets.loadBytes(id);
	future.onComplete(function(bytes) {
		promise.complete(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	});
	future.onProgress(function(progress,total) {
		promise.progress(progress,total);
	});
	future.onError(function(msg) {
		promise.error(msg);
	});
	return promise.future;
};
openfl_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasFont(id)) {
		var tmp = openfl_utils_Assets.cache.getFont(id);
		promise.complete(tmp);
		return promise.future;
	}
	lime_utils_Assets.loadFont(id).onComplete(function(limeFont) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setFont(id,font);
		}
		promise.complete(font);
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadLibrary = function(name) {
	var future = lime_utils_Assets.loadLibrary(name);
	return future;
};
openfl_utils_Assets.loadMusic = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var future = new lime_app_Future(function() {
		return openfl_utils_Assets.getMusic(id,useCache);
	});
	return future;
};
openfl_utils_Assets.loadMovieClip = function(id) {
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var limeLibrary = openfl_utils_Assets.getLibrary(libraryName);
	if(limeLibrary != null) {
		if(js_Boot.__instanceof(limeLibrary,openfl_utils_AssetLibrary)) {
			var library = limeLibrary;
			if(library.exists(symbolName,"MOVIE_CLIP")) {
				promise.completeWith(library.loadMovieClip(symbolName));
				return promise.future;
			}
		}
		promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
openfl_utils_Assets.loadSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	lime_utils_Assets.loadAudioBuffer(id,useCache).onComplete(function(buffer) {
		if(buffer != null) {
			var sound = openfl_media_Sound.fromAudioBuffer(buffer);
			if(useCache && openfl_utils_Assets.cache.get_enabled()) {
				openfl_utils_Assets.cache.setSound(id,sound);
			}
			promise.complete(sound);
		} else {
			promise.error("[Assets] Could not load Sound \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadText = function(id) {
	var future = lime_utils_Assets.loadText(id);
	return future;
};
openfl_utils_Assets.registerLibrary = function(name,library) {
	lime_utils_Assets.registerLibrary(name,library);
};
openfl_utils_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) {
		capture = false;
	}
	openfl_utils_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_utils_Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl_utils_Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl_utils_Assets.unloadLibrary = function(name) {
	lime_utils_Assets.unloadLibrary(name);
};
openfl_utils_Assets.LimeAssets_onChange = function() {
	openfl_utils_Assets.dispatchEvent(new openfl_events_Event("change"));
};
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length"};
openfl_utils__$ByteArray_ByteArray_$Impl_$._new = function(length) {
	if(length == null) {
		length = 0;
	}
	var this1 = new openfl_utils_ByteArrayData(length);
	return this1;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get = function(this1,index) {
	return this1.b[index];
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set = function(this1,index,value) {
	this1.__resize(index + 1);
	this1.b[index] = value & 255;
	return value;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	if(js_Boot.__instanceof(bytes,openfl_utils_ByteArrayData)) {
		return bytes;
	} else {
		return openfl_utils_ByteArrayData.fromBytes(bytes);
	}
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(bytesData));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromFile = function(path) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.loadFromBytes = function(bytes) {
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromBytes(bytes).then(function(limeBytes) {
		var byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(limeBytes);
		return lime_app_Future.withValue(byteArray);
	});
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.loadFromFile = function(path) {
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(function(limeBytes) {
		var byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(limeBytes);
		return lime_app_Future.withValue(byteArray);
	});
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromLimeBytes = function(bytes) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytePointer = function(byteArray) {
	lime_utils__$BytePointer_BytePointer_$Impl_$.set(openfl_utils__$ByteArray_ByteArray_$Impl_$.__bytePointer,byteArray,null,null,byteArray.position);
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.__bytePointer;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytesData = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toLimeBytes = function(byteArray) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray)));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	return this1.length;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length = function(this1,value) {
	if(value > 0) {
		this1.__resize(value);
		if(value < this1.position) {
			this1.position = value;
		}
	}
	this1.length = value;
	return value;
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	get_endian: null
	,set_endian: null
	,objectEncoding: null
	,writeBoolean: null
	,writeByte: null
	,writeBytes: null
	,writeDouble: null
	,writeFloat: null
	,writeInt: null
	,writeMultiByte: null
	,writeShort: null
	,writeUTF: null
	,writeUTFBytes: null
	,writeUnsignedInt: null
	,__class__: openfl_utils_IDataOutput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	get_bytesAvailable: null
	,get_endian: null
	,set_endian: null
	,objectEncoding: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readMultiByte: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,__class__: openfl_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	this.__endian = openfl_utils_ByteArrayData.__defaultEndian;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	objectEncoding: null
	,position: null
	,__endian: null
	,__length: null
	,clear: function() {
		this.length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_compress_Deflate.compress(this);
			break;
		case 1:
			bytes = lime_utils_compress_LZMA.compress(this);
			break;
		default:
			bytes = lime_utils_compress_Zlib.compress(this);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
			this.position = this.length;
		}
	}
	,deflate: function() {
		this.compress(0);
	}
	,inflate: function() {
		this.uncompress(0);
	}
	,readBoolean: function() {
		if(this.position < this.length) {
			return this.b[this.position++] != 0;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(length == 0) {
			length = this.length - this.position;
		}
		if(this.position + length > this.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		if(bytes.length < offset + length) {
			bytes.__resize(offset + length);
		}
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		var ch1 = this.readInt();
		var ch2 = this.readInt();
		if(this.__endian == 1) {
			return haxe_io_FPHelper.i64ToDouble(ch1,ch2);
		} else {
			return haxe_io_FPHelper.i64ToDouble(ch2,ch1);
		}
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt());
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value;
		if(this.__endian == 1) {
			value = ch2 << 8 | ch1;
		} else {
			value = ch1 << 8 | ch2;
		}
		if((value & 32768) != 0) {
			return value - 65536;
		} else {
			return value;
		}
	}
	,readUnsignedByte: function() {
		if(this.position < this.length) {
			return this.b[this.position++];
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return (ch2 << 8) + ch1;
		} else {
			return ch1 << 8 | ch2;
		}
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_compress_Deflate.decompress(this);
			break;
		case 1:
			bytes = lime_utils_compress_LZMA.decompress(this);
			break;
		default:
			bytes = lime_utils_compress_Zlib.decompress(this);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
		}
		this.position = 0;
	}
	,writeBoolean: function(value) {
		this.writeByte(value ? 1 : 0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.b[this.position++] = value & 255 & 255;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) == 0) {
			return;
		}
		if(length == 0) {
			length = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		var int64 = haxe_io_FPHelper.doubleToI64(value);
		if(this.__endian == 1) {
			this.writeInt(int64.low);
			this.writeInt(int64.high);
		} else {
			this.writeInt(int64.high);
			this.writeInt(int64.low);
		}
	}
	,writeFloat: function(value) {
		if(this.__endian == 1) {
			this.__resize(this.position + 4);
			this.setFloat(this.position,value);
			this.position += 4;
		} else {
			var $int = haxe_io_FPHelper.floatToI32(value);
			this.writeInt($int);
		}
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 24 & 255 & 255;
		} else {
			this.b[this.position++] = value >> 24 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value & 255 & 255;
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255;
			this.b[this.position++] = value >> 8 & 255;
		} else {
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value & 255;
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(haxe_io_Bytes.ofString(value)));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
		this.length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.__length) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((size + 1) * 3 >> 1));
			var cacheLength = this.length;
			this.length = this.__length;
			bytes.blit(0,this,0,this.__length);
			this.length = cacheLength;
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
		}
		if(this.length < size) {
			this.length = size;
		}
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$ = {};
$hxClasses["openfl.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_"] = openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.__name__ = ["openfl","utils","_CompressionAlgorithm","CompressionAlgorithm_Impl_"];
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.fromString = function(value) {
	switch(value) {
	case "deflate":
		return 0;
	case "lzma":
		return 1;
	case "zlib":
		return 2;
	default:
		return null;
	}
};
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "deflate";
	case 1:
		return "lzma";
	case 2:
		return "zlib";
	default:
		return null;
	}
};
var openfl_utils__$Endian_Endian_$Impl_$ = {};
$hxClasses["openfl.utils._Endian.Endian_Impl_"] = openfl_utils__$Endian_Endian_$Impl_$;
openfl_utils__$Endian_Endian_$Impl_$.__name__ = ["openfl","utils","_Endian","Endian_Impl_"];
openfl_utils__$Endian_Endian_$Impl_$.fromLimeEndian = function(value) {
	switch(value[1]) {
	case 0:
		return 1;
	case 1:
		return 0;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bigEndian":
		return 0;
	case "littleEndian":
		return 1;
	default:
		return null;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.toLimeEndian = function(value) {
	switch(value) {
	case 0:
		return lime_system_Endian.BIG_ENDIAN;
	case 1:
		return lime_system_Endian.LITTLE_ENDIAN;
	default:
		return null;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bigEndian";
	case 1:
		return "littleEndian";
	default:
		return null;
	}
};
var openfl_utils__$Object_Object_$Impl_$ = {};
$hxClasses["openfl.utils._Object.Object_Impl_"] = openfl_utils__$Object_Object_$Impl_$;
openfl_utils__$Object_Object_$Impl_$.__name__ = ["openfl","utils","_Object","Object_Impl_"];
openfl_utils__$Object_Object_$Impl_$._new = function() {
	var this1 = { };
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.hasOwnProperty = function(this1,name) {
	if(this1 != null) {
		return Object.prototype.hasOwnProperty.call(this1,name);
	} else {
		return false;
	}
};
openfl_utils__$Object_Object_$Impl_$.isPrototypeOf = function(this1,theClass) {
	var o = this1;
	var c = o == null ? null : js_Boot.getClass(o);
	while(c != null) {
		if(c == theClass) {
			return true;
		}
		c = Type.getSuperClass(c);
	}
	return false;
};
openfl_utils__$Object_Object_$Impl_$.iterator = function(this1) {
	var fields = Reflect.fields(this1);
	if(fields == null) {
		fields = [];
	}
	return HxOverrides.iter(fields);
};
openfl_utils__$Object_Object_$Impl_$.propertyIsEnumerable = function(this1,name) {
	if(this1 != null && Object.prototype.hasOwnProperty.call(this1,name)) {
		return js_Boot.__instanceof(Reflect.field(this1,name),haxe_lang_Iterable);
	} else {
		return false;
	}
};
openfl_utils__$Object_Object_$Impl_$.toLocaleString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.valueOf = function(this1) {
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.__get = function(this1,key) {
	return Reflect.field(this1,key);
};
openfl_utils__$Object_Object_$Impl_$.__set = function(this1,key,value) {
	this1[key] = value;
	return value;
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var openfl_utils_TouchData = function() {
	this.rollOutStack = [];
};
$hxClasses["openfl.utils.TouchData"] = openfl_utils_TouchData;
openfl_utils_TouchData.__name__ = ["openfl","utils","TouchData"];
openfl_utils_TouchData.prototype = {
	touch: null
	,touchDownTarget: null
	,touchOverTarget: null
	,rollOutStack: null
	,reset: function() {
		this.touch = null;
		this.touchDownTarget = null;
		this.touchOverTarget = null;
		this.rollOutStack.splice(0,this.rollOutStack.length);
	}
	,__class__: openfl_utils_TouchData
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
var init = lime__$backend_html5_HTML5Application;
var init = lime_app_Application;
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Float64Array = $global.Float64Array || ($global.Float32Array ? "notsupported" : null) || js_html_compat_Float64Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = Math.ceil(i * 257.003921568627447);
}
var this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
lime_utils_Log.level = 4;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) {
	console.log = function() {
	};
}
lime_utils_Log.throwErrors = true;
openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas = window.document.createElement("canvas");
openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas.getContext("2d");
openfl_ui_Multitouch.maxTouchPoints = 2;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = false;
openfl_ui_Multitouch.inputMode = 2;
haxepunk_Scene.drawContext = new haxepunk_utils_DrawContext();
haxepunk_Scene._pooledEntityLists = [];
openfl_text_Font.__fontByName = new haxe_ds_StringMap();
openfl_text_Font.__registeredFonts = [];
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe_io_FPHelper.LN2 = 0.6931471805599453;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
js_Boot.__toStr = ({ }).toString;
haxepunk_Entity._EMPTY = new haxepunk_Entity();
haxepunk_Entity._point = new haxepunk_math_Vector2();
haxepunk_HXP.VERSION = "4.0.0";
haxepunk_HXP.frameRate = 0;
haxepunk_HXP.rate = 1;
haxepunk_HXP.defaultFont = "font/monofonto";
haxepunk_HXP.tweener = new haxepunk_Tweener();
haxepunk_HXP.focused = false;
haxepunk_HXP.orientations = [];
haxepunk_HXP.volume = 1;
haxepunk_HXP._pan = 0;
haxepunk_HXP.point = new haxepunk_math_Vector2();
haxepunk_HXP.point2 = new haxepunk_math_Vector2();
haxepunk_HXP.zeroCamera = new haxepunk_Camera();
haxepunk_HXP.rect = new haxepunk_math_Rectangle();
haxepunk_assets_AssetCache.global = new haxepunk_assets_AssetCache();
haxepunk_assets_AssetCache.active = [haxepunk_assets_AssetCache.global];
openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__tempStack = new lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject(function() {
	return openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
},function(stack) {
	stack.data.set_length(0);
});
haxepunk_backend_flash_KeyInput._nativeCorrection = new haxe_ds_StringMap();
haxepunk_backend_flash_Sfx._sounds = new haxe_ds_StringMap();
haxepunk_backend_flash_Sfx._typePlaying = new haxe_ds_StringMap();
haxepunk_backend_flash_Sfx._typeTransforms = new haxe_ds_StringMap();
openfl_geom_Point.__pool = new lime_utils_ObjectPool_$openfl_$geom_$Point(function() {
	return new openfl_geom_Point();
},function(p) {
	p.setTo(0,0);
});
haxepunk_backend_flash__$Texture_Texture_$Impl_$._zero = new openfl_geom_Point(0,0);
haxepunk_debug_Console.SAMPLE_TIME = 0.333333333333333315;
haxepunk_debug_Console.DATA_SIZE = 15;
haxepunk_debug_Console.CAMERA_PAN_PER_SECOND = 256;
haxepunk_debug_Console.MIN_DRAG = 8;
haxepunk_debug_LogPanel.EXPAND_PER_SECOND = 2048;
haxepunk_debug_LogPanel.LOG_LINES = 24;
haxepunk_graphics_atlas_Atlas.smooth = false;
haxepunk_graphics_atlas_AtlasData._dataPool = new haxe_ds_StringMap();
haxepunk_graphics_atlas_AtlasData._uniqueId = 0;
haxepunk_graphics_atlas_AtlasData._rect = new haxepunk_math_Rectangle();
haxepunk_graphics_atlas_AtlasResolutions._rect = new haxepunk_math_Rectangle();
haxepunk_graphics_atlas_AtlasResolutions._point = new haxepunk_math_Vector2();
haxepunk_graphics_hardware_DrawCommand._pool = haxepunk_graphics_hardware_DrawCommand._prePopulatePool(32,4);
haxepunk_graphics_hardware_DrawCommandBatch.maxTriangleChecks = 128;
haxepunk_graphics_hardware_DrawCommandBatch._bounds = new haxepunk_math_Rectangle();
haxepunk_graphics_hardware_HardwareRenderer.drawCallLimit = -1;
haxepunk_graphics_hardware_HardwareRenderer.UNIFORM_MATRIX = "uMatrix";
haxepunk_graphics_hardware_HardwareRenderer.triangleCount = 0;
haxepunk_graphics_hardware_HardwareRenderer.drawCallCount = 0;
haxepunk_graphics_hardware_HardwareRenderer._tracking = true;
haxepunk_graphics_hardware_RenderBuffer.INITIAL_SIZE = 100;
haxepunk_graphics_shader_Shader.idSeq = 0;
haxepunk_graphics_shader_ColorShader.VERTEX_SHADER = "// HaxePunk color vertex shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec4 aPosition;\nattribute vec4 aColor;\nvarying vec4 vColor;\nuniform mat4 uMatrix;\n\nvoid main(void) {\n\tvColor = vec4(aColor.bgr * aColor.a, aColor.a);\n\tgl_Position = uMatrix * aPosition;\n}";
haxepunk_graphics_shader_ColorShader.FRAGMENT_SHADER = "// HaxePunk color fragment shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec4 vColor;\n\nvoid main(void) {\n\tgl_FragColor = vColor;\n}";
haxepunk_graphics_shader_SceneShader.DEFAULT_VERTEX_SHADER = "\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec4 aPosition;\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\n\nvoid main() {\n\tvTexCoord = aTexCoord;\n\tgl_Position = aPosition;\n}";
haxepunk_graphics_shader_SceneShader._vertices = [-1.0,-1.0,0,0,1.0,-1.0,1,0,-1.0,1.0,0,1,1.0,-1.0,1,0,1.0,1.0,1,1,-1.0,1.0,0,1];
haxepunk_graphics_shader_TextureShader.VERTEX_SHADER = "// HaxePunk texture vertex shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec4 aPosition;\nattribute vec2 aTexCoord;\nattribute vec4 aColor;\nvarying vec2 vTexCoord;\nvarying vec4 vColor;\nuniform mat4 uMatrix;\n\nvoid main(void) {\n\tvColor = vec4(aColor.bgr * aColor.a, aColor.a);\n\tvTexCoord = aTexCoord;\n\tgl_Position = uMatrix * aPosition;\n}";
haxepunk_graphics_shader_TextureShader.FRAGMENT_SHADER = "// HaxePunk texture fragment shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec4 vColor;\nvarying vec2 vTexCoord;\nuniform sampler2D uImage0;\n\nvoid main(void) {\n\tvec4 color = texture2D(uImage0, vTexCoord);\n\tif (color.a == 0.0) {\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t} else {\n\t\tgl_FragColor = color * vColor;\n\t}\n}";
haxepunk_graphics_text_BitmapFontAtlas._DEFAULT_GLYPHS = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
haxepunk_graphics_text__$BitmapText_AlignType_$Impl_$.Left = 0;
haxepunk_graphics_text__$BitmapText_AlignType_$Impl_$.Center = 1;
haxepunk_graphics_text__$BitmapText_AlignType_$Impl_$.Right = 2;
haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE = new EReg("<(([A-Za-z_-]+)( ([a-zA-Z-_]+)=\"([^\"]*)\")?/?|(/[A-Za-z_-]+))>","");
haxepunk_graphics_text_BitmapText.formatTags = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = [haxepunk_graphics_text_TextOpcode.NewLine(0,0,0)];
		if(__map_reserved["br"] != null) {
			_g.setReserved("br",value);
		} else {
			_g.h["br"] = value;
		}
	}
	{
		var value1 = [haxepunk_graphics_text_TextOpcode.Align(0)];
		if(__map_reserved["left"] != null) {
			_g.setReserved("left",value1);
		} else {
			_g.h["left"] = value1;
		}
	}
	{
		var value2 = [haxepunk_graphics_text_TextOpcode.Align(0)];
		if(__map_reserved["/left"] != null) {
			_g.setReserved("/left",value2);
		} else {
			_g.h["/left"] = value2;
		}
	}
	{
		var value3 = [haxepunk_graphics_text_TextOpcode.Align(2)];
		if(__map_reserved["right"] != null) {
			_g.setReserved("right",value3);
		} else {
			_g.h["right"] = value3;
		}
	}
	{
		var value4 = [haxepunk_graphics_text_TextOpcode.Align(0)];
		if(__map_reserved["/right"] != null) {
			_g.setReserved("/right",value4);
		} else {
			_g.h["/right"] = value4;
		}
	}
	{
		var value5 = [haxepunk_graphics_text_TextOpcode.Align(1)];
		if(__map_reserved["center"] != null) {
			_g.setReserved("center",value5);
		} else {
			_g.h["center"] = value5;
		}
	}
	{
		var value6 = [haxepunk_graphics_text_TextOpcode.Align(0)];
		if(__map_reserved["/center"] != null) {
			_g.setReserved("/center",value6);
		} else {
			_g.h["/center"] = value6;
		}
	}
	$r = _g;
	return $r;
}(this));
haxepunk_graphics_text_BitmapText.dynamicTags = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = haxepunk_graphics_text_BitmapText.dynamicImage;
		if(__map_reserved["img"] != null) {
			_g.setReserved("img",value);
		} else {
			_g.h["img"] = value;
		}
	}
	$r = _g;
	return $r;
}(this));
haxepunk_graphics_text_BitmapText._colorStack = [];
haxepunk_graphics_text_BitmapText._alphaStack = [];
haxepunk_graphics_text_BitmapText._scaleStack = [];
haxepunk_graphics_text_BitmapText._sizeStack = [];
haxepunk_graphics_text_BitmapText._word = [];
haxepunk_graphics_text_BitmapText._customStack = [];
haxepunk_graphics_text_BitmapText._renderData = new haxepunk_graphics_text_RenderData();
haxepunk_graphics_text_BitmapText._imgArray = [];
haxepunk_input_Gamepad.deadZone = 0.15;
haxepunk_input_Gamepad.gamepads = new haxe_ds_IntMap();
haxepunk_input_Gamepad.onConnect = new haxepunk_Signal1();
haxepunk_input_Gamepad.onDisconnect = new haxepunk_Signal1();
haxepunk_input_Gamepad.gamepadCount = 0;
haxepunk_input__$Gesture_Gesture_$Impl_$.TAP = 1;
haxepunk_input__$Gesture_Gesture_$Impl_$.DOUBLE_TAP = 2;
haxepunk_input__$Gesture_Gesture_$Impl_$.LONG_PRESS = 3;
haxepunk_input__$Gesture_Gesture_$Impl_$.MOVE = 4;
haxepunk_input__$Gesture_Gesture_$Impl_$.PINCH = 5;
haxepunk_input__$Gesture_Gesture_$Impl_$.TWO_FINGER_TAP = 6;
haxepunk_input__$Gesture_Gesture_$Impl_$.longPressTime = 0.5;
haxepunk_input__$Gesture_Gesture_$Impl_$.doubleTapTime = 0.5;
haxepunk_input__$Gesture_Gesture_$Impl_$.deadZone = 5;
haxepunk_input__$Gesture_Gesture_$Impl_$.enabled = false;
haxepunk_input__$Gesture_Gesture_$Impl_$.gestures = new haxe_ds_IntMap();
haxepunk_input__$Gesture_Gesture_$Impl_$._lastTap = 0;
haxepunk_input__$Key_Key_$Impl_$.keyString = "";
haxepunk_input__$Key_Key_$Impl_$.ANY = -1;
haxepunk_input__$Key_Key_$Impl_$.LEFT = 37;
haxepunk_input__$Key_Key_$Impl_$.UP = 38;
haxepunk_input__$Key_Key_$Impl_$.RIGHT = 39;
haxepunk_input__$Key_Key_$Impl_$.DOWN = 40;
haxepunk_input__$Key_Key_$Impl_$.ENTER = 13;
haxepunk_input__$Key_Key_$Impl_$.COMMAND = 15;
haxepunk_input__$Key_Key_$Impl_$.CONTROL = 17;
haxepunk_input__$Key_Key_$Impl_$.SPACE = 32;
haxepunk_input__$Key_Key_$Impl_$.SHIFT = 16;
haxepunk_input__$Key_Key_$Impl_$.BACKSPACE = 8;
haxepunk_input__$Key_Key_$Impl_$.CAPS_LOCK = 20;
haxepunk_input__$Key_Key_$Impl_$.DELETE = 46;
haxepunk_input__$Key_Key_$Impl_$.END = 35;
haxepunk_input__$Key_Key_$Impl_$.ESCAPE = 27;
haxepunk_input__$Key_Key_$Impl_$.HOME = 36;
haxepunk_input__$Key_Key_$Impl_$.INSERT = 45;
haxepunk_input__$Key_Key_$Impl_$.TAB = 9;
haxepunk_input__$Key_Key_$Impl_$.PAGE_DOWN = 34;
haxepunk_input__$Key_Key_$Impl_$.PAGE_UP = 33;
haxepunk_input__$Key_Key_$Impl_$.LEFT_SQUARE_BRACKET = 219;
haxepunk_input__$Key_Key_$Impl_$.RIGHT_SQUARE_BRACKET = 221;
haxepunk_input__$Key_Key_$Impl_$.TILDE = 192;
haxepunk_input__$Key_Key_$Impl_$.A = 65;
haxepunk_input__$Key_Key_$Impl_$.B = 66;
haxepunk_input__$Key_Key_$Impl_$.C = 67;
haxepunk_input__$Key_Key_$Impl_$.D = 68;
haxepunk_input__$Key_Key_$Impl_$.E = 69;
haxepunk_input__$Key_Key_$Impl_$.F = 70;
haxepunk_input__$Key_Key_$Impl_$.G = 71;
haxepunk_input__$Key_Key_$Impl_$.H = 72;
haxepunk_input__$Key_Key_$Impl_$.I = 73;
haxepunk_input__$Key_Key_$Impl_$.J = 74;
haxepunk_input__$Key_Key_$Impl_$.K = 75;
haxepunk_input__$Key_Key_$Impl_$.L = 76;
haxepunk_input__$Key_Key_$Impl_$.M = 77;
haxepunk_input__$Key_Key_$Impl_$.N = 78;
haxepunk_input__$Key_Key_$Impl_$.O = 79;
haxepunk_input__$Key_Key_$Impl_$.P = 80;
haxepunk_input__$Key_Key_$Impl_$.Q = 81;
haxepunk_input__$Key_Key_$Impl_$.R = 82;
haxepunk_input__$Key_Key_$Impl_$.S = 83;
haxepunk_input__$Key_Key_$Impl_$.T = 84;
haxepunk_input__$Key_Key_$Impl_$.U = 85;
haxepunk_input__$Key_Key_$Impl_$.V = 86;
haxepunk_input__$Key_Key_$Impl_$.W = 87;
haxepunk_input__$Key_Key_$Impl_$.X = 88;
haxepunk_input__$Key_Key_$Impl_$.Y = 89;
haxepunk_input__$Key_Key_$Impl_$.Z = 90;
haxepunk_input__$Key_Key_$Impl_$.F1 = 112;
haxepunk_input__$Key_Key_$Impl_$.F2 = 113;
haxepunk_input__$Key_Key_$Impl_$.F3 = 114;
haxepunk_input__$Key_Key_$Impl_$.F4 = 115;
haxepunk_input__$Key_Key_$Impl_$.F5 = 116;
haxepunk_input__$Key_Key_$Impl_$.F6 = 117;
haxepunk_input__$Key_Key_$Impl_$.F7 = 118;
haxepunk_input__$Key_Key_$Impl_$.F8 = 119;
haxepunk_input__$Key_Key_$Impl_$.F9 = 120;
haxepunk_input__$Key_Key_$Impl_$.F10 = 121;
haxepunk_input__$Key_Key_$Impl_$.F11 = 122;
haxepunk_input__$Key_Key_$Impl_$.F12 = 123;
haxepunk_input__$Key_Key_$Impl_$.F13 = 124;
haxepunk_input__$Key_Key_$Impl_$.F14 = 125;
haxepunk_input__$Key_Key_$Impl_$.F15 = 126;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_0 = 48;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_1 = 49;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_2 = 50;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_3 = 51;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_4 = 52;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_5 = 53;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_6 = 54;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_7 = 55;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_8 = 56;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_9 = 57;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_0 = 96;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_1 = 97;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_2 = 98;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_3 = 99;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_4 = 100;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_5 = 101;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_6 = 102;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_7 = 103;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_8 = 104;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_9 = 105;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_ADD = 107;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_DECIMAL = 110;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_DIVIDE = 111;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_ENTER = 108;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_MULTIPLY = 106;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_SUBTRACT = 109;
haxepunk_input__$Key_Key_$Impl_$.kKeyStringMax = 100;
haxepunk_input__$Key_Key_$Impl_$._key = new haxe_ds_IntMap();
haxepunk_input__$Key_Key_$Impl_$._keyNum = 0;
haxepunk_input__$Key_Key_$Impl_$._press = [];
haxepunk_input__$Key_Key_$Impl_$._pressNum = 0;
haxepunk_input__$Key_Key_$Impl_$._release = [];
haxepunk_input__$Key_Key_$Impl_$._releaseNum = 0;
haxepunk_input__$Key_Key_$Impl_$._control = new haxe_ds_StringMap();
haxepunk_input__$Key_Key_$Impl_$._keyMap = new haxe_ds_IntMap();
haxepunk_input_Mouse.mouseDown = false;
haxepunk_input_Mouse.mouseUp = false;
haxepunk_input_Mouse.mousePressed = false;
haxepunk_input_Mouse.mouseReleased = false;
haxepunk_input_Mouse.rightMouseDown = false;
haxepunk_input_Mouse.rightMouseUp = false;
haxepunk_input_Mouse.rightMousePressed = false;
haxepunk_input_Mouse.rightMouseReleased = false;
haxepunk_input_Mouse.middleMouseDown = false;
haxepunk_input_Mouse.middleMouseUp = false;
haxepunk_input_Mouse.middleMousePressed = false;
haxepunk_input_Mouse.middleMouseReleased = false;
haxepunk_input_Mouse.mouseWheel = false;
haxepunk_input_Mouse._control = new haxe_ds_StringMap();
haxepunk_input_Mouse._buttonMap = new haxe_ds_IntMap();
haxepunk_input_Mouse._mouseWheelDelta = 0;
haxepunk_input_Input.PRESS = "press";
haxepunk_input_Input.RELEASE = "release";
haxepunk_input_Input.handlers = [haxepunk_input__$Key_Key_$Impl_$,haxepunk_input_Mouse];
haxepunk_input_Input.multiTouchSupported = false;
haxepunk_input_Input._signals = [];
haxepunk_input_Input._enabled = false;
haxepunk_input_Touch._touches = new haxe_ds_IntMap();
haxepunk_input_Touch._touchOrder = [];
haxepunk_masks_Polygon.EPSILON = 0.000000001;
haxepunk_masks_Polygon.firstProj = new haxepunk_math_Projection();
haxepunk_masks_Polygon.secondProj = new haxepunk_math_Projection();
haxepunk_masks_Polygon.vertical = new haxepunk_math_Vector2(0,1);
haxepunk_masks_Polygon.horizontal = new haxepunk_math_Vector2(1,0);
haxepunk_masks_SlopedGrid._emptyTile = { type : 0};
haxepunk_math_MathUtil.INT_MIN_VALUE = -2147483648;
haxepunk_math_MathUtil.INT_MAX_VALUE = 2147483647;
haxepunk_math_MathUtil.PI = 3.14159265358979323;
haxepunk_math_MathUtil.EPSILON = 1e-10;
haxepunk_math_MathUtil.point = haxepunk__$Position_Position_$Impl_$._new();
haxepunk_math_Random._seed = 0;
haxepunk_tmx_TmxLayer.BASE64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
haxepunk_utils__$BlendMode_BlendMode_$Impl_$.Add = 0;
haxepunk_utils__$BlendMode_BlendMode_$Impl_$.Alpha = 1;
haxepunk_utils__$BlendMode_BlendMode_$Impl_$.Multiply = 9;
haxepunk_utils__$BlendMode_BlendMode_$Impl_$.Screen = 12;
haxepunk_utils__$BlendMode_BlendMode_$Impl_$.Subtract = 14;
haxepunk_utils__$Color_Color_$Impl_$.White = 16777215;
haxepunk_utils__$Color_Color_$Impl_$.Black = 0;
haxepunk_utils_Ease.PI = 3.141592653589793;
haxepunk_utils_Ease.PI2 = 1.57079632679489656;
haxepunk_utils_Ease.EL = 13.9626340159546363;
haxepunk_utils_Ease.B1 = 0.363636363636363646;
haxepunk_utils_Ease.B2 = 0.727272727272727293;
haxepunk_utils_Ease.B3 = 0.545454545454545414;
haxepunk_utils_Ease.B4 = 0.909090909090909061;
haxepunk_utils_Ease.B5 = 0.818181818181818232;
haxepunk_utils_Ease.B6 = 0.954545454545454586;
haxepunk_utils_HaxelibInfo.$name = "HaxePunk";
haxepunk_utils_HaxelibInfo.license = "MIT";
haxepunk_utils_HaxelibInfo.tags = ["flash","game","cpp","openfl"];
haxepunk_utils_HaxelibInfo.description = "A Haxe port of the FlashPunk AS3 engine.";
haxepunk_utils_HaxelibInfo.contributors = ["heardtheword","_ibilon","bendmorris"];
haxepunk_utils_HaxelibInfo.releasenote = "See CHANGELOG.md";
haxepunk_utils_HaxelibInfo.version = "4.0.0";
haxepunk_utils_HaxelibInfo.url = "http://haxepunk.com";
haxepunk_utils_HaxelibInfo.install = { munit : ""};
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Float64Array.BYTES_PER_ELEMENT = 8;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime__$backend_html5_HTML5HTTPRequest.activeRequests = 0;
lime__$backend_html5_HTML5HTTPRequest.requestLimit = 4;
lime__$backend_html5_HTML5HTTPRequest.requestQueue = new List();
lime__$backend_html5_HTML5Window.dummyCharacter = "";
lime__$backend_html5_HTML5Window.windowID = 0;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.FT_LOAD_FORCE_AUTOHINT = 32;
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.EXTENSIONS = 7939;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_TYPE = 35738;
lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_graphics_opengl_GL.READ_BUFFER = 3074;
lime_graphics_opengl_GL.UNPACK_ROW_LENGTH = 3314;
lime_graphics_opengl_GL.UNPACK_SKIP_ROWS = 3315;
lime_graphics_opengl_GL.UNPACK_SKIP_PIXELS = 3316;
lime_graphics_opengl_GL.PACK_ROW_LENGTH = 3330;
lime_graphics_opengl_GL.PACK_SKIP_ROWS = 3331;
lime_graphics_opengl_GL.PACK_SKIP_PIXELS = 3332;
lime_graphics_opengl_GL.TEXTURE_BINDING_3D = 32874;
lime_graphics_opengl_GL.UNPACK_SKIP_IMAGES = 32877;
lime_graphics_opengl_GL.UNPACK_IMAGE_HEIGHT = 32878;
lime_graphics_opengl_GL.MAX_3D_TEXTURE_SIZE = 32883;
lime_graphics_opengl_GL.MAX_ELEMENTS_VERTICES = 33000;
lime_graphics_opengl_GL.MAX_ELEMENTS_INDICES = 33001;
lime_graphics_opengl_GL.MAX_TEXTURE_LOD_BIAS = 34045;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
lime_graphics_opengl_GL.MAX_ARRAY_TEXTURE_LAYERS = 35071;
lime_graphics_opengl_GL.MIN_PROGRAM_TEXEL_OFFSET = 35076;
lime_graphics_opengl_GL.MAX_PROGRAM_TEXEL_OFFSET = 35077;
lime_graphics_opengl_GL.MAX_VARYING_COMPONENTS = 35659;
lime_graphics_opengl_GL.FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
lime_graphics_opengl_GL.RASTERIZER_DISCARD = 35977;
lime_graphics_opengl_GL.VERTEX_ARRAY_BINDING = 34229;
lime_graphics_opengl_GL.MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
lime_graphics_opengl_GL.MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
lime_graphics_opengl_GL.MAX_SERVER_WAIT_TIMEOUT = 37137;
lime_graphics_opengl_GL.MAX_ELEMENT_INDEX = 36203;
lime_graphics_opengl_GL.RED = 6403;
lime_graphics_opengl_GL.RGB8 = 32849;
lime_graphics_opengl_GL.RGBA8 = 32856;
lime_graphics_opengl_GL.RGB10_A2 = 32857;
lime_graphics_opengl_GL.TEXTURE_3D = 32879;
lime_graphics_opengl_GL.TEXTURE_WRAP_R = 32882;
lime_graphics_opengl_GL.TEXTURE_MIN_LOD = 33082;
lime_graphics_opengl_GL.TEXTURE_MAX_LOD = 33083;
lime_graphics_opengl_GL.TEXTURE_BASE_LEVEL = 33084;
lime_graphics_opengl_GL.TEXTURE_MAX_LEVEL = 33085;
lime_graphics_opengl_GL.TEXTURE_COMPARE_MODE = 34892;
lime_graphics_opengl_GL.TEXTURE_COMPARE_FUNC = 34893;
lime_graphics_opengl_GL.SRGB = 35904;
lime_graphics_opengl_GL.SRGB8 = 35905;
lime_graphics_opengl_GL.SRGB8_ALPHA8 = 35907;
lime_graphics_opengl_GL.COMPARE_REF_TO_TEXTURE = 34894;
lime_graphics_opengl_GL.RGBA32F = 34836;
lime_graphics_opengl_GL.RGB32F = 34837;
lime_graphics_opengl_GL.RGBA16F = 34842;
lime_graphics_opengl_GL.RGB16F = 34843;
lime_graphics_opengl_GL.TEXTURE_2D_ARRAY = 35866;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D_ARRAY = 35869;
lime_graphics_opengl_GL.R11F_G11F_B10F = 35898;
lime_graphics_opengl_GL.RGB9_E5 = 35901;
lime_graphics_opengl_GL.RGBA32UI = 36208;
lime_graphics_opengl_GL.RGB32UI = 36209;
lime_graphics_opengl_GL.RGBA16UI = 36214;
lime_graphics_opengl_GL.RGB16UI = 36215;
lime_graphics_opengl_GL.RGBA8UI = 36220;
lime_graphics_opengl_GL.RGB8UI = 36221;
lime_graphics_opengl_GL.RGBA32I = 36226;
lime_graphics_opengl_GL.RGB32I = 36227;
lime_graphics_opengl_GL.RGBA16I = 36232;
lime_graphics_opengl_GL.RGB16I = 36233;
lime_graphics_opengl_GL.RGBA8I = 36238;
lime_graphics_opengl_GL.RGB8I = 36239;
lime_graphics_opengl_GL.RED_INTEGER = 36244;
lime_graphics_opengl_GL.RGB_INTEGER = 36248;
lime_graphics_opengl_GL.RGBA_INTEGER = 36249;
lime_graphics_opengl_GL.R8 = 33321;
lime_graphics_opengl_GL.RG8 = 33323;
lime_graphics_opengl_GL.R16F = 33325;
lime_graphics_opengl_GL.R32F = 33326;
lime_graphics_opengl_GL.RG16F = 33327;
lime_graphics_opengl_GL.RG32F = 33328;
lime_graphics_opengl_GL.R8I = 33329;
lime_graphics_opengl_GL.R8UI = 33330;
lime_graphics_opengl_GL.R16I = 33331;
lime_graphics_opengl_GL.R16UI = 33332;
lime_graphics_opengl_GL.R32I = 33333;
lime_graphics_opengl_GL.R32UI = 33334;
lime_graphics_opengl_GL.RG8I = 33335;
lime_graphics_opengl_GL.RG8UI = 33336;
lime_graphics_opengl_GL.RG16I = 33337;
lime_graphics_opengl_GL.RG16UI = 33338;
lime_graphics_opengl_GL.RG32I = 33339;
lime_graphics_opengl_GL.RG32UI = 33340;
lime_graphics_opengl_GL.R8_SNORM = 36756;
lime_graphics_opengl_GL.RG8_SNORM = 36757;
lime_graphics_opengl_GL.RGB8_SNORM = 36758;
lime_graphics_opengl_GL.RGBA8_SNORM = 36759;
lime_graphics_opengl_GL.RGB10_A2UI = 36975;
lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_FORMAT = 37167;
lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_LEVELS = 33503;
lime_graphics_opengl_GL.UNSIGNED_INT_2_10_10_10_REV = 33640;
lime_graphics_opengl_GL.UNSIGNED_INT_10F_11F_11F_REV = 35899;
lime_graphics_opengl_GL.UNSIGNED_INT_5_9_9_9_REV = 35902;
lime_graphics_opengl_GL.FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
lime_graphics_opengl_GL.UNSIGNED_INT_24_8 = 34042;
lime_graphics_opengl_GL.HALF_FLOAT = 5131;
lime_graphics_opengl_GL.RG = 33319;
lime_graphics_opengl_GL.RG_INTEGER = 33320;
lime_graphics_opengl_GL.INT_2_10_10_10_REV = 36255;
lime_graphics_opengl_GL.CURRENT_QUERY = 34917;
lime_graphics_opengl_GL.QUERY_RESULT = 34918;
lime_graphics_opengl_GL.QUERY_RESULT_AVAILABLE = 34919;
lime_graphics_opengl_GL.ANY_SAMPLES_PASSED = 35887;
lime_graphics_opengl_GL.ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
lime_graphics_opengl_GL.MAX_DRAW_BUFFERS = 34852;
lime_graphics_opengl_GL.DRAW_BUFFER0 = 34853;
lime_graphics_opengl_GL.DRAW_BUFFER1 = 34854;
lime_graphics_opengl_GL.DRAW_BUFFER2 = 34855;
lime_graphics_opengl_GL.DRAW_BUFFER3 = 34856;
lime_graphics_opengl_GL.DRAW_BUFFER4 = 34857;
lime_graphics_opengl_GL.DRAW_BUFFER5 = 34858;
lime_graphics_opengl_GL.DRAW_BUFFER6 = 34859;
lime_graphics_opengl_GL.DRAW_BUFFER7 = 34860;
lime_graphics_opengl_GL.DRAW_BUFFER8 = 34861;
lime_graphics_opengl_GL.DRAW_BUFFER9 = 34862;
lime_graphics_opengl_GL.DRAW_BUFFER10 = 34863;
lime_graphics_opengl_GL.DRAW_BUFFER11 = 34864;
lime_graphics_opengl_GL.DRAW_BUFFER12 = 34865;
lime_graphics_opengl_GL.DRAW_BUFFER13 = 34866;
lime_graphics_opengl_GL.DRAW_BUFFER14 = 34867;
lime_graphics_opengl_GL.DRAW_BUFFER15 = 34868;
lime_graphics_opengl_GL.MAX_COLOR_ATTACHMENTS = 36063;
lime_graphics_opengl_GL.COLOR_ATTACHMENT1 = 36065;
lime_graphics_opengl_GL.COLOR_ATTACHMENT2 = 36066;
lime_graphics_opengl_GL.COLOR_ATTACHMENT3 = 36067;
lime_graphics_opengl_GL.COLOR_ATTACHMENT4 = 36068;
lime_graphics_opengl_GL.COLOR_ATTACHMENT5 = 36069;
lime_graphics_opengl_GL.COLOR_ATTACHMENT6 = 36070;
lime_graphics_opengl_GL.COLOR_ATTACHMENT7 = 36071;
lime_graphics_opengl_GL.COLOR_ATTACHMENT8 = 36072;
lime_graphics_opengl_GL.COLOR_ATTACHMENT9 = 36073;
lime_graphics_opengl_GL.COLOR_ATTACHMENT10 = 36074;
lime_graphics_opengl_GL.COLOR_ATTACHMENT11 = 36075;
lime_graphics_opengl_GL.COLOR_ATTACHMENT12 = 36076;
lime_graphics_opengl_GL.COLOR_ATTACHMENT13 = 36077;
lime_graphics_opengl_GL.COLOR_ATTACHMENT14 = 36078;
lime_graphics_opengl_GL.COLOR_ATTACHMENT15 = 36079;
lime_graphics_opengl_GL.SAMPLER_3D = 35679;
lime_graphics_opengl_GL.SAMPLER_2D_SHADOW = 35682;
lime_graphics_opengl_GL.SAMPLER_2D_ARRAY = 36289;
lime_graphics_opengl_GL.SAMPLER_2D_ARRAY_SHADOW = 36292;
lime_graphics_opengl_GL.SAMPLER_CUBE_SHADOW = 36293;
lime_graphics_opengl_GL.INT_SAMPLER_2D = 36298;
lime_graphics_opengl_GL.INT_SAMPLER_3D = 36299;
lime_graphics_opengl_GL.INT_SAMPLER_CUBE = 36300;
lime_graphics_opengl_GL.INT_SAMPLER_2D_ARRAY = 36303;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D = 36306;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_3D = 36307;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_CUBE = 36308;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
lime_graphics_opengl_GL.MAX_SAMPLES = 36183;
lime_graphics_opengl_GL.SAMPLER_BINDING = 35097;
lime_graphics_opengl_GL.PIXEL_PACK_BUFFER = 35051;
lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER = 35052;
lime_graphics_opengl_GL.PIXEL_PACK_BUFFER_BINDING = 35053;
lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER_BINDING = 35055;
lime_graphics_opengl_GL.COPY_READ_BUFFER = 36662;
lime_graphics_opengl_GL.COPY_WRITE_BUFFER = 36663;
lime_graphics_opengl_GL.COPY_READ_BUFFER_BINDING = 36662;
lime_graphics_opengl_GL.COPY_WRITE_BUFFER_BINDING = 36663;
lime_graphics_opengl_GL.FLOAT_MAT2x3 = 35685;
lime_graphics_opengl_GL.FLOAT_MAT2x4 = 35686;
lime_graphics_opengl_GL.FLOAT_MAT3x2 = 35687;
lime_graphics_opengl_GL.FLOAT_MAT3x4 = 35688;
lime_graphics_opengl_GL.FLOAT_MAT4x2 = 35689;
lime_graphics_opengl_GL.FLOAT_MAT4x3 = 35690;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC2 = 36294;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC3 = 36295;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC4 = 36296;
lime_graphics_opengl_GL.UNSIGNED_NORMALIZED = 35863;
lime_graphics_opengl_GL.SIGNED_NORMALIZED = 36764;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_VARYINGS = 35971;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_START = 35972;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
lime_graphics_opengl_GL.INTERLEAVED_ATTRIBS = 35980;
lime_graphics_opengl_GL.SEPARATE_ATTRIBS = 35981;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER = 35982;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK = 36386;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PAUSED = 36387;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_ACTIVE = 36388;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BINDING = 36389;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
lime_graphics_opengl_GL.FRAMEBUFFER_DEFAULT = 33304;
lime_graphics_opengl_GL.DEPTH24_STENCIL8 = 35056;
lime_graphics_opengl_GL.DRAW_FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.READ_FRAMEBUFFER = 36008;
lime_graphics_opengl_GL.DRAW_FRAMEBUFFER = 36009;
lime_graphics_opengl_GL.READ_FRAMEBUFFER_BINDING = 36010;
lime_graphics_opengl_GL.RENDERBUFFER_SAMPLES = 36011;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
lime_graphics_opengl_GL.UNIFORM_BUFFER = 35345;
lime_graphics_opengl_GL.UNIFORM_BUFFER_BINDING = 35368;
lime_graphics_opengl_GL.UNIFORM_BUFFER_START = 35369;
lime_graphics_opengl_GL.UNIFORM_BUFFER_SIZE = 35370;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_BLOCKS = 35371;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
lime_graphics_opengl_GL.MAX_COMBINED_UNIFORM_BLOCKS = 35374;
lime_graphics_opengl_GL.MAX_UNIFORM_BUFFER_BINDINGS = 35375;
lime_graphics_opengl_GL.MAX_UNIFORM_BLOCK_SIZE = 35376;
lime_graphics_opengl_GL.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
lime_graphics_opengl_GL.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
lime_graphics_opengl_GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
lime_graphics_opengl_GL.ACTIVE_UNIFORM_BLOCKS = 35382;
lime_graphics_opengl_GL.UNIFORM_TYPE = 35383;
lime_graphics_opengl_GL.UNIFORM_SIZE = 35384;
lime_graphics_opengl_GL.UNIFORM_BLOCK_INDEX = 35386;
lime_graphics_opengl_GL.UNIFORM_OFFSET = 35387;
lime_graphics_opengl_GL.UNIFORM_ARRAY_STRIDE = 35388;
lime_graphics_opengl_GL.UNIFORM_MATRIX_STRIDE = 35389;
lime_graphics_opengl_GL.UNIFORM_IS_ROW_MAJOR = 35390;
lime_graphics_opengl_GL.UNIFORM_BLOCK_BINDING = 35391;
lime_graphics_opengl_GL.UNIFORM_BLOCK_DATA_SIZE = 35392;
lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
lime_graphics_opengl_GL.OBJECT_TYPE = 37138;
lime_graphics_opengl_GL.SYNC_CONDITION = 37139;
lime_graphics_opengl_GL.SYNC_STATUS = 37140;
lime_graphics_opengl_GL.SYNC_FLAGS = 37141;
lime_graphics_opengl_GL.SYNC_FENCE = 37142;
lime_graphics_opengl_GL.SYNC_GPU_COMMANDS_COMPLETE = 37143;
lime_graphics_opengl_GL.UNSIGNALED = 37144;
lime_graphics_opengl_GL.SIGNALED = 37145;
lime_graphics_opengl_GL.ALREADY_SIGNALED = 37146;
lime_graphics_opengl_GL.TIMEOUT_EXPIRED = 37147;
lime_graphics_opengl_GL.CONDITION_SATISFIED = 37148;
lime_graphics_opengl_GL.WAIT_FAILED = 37149;
lime_graphics_opengl_GL.SYNC_FLUSH_COMMANDS_BIT = 1;
lime_graphics_opengl_GL.COLOR = 6144;
lime_graphics_opengl_GL.DEPTH = 6145;
lime_graphics_opengl_GL.STENCIL = 6146;
lime_graphics_opengl_GL.MIN = 32775;
lime_graphics_opengl_GL.MAX = 32776;
lime_graphics_opengl_GL.DEPTH_COMPONENT24 = 33190;
lime_graphics_opengl_GL.STREAM_READ = 35041;
lime_graphics_opengl_GL.STREAM_COPY = 35042;
lime_graphics_opengl_GL.STATIC_READ = 35045;
lime_graphics_opengl_GL.STATIC_COPY = 35046;
lime_graphics_opengl_GL.DYNAMIC_READ = 35049;
lime_graphics_opengl_GL.DYNAMIC_COPY = 35050;
lime_graphics_opengl_GL.DEPTH_COMPONENT32F = 36012;
lime_graphics_opengl_GL.DEPTH32F_STENCIL8 = 36013;
lime_graphics_opengl_GL.INVALID_INDEX = -1;
lime_graphics_opengl_GL.TIMEOUT_IGNORED = -1;
lime_graphics_opengl_GL.MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 37447;
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.__tempPointer = (function($this) {
	var $r;
	var this1 = new lime_utils_BytePointerData(null,0);
	$r = this1;
	return $r;
}(this));
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_media_openal_AL.NONE = 0;
lime_media_openal_AL.FALSE = 0;
lime_media_openal_AL.TRUE = 1;
lime_media_openal_AL.SOURCE_RELATIVE = 514;
lime_media_openal_AL.CONE_INNER_ANGLE = 4097;
lime_media_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_media_openal_AL.PITCH = 4099;
lime_media_openal_AL.POSITION = 4100;
lime_media_openal_AL.DIRECTION = 4101;
lime_media_openal_AL.VELOCITY = 4102;
lime_media_openal_AL.LOOPING = 4103;
lime_media_openal_AL.BUFFER = 4105;
lime_media_openal_AL.GAIN = 4106;
lime_media_openal_AL.MIN_GAIN = 4109;
lime_media_openal_AL.MAX_GAIN = 4110;
lime_media_openal_AL.ORIENTATION = 4111;
lime_media_openal_AL.SOURCE_STATE = 4112;
lime_media_openal_AL.INITIAL = 4113;
lime_media_openal_AL.PLAYING = 4114;
lime_media_openal_AL.PAUSED = 4115;
lime_media_openal_AL.STOPPED = 4116;
lime_media_openal_AL.BUFFERS_QUEUED = 4117;
lime_media_openal_AL.BUFFERS_PROCESSED = 4118;
lime_media_openal_AL.REFERENCE_DISTANCE = 4128;
lime_media_openal_AL.ROLLOFF_FACTOR = 4129;
lime_media_openal_AL.CONE_OUTER_GAIN = 4130;
lime_media_openal_AL.MAX_DISTANCE = 4131;
lime_media_openal_AL.SEC_OFFSET = 4132;
lime_media_openal_AL.SAMPLE_OFFSET = 4133;
lime_media_openal_AL.BYTE_OFFSET = 4134;
lime_media_openal_AL.SOURCE_TYPE = 4135;
lime_media_openal_AL.STATIC = 4136;
lime_media_openal_AL.STREAMING = 4137;
lime_media_openal_AL.UNDETERMINED = 4144;
lime_media_openal_AL.FORMAT_MONO8 = 4352;
lime_media_openal_AL.FORMAT_MONO16 = 4353;
lime_media_openal_AL.FORMAT_STEREO8 = 4354;
lime_media_openal_AL.FORMAT_STEREO16 = 4355;
lime_media_openal_AL.FREQUENCY = 8193;
lime_media_openal_AL.BITS = 8194;
lime_media_openal_AL.CHANNELS = 8195;
lime_media_openal_AL.SIZE = 8196;
lime_media_openal_AL.NO_ERROR = 0;
lime_media_openal_AL.INVALID_NAME = 40961;
lime_media_openal_AL.INVALID_ENUM = 40962;
lime_media_openal_AL.INVALID_VALUE = 40963;
lime_media_openal_AL.INVALID_OPERATION = 40964;
lime_media_openal_AL.OUT_OF_MEMORY = 40965;
lime_media_openal_AL.VENDOR = 45057;
lime_media_openal_AL.VERSION = 45058;
lime_media_openal_AL.RENDERER = 45059;
lime_media_openal_AL.EXTENSIONS = 45060;
lime_media_openal_AL.DOPPLER_FACTOR = 49152;
lime_media_openal_AL.SPEED_OF_SOUND = 49155;
lime_media_openal_AL.DOPPLER_VELOCITY = 49153;
lime_media_openal_AL.DISTANCE_MODEL = 53248;
lime_media_openal_AL.INVERSE_DISTANCE = 53249;
lime_media_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_media_openal_AL.LINEAR_DISTANCE = 53251;
lime_media_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_media_openal_AL.EXPONENT_DISTANCE = 53253;
lime_media_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_media_openal_ALC.FALSE = 0;
lime_media_openal_ALC.TRUE = 1;
lime_media_openal_ALC.FREQUENCY = 4103;
lime_media_openal_ALC.REFRESH = 4104;
lime_media_openal_ALC.SYNC = 4105;
lime_media_openal_ALC.MONO_SOURCES = 4112;
lime_media_openal_ALC.STEREO_SOURCES = 4113;
lime_media_openal_ALC.NO_ERROR = 0;
lime_media_openal_ALC.INVALID_DEVICE = 40961;
lime_media_openal_ALC.INVALID_CONTEXT = 40962;
lime_media_openal_ALC.INVALID_ENUM = 40963;
lime_media_openal_ALC.INVALID_VALUE = 40964;
lime_media_openal_ALC.OUT_OF_MEMORY = 40965;
lime_media_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_media_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_media_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_media_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_media_openal_ALC.EXTENSIONS = 4102;
lime_media_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_media_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_media_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_system_Clipboard.onUpdate = new lime_app__$Event_$Void_$Void();
lime_system_System.__directories = new haxe_ds_IntMap();
lime_text__$TextDirection_TextDirection_$Impl_$.INVALID = 0;
lime_text__$TextDirection_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
lime_text__$TextDirection_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
lime_text__$TextDirection_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
lime_text__$TextDirection_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
lime_text__$TextScript_TextScript_$Impl_$.COMMON = "Zyyy";
lime_text__$TextScript_TextScript_$Impl_$.INHERITED = "Zinh";
lime_text__$TextScript_TextScript_$Impl_$.UNKNOWN = "Zzzz";
lime_text__$TextScript_TextScript_$Impl_$.ARABIC = "Arab";
lime_text__$TextScript_TextScript_$Impl_$.ARMENIAN = "Armn";
lime_text__$TextScript_TextScript_$Impl_$.BENGALI = "Beng";
lime_text__$TextScript_TextScript_$Impl_$.CYRILLIC = "Cyrl";
lime_text__$TextScript_TextScript_$Impl_$.DEVANAGARI = "Deva";
lime_text__$TextScript_TextScript_$Impl_$.GEORGIAN = "Geor";
lime_text__$TextScript_TextScript_$Impl_$.GREEK = "Grek";
lime_text__$TextScript_TextScript_$Impl_$.GUJARATI = "Gujr";
lime_text__$TextScript_TextScript_$Impl_$.GURMUKHI = "Guru";
lime_text__$TextScript_TextScript_$Impl_$.HANGUL = "Hang";
lime_text__$TextScript_TextScript_$Impl_$.HAN = "Hani";
lime_text__$TextScript_TextScript_$Impl_$.HEBREW = "Hebr";
lime_text__$TextScript_TextScript_$Impl_$.HIRAGANA = "Hira";
lime_text__$TextScript_TextScript_$Impl_$.KANNADA = "Knda";
lime_text__$TextScript_TextScript_$Impl_$.KATAKANA = "Kana";
lime_text__$TextScript_TextScript_$Impl_$.LAO = "Laoo";
lime_text__$TextScript_TextScript_$Impl_$.LATIN = "Latn";
lime_text__$TextScript_TextScript_$Impl_$.MALAYALAM = "Mlym";
lime_text__$TextScript_TextScript_$Impl_$.ORIYA = "Orya";
lime_text__$TextScript_TextScript_$Impl_$.TAMIL = "Taml";
lime_text__$TextScript_TextScript_$Impl_$.TELUGA = "Telu";
lime_text__$TextScript_TextScript_$Impl_$.THAI = "Thai";
lime_text__$TextScript_TextScript_$Impl_$.TIBETAN = "Tibt";
lime_text__$TextScript_TextScript_$Impl_$.BOPOMOFO = "Bopo";
lime_text__$TextScript_TextScript_$Impl_$.BRAILLE = "Brai";
lime_text__$TextScript_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
lime_text__$TextScript_TextScript_$Impl_$.CHEROKEE = "Cher";
lime_text__$TextScript_TextScript_$Impl_$.ETHIOPIC = "Ethi";
lime_text__$TextScript_TextScript_$Impl_$.KHMER = "Khmr";
lime_text__$TextScript_TextScript_$Impl_$.MONGOLIAN = "Mong";
lime_text__$TextScript_TextScript_$Impl_$.MYANMAR = "Mymr";
lime_text__$TextScript_TextScript_$Impl_$.OGHAM = "Ogam";
lime_text__$TextScript_TextScript_$Impl_$.RUNIC = "Runr";
lime_text__$TextScript_TextScript_$Impl_$.SINHALA = "Sinh";
lime_text__$TextScript_TextScript_$Impl_$.SYRIAC = "Syrc";
lime_text__$TextScript_TextScript_$Impl_$.THAANA = "Thaa";
lime_text__$TextScript_TextScript_$Impl_$.YI = "Yiii";
lime_text__$TextScript_TextScript_$Impl_$.DESERET = "Dsrt";
lime_text__$TextScript_TextScript_$Impl_$.GOTHIC = "Goth";
lime_text__$TextScript_TextScript_$Impl_$.OLD_ITALIC = "Ital";
lime_text__$TextScript_TextScript_$Impl_$.BUHID = "Buhd";
lime_text__$TextScript_TextScript_$Impl_$.HANUNOO = "Hano";
lime_text__$TextScript_TextScript_$Impl_$.TAGALOG = "Tglg";
lime_text__$TextScript_TextScript_$Impl_$.TAGBANWA = "Tagb";
lime_text__$TextScript_TextScript_$Impl_$.CYPRIOT = "Cprt";
lime_text__$TextScript_TextScript_$Impl_$.LIMBU = "Limb";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_B = "Linb";
lime_text__$TextScript_TextScript_$Impl_$.OSMANYA = "Osma";
lime_text__$TextScript_TextScript_$Impl_$.SHAVIAN = "Shaw";
lime_text__$TextScript_TextScript_$Impl_$.TAI_LE = "Tale";
lime_text__$TextScript_TextScript_$Impl_$.UGARITIC = "Ugar";
lime_text__$TextScript_TextScript_$Impl_$.BUGINESE = "Bugi";
lime_text__$TextScript_TextScript_$Impl_$.COPTIC = "Copt";
lime_text__$TextScript_TextScript_$Impl_$.GLAGOLITIC = "Glag";
lime_text__$TextScript_TextScript_$Impl_$.KHAROSHTHI = "Khar";
lime_text__$TextScript_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
lime_text__$TextScript_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
lime_text__$TextScript_TextScript_$Impl_$.TIFINAGH = "Tfng";
lime_text__$TextScript_TextScript_$Impl_$.BALINESE = "Bali";
lime_text__$TextScript_TextScript_$Impl_$.CUNEIFORM = "Xsux";
lime_text__$TextScript_TextScript_$Impl_$.NKO = "Nkoo";
lime_text__$TextScript_TextScript_$Impl_$.PHAGS_PA = "Phag";
lime_text__$TextScript_TextScript_$Impl_$.PHOENICIAN = "Phnx";
lime_text__$TextScript_TextScript_$Impl_$.CARIAN = "Cari";
lime_text__$TextScript_TextScript_$Impl_$.CHAM = "Cham";
lime_text__$TextScript_TextScript_$Impl_$.KAYAH_LI = "Kali";
lime_text__$TextScript_TextScript_$Impl_$.LEPCHA = "Lepc";
lime_text__$TextScript_TextScript_$Impl_$.LYCIAN = "Lyci";
lime_text__$TextScript_TextScript_$Impl_$.LYDIAN = "Lydi";
lime_text__$TextScript_TextScript_$Impl_$.OL_CHIKI = "Olck";
lime_text__$TextScript_TextScript_$Impl_$.REJANG = "Rjng";
lime_text__$TextScript_TextScript_$Impl_$.SAURASHTRA = "Saur";
lime_text__$TextScript_TextScript_$Impl_$.SUNDANESE = "Sund";
lime_text__$TextScript_TextScript_$Impl_$.VAI = "Vaii";
lime_text__$TextScript_TextScript_$Impl_$.AVESTAN = "Avst";
lime_text__$TextScript_TextScript_$Impl_$.BAMUM = "Bamu";
lime_text__$TextScript_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
lime_text__$TextScript_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
lime_text__$TextScript_TextScript_$Impl_$.JAVANESE = "Java";
lime_text__$TextScript_TextScript_$Impl_$.KAITHI = "Kthi";
lime_text__$TextScript_TextScript_$Impl_$.LISU = "Lisu";
lime_text__$TextScript_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
lime_text__$TextScript_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
lime_text__$TextScript_TextScript_$Impl_$.SAMARITAN = "Samr";
lime_text__$TextScript_TextScript_$Impl_$.TAI_THAM = "Lana";
lime_text__$TextScript_TextScript_$Impl_$.TAI_VIET = "Tavt";
lime_text__$TextScript_TextScript_$Impl_$.BATAK = "Batk";
lime_text__$TextScript_TextScript_$Impl_$.BRAHMI = "Brah";
lime_text__$TextScript_TextScript_$Impl_$.MANDAIC = "Mand";
lime_text__$TextScript_TextScript_$Impl_$.CHAKMA = "Cakm";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
lime_text__$TextScript_TextScript_$Impl_$.MIAO = "Plrd";
lime_text__$TextScript_TextScript_$Impl_$.SHARADA = "Shrd";
lime_text__$TextScript_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
lime_text__$TextScript_TextScript_$Impl_$.TAKRI = "Takr";
lime_text__$TextScript_TextScript_$Impl_$.BASSA_VAH = "Bass";
lime_text__$TextScript_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
lime_text__$TextScript_TextScript_$Impl_$.DUPLOYAN = "Dupl";
lime_text__$TextScript_TextScript_$Impl_$.ELBASAN = "Elba";
lime_text__$TextScript_TextScript_$Impl_$.GRANTHA = "Gran";
lime_text__$TextScript_TextScript_$Impl_$.KHOJKI = "Khoj";
lime_text__$TextScript_TextScript_$Impl_$.KHUDAWADI = "Sind";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_A = "Lina";
lime_text__$TextScript_TextScript_$Impl_$.MAHAJANI = "Mahj";
lime_text__$TextScript_TextScript_$Impl_$.MANICHAEAN = "Mani";
lime_text__$TextScript_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
lime_text__$TextScript_TextScript_$Impl_$.MODI = "Modi";
lime_text__$TextScript_TextScript_$Impl_$.MRO = "Mroo";
lime_text__$TextScript_TextScript_$Impl_$.NABATAEAN = "Nbat";
lime_text__$TextScript_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERMIC = "Perm";
lime_text__$TextScript_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
lime_text__$TextScript_TextScript_$Impl_$.PALMYRENE = "Palm";
lime_text__$TextScript_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
lime_text__$TextScript_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
lime_text__$TextScript_TextScript_$Impl_$.SIDDHAM = "Sidd";
lime_text__$TextScript_TextScript_$Impl_$.TIRHUTA = "Tirh";
lime_text__$TextScript_TextScript_$Impl_$.WARANG_CITI = "Wara";
lime_text_unifill_Unicode.minCodePoint = 0;
lime_text_unifill_Unicode.maxCodePoint = 1114111;
lime_text_unifill_Unicode.minHighSurrogate = 55296;
lime_text_unifill_Unicode.maxHighSurrogate = 56319;
lime_text_unifill_Unicode.minLowSurrogate = 56320;
lime_text_unifill_Unicode.maxLowSurrogate = 57343;
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_ui__$ScanCode_ScanCode_$Impl_$.UNKNOWN = 0;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKSPACE = 42;
lime_ui__$ScanCode_ScanCode_$Impl_$.TAB = 43;
lime_ui__$ScanCode_ScanCode_$Impl_$.RETURN = 40;
lime_ui__$ScanCode_ScanCode_$Impl_$.ESCAPE = 41;
lime_ui__$ScanCode_ScanCode_$Impl_$.SPACE = 44;
lime_ui__$ScanCode_ScanCode_$Impl_$.SINGLE_QUOTE = 52;
lime_ui__$ScanCode_ScanCode_$Impl_$.COMMA = 54;
lime_ui__$ScanCode_ScanCode_$Impl_$.MINUS = 45;
lime_ui__$ScanCode_ScanCode_$Impl_$.PERIOD = 55;
lime_ui__$ScanCode_ScanCode_$Impl_$.SLASH = 56;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_0 = 39;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_1 = 30;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_2 = 31;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_3 = 32;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_4 = 33;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_5 = 34;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_6 = 35;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_7 = 36;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_8 = 37;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_9 = 38;
lime_ui__$ScanCode_ScanCode_$Impl_$.SEMICOLON = 51;
lime_ui__$ScanCode_ScanCode_$Impl_$.EQUALS = 46;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_BRACKET = 47;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKSLASH = 49;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_BRACKET = 48;
lime_ui__$ScanCode_ScanCode_$Impl_$.GRAVE = 53;
lime_ui__$ScanCode_ScanCode_$Impl_$.A = 4;
lime_ui__$ScanCode_ScanCode_$Impl_$.B = 5;
lime_ui__$ScanCode_ScanCode_$Impl_$.C = 6;
lime_ui__$ScanCode_ScanCode_$Impl_$.D = 7;
lime_ui__$ScanCode_ScanCode_$Impl_$.E = 8;
lime_ui__$ScanCode_ScanCode_$Impl_$.F = 9;
lime_ui__$ScanCode_ScanCode_$Impl_$.G = 10;
lime_ui__$ScanCode_ScanCode_$Impl_$.H = 11;
lime_ui__$ScanCode_ScanCode_$Impl_$.I = 12;
lime_ui__$ScanCode_ScanCode_$Impl_$.J = 13;
lime_ui__$ScanCode_ScanCode_$Impl_$.K = 14;
lime_ui__$ScanCode_ScanCode_$Impl_$.L = 15;
lime_ui__$ScanCode_ScanCode_$Impl_$.M = 16;
lime_ui__$ScanCode_ScanCode_$Impl_$.N = 17;
lime_ui__$ScanCode_ScanCode_$Impl_$.O = 18;
lime_ui__$ScanCode_ScanCode_$Impl_$.P = 19;
lime_ui__$ScanCode_ScanCode_$Impl_$.Q = 20;
lime_ui__$ScanCode_ScanCode_$Impl_$.R = 21;
lime_ui__$ScanCode_ScanCode_$Impl_$.S = 22;
lime_ui__$ScanCode_ScanCode_$Impl_$.T = 23;
lime_ui__$ScanCode_ScanCode_$Impl_$.U = 24;
lime_ui__$ScanCode_ScanCode_$Impl_$.V = 25;
lime_ui__$ScanCode_ScanCode_$Impl_$.W = 26;
lime_ui__$ScanCode_ScanCode_$Impl_$.X = 27;
lime_ui__$ScanCode_ScanCode_$Impl_$.Y = 28;
lime_ui__$ScanCode_ScanCode_$Impl_$.Z = 29;
lime_ui__$ScanCode_ScanCode_$Impl_$.DELETE = 76;
lime_ui__$ScanCode_ScanCode_$Impl_$.CAPS_LOCK = 57;
lime_ui__$ScanCode_ScanCode_$Impl_$.F1 = 58;
lime_ui__$ScanCode_ScanCode_$Impl_$.F2 = 59;
lime_ui__$ScanCode_ScanCode_$Impl_$.F3 = 60;
lime_ui__$ScanCode_ScanCode_$Impl_$.F4 = 61;
lime_ui__$ScanCode_ScanCode_$Impl_$.F5 = 62;
lime_ui__$ScanCode_ScanCode_$Impl_$.F6 = 63;
lime_ui__$ScanCode_ScanCode_$Impl_$.F7 = 64;
lime_ui__$ScanCode_ScanCode_$Impl_$.F8 = 65;
lime_ui__$ScanCode_ScanCode_$Impl_$.F9 = 66;
lime_ui__$ScanCode_ScanCode_$Impl_$.F10 = 67;
lime_ui__$ScanCode_ScanCode_$Impl_$.F11 = 68;
lime_ui__$ScanCode_ScanCode_$Impl_$.F12 = 69;
lime_ui__$ScanCode_ScanCode_$Impl_$.PRINT_SCREEN = 70;
lime_ui__$ScanCode_ScanCode_$Impl_$.SCROLL_LOCK = 71;
lime_ui__$ScanCode_ScanCode_$Impl_$.PAUSE = 72;
lime_ui__$ScanCode_ScanCode_$Impl_$.INSERT = 73;
lime_ui__$ScanCode_ScanCode_$Impl_$.HOME = 74;
lime_ui__$ScanCode_ScanCode_$Impl_$.PAGE_UP = 75;
lime_ui__$ScanCode_ScanCode_$Impl_$.END = 77;
lime_ui__$ScanCode_ScanCode_$Impl_$.PAGE_DOWN = 78;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT = 79;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT = 80;
lime_ui__$ScanCode_ScanCode_$Impl_$.DOWN = 81;
lime_ui__$ScanCode_ScanCode_$Impl_$.UP = 82;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUM_LOCK = 83;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DIVIDE = 84;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MULTIPLY = 85;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MINUS = 86;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PLUS = 87;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_ENTER = 88;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_1 = 89;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_2 = 90;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_3 = 91;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_4 = 92;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_5 = 93;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_6 = 94;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_7 = 95;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_8 = 96;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_9 = 97;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_0 = 98;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PERIOD = 99;
lime_ui__$ScanCode_ScanCode_$Impl_$.APPLICATION = 101;
lime_ui__$ScanCode_ScanCode_$Impl_$.POWER = 102;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_EQUALS = 103;
lime_ui__$ScanCode_ScanCode_$Impl_$.F13 = 104;
lime_ui__$ScanCode_ScanCode_$Impl_$.F14 = 105;
lime_ui__$ScanCode_ScanCode_$Impl_$.F15 = 106;
lime_ui__$ScanCode_ScanCode_$Impl_$.F16 = 107;
lime_ui__$ScanCode_ScanCode_$Impl_$.F17 = 108;
lime_ui__$ScanCode_ScanCode_$Impl_$.F18 = 109;
lime_ui__$ScanCode_ScanCode_$Impl_$.F19 = 110;
lime_ui__$ScanCode_ScanCode_$Impl_$.F20 = 111;
lime_ui__$ScanCode_ScanCode_$Impl_$.F21 = 112;
lime_ui__$ScanCode_ScanCode_$Impl_$.F22 = 113;
lime_ui__$ScanCode_ScanCode_$Impl_$.F23 = 114;
lime_ui__$ScanCode_ScanCode_$Impl_$.F24 = 115;
lime_ui__$ScanCode_ScanCode_$Impl_$.EXECUTE = 116;
lime_ui__$ScanCode_ScanCode_$Impl_$.HELP = 117;
lime_ui__$ScanCode_ScanCode_$Impl_$.MENU = 118;
lime_ui__$ScanCode_ScanCode_$Impl_$.SELECT = 119;
lime_ui__$ScanCode_ScanCode_$Impl_$.STOP = 120;
lime_ui__$ScanCode_ScanCode_$Impl_$.AGAIN = 121;
lime_ui__$ScanCode_ScanCode_$Impl_$.UNDO = 122;
lime_ui__$ScanCode_ScanCode_$Impl_$.CUT = 123;
lime_ui__$ScanCode_ScanCode_$Impl_$.COPY = 124;
lime_ui__$ScanCode_ScanCode_$Impl_$.PASTE = 125;
lime_ui__$ScanCode_ScanCode_$Impl_$.FIND = 126;
lime_ui__$ScanCode_ScanCode_$Impl_$.MUTE = 127;
lime_ui__$ScanCode_ScanCode_$Impl_$.VOLUME_UP = 128;
lime_ui__$ScanCode_ScanCode_$Impl_$.VOLUME_DOWN = 129;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_COMMA = 133;
lime_ui__$ScanCode_ScanCode_$Impl_$.ALT_ERASE = 153;
lime_ui__$ScanCode_ScanCode_$Impl_$.SYSTEM_REQUEST = 154;
lime_ui__$ScanCode_ScanCode_$Impl_$.CANCEL = 155;
lime_ui__$ScanCode_ScanCode_$Impl_$.CLEAR = 156;
lime_ui__$ScanCode_ScanCode_$Impl_$.PRIOR = 157;
lime_ui__$ScanCode_ScanCode_$Impl_$.RETURN2 = 158;
lime_ui__$ScanCode_ScanCode_$Impl_$.SEPARATOR = 159;
lime_ui__$ScanCode_ScanCode_$Impl_$.OUT = 160;
lime_ui__$ScanCode_ScanCode_$Impl_$.OPER = 161;
lime_ui__$ScanCode_ScanCode_$Impl_$.CLEAR_AGAIN = 162;
lime_ui__$ScanCode_ScanCode_$Impl_$.CRSEL = 163;
lime_ui__$ScanCode_ScanCode_$Impl_$.EXSEL = 164;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_00 = 176;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_000 = 177;
lime_ui__$ScanCode_ScanCode_$Impl_$.THOUSAND_SEPARATOR = 178;
lime_ui__$ScanCode_ScanCode_$Impl_$.DECIMAL_SEPARATOR = 179;
lime_ui__$ScanCode_ScanCode_$Impl_$.CURRENCY_UNIT = 180;
lime_ui__$ScanCode_ScanCode_$Impl_$.CURRENCY_SUBUNIT = 181;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 182;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 183;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_LEFT_BRACE = 184;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_RIGHT_BRACE = 185;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_TAB = 186;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_BACKSPACE = 187;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_A = 188;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_B = 189;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_C = 190;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_D = 191;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_E = 192;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_F = 193;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_XOR = 194;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_POWER = 195;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PERCENT = 196;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_LESS_THAN = 197;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_GREATER_THAN = 198;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_AMPERSAND = 199;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 200;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_VERTICAL_BAR = 201;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 202;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_COLON = 203;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_HASH = 204;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_SPACE = 205;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_AT = 206;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_EXCLAMATION = 207;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_STORE = 208;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_RECALL = 209;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_CLEAR = 210;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_ADD = 211;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 212;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 213;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_DIVIDE = 214;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PLUS_MINUS = 215;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_CLEAR = 216;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 217;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_BINARY = 218;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_OCTAL = 219;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DECIMAL = 220;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_HEXADECIMAL = 221;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_CTRL = 224;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_SHIFT = 225;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_ALT = 226;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_META = 227;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_CTRL = 228;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_SHIFT = 229;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_ALT = 230;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_META = 231;
lime_ui__$ScanCode_ScanCode_$Impl_$.MODE = 257;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_NEXT = 258;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_PREVIOUS = 259;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_STOP = 260;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_PLAY = 261;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_MUTE = 262;
lime_ui__$ScanCode_ScanCode_$Impl_$.MEDIA_SELECT = 263;
lime_ui__$ScanCode_ScanCode_$Impl_$.WWW = 264;
lime_ui__$ScanCode_ScanCode_$Impl_$.MAIL = 265;
lime_ui__$ScanCode_ScanCode_$Impl_$.CALCULATOR = 266;
lime_ui__$ScanCode_ScanCode_$Impl_$.COMPUTER = 267;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_SEARCH = 268;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_HOME = 269;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_BACK = 270;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_FORWARD = 271;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_STOP = 272;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_REFRESH = 273;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_BOOKMARKS = 274;
lime_ui__$ScanCode_ScanCode_$Impl_$.BRIGHTNESS_DOWN = 275;
lime_ui__$ScanCode_ScanCode_$Impl_$.BRIGHTNESS_UP = 276;
lime_ui__$ScanCode_ScanCode_$Impl_$.DISPLAY_SWITCH = 277;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKLIGHT_TOGGLE = 278;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKLIGHT_DOWN = 279;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKLIGHT_UP = 280;
lime_ui__$ScanCode_ScanCode_$Impl_$.EJECT = 281;
lime_ui__$ScanCode_ScanCode_$Impl_$.SLEEP = 282;
lime_ui_Touch.onCancel = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.libraryPaths = new haxe_ds_StringMap();
lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Float64Array_Float64Array_$Impl_$.BYTES_PER_ELEMENT = 8;
lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Int8Array_Int8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
lime_utils_Log.throwErrors = true;
lime_utils__$Log_LogLevel_$Impl_$.NONE = 0;
lime_utils__$Log_LogLevel_$Impl_$.ERROR = 1;
lime_utils__$Log_LogLevel_$Impl_$.WARN = 2;
lime_utils__$Log_LogLevel_$Impl_$.INFO = 3;
lime_utils__$Log_LogLevel_$Impl_$.DEBUG = 4;
lime_utils__$Log_LogLevel_$Impl_$.VERBOSE = 5;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.BYTES_PER_ELEMENT = 1;
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_renderer_DrawCommandBuffer.empty = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasRenderer.scale = 1;
openfl__$internal_renderer_dom_DOMTextField.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_renderer_dom_DOMTextField.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_renderer_dom_DOMTextField.__regexFont = new EReg("<font ([^>]+)>","gi");
openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont = new EReg("</font>","gi");
openfl__$internal_renderer_dom_DOMTextField.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_renderer_opengl_GLMaskManager.maskShader = new openfl__$internal_renderer_opengl_GLMaskShader();
openfl__$internal_stage3D_AGALConverter.limitedProfile = true;
openfl__$internal_stage3D_Context3DStateCache.FLOATS_PER_REGISTER = 4;
openfl__$internal_stage3D_Context3DStateCache.MAX_NUM_REGISTERS = 1024;
openfl__$internal_stage3D_Context3DStateCache.disableCache = true;
openfl__$internal_stage3D_GLUtils.debug = false;
openfl__$internal_swf_SWFLite.instances = new haxe_ds_StringMap();
openfl__$internal_text_HTMLParser.__regexAlign = new EReg("align=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexBreakTag = new EReg("<br\\s*/?>","gi");
openfl__$internal_text_HTMLParser.__regexBlockIndent = new EReg("blockindent=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexEntities = [new EReg("&quot;","g"),new EReg("&apos;","g"),new EReg("&amp;","g"),new EReg("&lt;","g"),new EReg("&gt;","g"),new EReg("&nbsp;","g")];
openfl__$internal_text_HTMLParser.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexHTMLTag = new EReg("<.*?>","g");
openfl__$internal_text_HTMLParser.__regexHref = new EReg("href=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexIndent = new EReg(" indent=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexLeading = new EReg("leading=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexLeftMargin = new EReg("leftmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexRightMargin = new EReg("rightmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexTabStops = new EReg("tabstops=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_TextEngine.UTF8_TAB = 9;
openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
openfl__$internal_utils_PerlinNoise.P = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];
openfl_display_BitmapData.__bufferStride = 26;
openfl_display_BitmapData.__tempVector = new lime_math_Vector2();
openfl_display__$BlendMode_BlendMode_$Impl_$.ADD = 0;
openfl_display__$BlendMode_BlendMode_$Impl_$.ALPHA = 1;
openfl_display__$BlendMode_BlendMode_$Impl_$.DARKEN = 2;
openfl_display__$BlendMode_BlendMode_$Impl_$.DIFFERENCE = 3;
openfl_display__$BlendMode_BlendMode_$Impl_$.ERASE = 4;
openfl_display__$BlendMode_BlendMode_$Impl_$.HARDLIGHT = 5;
openfl_display__$BlendMode_BlendMode_$Impl_$.INVERT = 6;
openfl_display__$BlendMode_BlendMode_$Impl_$.LAYER = 7;
openfl_display__$BlendMode_BlendMode_$Impl_$.LIGHTEN = 8;
openfl_display__$BlendMode_BlendMode_$Impl_$.MULTIPLY = 9;
openfl_display__$BlendMode_BlendMode_$Impl_$.NORMAL = 10;
openfl_display__$BlendMode_BlendMode_$Impl_$.OVERLAY = 11;
openfl_display__$BlendMode_BlendMode_$Impl_$.SCREEN = 12;
openfl_display__$BlendMode_BlendMode_$Impl_$.SHADER = 13;
openfl_display__$BlendMode_BlendMode_$Impl_$.SUBTRACT = 14;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.NONE = 0;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.ROUND = 1;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.SQUARE = 2;
openfl_display__$GradientType_GradientType_$Impl_$.LINEAR = 0;
openfl_display__$GradientType_GradientType_$Impl_$.RADIAL = 1;
openfl_display_GraphicsPath.SIN45 = 0.70710678118654752440084436210485;
openfl_display_GraphicsPath.TAN22 = 0.4142135623730950488016887242097;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.EVEN_ODD = 0;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.NON_ZERO = 1;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.LINEAR_RGB = 0;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.RGB = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.BEVEL = 0;
openfl_display__$JointStyle_JointStyle_$Impl_$.MITER = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.ROUND = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.HORIZONTAL = 0;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NONE = 1;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NORMAL = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.VERTICAL = 3;
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_display_OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl_display_OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.ALWAYS = 0;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.AUTO = 1;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.NEVER = 2;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL = 0;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL2 = 1;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL3 = 2;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL4 = 3;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT = 4;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT2 = 5;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT3 = 6;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT4 = 7;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT = 8;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT2 = 9;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT3 = 10;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT4 = 11;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X2 = 12;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X3 = 13;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X4 = 14;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X2 = 15;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X3 = 16;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X4 = 17;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X2 = 18;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X3 = 19;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X4 = 20;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FAST = 0;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FULL = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.PAD = 0;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REFLECT = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REPEAT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM = 0;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_LEFT = 1;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_RIGHT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.LEFT = 3;
openfl_display__$StageAlign_StageAlign_$Impl_$.RIGHT = 4;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP = 5;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_LEFT = 6;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_RIGHT = 7;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN = 0;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN_INTERACTIVE = 1;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.NORMAL = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.BEST = 0;
openfl_display__$StageQuality_StageQuality_$Impl_$.HIGH = 1;
openfl_display__$StageQuality_StageQuality_$Impl_$.LOW = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.MEDIUM = 3;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.EXACT_FIT = 0;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_BORDER = 1;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_SCALE = 2;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.SHOW_ALL = 3;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NEGATIVE = 0;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NONE = 1;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.POSITIVE = 2;
openfl_display3D_Context3D.supportsVideoTexture = true;
openfl_display3D_Context3D.MAX_SAMPLERS = 8;
openfl_display3D_Context3D.MAX_ATTRIBUTES = 16;
openfl_display3D_Context3D.MAX_PROGRAM_REGISTERS = 128;
openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 0;
openfl_display3D_Context3D.DEPTH_STENCIL = 0;
openfl_display3D_Context3D.__stateCache = new openfl__$internal_stage3D_Context3DStateCache();
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.DRAW_CALLS = 0;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_INDEX_BUFFER = 1;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_VERTEX_BUFFER = 2;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_TEXTURE = 3;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_TEXTURE_COMPRESSED = 4;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_PROGRAM = 5;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_INDEX_BUFFER = 6;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_VERTEX_BUFFER = 7;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_TEXTURE = 8;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_TEXTURE_COMPRESSED = 9;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_PROGRAM = 10;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.$length = 11;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_ALPHA = 0;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_COLOR = 1;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE = 2;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_ALPHA = 3;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_COLOR = 4;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_ALPHA = 5;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_COLOR = 6;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_ALPHA = 7;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_COLOR = 8;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ZERO = 9;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.DYNAMIC_DRAW = 0;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.STATIC_DRAW = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.ALWAYS = 0;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.EQUAL = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER = 2;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER_EQUAL = 3;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS = 4;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS_EQUAL = 5;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NEVER = 6;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NOT_EQUAL = 7;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPLINEAR = 0;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNEAREST = 1;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNONE = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE = 0;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_CONSTRAINED = 1;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_EXTENDED = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD = 3;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD_CONSTRAINED = 4;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD_EXTENDED = 5;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.FRAGMENT = 0;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.VERTEX = 1;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.AUTO = 0;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.SOFTWARE = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_SATURATE = 0;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_WRAP = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_SATURATE = 2;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_WRAP = 3;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INVERT = 4;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.KEEP = 5;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.SET = 6;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.ZERO = 7;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC16X = 0;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC2X = 1;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC4X = 2;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC8X = 3;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.LINEAR = 4;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.NEAREST = 5;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGR_PACKED = 0;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA = 1;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA_PACKED = 2;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED = 3;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED_ALPHA = 4;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.RGBA_HALF_FLOAT = 5;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 0;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 2;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.BYTES_4 = 0;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_1 = 1;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_2 = 2;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_3 = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_4 = 4;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP = 0;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP_U_REPEAT_V = 1;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT = 2;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT_U_CLAMP_V = 3;
openfl_display3D_textures_Texture.__lowMemoryMode = false;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLEAR = "clear";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.COPY = "copy";
openfl_events_Event.CUT = "cut";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.EXIT_FRAME = "exitFrame";
openfl_events_Event.FRAME_CONSTRUCTED = "frameConstructed";
openfl_events_Event.FRAME_LABEL = "frameLabel";
openfl_events_Event.FULLSCREEN = "fullScreen";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.PASTE = "paste";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SELECT_ALL = "selectAll";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.TEXTURE_READY = "textureReady";
openfl_events_Event.UNLOAD = "unload";
openfl_events_ActivityEvent.ACTIVITY = "activity";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RELEASE_OUTSIDE = "releaseOutside";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_events_UncaughtErrorEvent.UNCAUGHT_ERROR = "uncaughtError";
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__matrix3 = new lime_math_Matrix3();
openfl_geom_Matrix.__pool = new lime_utils_ObjectPool_$openfl_$geom_$Matrix(function() {
	return new openfl_geom_Matrix();
},function(m) {
	m.identity();
});
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.AXIS_ANGLE = 0;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.EULER_ANGLES = 1;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.QUATERNION = 2;
openfl_geom_Rectangle.__pool = new lime_utils_ObjectPool_$openfl_$geom_$Rectangle(function() {
	return new openfl_geom_Rectangle();
},function(r) {
	r.setTo(0,0,0,0);
});
openfl_media_SoundMixer.MAX_ACTIVE_CHANNELS = 32;
openfl_media_SoundMixer.__soundChannels = [];
openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
openfl_net_NetConnection.CONNECT_SUCCESS = "NetConnection.Connect.Success";
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.BINARY = 0;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.TEXT = 1;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.VARIABLES = 2;
openfl_net_URLRequestDefaults.followRedirects = true;
openfl_net_URLRequestDefaults.idleTimeout = 0;
openfl_net_URLRequestDefaults.manageCookies = false;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_system_System.useCodePage = false;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.ADVANCED = 0;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.NORMAL = 1;
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD = 0;
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD_ITALIC = 1;
openfl_text__$FontStyle_FontStyle_$Impl_$.ITALIC = 2;
openfl_text__$FontStyle_FontStyle_$Impl_$.REGULAR = 3;
openfl_text__$FontType_FontType_$Impl_$.DEVICE = 0;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED = 1;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED_CFF = 2;
openfl_text__$GridFitType_GridFitType_$Impl_$.NONE = 0;
openfl_text__$GridFitType_GridFitType_$Impl_$.PIXEL = 1;
openfl_text__$GridFitType_GridFitType_$Impl_$.SUBPIXEL = 2;
openfl_text_TextField.__missingFontWarning = new haxe_ds_StringMap();
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.CENTER = 0;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.LEFT = 1;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.NONE = 2;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.RIGHT = 3;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.DYNAMIC = 0;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.INPUT = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.CENTER = 0;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.END = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.JUSTIFY = 2;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.LEFT = 3;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.RIGHT = 4;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.START = 5;
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
openfl_ui_Mouse.supportsCursor = true;
openfl_ui_Mouse.supportsNativeCursor = true;
openfl_ui_Mouse.__cursor = "auto";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.ARROW = "arrow";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.AUTO = "auto";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.BUTTON = "button";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.HAND = "hand";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.IBEAM = "ibeam";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__CROSSHAIR = "crosshair";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__CUSTOM = "custom";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__MOVE = "move";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__RESIZE_NESW = "resize_nesw";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__RESIZE_NS = "resize_ns";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__RESIZE_NWSE = "resize_nwse";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__RESIZE_WE = "resize_we";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__WAIT = "wait";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__WAIT_ARROW = "waitarrow";
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.GESTURE = 0;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.NONE = 1;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.TOUCH_POINT = 2;
openfl_utils_Assets.cache = new openfl_utils_AssetCache();
openfl_utils_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_utils__$ByteArray_ByteArray_$Impl_$.__bytePointer = (function($this) {
	var $r;
	var this1 = new lime_utils_BytePointerData(null,0);
	$r = this1;
	return $r;
}(this));
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.DEFLATE = 0;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.LZMA = 1;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.ZLIB = 2;
openfl_utils__$Endian_Endian_$Impl_$.BIG_ENDIAN = 0;
openfl_utils__$Endian_Endian_$Impl_$.LITTLE_ENDIAN = 1;
openfl_utils_TouchData.__pool = new lime_utils_ObjectPool_$openfl_$utils_$TouchData(function() {
	return new openfl_utils_TouchData();
},function(data) {
	data.reset();
});
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=Main.js.map